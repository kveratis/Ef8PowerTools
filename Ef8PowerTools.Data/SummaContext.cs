// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models.Configurations;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
#nullable disable

namespace Ef8PowerTools.Data.Models;

public partial class SummaContext : DbContext
{
    public SummaContext()
    {
    }

    public SummaContext(DbContextOptions<SummaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AMessage> AMessages { get; set; }

    public virtual DbSet<Aaa> Aaas { get; set; }

    public virtual DbSet<AaoSrPatient> AaoSrPatients { get; set; }

    public virtual DbSet<Aaosummary> Aaosummaries { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AlertType> AlertTypes { get; set; }

    public virtual DbSet<AndrogelIninlog> AndrogelIninlogs { get; set; }

    public virtual DbSet<AnnualGrossIncomeConfiguration> AnnualGrossIncomeConfigurations { get; set; }

    public virtual DbSet<ApiresponseMessage> ApiresponseMessages { get; set; }

    public virtual DbSet<AspnetApplication> AspnetApplications { get; set; }

    public virtual DbSet<AspnetMembership> AspnetMemberships { get; set; }

    public virtual DbSet<AspnetMembershipUsersAuditLog> AspnetMembershipUsersAuditLogs { get; set; }

    public virtual DbSet<AspnetPath> AspnetPaths { get; set; }

    public virtual DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; }

    public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; }

    public virtual DbSet<AspnetProfile> AspnetProfiles { get; set; }

    public virtual DbSet<AspnetRole> AspnetRoles { get; set; }

    public virtual DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; }

    public virtual DbSet<AspnetUser> AspnetUsers { get; set; }

    public virtual DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<AutoCallingBvprocessConfiguration> AutoCallingBvprocessConfigurations { get; set; }

    public virtual DbSet<AutoDialer> AutoDialers { get; set; }

    public virtual DbSet<BenefitHistory> BenefitHistories { get; set; }

    public virtual DbSet<BenefitHistoryEBv> BenefitHistoryEBvs { get; set; }

    public virtual DbSet<BenefitHistoryFieldList> BenefitHistoryFieldLists { get; set; }

    public virtual DbSet<BenefitHistoryFieldListEBv> BenefitHistoryFieldListEBvs { get; set; }

    public virtual DbSet<BenefitHistoryFieldMappingListEBv> BenefitHistoryFieldMappingListEBvs { get; set; }

    public virtual DbSet<BenefitHistoryImportLogEBv> BenefitHistoryImportLogEBvs { get; set; }

    public virtual DbSet<BenefitInvestigation> BenefitInvestigations { get; set; }

    public virtual DbSet<BenefitInvestigationEBv> BenefitInvestigationEBvs { get; set; }

    public virtual DbSet<BenefitInvestigationRealtime> BenefitInvestigationRealtimes { get; set; }

    public virtual DbSet<BenefitInvestigationTypeField> BenefitInvestigationTypeFields { get; set; }

    public virtual DbSet<BiNdcHistory> BiNdcHistories { get; set; }

    public virtual DbSet<BiNdcHistoryImportLogEBv> BiNdcHistoryImportLogEBvs { get; set; }

    public virtual DbSet<BiNdcRecord> BiNdcRecords { get; set; }

    public virtual DbSet<BiomarinConsentedPatient> BiomarinConsentedPatients { get; set; }

    public virtual DbSet<BiomarinEntityToTerrStage> BiomarinEntityToTerrStages { get; set; }

    public virtual DbSet<BiomarinPatientDailyDiagnosis> BiomarinPatientDailyDiagnoses { get; set; }

    public virtual DbSet<BiomarinPatientDailyDiagnosisAuditLog> BiomarinPatientDailyDiagnosisAuditLogs { get; set; }

    public virtual DbSet<BiomarinPatientRem> BiomarinPatientRems { get; set; }

    public virtual DbSet<BiomarinPrescriberRem> BiomarinPrescriberRems { get; set; }

    public virtual DbSet<BiomarinRosterStage> BiomarinRosterStages { get; set; }

    public virtual DbSet<BiomarinZipToTerrStage> BiomarinZipToTerrStages { get; set; }

    public virtual DbSet<CareCycle> CareCycles { get; set; }

    public virtual DbSet<CareCycleOrganization> CareCycleOrganizations { get; set; }

    public virtual DbSet<CareCyclePhysician> CareCyclePhysicians { get; set; }

    public virtual DbSet<CareCycleSchedule> CareCycleSchedules { get; set; }

    public virtual DbSet<CareCycleScheduleAudit> CareCycleScheduleAudits { get; set; }

    public virtual DbSet<CareCyclesAudit> CareCyclesAudits { get; set; }

    public virtual DbSet<CareMetXDirSalesWProfId> CareMetXDirSalesWProfIds { get; set; }

    public virtual DbSet<CaseEnrollment> CaseEnrollments { get; set; }

    public virtual DbSet<CaseJourneyByDrug> CaseJourneyByDrugs { get; set; }

    public virtual DbSet<CaseJourneyCloserRulesSetting> CaseJourneyCloserRulesSettings { get; set; }

    public virtual DbSet<CaseManagerByRegion> CaseManagerByRegions { get; set; }

    public virtual DbSet<CaseRecord> CaseRecords { get; set; }

    public virtual DbSet<CaseRecordTransaction> CaseRecordTransactions { get; set; }

    public virtual DbSet<CaystonProcessActivityMapping> CaystonProcessActivityMappings { get; set; }

    public virtual DbSet<CaystonStagingPatientReferral> CaystonStagingPatientReferrals { get; set; }

    public virtual DbSet<CfIssueSubType> CfIssueSubTypes { get; set; }

    public virtual DbSet<CfIssueType> CfIssueTypes { get; set; }

    public virtual DbSet<ClaimsViewAuditLog> ClaimsViewAuditLogs { get; set; }

    public virtual DbSet<CmmstatusMailService> CmmstatusMailServices { get; set; }

    public virtual DbSet<CoherusEmployeesStage> CoherusEmployeesStages { get; set; }

    public virtual DbSet<CoherusGroupAssignmentStage> CoherusGroupAssignmentStages { get; set; }

    public virtual DbSet<CoherusGroupGeoStage> CoherusGroupGeoStages { get; set; }

    public virtual DbSet<CoherusGroupsStage> CoherusGroupsStages { get; set; }

    public virtual DbSet<CoherusRosterStage> CoherusRosterStages { get; set; }

    public virtual DbSet<CoherusZipTerrStage> CoherusZipTerrStages { get; set; }

    public virtual DbSet<Communication> Communications { get; set; }

    public virtual DbSet<ConnectFedexAddressVerification> ConnectFedexAddressVerifications { get; set; }

    public virtual DbSet<ConnectFedexApierrorLog> ConnectFedexApierrorLogs { get; set; }

    public virtual DbSet<ConnectFedexApirequest> ConnectFedexApirequests { get; set; }

    public virtual DbSet<ConnectModularDocTransaction> ConnectModularDocTransactions { get; set; }

    public virtual DbSet<ConnectPayerMap> ConnectPayerMaps { get; set; }

    public virtual DbSet<ConnectiveRxApilog> ConnectiveRxApilogs { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<ContactAddress> ContactAddresses { get; set; }

    public virtual DbSet<ContactAddressesAudit> ContactAddressesAudits { get; set; }

    public virtual DbSet<ContactDynamicDatum> ContactDynamicData { get; set; }

    public virtual DbSet<ContactLicense> ContactLicenses { get; set; }

    public virtual DbSet<ContactNote> ContactNotes { get; set; }

    public virtual DbSet<ContactOrganization> ContactOrganizations { get; set; }

    public virtual DbSet<ContactPhoneNumber> ContactPhoneNumbers { get; set; }

    public virtual DbSet<ContactPhoneNumbersAudit> ContactPhoneNumbersAudits { get; set; }

    public virtual DbSet<ContactPhysician> ContactPhysicians { get; set; }

    public virtual DbSet<ContactPhysiciansAudit> ContactPhysiciansAudits { get; set; }

    public virtual DbSet<ContactProgram> ContactPrograms { get; set; }

    public virtual DbSet<ContactsAudit> ContactsAudits { get; set; }

    public virtual DbSet<CopayAdjudication> CopayAdjudications { get; set; }

    public virtual DbSet<CopayAdjudicationDenialReason> CopayAdjudicationDenialReasons { get; set; }

    public virtual DbSet<CopayInvoice> CopayInvoices { get; set; }

    public virtual DbSet<CopayPskwredemption> CopayPskwredemptions { get; set; }

    public virtual DbSet<CornerStoneCfsShipment> CornerStoneCfsShipments { get; set; }

    public virtual DbSet<CountriesList> CountriesLists { get; set; }

    public virtual DbSet<CountryList> CountryLists { get; set; }

    public virtual DbSet<CoveredCounty> CoveredCounties { get; set; }

    public virtual DbSet<CrossdbAspnetApplication> CrossdbAspnetApplications { get; set; }

    public virtual DbSet<CrossdbAspnetMembership> CrossdbAspnetMemberships { get; set; }

    public virtual DbSet<CrossdbAspnetUser> CrossdbAspnetUsers { get; set; }

    public virtual DbSet<CrossdbPortalAccount> CrossdbPortalAccounts { get; set; }

    public virtual DbSet<CrossdbPortalAccountProgram> CrossdbPortalAccountPrograms { get; set; }

    public virtual DbSet<CrossdbPortalClient> CrossdbPortalClients { get; set; }

    public virtual DbSet<CrossdbPortalClientDrug> CrossdbPortalClientDrugs { get; set; }

    public virtual DbSet<CrossdbPortalUser> CrossdbPortalUsers { get; set; }

    public virtual DbSet<CrossdbPortalUserAccount> CrossdbPortalUserAccounts { get; set; }

    public virtual DbSet<CrossdbPortalUserApplication> CrossdbPortalUserApplications { get; set; }

    public virtual DbSet<CrossdbUspsZipCoordinate> CrossdbUspsZipCoordinates { get; set; }

    public virtual DbSet<CrushFileLog> CrushFileLogs { get; set; }

    public virtual DbSet<CrushftpLog> CrushftpLogs { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerState> CustomerStates { get; set; }

    public virtual DbSet<DailyStatusChange> DailyStatusChanges { get; set; }

    public virtual DbSet<DashboardPanelList> DashboardPanelLists { get; set; }

    public virtual DbSet<DashboardPanelProgram> DashboardPanelPrograms { get; set; }

    public virtual DbSet<DashboardPanelUserSetting> DashboardPanelUserSettings { get; set; }

    public virtual DbSet<DataConfiguration> DataConfigurations { get; set; }

    public virtual DbSet<DataDictionary> DataDictionaries { get; set; }

    public virtual DbSet<Databasechangelog> Databasechangelogs { get; set; }

    public virtual DbSet<Databasechangeloglock> Databasechangeloglocks { get; set; }

    public virtual DbSet<Databasechangestatus> Databasechangestatuses { get; set; }

    public virtual DbSet<Databasechangestreleasebranch> Databasechangestreleasebranches { get; set; }

    public virtual DbSet<DateWorkDay> DateWorkDays { get; set; }

    public virtual DbSet<DboVwGetPatientRecentAddress> DboVwGetPatientRecentAddresses { get; set; }

    public virtual DbSet<DemoSraccountAddress> DemoSraccountAddresses { get; set; }

    public virtual DbSet<DfAutomaticTaskLog> DfAutomaticTaskLogs { get; set; }

    public virtual DbSet<DfAutomaticTaskRecord> DfAutomaticTaskRecords { get; set; }

    public virtual DbSet<DfCdc> DfCdcs { get; set; }

    public virtual DbSet<DfCustomSchedule> DfCustomSchedules { get; set; }

    public virtual DbSet<DfDataExtractMaxEntityId> DfDataExtractMaxEntityIds { get; set; }

    public virtual DbSet<DfEbvTracking> DfEbvTrackings { get; set; }

    public virtual DbSet<DfEmailLog> DfEmailLogs { get; set; }

    public virtual DbSet<DfField> DfFields { get; set; }

    public virtual DbSet<DfFile> DfFiles { get; set; }

    public virtual DbSet<DfInboundFileError> DfInboundFileErrors { get; set; }

    public virtual DbSet<DfInboundFileLog> DfInboundFileLogs { get; set; }

    public virtual DbSet<DfInboundRecordDetail> DfInboundRecordDetails { get; set; }

    public virtual DbSet<DfJob> DfJobs { get; set; }

    public virtual DbSet<DfJobAlert> DfJobAlerts { get; set; }

    public virtual DbSet<DfJobEx> DfJobExes { get; set; }

    public virtual DbSet<DfOutboundFileError> DfOutboundFileErrors { get; set; }

    public virtual DbSet<DfOutboundFileLog> DfOutboundFileLogs { get; set; }

    public virtual DbSet<DfOutboundRecordDetail> DfOutboundRecordDetails { get; set; }

    public virtual DbSet<DfOutboundRecordTracking> DfOutboundRecordTrackings { get; set; }

    public virtual DbSet<DfRecurringProcessError> DfRecurringProcessErrors { get; set; }

    public virtual DbSet<DfRecurringProcessLog> DfRecurringProcessLogs { get; set; }

    public virtual DbSet<DfSftp> DfSftps { get; set; }

    public virtual DbSet<DfTalendContext> DfTalendContexts { get; set; }

    public virtual DbSet<DfVermedicaEbvtracking> DfVermedicaEbvtrackings { get; set; }

    public virtual DbSet<DfZipRstTracking> DfZipRstTrackings { get; set; }

    public virtual DbSet<DiagnosisList> DiagnosisLists { get; set; }

    public virtual DbSet<DiagnosisListProgram> DiagnosisListPrograms { get; set; }

    public virtual DbSet<DirectFaxAssignment> DirectFaxAssignments { get; set; }

    public virtual DbSet<DirectoriesOrganization> DirectoriesOrganizations { get; set; }

    public virtual DbSet<Dispense> Dispenses { get; set; }

    public virtual DbSet<DispenseOrderType> DispenseOrderTypes { get; set; }

    public virtual DbSet<DispenseQtyConversion> DispenseQtyConversions { get; set; }

    public virtual DbSet<DispensesFromSp> DispensesFromSps { get; set; }

    public virtual DbSet<DispensesHistory> DispensesHistories { get; set; }

    public virtual DbSet<DispensesLog> DispensesLogs { get; set; }

    public virtual DbSet<DispensesWalgreen> DispensesWalgreens { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentAttachmentsDocType> DocumentAttachmentsDocTypes { get; set; }

    public virtual DbSet<DocumentField> DocumentFields { get; set; }

    public virtual DbSet<DocumentFieldList> DocumentFieldLists { get; set; }

    public virtual DbSet<DocumentFieldMultiAnswer> DocumentFieldMultiAnswers { get; set; }

    public virtual DbSet<DocumentList> DocumentLists { get; set; }

    public virtual DbSet<DocumentListLetter> DocumentListLetters { get; set; }

    public virtual DbSet<DocumentManagement> DocumentManagements { get; set; }

    public virtual DbSet<DocumentMapping> DocumentMappings { get; set; }

    public virtual DbSet<DocumentOutboundFaxis> DocumentOutboundFaxes { get; set; }

    public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }

    public virtual DbSet<DocumentsDocType> DocumentsDocTypes { get; set; }

    public virtual DbSet<DocumentsEHipaainvite> DocumentsEHipaainvites { get; set; }

    public virtual DbSet<DocumentsEntity> DocumentsEntities { get; set; }

    public virtual DbSet<DocumentsFaxQueue> DocumentsFaxQueues { get; set; }

    public virtual DbSet<DocumentsFqUser> DocumentsFqUsers { get; set; }

    public virtual DbSet<DocumentsInboundFaxis> DocumentsInboundFaxes { get; set; }

    public virtual DbSet<DocumentsMoveAudit> DocumentsMoveAudits { get; set; }

    public virtual DbSet<DocumentsOcrCoordinate> DocumentsOcrCoordinates { get; set; }

    public virtual DbSet<DocumentsOcrDynamicDatum> DocumentsOcrDynamicData { get; set; }

    public virtual DbSet<DocumentsOutboundAttachment> DocumentsOutboundAttachments { get; set; }

    public virtual DbSet<DocumentsSrType> DocumentsSrTypes { get; set; }

    public virtual DbSet<DocumentsTherapyDrug> DocumentsTherapyDrugs { get; set; }

    public virtual DbSet<Drug> Drugs { get; set; }

    public virtual DbSet<DrugCptcode> DrugCptcodes { get; set; }

    public virtual DbSet<DrugCptcodeProgram> DrugCptcodePrograms { get; set; }

    public virtual DbSet<DrugDetail> DrugDetails { get; set; }

    public virtual DbSet<DrugResource> DrugResources { get; set; }

    public virtual DbSet<DrugServiceLevel> DrugServiceLevels { get; set; }

    public virtual DbSet<Dup> Dups { get; set; }

    public virtual DbSet<DuplicateNpitracking> DuplicateNpitrackings { get; set; }

    public virtual DbSet<DuplicatePatientQueue> DuplicatePatientQueues { get; set; }

    public virtual DbSet<DynamicDataByLookupDatum> DynamicDataByLookupData { get; set; }

    public virtual DbSet<DynamicDataList> DynamicDataLists { get; set; }

    public virtual DbSet<EBvAgeLimit> EBvAgeLimits { get; set; }

    public virtual DbSet<EBvCopayFactor> EBvCopayFactors { get; set; }

    public virtual DbSet<EBvCoverageBenefitDetail> EBvCoverageBenefitDetails { get; set; }

    public virtual DbSet<EBvCoverageBenefitTransaction> EBvCoverageBenefitTransactions { get; set; }

    public virtual DbSet<EBvCoverageFactor> EBvCoverageFactors { get; set; }

    public virtual DbSet<EBvDrugCoverageAlert> EBvDrugCoverageAlerts { get; set; }

    public virtual DbSet<EBvDrugPharmacyCoverage> EBvDrugPharmacyCoverages { get; set; }

    public virtual DbSet<EBvInsuranceFormularyCoverage> EBvInsuranceFormularyCoverages { get; set; }

    public virtual DbSet<EBvMasterTransaction> EBvMasterTransactions { get; set; }

    public virtual DbSet<EBvMedicationBenefitDetail> EBvMedicationBenefitDetails { get; set; }

    public virtual DbSet<EBvMedicationBenefitTransaction> EBvMedicationBenefitTransactions { get; set; }

    public virtual DbSet<EBvMockResponse> EBvMockResponses { get; set; }

    public virtual DbSet<EBvModularTransaction> EBvModularTransactions { get; set; }

    public virtual DbSet<EBvQuantityLimit> EBvQuantityLimits { get; set; }

    public virtual DbSet<EBvResourceLink> EBvResourceLinks { get; set; }

    public virtual DbSet<EBvStepDrug> EBvStepDrugs { get; set; }

    public virtual DbSet<EConsent> EConsents { get; set; }

    public virtual DbSet<EHipaaApiProgram> EHipaaApiPrograms { get; set; }

    public virtual DbSet<EHipaaPatientInvite> EHipaaPatientInvites { get; set; }

    public virtual DbSet<EPafemailLinkAudit> EPafemailLinkAudits { get; set; }

    public virtual DbSet<EServiceApilog> EServiceApilogs { get; set; }

    public virtual DbSet<EServicesConfigList> EServicesConfigLists { get; set; }

    public virtual DbSet<EServicesProgramConfig> EServicesProgramConfigs { get; set; }

    public virtual DbSet<EagleForceApilog> EagleForceApilogs { get; set; }

    public virtual DbSet<EbvmedicalResponseTypeCode> EbvmedicalResponseTypeCodes { get; set; }

    public virtual DbSet<EmailHistory> EmailHistories { get; set; }

    public virtual DbSet<EmailSubscriptionType> EmailSubscriptionTypes { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<Enrollment> Enrollments { get; set; }

    public virtual DbSet<EnrollmentDupSearchLog> EnrollmentDupSearchLogs { get; set; }

    public virtual DbSet<Entity> Entities { get; set; }

    public virtual DbSet<EntityDupeSearchRequest> EntityDupeSearchRequests { get; set; }

    public virtual DbSet<EntityId> EntityIds { get; set; }

    public virtual DbSet<EntityMergeDetailsLog> EntityMergeDetailsLogs { get; set; }

    public virtual DbSet<EntityMergeLog> EntityMergeLogs { get; set; }

    public virtual DbSet<EpapApplication> EpapApplications { get; set; }

    public virtual DbSet<EpapApplicationLog> EpapApplicationLogs { get; set; }

    public virtual DbSet<EpapInvitation> EpapInvitations { get; set; }

    public virtual DbSet<EpsilonCallLog> EpsilonCallLogs { get; set; }

    public virtual DbSet<Ereferral> Ereferrals { get; set; }

    public virtual DbSet<EventsQueue> EventsQueues { get; set; }

    public virtual DbSet<ExperianApilog> ExperianApilogs { get; set; }

    public virtual DbSet<FaqSrtype> FaqSrtypes { get; set; }

    public virtual DbSet<Faqlist> Faqlists { get; set; }

    public virtual DbSet<FaxInboundReport> FaxInboundReports { get; set; }

    public virtual DbSet<FaxLogDetail> FaxLogDetails { get; set; }

    public virtual DbSet<FaxLogException> FaxLogExceptions { get; set; }

    public virtual DbSet<FaxLogSummary> FaxLogSummaries { get; set; }

    public virtual DbSet<FaxNumber> FaxNumbers { get; set; }

    public virtual DbSet<FaxSampleReport> FaxSampleReports { get; set; }

    public virtual DbSet<FedExMailTrackInterfacer> FedExMailTrackInterfacers { get; set; }

    public virtual DbSet<FederalPovertyLeveList> FederalPovertyLeveLists { get; set; }

    public virtual DbSet<FeedbackConfiguration> FeedbackConfigurations { get; set; }

    public virtual DbSet<FieldPortalConfig> FieldPortalConfigs { get; set; }

    public virtual DbSet<FundEnrollmentApplication> FundEnrollmentApplications { get; set; }

    public virtual DbSet<FundEnrollmentApplicationInsurance> FundEnrollmentApplicationInsurances { get; set; }

    public virtual DbSet<FundEnrollmentApplicationInsurancesAudit> FundEnrollmentApplicationInsurancesAudits { get; set; }

    public virtual DbSet<FundEnrollmentApplicationMedication> FundEnrollmentApplicationMedications { get; set; }

    public virtual DbSet<FundEnrollmentApplicationMedicationsAudit> FundEnrollmentApplicationMedicationsAudits { get; set; }

    public virtual DbSet<FundEnrollmentApplicationPatientSite> FundEnrollmentApplicationPatientSites { get; set; }

    public virtual DbSet<FundEnrollmentApplicationsAudit> FundEnrollmentApplicationsAudits { get; set; }

    public virtual DbSet<FundEnrollmentApplicationsExtension> FundEnrollmentApplicationsExtensions { get; set; }

    public virtual DbSet<FundReopenSubscriptionDetail> FundReopenSubscriptionDetails { get; set; }

    public virtual DbSet<FundReopenSubscriptionMedication> FundReopenSubscriptionMedications { get; set; }

    public virtual DbSet<FundReopenSubscriptionSubscriber> FundReopenSubscriptionSubscribers { get; set; }

    public virtual DbSet<GlobalConfiguration> GlobalConfigurations { get; set; }

    public virtual DbSet<GrantUsePolicyException> GrantUsePolicyExceptions { get; set; }

    public virtual DbSet<GrantUsePolicyExceptionAudit> GrantUsePolicyExceptionAudits { get; set; }

    public virtual DbSet<HcpPortalPatientCaregiver> HcpPortalPatientCaregivers { get; set; }

    public virtual DbSet<HcpPortalSrtypeMapping> HcpPortalSrtypeMappings { get; set; }

    public virtual DbSet<HcpportalNlog> HcpportalNlogs { get; set; }

    public virtual DbSet<HcpservicesApicallLog> HcpservicesApicallLogs { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<ImportProvider> ImportProviders { get; set; }

    public virtual DbSet<IncomeAttestation> IncomeAttestations { get; set; }

    public virtual DbSet<IncomeAttestationAudit> IncomeAttestationAudits { get; set; }

    public virtual DbSet<IninincomeLog> IninincomeLogs { get; set; }

    public virtual DbSet<Ininlog> Ininlogs { get; set; }

    public virtual DbSet<Insurance> Insurances { get; set; }

    public virtual DbSet<InsuranceAddress> InsuranceAddresses { get; set; }

    public virtual DbSet<InsuranceDynamicDatum> InsuranceDynamicData { get; set; }

    public virtual DbSet<InsuranceEligibilityCode> InsuranceEligibilityCodes { get; set; }

    public virtual DbSet<InsuranceEligibilityLookUpList> InsuranceEligibilityLookUpLists { get; set; }

    public virtual DbSet<InsuranceNote> InsuranceNotes { get; set; }

    public virtual DbSet<InsurancePhoneNumber> InsurancePhoneNumbers { get; set; }

    public virtual DbSet<InsuranceProgram> InsurancePrograms { get; set; }

    public virtual DbSet<InvalidPatientEmailCleanUp> InvalidPatientEmailCleanUps { get; set; }

    public virtual DbSet<Log4NetError> Log4NetErrors { get; set; }

    public virtual DbSet<LookupDataList> LookupDataLists { get; set; }

    public virtual DbSet<LookupInfinitusPayerId> LookupInfinitusPayerIds { get; set; }

    public virtual DbSet<LookupList> LookupLists { get; set; }

    public virtual DbSet<LookupPa> LookupPas { get; set; }

    public virtual DbSet<LtrEmailErrorLog> LtrEmailErrorLogs { get; set; }

    public virtual DbSet<LtrEmailNotification> LtrEmailNotifications { get; set; }

    public virtual DbSet<LtrEmailNotificationAudit> LtrEmailNotificationAudits { get; set; }

    public virtual DbSet<LtrEmailTransaction> LtrEmailTransactions { get; set; }

    public virtual DbSet<LtrErrorLog> LtrErrorLogs { get; set; }

    public virtual DbSet<LtrFaxErrorLog> LtrFaxErrorLogs { get; set; }

    public virtual DbSet<LtrFaxNotification> LtrFaxNotifications { get; set; }

    public virtual DbSet<LtrFaxNotificationAudit> LtrFaxNotificationAudits { get; set; }

    public virtual DbSet<LtrFaxTransaction> LtrFaxTransactions { get; set; }

    public virtual DbSet<LtrLookupList> LtrLookupLists { get; set; }

    public virtual DbSet<LtrLookupListItem> LtrLookupListItems { get; set; }

    public virtual DbSet<LtrMailNotification> LtrMailNotifications { get; set; }

    public virtual DbSet<LtrMailNotificationAudit> LtrMailNotificationAudits { get; set; }

    public virtual DbSet<LtrMailTransaction> LtrMailTransactions { get; set; }

    public virtual DbSet<LtrNotificationItem> LtrNotificationItems { get; set; }

    public virtual DbSet<LtrNotificationItemsAudit> LtrNotificationItemsAudits { get; set; }

    public virtual DbSet<LtrNotificationMaster> LtrNotificationMasters { get; set; }

    public virtual DbSet<LtrNotificationMasterAudit> LtrNotificationMasterAudits { get; set; }

    public virtual DbSet<LtrProcessLog> LtrProcessLogs { get; set; }

    public virtual DbSet<MailTracking> MailTrackings { get; set; }

    public virtual DbSet<MailTrackingError> MailTrackingErrors { get; set; }

    public virtual DbSet<Mailing> Mailings { get; set; }

    public virtual DbSet<MailingDocument> MailingDocuments { get; set; }

    public virtual DbSet<MailingWebServiceRequest> MailingWebServiceRequests { get; set; }

    public virtual DbSet<MdmLocation> MdmLocations { get; set; }

    public virtual DbSet<MdmOrganization> MdmOrganizations { get; set; }

    public virtual DbSet<MdmProvider> MdmProviders { get; set; }

    public virtual DbSet<MdmSalesAlignment> MdmSalesAlignments { get; set; }

    public virtual DbSet<MdmpatientProcessResult> MdmpatientProcessResults { get; set; }

    public virtual DbSet<MdmpatientSearchResult> MdmpatientSearchResults { get; set; }

    public virtual DbSet<MedOffRampSupplementPlan> MedOffRampSupplementPlans { get; set; }

    public virtual DbSet<MedOffRampSupplementPlanOffRampClient> MedOffRampSupplementPlanOffRampClients { get; set; }

    public virtual DbSet<MedeBvofframpClientResponseTypeCode> MedeBvofframpClientResponseTypeCodes { get; set; }

    public virtual DbSet<MedeBvofframpCobblurbAdditionalRule> MedeBvofframpCobblurbAdditionalRules { get; set; }

    public virtual DbSet<MedeBvofframpCobblurbRule> MedeBvofframpCobblurbRules { get; set; }

    public virtual DbSet<MedeBvofframpErrorList> MedeBvofframpErrorLists { get; set; }

    public virtual DbSet<MedeBvofframpRequiredRule> MedeBvofframpRequiredRules { get; set; }

    public virtual DbSet<MedeBvofframpResponseTypeCodeList> MedeBvofframpResponseTypeCodeLists { get; set; }

    public virtual DbSet<MedicaidIncomeEligibilityLimitList> MedicaidIncomeEligibilityLimitLists { get; set; }

    public virtual DbSet<MedvantxInventoryUpdate> MedvantxInventoryUpdates { get; set; }

    public virtual DbSet<MedvantxLot> MedvantxLots { get; set; }

    public virtual DbSet<MergeLog> MergeLogs { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MessageModule> MessageModules { get; set; }

    public virtual DbSet<MessageQueue> MessageQueues { get; set; }

    public virtual DbSet<MessageThread> MessageThreads { get; set; }

    public virtual DbSet<MessageThreadReader> MessageThreadReaders { get; set; }

    public virtual DbSet<MessageType> MessageTypes { get; set; }

    public virtual DbSet<MessagesSm> MessagesSms { get; set; }

    public virtual DbSet<MessagesSmsmedium> MessagesSmsmedia { get; set; }

    public virtual DbSet<MobileDrugSurveyElement> MobileDrugSurveyElements { get; set; }

    public virtual DbSet<MobileMasterSurvey> MobileMasterSurveys { get; set; }

    public virtual DbSet<MobilePatientSurveyAnswer> MobilePatientSurveyAnswers { get; set; }

    public virtual DbSet<MobilePatientSurveyAnswerMaster> MobilePatientSurveyAnswerMasters { get; set; }

    public virtual DbSet<MobileRefillOrder> MobileRefillOrders { get; set; }

    public virtual DbSet<MobileRefillOrderItem> MobileRefillOrderItems { get; set; }

    public virtual DbSet<MobileRequestPharmacyCall> MobileRequestPharmacyCalls { get; set; }

    public virtual DbSet<MobileSurveyElement> MobileSurveyElements { get; set; }

    public virtual DbSet<MobileSurveySubElement> MobileSurveySubElements { get; set; }

    public virtual DbSet<MpuAssessment> MpuAssessments { get; set; }

    public virtual DbSet<MpuAssessmentAnswer> MpuAssessmentAnswers { get; set; }

    public virtual DbSet<MpuAssessmentDetail> MpuAssessmentDetails { get; set; }

    public virtual DbSet<MpuAssessmentDetailAnswer> MpuAssessmentDetailAnswers { get; set; }

    public virtual DbSet<MpuAssessmentQuestion> MpuAssessmentQuestions { get; set; }

    public virtual DbSet<MpuAssessmentQuestionType> MpuAssessmentQuestionTypes { get; set; }

    public virtual DbSet<MpuAssessmentType> MpuAssessmentTypes { get; set; }

    public virtual DbSet<NcpdpRejectCode> NcpdpRejectCodes { get; set; }

    public virtual DbSet<NoteOverride> NoteOverrides { get; set; }

    public virtual DbSet<NoteTemplateList> NoteTemplateLists { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; }

    public virtual DbSet<NurseAgency> NurseAgencies { get; set; }

    public virtual DbSet<NurseAgencyAccreditation> NurseAgencyAccreditations { get; set; }

    public virtual DbSet<NurseAgencyAccreditationList> NurseAgencyAccreditationLists { get; set; }

    public virtual DbSet<NurseAgencyAddress> NurseAgencyAddresses { get; set; }

    public virtual DbSet<NurseAgencyCertification> NurseAgencyCertifications { get; set; }

    public virtual DbSet<NurseAgencyCertificationList> NurseAgencyCertificationLists { get; set; }

    public virtual DbSet<NurseAgencyCoveredCounty> NurseAgencyCoveredCounties { get; set; }

    public virtual DbSet<NurseAgencyNurse> NurseAgencyNurses { get; set; }

    public virtual DbSet<NurseAgencyPhoneNumber> NurseAgencyPhoneNumbers { get; set; }

    public virtual DbSet<NurseAgencyRate> NurseAgencyRates { get; set; }

    public virtual DbSet<OffRampClientPayerRelationship> OffRampClientPayerRelationships { get; set; }

    public virtual DbSet<OffRampClientPrimarySecondaryRelationship> OffRampClientPrimarySecondaryRelationships { get; set; }

    public virtual DbSet<OfframpClient> OfframpClients { get; set; }

    public virtual DbSet<OfframpCustomConnectInfo> OfframpCustomConnectInfos { get; set; }

    public virtual DbSet<OfframpExternalHubInfo> OfframpExternalHubInfos { get; set; }

    public virtual DbSet<OnsitePharmacy> OnsitePharmacies { get; set; }

    public virtual DbSet<OrderProductForm> OrderProductForms { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<OrganizationAddress> OrganizationAddresses { get; set; }

    public virtual DbSet<OrganizationDynamicDatum> OrganizationDynamicData { get; set; }

    public virtual DbSet<OrganizationEnrollment> OrganizationEnrollments { get; set; }

    public virtual DbSet<OrganizationEnrollmentsAudit> OrganizationEnrollmentsAudits { get; set; }

    public virtual DbSet<OrganizationMergeLog> OrganizationMergeLogs { get; set; }

    public virtual DbSet<OrganizationMergeLogDetail> OrganizationMergeLogDetails { get; set; }

    public virtual DbSet<OrganizationNote> OrganizationNotes { get; set; }

    public virtual DbSet<OrganizationNpi> OrganizationNpis { get; set; }

    public virtual DbSet<OrganizationPhoneNumber> OrganizationPhoneNumbers { get; set; }

    public virtual DbSet<OrganizationProgram> OrganizationPrograms { get; set; }

    public virtual DbSet<OrganizationTaxId> OrganizationTaxIds { get; set; }

    public virtual DbSet<OrganizationTerritoryAlignment> OrganizationTerritoryAlignments { get; set; }

    public virtual DbSet<OrganizationsAudit> OrganizationsAudits { get; set; }

    public virtual DbSet<PanApplication> PanApplications { get; set; }

    public virtual DbSet<PanApplicationRole> PanApplicationRoles { get; set; }

    public virtual DbSet<PanApplicationTokenRole> PanApplicationTokenRoles { get; set; }

    public virtual DbSet<PanDisenrollmentReversal> PanDisenrollmentReversals { get; set; }

    public virtual DbSet<PanDisenrollmentReversalAudit> PanDisenrollmentReversalAudits { get; set; }

    public virtual DbSet<PanDisenrollmentReversalTemp> PanDisenrollmentReversalTemps { get; set; }

    public virtual DbSet<PanReversal> PanReversals { get; set; }

    public virtual DbSet<Papextension> Papextensions { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<PatientAddress> PatientAddresses { get; set; }

    public virtual DbSet<PatientAddressesAudit> PatientAddressesAudits { get; set; }

    public virtual DbSet<PatientAttestation> PatientAttestations { get; set; }

    public virtual DbSet<PatientAttestationAudit> PatientAttestationAudits { get; set; }

    public virtual DbSet<PatientCommunicationMethod> PatientCommunicationMethods { get; set; }

    public virtual DbSet<PatientConsentAudit> PatientConsentAudits { get; set; }

    public virtual DbSet<PatientConsentPerDrug> PatientConsentPerDrugs { get; set; }

    public virtual DbSet<PatientContact> PatientContacts { get; set; }

    public virtual DbSet<PatientDevice> PatientDevices { get; set; }

    public virtual DbSet<PatientDeviceId> PatientDeviceIds { get; set; }

    public virtual DbSet<PatientDeviceUsageLog> PatientDeviceUsageLogs { get; set; }

    public virtual DbSet<PatientDiagnosis> PatientDiagnoses { get; set; }

    public virtual DbSet<PatientDupeSearchResponse> PatientDupeSearchResponses { get; set; }

    public virtual DbSet<PatientDynamicDatum> PatientDynamicData { get; set; }

    public virtual DbSet<PatientEligibilityResponseCodeList> PatientEligibilityResponseCodeLists { get; set; }

    public virtual DbSet<PatientEligibilityTransaction> PatientEligibilityTransactions { get; set; }

    public virtual DbSet<PatientFmrsrHistory> PatientFmrsrHistories { get; set; }

    public virtual DbSet<PatientFmrsrHistoryAudit> PatientFmrsrHistoryAudits { get; set; }

    public virtual DbSet<PatientFulfillment> PatientFulfillments { get; set; }

    public virtual DbSet<PatientInsurance> PatientInsurances { get; set; }

    public virtual DbSet<PatientInvitationEmailAudit> PatientInvitationEmailAudits { get; set; }

    public virtual DbSet<PatientJourneyDatum> PatientJourneyData { get; set; }

    public virtual DbSet<PatientLischeck> PatientLischecks { get; set; }

    public virtual DbSet<PatientLischeckBatch> PatientLischeckBatches { get; set; }

    public virtual DbSet<PatientMarketingStatus> PatientMarketingStatuses { get; set; }

    public virtual DbSet<PatientNote> PatientNotes { get; set; }

    public virtual DbSet<PatientOrganization> PatientOrganizations { get; set; }

    public virtual DbSet<PatientPhoneNumber> PatientPhoneNumbers { get; set; }

    public virtual DbSet<PatientPhoneNumbersAudit> PatientPhoneNumbersAudits { get; set; }

    public virtual DbSet<PatientPhysician> PatientPhysicians { get; set; }

    public virtual DbSet<PatientPrescription> PatientPrescriptions { get; set; }

    public virtual DbSet<PatientProgram> PatientPrograms { get; set; }

    public virtual DbSet<PatientReactivation> PatientReactivations { get; set; }

    public virtual DbSet<PatientRefill> PatientRefills { get; set; }

    public virtual DbSet<PatientRem> PatientRems { get; set; }

    public virtual DbSet<PatientRemsAudit> PatientRemsAudits { get; set; }

    public virtual DbSet<PatientRxDetail> PatientRxDetails { get; set; }

    public virtual DbSet<PatientSite> PatientSites { get; set; }

    public virtual DbSet<PatientSmstextConsent> PatientSmstextConsents { get; set; }

    public virtual DbSet<PatientSmstextConsentAudit> PatientSmstextConsentAudits { get; set; }

    public virtual DbSet<PatientSnoozedAlert> PatientSnoozedAlerts { get; set; }

    public virtual DbSet<PatientSpecialtyPharmaciesAudit> PatientSpecialtyPharmaciesAudits { get; set; }

    public virtual DbSet<PatientSpecialtyPharmacy> PatientSpecialtyPharmacies { get; set; }

    public virtual DbSet<PatientSsnEncrypted> PatientSsnEncrypteds { get; set; }

    public virtual DbSet<PatientSsnshowAuditLog> PatientSsnshowAuditLogs { get; set; }

    public virtual DbSet<PatientStatus> PatientStatuses { get; set; }

    public virtual DbSet<PatientStatusList> PatientStatusLists { get; set; }

    public virtual DbSet<PatientStatusNonHub> PatientStatusNonHubs { get; set; }

    public virtual DbSet<PatientStatusProgramList> PatientStatusProgramLists { get; set; }

    public virtual DbSet<PatientXmldatum> PatientXmldata { get; set; }

    public virtual DbSet<PatientsAudit> PatientsAudits { get; set; }

    public virtual DbSet<Payer> Payers { get; set; }

    public virtual DbSet<PayerAddress> PayerAddresses { get; set; }

    public virtual DbSet<PayerAdminTicket> PayerAdminTickets { get; set; }

    public virtual DbSet<PayerCode> PayerCodes { get; set; }

    public virtual DbSet<PayerDetail> PayerDetails { get; set; }

    public virtual DbSet<PayerInjectionDateConfigInfinitu> PayerInjectionDateConfigInfinitus { get; set; }

    public virtual DbSet<PayersPayerCategory> PayersPayerCategories { get; set; }

    public virtual DbSet<PecosProvidersNpiLookUpList> PecosProvidersNpiLookUpLists { get; set; }

    public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }

    public virtual DbSet<Physician> Physicians { get; set; }

    public virtual DbSet<PhysicianAddress> PhysicianAddresses { get; set; }

    public virtual DbSet<PhysicianAddressesAudit> PhysicianAddressesAudits { get; set; }

    public virtual DbSet<PhysicianClinicalTrial> PhysicianClinicalTrials { get; set; }

    public virtual DbSet<PhysicianDynamicDatum> PhysicianDynamicData { get; set; }

    public virtual DbSet<PhysicianEnrollment> PhysicianEnrollments { get; set; }

    public virtual DbSet<PhysicianEnrollmentsAudit> PhysicianEnrollmentsAudits { get; set; }

    public virtual DbSet<PhysicianNote> PhysicianNotes { get; set; }

    public virtual DbSet<PhysicianOrganization> PhysicianOrganizations { get; set; }

    public virtual DbSet<PhysicianPhoneNumber> PhysicianPhoneNumbers { get; set; }

    public virtual DbSet<PhysicianPhoneNumbersAudit> PhysicianPhoneNumbersAudits { get; set; }

    public virtual DbSet<PhysicianProgram> PhysicianPrograms { get; set; }

    public virtual DbSet<PhysicianSignature> PhysicianSignatures { get; set; }

    public virtual DbSet<PhysicianSpecialty> PhysicianSpecialties { get; set; }

    public virtual DbSet<PhysicianStateLicense> PhysicianStateLicenses { get; set; }

    public virtual DbSet<PhysiciansAudit> PhysiciansAudits { get; set; }

    public virtual DbSet<PhysiciansDetail> PhysiciansDetails { get; set; }

    public virtual DbSet<PhysiciansDetailAudit> PhysiciansDetailAudits { get; set; }

    public virtual DbSet<PortalAdsartoSocStage> PortalAdsartoSocStages { get; set; }

    public virtual DbSet<PortalAnnouncement> PortalAnnouncements { get; set; }

    public virtual DbSet<PortalDataLoadRecord> PortalDataLoadRecords { get; set; }

    public virtual DbSet<PortalDataReportRecordCount> PortalDataReportRecordCounts { get; set; }

    public virtual DbSet<PortalEntityToTerr> PortalEntityToTerrs { get; set; }

    public virtual DbSet<PortalEntityToTerrStage> PortalEntityToTerrStages { get; set; }

    public virtual DbSet<PortalFilterRequestConfig> PortalFilterRequestConfigs { get; set; }

    public virtual DbSet<PortalFunction> PortalFunctions { get; set; }

    public virtual DbSet<PortalFunctionList> PortalFunctionLists { get; set; }

    public virtual DbSet<PortalHcpButtonsAuditLog> PortalHcpButtonsAuditLogs { get; set; }

    public virtual DbSet<PortalNpitoFacilitytoSocStage> PortalNpitoFacilitytoSocStages { get; set; }

    public virtual DbSet<PortalNpitoSoc> PortalNpitoSocs { get; set; }

    public virtual DbSet<PortalPatientTempRegistration> PortalPatientTempRegistrations { get; set; }

    public virtual DbSet<PortalRegion> PortalRegions { get; set; }

    public virtual DbSet<PortalRoster> PortalRosters { get; set; }

    public virtual DbSet<PortalRosterAreaMapping> PortalRosterAreaMappings { get; set; }

    public virtual DbSet<PortalRosterRelation> PortalRosterRelations { get; set; }

    public virtual DbSet<PortalRosterStage> PortalRosterStages { get; set; }

    public virtual DbSet<PortalSalesForceProgram> PortalSalesForcePrograms { get; set; }

    public virtual DbSet<PortalSoc> PortalSocs { get; set; }

    public virtual DbSet<PortalStagingCmmSr> PortalStagingCmmSrs { get; set; }

    public virtual DbSet<PortalStagingHcpSr> PortalStagingHcpSrs { get; set; }

    public virtual DbSet<PortalStagingHcpSrAudit> PortalStagingHcpSrAudits { get; set; }

    public virtual DbSet<PortalStagingRegistration> PortalStagingRegistrations { get; set; }

    public virtual DbSet<PortalStagingRegistrationAddrEntityMapping> PortalStagingRegistrationAddrEntityMappings { get; set; }

    public virtual DbSet<PortalStagingRegistrationAddress> PortalStagingRegistrationAddresses { get; set; }

    public virtual DbSet<PortalStagingRegistrationEntity> PortalStagingRegistrationEntities { get; set; }

    public virtual DbSet<PortalStagingRequest> PortalStagingRequests { get; set; }

    public virtual DbSet<PortalStagingSrf> PortalStagingSrves { get; set; }

    public virtual DbSet<PortalStagingTblFile> PortalStagingTblFiles { get; set; }

    public virtual DbSet<PortalTakedaHierarchy> PortalTakedaHierarchies { get; set; }

    public virtual DbSet<PortalTerritory> PortalTerritories { get; set; }

    public virtual DbSet<PortalTerritoryCaseManager> PortalTerritoryCaseManagers { get; set; }

    public virtual DbSet<PortalTier> PortalTiers { get; set; }

    public virtual DbSet<PortalType> PortalTypes { get; set; }

    public virtual DbSet<PortalTypeAnnouncement> PortalTypeAnnouncements { get; set; }

    public virtual DbSet<PortalUserSession> PortalUserSessions { get; set; }

    public virtual DbSet<PortalZipToTerr> PortalZipToTerrs { get; set; }

    public virtual DbSet<PortalZipToTerrMinimalStage> PortalZipToTerrMinimalStages { get; set; }

    public virtual DbSet<PortalZipToTerrStage> PortalZipToTerrStages { get; set; }

    public virtual DbSet<Prescription> Prescriptions { get; set; }

    public virtual DbSet<PrescriptionEligibility> PrescriptionEligibilities { get; set; }

    public virtual DbSet<PrescriptionPharmacy> PrescriptionPharmacies { get; set; }

    public virtual DbSet<PrescriptionProvider> PrescriptionProviders { get; set; }

    public virtual DbSet<ProductOrderList> ProductOrderLists { get; set; }

    public virtual DbSet<ProductRequestedOrder> ProductRequestedOrders { get; set; }

    public virtual DbSet<ProductRequestedOrderDetail> ProductRequestedOrderDetails { get; set; }

    public virtual DbSet<ProfiseeEvent> ProfiseeEvents { get; set; }

    public virtual DbSet<Program> Programs { get; set; }

    public virtual DbSet<ProgramCopayCardId> ProgramCopayCardIds { get; set; }

    public virtual DbSet<ProgramFunction> ProgramFunctions { get; set; }

    public virtual DbSet<ProgramFunctionList> ProgramFunctionLists { get; set; }

    public virtual DbSet<ProgramMailingList> ProgramMailingLists { get; set; }

    public virtual DbSet<ProgramNdc> ProgramNdcs { get; set; }

    public virtual DbSet<ProgramPhoneNumberList> ProgramPhoneNumberLists { get; set; }

    public virtual DbSet<ProgramPortalType> ProgramPortalTypes { get; set; }

    public virtual DbSet<ProgramUrl> ProgramUrls { get; set; }

    public virtual DbSet<ProgramVendor> ProgramVendors { get; set; }

    public virtual DbSet<PsiIcd9> PsiIcd9s { get; set; }

    public virtual DbSet<PublicNumber> PublicNumbers { get; set; }

    public virtual DbSet<QaRepPayerCriterion> QaRepPayerCriteria { get; set; }

    public virtual DbSet<QaSettingAdmin> QaSettingAdmins { get; set; }

    public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }

    public virtual DbSet<QuestionAnswerFile> QuestionAnswerFiles { get; set; }

    public virtual DbSet<QuickCode> QuickCodes { get; set; }

    public virtual DbSet<RefillReminderCleanUpSpreadsheetFinal> RefillReminderCleanUpSpreadsheetFinals { get; set; }

    public virtual DbSet<ReimbursementEnrollmentForm> ReimbursementEnrollmentForms { get; set; }

    public virtual DbSet<Reminder> Reminders { get; set; }

    public virtual DbSet<ReminderNotificationLog> ReminderNotificationLogs { get; set; }

    public virtual DbSet<RemindersChild> RemindersChildren { get; set; }

    public virtual DbSet<ReportActivityHistory> ReportActivityHistories { get; set; }

    public virtual DbSet<ReportList> ReportLists { get; set; }

    public virtual DbSet<ReportParameter> ReportParameters { get; set; }

    public virtual DbSet<ReportProgram> ReportPrograms { get; set; }

    public virtual DbSet<RequestInfo> RequestInfoes { get; set; }

    public virtual DbSet<Rimgimg2Image> Rimgimg2Images { get; set; }

    public virtual DbSet<Rimgudg2UnqDrug> Rimgudg2UnqDrugs { get; set; }

    public virtual DbSet<Rimguij2UnqDrugJrnl> Rimguij2UnqDrugJrnls { get; set; }

    public virtual DbSet<RiteAidHoliday> RiteAidHolidays { get; set; }

    public virtual DbSet<RiteAidHour> RiteAidHours { get; set; }

    public virtual DbSet<Rmiid1Med> Rmiid1Meds { get; set; }

    public virtual DbSet<Rmindc1NdcMedid> Rmindc1NdcMedids { get; set; }

    public virtual DbSet<Rndc14NdcMstr> Rndc14NdcMstrs { get; set; }

    public virtual DbSet<Rpemmoe2Mono> Rpemmoe2Monos { get; set; }

    public virtual DbSet<Rpemogc0MonoGcnseqnoLink> Rpemogc0MonoGcnseqnoLinks { get; set; }

    public virtual DbSet<Rtmmid1TmMed> Rtmmid1TmMeds { get; set; }

    public virtual DbSet<Rtpbtransaction> Rtpbtransactions { get; set; }

    public virtual DbSet<RuleTriggerAction> RuleTriggerActions { get; set; }

    public virtual DbSet<RuleTriggerCondition> RuleTriggerConditions { get; set; }

    public virtual DbSet<RxAdminAction> RxAdminActions { get; set; }

    public virtual DbSet<RxAdminDose> RxAdminDoses { get; set; }

    public virtual DbSet<RxAdminDosesRule> RxAdminDosesRules { get; set; }

    public virtual DbSet<SalesDataCustomerToVendor> SalesDataCustomerToVendors { get; set; }

    public virtual DbSet<SalesDatum> SalesData { get; set; }

    public virtual DbSet<SamlauditLog> SamlauditLogs { get; set; }

    public virtual DbSet<SeasonalSourceRecord> SeasonalSourceRecords { get; set; }

    public virtual DbSet<SecureCommunication> SecureCommunications { get; set; }

    public virtual DbSet<SecureCommunicationDocument> SecureCommunicationDocuments { get; set; }

    public virtual DbSet<SecureMessagesAddress> SecureMessagesAddresses { get; set; }

    public virtual DbSet<SentAlertHistory> SentAlertHistories { get; set; }

    public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }

    public virtual DbSet<ServiceRequestsAuditLog> ServiceRequestsAuditLogs { get; set; }

    public virtual DbSet<SmsTemplate> SmsTemplates { get; set; }

    public virtual DbSet<SoapauditLog> SoapauditLogs { get; set; }

    public virtual DbSet<SpecialtyPharmacy> SpecialtyPharmacies { get; set; }

    public virtual DbSet<Spinventory> Spinventories { get; set; }

    public virtual DbSet<SpinventoryAudit> SpinventoryAudits { get; set; }

    public virtual DbSet<SrActivity> SrActivities { get; set; }

    public virtual DbSet<SrActivityList> SrActivityLists { get; set; }

    public virtual DbSet<SrAlternateCoveragePlan> SrAlternateCoveragePlans { get; set; }

    public virtual DbSet<SrAlternateCoverageResearch> SrAlternateCoverageResearches { get; set; }

    public virtual DbSet<SrAssignment> SrAssignments { get; set; }

    public virtual DbSet<SrBridgeEligibility> SrBridgeEligibilities { get; set; }

    public virtual DbSet<SrBridgeEligibilityAuditLog> SrBridgeEligibilityAuditLogs { get; set; }

    public virtual DbSet<SrBridgeExtension> SrBridgeExtensions { get; set; }

    public virtual DbSet<SrBridgeExtensionsAuditLog> SrBridgeExtensionsAuditLogs { get; set; }

    public virtual DbSet<SrCallLog> SrCallLogs { get; set; }

    public virtual DbSet<SrCopayClaim> SrCopayClaims { get; set; }

    public virtual DbSet<SrCopayPayment> SrCopayPayments { get; set; }

    public virtual DbSet<SrCopayPaymentEob> SrCopayPaymentEobs { get; set; }

    public virtual DbSet<SrCopayRecord> SrCopayRecords { get; set; }

    public virtual DbSet<SrCopayRecordsAuditLog> SrCopayRecordsAuditLogs { get; set; }

    public virtual DbSet<SrCopayRecordsErrorLog> SrCopayRecordsErrorLogs { get; set; }

    public virtual DbSet<SrDate> SrDates { get; set; }

    public virtual DbSet<SrEEnrollment> SrEEnrollments { get; set; }

    public virtual DbSet<SrEEnrollmentsAudit> SrEEnrollmentsAudits { get; set; }

    public virtual DbSet<SrFaq> SrFaqs { get; set; }

    public virtual DbSet<SrFeedbackTrackingAuditLog> SrFeedbackTrackingAuditLogs { get; set; }

    public virtual DbSet<SrIncompleteReason> SrIncompleteReasons { get; set; }

    public virtual DbSet<SrMedOffRampDataCptCode> SrMedOffRampDataCptCodes { get; set; }

    public virtual DbSet<SrMedOffRampDataDiagnosis> SrMedOffRampDataDiagnoses { get; set; }

    public virtual DbSet<SrMedOffRampDataPolicy> SrMedOffRampDataPolicies { get; set; }

    public virtual DbSet<SrMedOffRampDataPolicyAuditLog> SrMedOffRampDataPolicyAuditLogs { get; set; }

    public virtual DbSet<SrMedOffRampDataPolicyCptCodesDetail> SrMedOffRampDataPolicyCptCodesDetails { get; set; }

    public virtual DbSet<SrMedOffRampDataPolicyResultClientSpecificItem> SrMedOffRampDataPolicyResultClientSpecificItems { get; set; }

    public virtual DbSet<SrMedOffRampDataRequestPoliciesTmp> SrMedOffRampDataRequestPoliciesTmps { get; set; }

    public virtual DbSet<SrMedOffRampDataRequestPolicy> SrMedOffRampDataRequestPolicies { get; set; }

    public virtual DbSet<SrMedOffRampDatum> SrMedOffRampData { get; set; }

    public virtual DbSet<SrMessage> SrMessages { get; set; }

    public virtual DbSet<SrMessageThread> SrMessageThreads { get; set; }

    public virtual DbSet<SrNote> SrNotes { get; set; }

    public virtual DbSet<SrNoteHistory> SrNoteHistories { get; set; }

    public virtual DbSet<SrNursingActivity> SrNursingActivities { get; set; }

    public virtual DbSet<SrNursingActivityHistory> SrNursingActivityHistories { get; set; }

    public virtual DbSet<SrOffRamp> SrOffRamps { get; set; }

    public virtual DbSet<SrOffRampHistory> SrOffRampHistories { get; set; }

    public virtual DbSet<SrOrderDetail> SrOrderDetails { get; set; }

    public virtual DbSet<SrOrganization> SrOrganizations { get; set; }

    public virtual DbSet<SrOrganizationsAudit> SrOrganizationsAudits { get; set; }

    public virtual DbSet<SrPap> SrPaps { get; set; }

    public virtual DbSet<SrPapAuditLog> SrPapAuditLogs { get; set; }

    public virtual DbSet<SrPapbyTypeMapping> SrPapbyTypeMappings { get; set; }

    public virtual DbSet<SrPappayment> SrPappayments { get; set; }

    public virtual DbSet<SrPappaymentSchedule> SrPappaymentSchedules { get; set; }

    public virtual DbSet<SrPapscheduledPayment> SrPapscheduledPayments { get; set; }

    public virtual DbSet<SrPharmacyEPaDetail> SrPharmacyEPaDetails { get; set; }

    public virtual DbSet<SrPhysician> SrPhysicians { get; set; }

    public virtual DbSet<SrReferral> SrReferrals { get; set; }

    public virtual DbSet<SrReminder> SrReminders { get; set; }

    public virtual DbSet<SrRequiredField> SrRequiredFields { get; set; }

    public virtual DbSet<SrRxOffRampDataPolicy> SrRxOffRampDataPolicies { get; set; }

    public virtual DbSet<SrRxOffRampDataPolicyCoverageLimitationMessage> SrRxOffRampDataPolicyCoverageLimitationMessages { get; set; }

    public virtual DbSet<SrRxOffRampDatum> SrRxOffRampData { get; set; }

    public virtual DbSet<SrSubType> SrSubTypes { get; set; }

    public virtual DbSet<SrSubTypeList> SrSubTypeLists { get; set; }

    public virtual DbSet<SrSubTypeSubTyleList> SrSubTypeSubTyleLists { get; set; }

    public virtual DbSet<SrTestClaim> SrTestClaims { get; set; }

    public virtual DbSet<SrTickle> SrTickles { get; set; }

    public virtual DbSet<SrTrainingLog> SrTrainingLogs { get; set; }

    public virtual DbSet<SrTriage> SrTriages { get; set; }

    public virtual DbSet<SrTriageField> SrTriageFields { get; set; }

    public virtual DbSet<SrTypeActivity> SrTypeActivities { get; set; }

    public virtual DbSet<SrTypeConfig> SrTypeConfigs { get; set; }

    public virtual DbSet<SrTypeDynamicDataAuditLog> SrTypeDynamicDataAuditLogs { get; set; }

    public virtual DbSet<SrTypeDynamicDatum> SrTypeDynamicData { get; set; }

    public virtual DbSet<SrTypeGroupDynamicDataAuditLog> SrTypeGroupDynamicDataAuditLogs { get; set; }

    public virtual DbSet<SrTypeGroupDynamicDatum> SrTypeGroupDynamicData { get; set; }

    public virtual DbSet<SrTypeList> SrTypeLists { get; set; }

    public virtual DbSet<SrTypeListByDrug> SrTypeListByDrugs { get; set; }

    public virtual DbSet<SrVisit> SrVisits { get; set; }

    public virtual DbSet<SractivityEmailTemplateList> SractivityEmailTemplateLists { get; set; }

    public virtual DbSet<SrautoStatusLog> SrautoStatusLogs { get; set; }

    public virtual DbSet<SrdocumentTypeEmailTemplateList> SrdocumentTypeEmailTemplateLists { get; set; }

    public virtual DbSet<SrhubStatus> SrhubStatuses { get; set; }

    public virtual DbSet<SrhubStatusList> SrhubStatusLists { get; set; }

    public virtual DbSet<SrhubStatusSrtypeList> SrhubStatusSrtypeLists { get; set; }

    public virtual DbSet<StagingDispense> StagingDispenses { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<State1> States1 { get; set; }

    public virtual DbSet<StateCounty> StateCounties { get; set; }

    public virtual DbSet<StateList> StateLists { get; set; }

    public virtual DbSet<StatesList> StatesLists { get; set; }

    public virtual DbSet<StmspatientMedicationProfile> StmspatientMedicationProfiles { get; set; }

    public virtual DbSet<SubscriptionHistory> SubscriptionHistories { get; set; }

    public virtual DbSet<SurveyAnswer> SurveyAnswers { get; set; }

    public virtual DbSet<SurveyAnswerAuditLog> SurveyAnswerAuditLogs { get; set; }

    public virtual DbSet<SurveyAnswersMutliSelect> SurveyAnswersMutliSelects { get; set; }

    public virtual DbSet<SurveyCategory> SurveyCategories { get; set; }

    public virtual DbSet<SurveyDataPointDictionary> SurveyDataPointDictionaries { get; set; }

    public virtual DbSet<SurveyElement> SurveyElements { get; set; }

    public virtual DbSet<SurveyElementDataPoint> SurveyElementDataPoints { get; set; }

    public virtual DbSet<SurveyHistory> SurveyHistories { get; set; }

    public virtual DbSet<SurveyLookupDataList> SurveyLookupDataLists { get; set; }

    public virtual DbSet<SurveyMaster> SurveyMasters { get; set; }

    public virtual DbSet<SurveyMasterByDrug> SurveyMasterByDrugs { get; set; }

    public virtual DbSet<SurveyMasterBySrtype> SurveyMasterBySrtypes { get; set; }

    public virtual DbSet<SynagisPatient> SynagisPatients { get; set; }

    public virtual DbSet<TalendFlowCatcher> TalendFlowCatchers { get; set; }

    public virtual DbSet<TalendLogCatcher> TalendLogCatchers { get; set; }

    public virtual DbSet<TalendStatCatcher> TalendStatCatchers { get; set; }

    public virtual DbSet<Tamtracker> Tamtrackers { get; set; }

    public virtual DbSet<TamtrackerColor> TamtrackerColors { get; set; }

    public virtual DbSet<TamtrackerColumn> TamtrackerColumns { get; set; }

    public virtual DbSet<TamtrackerOption> TamtrackerOptions { get; set; }

    public virtual DbSet<TamtrackerSort> TamtrackerSorts { get; set; }

    public virtual DbSet<TempPatientJourney> TempPatientJourneys { get; set; }

    public virtual DbSet<TempPayerCleanup> TempPayerCleanups { get; set; }

    public virtual DbSet<ToolTip> ToolTips { get; set; }

    public virtual DbSet<TracleerRemsInPatientPharmacy> TracleerRemsInPatientPharmacies { get; set; }

    public virtual DbSet<TracleerRemsPatient> TracleerRemsPatients { get; set; }

    public virtual DbSet<TracleerRemsPrescriber> TracleerRemsPrescribers { get; set; }

    public virtual DbSet<TracleerRemsUniquePrescriber> TracleerRemsUniquePrescribers { get; set; }

    public virtual DbSet<TriageRecord> TriageRecords { get; set; }

    public virtual DbSet<TriggerEmailLog> TriggerEmailLogs { get; set; }

    public virtual DbSet<TriggerEmailTemplateList> TriggerEmailTemplateLists { get; set; }

    public virtual DbSet<UserAccessFunctionList> UserAccessFunctionLists { get; set; }

    public virtual DbSet<UserActiveSession> UserActiveSessions { get; set; }

    public virtual DbSet<UserEmailSubscription> UserEmailSubscriptions { get; set; }

    public virtual DbSet<UserGroup> UserGroups { get; set; }

    public virtual DbSet<UserGroupOfframpClientRelationship> UserGroupOfframpClientRelationships { get; set; }

    public virtual DbSet<UserGroupPayerRelationship> UserGroupPayerRelationships { get; set; }

    public virtual DbSet<UserHistory> UserHistories { get; set; }

    public virtual DbSet<UserInformation> UserInformations { get; set; }

    public virtual DbSet<UserLoginHistory> UserLoginHistories { get; set; }

    public virtual DbSet<UserPasswordHistory> UserPasswordHistories { get; set; }

    public virtual DbSet<UserProgram> UserPrograms { get; set; }

    public virtual DbSet<UserProgramSetting> UserProgramSettings { get; set; }

    public virtual DbSet<UserRoleDefault> UserRoleDefaults { get; set; }

    public virtual DbSet<UserRoleList> UserRoleLists { get; set; }

    public virtual DbSet<UserUserGroupRelation> UserUserGroupRelations { get; set; }

    public virtual DbSet<UswmZipterrEducatorStage> UswmZipterrEducatorStages { get; set; }

    public virtual DbSet<ValidationDefinition> ValidationDefinitions { get; set; }

    public virtual DbSet<ValidationField> ValidationFields { get; set; }

    public virtual DbSet<ValidationFieldDefinitionMapping> ValidationFieldDefinitionMappings { get; set; }

    public virtual DbSet<ValidationType> ValidationTypes { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorApiconfiguration> VendorApiconfigurations { get; set; }

    public virtual DbSet<VendorApimethodConfiguration> VendorApimethodConfigurations { get; set; }

    public virtual DbSet<VendorCopayNpi> VendorCopayNpis { get; set; }

    public virtual DbSet<VendorDfattribute> VendorDfattributes { get; set; }

    public virtual DbSet<VendorFaxList> VendorFaxLists { get; set; }

    public virtual DbSet<VendorPhone> VendorPhones { get; set; }

    public virtual DbSet<VendorSmtpconfiguration> VendorSmtpconfigurations { get; set; }

    public virtual DbSet<View1> View1s { get; set; }

    public virtual DbSet<VwAllerganExtractFilter> VwAllerganExtractFilters { get; set; }

    public virtual DbSet<VwAspnetApplication> VwAspnetApplications { get; set; }

    public virtual DbSet<VwAspnetMembershipUser> VwAspnetMembershipUsers { get; set; }

    public virtual DbSet<VwAspnetProfile> VwAspnetProfiles { get; set; }

    public virtual DbSet<VwAspnetRole> VwAspnetRoles { get; set; }

    public virtual DbSet<VwAspnetUsersInRole> VwAspnetUsersInRoles { get; set; }

    public virtual DbSet<VwAspnetWebPartStatePath> VwAspnetWebPartStatePaths { get; set; }

    public virtual DbSet<VwAspnetWebPartStateShared> VwAspnetWebPartStateShareds { get; set; }

    public virtual DbSet<VwAspnetWebPartStateUser> VwAspnetWebPartStateUsers { get; set; }

    public virtual DbSet<VwBioMarinConsentedContact> VwBioMarinConsentedContacts { get; set; }

    public virtual DbSet<VwBioMarinConsentedContactsV2> VwBioMarinConsentedContactsV2s { get; set; }

    public virtual DbSet<VwBioMarinConsentedContactsV3> VwBioMarinConsentedContactsV3s { get; set; }

    public virtual DbSet<VwBioMarinConsentedPatient> VwBioMarinConsentedPatients { get; set; }

    public virtual DbSet<VwBioMarinConsentedPatientsV1> VwBioMarinConsentedPatientsV1s { get; set; }

    public virtual DbSet<VwBioMarinConsentedPatientsV2> VwBioMarinConsentedPatientsV2s { get; set; }

    public virtual DbSet<VwBioMarinConsentedPatientsV3> VwBioMarinConsentedPatientsV3s { get; set; }

    public virtual DbSet<VwBioMarinConsentedPatientsV4> VwBioMarinConsentedPatientsV4s { get; set; }

    public virtual DbSet<VwBioMarinConsentedPatientsV6> VwBioMarinConsentedPatientsV6s { get; set; }

    public virtual DbSet<VwBioMarinSrlistExcludeNonConsented> VwBioMarinSrlistExcludeNonConsenteds { get; set; }

    public virtual DbSet<VwBioMarinSrlistExcludeNonConsentedV2> VwBioMarinSrlistExcludeNonConsentedV2s { get; set; }

    public virtual DbSet<VwBioMarinSrlistExcludeNonConsentedV3> VwBioMarinSrlistExcludeNonConsentedV3s { get; set; }

    public virtual DbSet<VwDfNovartisPatientConsent> VwDfNovartisPatientConsents { get; set; }

    public virtual DbSet<VwDispense> VwDispenses { get; set; }

    public virtual DbSet<VwFedexMailTrackInterfacer> VwFedexMailTrackInterfacers { get; set; }

    public virtual DbSet<VwGetPatientRecentAddress> VwGetPatientRecentAddresses { get; set; }

    public virtual DbSet<VwGetPatientRecentAddressV1> VwGetPatientRecentAddressV1s { get; set; }

    public virtual DbSet<VwGetPatientRecentLanguage> VwGetPatientRecentLanguages { get; set; }

    public virtual DbSet<VwGetPatientRecentPhone> VwGetPatientRecentPhones { get; set; }

    public virtual DbSet<VwJjpfCtFilter> VwJjpfCtFilters { get; set; }

    public virtual DbSet<VwJjpfOrgFilter> VwJjpfOrgFilters { get; set; }

    public virtual DbSet<VwJjpfPatFilter> VwJjpfPatFilters { get; set; }

    public virtual DbSet<VwJjpfPhyFilter> VwJjpfPhyFilters { get; set; }

    public virtual DbSet<VwJjpfSrFilter> VwJjpfSrFilters { get; set; }

    public virtual DbSet<VwPatientDataV1> VwPatientDataV1s { get; set; }

    public virtual DbSet<VwPatientDataV2> VwPatientDataV2s { get; set; }

    public virtual DbSet<VwPatientDatum> VwPatientData { get; set; }

    public virtual DbSet<VwPatientEligibilityTransaction> VwPatientEligibilityTransactions { get; set; }

    public virtual DbSet<VwPatientHeigthWeight> VwPatientHeigthWeights { get; set; }

    public virtual DbSet<VwPatientStatusNonHub> VwPatientStatusNonHubs { get; set; }

    public virtual DbSet<VwTriageRecord> VwTriageRecords { get; set; }

    public virtual DbSet<VwUser> VwUsers { get; set; }

    public virtual DbSet<VwWorkflowEmail> VwWorkflowEmails { get; set; }

    public virtual DbSet<WhiteList> WhiteLists { get; set; }

    public virtual DbSet<WhiteListChannelType> WhiteListChannelTypes { get; set; }

    public virtual DbSet<WhiteListEntity> WhiteListEntities { get; set; }

    public virtual DbSet<WhiteListEntitySetting> WhiteListEntitySettings { get; set; }

    public virtual DbSet<Workflow> Workflows { get; set; }

    public virtual DbSet<WorkflowField> WorkflowFields { get; set; }

    public virtual DbSet<WorkflowLookup> WorkflowLookups { get; set; }

    public virtual DbSet<WorkflowLookupItem> WorkflowLookupItems { get; set; }

    public virtual DbSet<WorkflowPaptypeConfig> WorkflowPaptypeConfigs { get; set; }

    public virtual DbSet<WorkflowPdf> WorkflowPdfs { get; set; }

    public virtual DbSet<WorkflowPdftagging> WorkflowPdftaggings { get; set; }

    public virtual DbSet<WorkflowProgramConfig> WorkflowProgramConfigs { get; set; }

    public virtual DbSet<WorkflowProgramEmail> WorkflowProgramEmails { get; set; }

    public virtual DbSet<WorkflowProgramField> WorkflowProgramFields { get; set; }

    public virtual DbSet<WorkflowProgramInvitationConfig> WorkflowProgramInvitationConfigs { get; set; }

    public virtual DbSet<WorkflowResponse> WorkflowResponses { get; set; }

    public virtual DbSet<WorkflowStep> WorkflowSteps { get; set; }

    public virtual DbSet<WorkflowStepContent> WorkflowStepContents { get; set; }

    public virtual DbSet<WorkflowStepProgramField> WorkflowStepProgramFields { get; set; }

    public virtual DbSet<ZUsplusGeoFull> ZUsplusGeoFulls { get; set; }

    public virtual DbSet<ZUszcGeoFull> ZUszcGeoFulls { get; set; }

    public virtual DbSet<ZipCode> ZipCodes { get; set; }

    public virtual DbSet<ZipToCaseManager> ZipToCaseManagers { get; set; }

    public virtual DbSet<ZipToCaseManagerStage> ZipToCaseManagerStages { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost,1433;Initial Catalog=SummaEf;Persist Security Info=True;User ID=sa;Password=IamInPlainTextNotSecure##2021;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Configurations.AMessageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AaaConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AaoSrPatientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AaosummaryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AlertTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AndrogelIninlogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AnnualGrossIncomeConfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ApiresponseMessageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetMembershipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetMembershipUsersAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetPathConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetPersonalizationAllUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetPersonalizationPerUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetProfileConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetRoleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetSchemaVersionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AspnetWebEventEventConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AutoCallingBvprocessConfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AutoDialerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitHistoryEBvConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitHistoryFieldListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitHistoryFieldListEBvConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitHistoryFieldMappingListEBvConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitHistoryImportLogEBvConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitInvestigationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitInvestigationEBvConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitInvestigationRealtimeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BenefitInvestigationTypeFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiNdcHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiNdcHistoryImportLogEBvConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiNdcRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinConsentedPatientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinEntityToTerrStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinPatientDailyDiagnosisConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinPatientDailyDiagnosisAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinPatientRemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinPrescriberRemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinRosterStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.BiomarinZipToTerrStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareCycleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareCycleOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareCyclePhysicianConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareCycleScheduleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareCycleScheduleAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareCyclesAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CareMetXDirSalesWProfIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaseEnrollmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaseJourneyByDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaseJourneyCloserRulesSettingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaseManagerByRegionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaseRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaseRecordTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaystonProcessActivityMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CaystonStagingPatientReferralConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CfIssueSubTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CfIssueTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ClaimsViewAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CmmstatusMailServiceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoherusEmployeesStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoherusGroupAssignmentStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoherusGroupGeoStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoherusGroupsStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoherusRosterStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoherusZipTerrStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CommunicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ConnectFedexAddressVerificationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ConnectFedexApierrorLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ConnectFedexApirequestConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ConnectModularDocTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ConnectPayerMapConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ConnectiveRxApilogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactAddressesAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactLicenseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactNoteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactPhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactPhoneNumbersAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactPhysicianConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactPhysiciansAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ContactsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CopayAdjudicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CopayAdjudicationDenialReasonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CopayInvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CopayPskwredemptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CornerStoneCfsShipmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CountriesListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CountryListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CoveredCountyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbAspnetApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbAspnetMembershipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbAspnetUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalAccountConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalAccountProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalClientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalClientDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalUserAccountConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbPortalUserApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrossdbUspsZipCoordinateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrushFileLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CrushftpLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerStateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DailyStatusChangeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DashboardPanelListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DashboardPanelProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DashboardPanelUserSettingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DataConfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DataDictionaryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DatabasechangelogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DatabasechangeloglockConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DatabasechangestatusConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DatabasechangestreleasebranchConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DateWorkDayConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DboVwGetPatientRecentAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DemoSraccountAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfAutomaticTaskLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfAutomaticTaskRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfCdcConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfCustomScheduleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfDataExtractMaxEntityIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfEbvTrackingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfEmailLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfFileConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfInboundFileErrorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfInboundFileLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfInboundRecordDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfJobConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfJobAlertConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfJobExConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfOutboundFileErrorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfOutboundFileLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfOutboundRecordDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfOutboundRecordTrackingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfRecurringProcessErrorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfRecurringProcessLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfSftpConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfTalendContextConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfVermedicaEbvtrackingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DfZipRstTrackingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DiagnosisListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DiagnosisListProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DirectFaxAssignmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DirectoriesOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispenseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispenseOrderTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispenseQtyConversionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispensesFromSpConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispensesHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispensesLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DispensesWalgreenConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentAttachmentsDocTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentFieldListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentFieldMultiAnswerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentListLetterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentManagementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentOutboundFaxisConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsDocTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsEHipaainviteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsEntityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsFaxQueueConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsFqUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsInboundFaxisConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsMoveAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsOcrCoordinateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsOcrDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsOutboundAttachmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsSrTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DocumentsTherapyDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DrugCptcodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DrugCptcodeProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DrugDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DrugResourceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DrugServiceLevelConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DupConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DuplicateNpitrackingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DuplicatePatientQueueConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DynamicDataByLookupDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DynamicDataListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvAgeLimitConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvCopayFactorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvCoverageBenefitDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvCoverageBenefitTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvCoverageFactorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvDrugCoverageAlertConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvDrugPharmacyCoverageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvInsuranceFormularyCoverageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvMasterTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvMedicationBenefitDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvMedicationBenefitTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvMockResponseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvModularTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvQuantityLimitConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvResourceLinkConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EBvStepDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EConsentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EHipaaApiProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EHipaaPatientInviteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EPafemailLinkAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EServiceApilogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EServicesConfigListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EServicesProgramConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EagleForceApilogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EbvmedicalResponseTypeCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmailHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmailSubscriptionTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmailTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EnrollmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EnrollmentDupSearchLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EntityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EntityDupeSearchRequestConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EntityIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EntityMergeDetailsLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EntityMergeLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EpapApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EpapApplicationLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EpapInvitationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EpsilonCallLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EreferralConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EventsQueueConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ExperianApilogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaqSrtypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaqlistConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaxInboundReportConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaxLogDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaxLogExceptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaxLogSummaryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaxNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FaxSampleReportConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FedExMailTrackInterfacerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FederalPovertyLeveListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FeedbackConfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FieldPortalConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationInsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationInsurancesAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationMedicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationMedicationsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationPatientSiteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundEnrollmentApplicationsExtensionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundReopenSubscriptionDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundReopenSubscriptionMedicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FundReopenSubscriptionSubscriberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.GlobalConfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.GrantUsePolicyExceptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.GrantUsePolicyExceptionAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.HcpPortalPatientCaregiverConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.HcpPortalSrtypeMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.HcpportalNlogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.HcpservicesApicallLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ImageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ImportProviderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.IncomeAttestationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.IncomeAttestationAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.IninincomeLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.IninlogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceEligibilityCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceEligibilityLookUpListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceNoteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InvalidPatientEmailCleanUpConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Log4NetErrorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LookupDataListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LookupInfinitusPayerIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LookupListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LookupPaConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrEmailErrorLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrEmailNotificationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrEmailNotificationAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrEmailTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrErrorLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrFaxErrorLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrFaxNotificationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrFaxNotificationAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrFaxTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrLookupListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrLookupListItemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrMailNotificationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrMailNotificationAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrMailTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrNotificationItemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrNotificationItemsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrNotificationMasterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrNotificationMasterAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LtrProcessLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MailTrackingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MailTrackingErrorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MailingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MailingDocumentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MailingWebServiceRequestConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MdmLocationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MdmOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MdmProviderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MdmSalesAlignmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MdmpatientProcessResultConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MdmpatientSearchResultConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedOffRampSupplementPlanConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedOffRampSupplementPlanOffRampClientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedeBvofframpClientResponseTypeCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedeBvofframpCobblurbAdditionalRuleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedeBvofframpCobblurbRuleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedeBvofframpErrorListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedeBvofframpRequiredRuleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedeBvofframpResponseTypeCodeListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedicaidIncomeEligibilityLimitListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedvantxInventoryUpdateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MedvantxLotConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MergeLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessageModuleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessageQueueConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessageThreadConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessageThreadReaderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessageTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessagesSmConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MessagesSmsmediumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileDrugSurveyElementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileMasterSurveyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobilePatientSurveyAnswerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobilePatientSurveyAnswerMasterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileRefillOrderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileRefillOrderItemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileRequestPharmacyCallConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileSurveyElementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MobileSurveySubElementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentAnswerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentDetailAnswerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentQuestionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentQuestionTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MpuAssessmentTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NcpdpRejectCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NoteOverrideConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NoteTemplateListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NotificationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NotificationTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyAccreditationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyAccreditationListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyCertificationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyCertificationListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyCoveredCountyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyNurseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyPhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.NurseAgencyRateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OffRampClientPayerRelationshipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OffRampClientPrimarySecondaryRelationshipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OfframpClientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OfframpCustomConnectInfoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OfframpExternalHubInfoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OnsitePharmacyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrderProductFormConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationEnrollmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationEnrollmentsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationMergeLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationMergeLogDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationNoteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationNpiConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationPhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationTaxIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationTerritoryAlignmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.OrganizationsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanApplicationRoleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanApplicationTokenRoleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanDisenrollmentReversalConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanDisenrollmentReversalAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanDisenrollmentReversalTempConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PanReversalConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PapextensionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientAddressesAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientAttestationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientAttestationAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientCommunicationMethodConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientConsentAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientConsentPerDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientContactConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientDeviceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientDeviceIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientDeviceUsageLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientDiagnosisConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientDupeSearchResponseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientEligibilityResponseCodeListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientEligibilityTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientFmrsrHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientFmrsrHistoryAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientFulfillmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientInsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientInvitationEmailAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientJourneyDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientLischeckConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientLischeckBatchConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientMarketingStatusConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientNoteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientPhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientPhoneNumbersAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientPhysicianConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientPrescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientReactivationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientRefillConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientRemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientRemsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientRxDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSiteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSmstextConsentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSmstextConsentAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSnoozedAlertConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSpecialtyPharmaciesAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSpecialtyPharmacyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSsnEncryptedConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientSsnshowAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientStatusConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientStatusListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientStatusNonHubConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientStatusProgramListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientXmldatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PatientsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayerAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayerAdminTicketConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayerCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayerDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayerInjectionDateConfigInfinituConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PayersPayerCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PecosProvidersNpiLookUpListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianAddressesAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianClinicalTrialConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianEnrollmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianEnrollmentsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianNoteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianPhoneNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianPhoneNumbersAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianSignatureConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianSpecialtyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysicianStateLicenseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysiciansAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysiciansDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PhysiciansDetailAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalAdsartoSocStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalAnnouncementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalDataLoadRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalDataReportRecordCountConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalEntityToTerrConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalEntityToTerrStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalFilterRequestConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalFunctionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalFunctionListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalHcpButtonsAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalNpitoFacilitytoSocStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalNpitoSocConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalPatientTempRegistrationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalRegionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalRosterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalRosterAreaMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalRosterRelationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalRosterStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalSalesForceProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalSocConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingCmmSrConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingHcpSrConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingHcpSrAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingRegistrationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingRegistrationAddrEntityMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingRegistrationAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingRegistrationEntityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingRequestConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingSrfConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalStagingTblFileConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalTakedaHierarchyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalTerritoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalTerritoryCaseManagerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalTierConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalTypeAnnouncementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalUserSessionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalZipToTerrConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalZipToTerrMinimalStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PortalZipToTerrStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PrescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PrescriptionEligibilityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PrescriptionPharmacyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PrescriptionProviderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductOrderListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductRequestedOrderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProductRequestedOrderDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProfiseeEventConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramCopayCardIdConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramFunctionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramFunctionListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramMailingListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramNdcConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramPhoneNumberListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramPortalTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramUrlConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ProgramVendorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PsiIcd9Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.PublicNumberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.QaRepPayerCriterionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.QaSettingAdminConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.QuestionAnswerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.QuestionAnswerFileConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.QuickCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RefillReminderCleanUpSpreadsheetFinalConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReimbursementEnrollmentFormConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReminderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReminderNotificationLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RemindersChildConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReportActivityHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReportListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReportParameterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReportProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RequestInfoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rimgimg2ImageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rimgudg2UnqDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rimguij2UnqDrugJrnlConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RiteAidHolidayConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RiteAidHourConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rmiid1MedConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rmindc1NdcMedidConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rndc14NdcMstrConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rpemmoe2MonoConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rpemogc0MonoGcnseqnoLinkConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Rtmmid1TmMedConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RtpbtransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RuleTriggerActionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RuleTriggerConditionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RxAdminActionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RxAdminDoseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RxAdminDosesRuleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesDataCustomerToVendorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SalesDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SamlauditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SeasonalSourceRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SecureCommunicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SecureCommunicationDocumentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SecureMessagesAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SentAlertHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ServiceRequestConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ServiceRequestsAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SmsTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SoapauditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SpecialtyPharmacyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SpinventoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SpinventoryAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrActivityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrActivityListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrAlternateCoveragePlanConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrAlternateCoverageResearchConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrAssignmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrBridgeEligibilityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrBridgeEligibilityAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrBridgeExtensionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrBridgeExtensionsAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCallLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCopayClaimConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCopayPaymentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCopayPaymentEobConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCopayRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCopayRecordsAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrCopayRecordsErrorLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrDateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrEEnrollmentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrEEnrollmentsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrFaqConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrFeedbackTrackingAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrIncompleteReasonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataCptCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataDiagnosisConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataPolicyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataPolicyAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataPolicyCptCodesDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataPolicyResultClientSpecificItemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataRequestPoliciesTmpConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDataRequestPolicyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMedOffRampDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMessageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrMessageThreadConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrNoteConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrNoteHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrNursingActivityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrNursingActivityHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrOffRampConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrOffRampHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrOrderDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrOrganizationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrOrganizationsAuditConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPapConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPapAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPapbyTypeMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPappaymentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPappaymentScheduleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPapscheduledPaymentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPharmacyEPaDetailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrPhysicianConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrReferralConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrReminderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrRequiredFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrRxOffRampDataPolicyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrRxOffRampDataPolicyCoverageLimitationMessageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrRxOffRampDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrSubTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrSubTypeListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrSubTypeSubTyleListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTestClaimConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTickleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTrainingLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTriageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTriageFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeActivityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeDynamicDataAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeGroupDynamicDataAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeGroupDynamicDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrTypeListByDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrVisitConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SractivityEmailTemplateListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrautoStatusLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrdocumentTypeEmailTemplateListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrhubStatusConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrhubStatusListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SrhubStatusSrtypeListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StagingDispenseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.State1Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.StateCountyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StateListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StatesListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.StmspatientMedicationProfileConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SubscriptionHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyAnswerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyAnswerAuditLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyAnswersMutliSelectConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyDataPointDictionaryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyElementConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyElementDataPointConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyLookupDataListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyMasterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyMasterByDrugConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SurveyMasterBySrtypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SynagisPatientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TalendFlowCatcherConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TalendLogCatcherConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TalendStatCatcherConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TamtrackerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TamtrackerColorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TamtrackerColumnConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TamtrackerOptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TamtrackerSortConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TempPatientJourneyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TempPayerCleanupConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ToolTipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TracleerRemsInPatientPharmacyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TracleerRemsPatientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TracleerRemsPrescriberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TracleerRemsUniquePrescriberConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TriageRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TriggerEmailLogConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TriggerEmailTemplateListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserAccessFunctionListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserActiveSessionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserEmailSubscriptionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserGroupConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserGroupOfframpClientRelationshipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserGroupPayerRelationshipConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserInformationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserLoginHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserPasswordHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserProgramConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserProgramSettingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserRoleDefaultConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserRoleListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserUserGroupRelationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UswmZipterrEducatorStageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ValidationDefinitionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ValidationFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ValidationFieldDefinitionMappingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ValidationTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorApiconfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorApimethodConfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorCopayNpiConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorDfattributeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorFaxListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorPhoneConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VendorSmtpconfigurationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.View1Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAllerganExtractFilterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetMembershipUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetProfileConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetRoleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetUsersInRoleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetWebPartStatePathConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetWebPartStateSharedConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwAspnetWebPartStateUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedContactConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedContactsV2Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedContactsV3Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedPatientConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedPatientsV1Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedPatientsV2Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedPatientsV3Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedPatientsV4Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinConsentedPatientsV6Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinSrlistExcludeNonConsentedConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinSrlistExcludeNonConsentedV2Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwBioMarinSrlistExcludeNonConsentedV3Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwDfNovartisPatientConsentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwDispenseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwFedexMailTrackInterfacerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwGetPatientRecentAddressConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwGetPatientRecentAddressV1Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwGetPatientRecentLanguageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwGetPatientRecentPhoneConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwJjpfCtFilterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwJjpfOrgFilterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwJjpfPatFilterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwJjpfPhyFilterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwJjpfSrFilterConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwPatientDataV1Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwPatientDataV2Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.VwPatientDatumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwPatientEligibilityTransactionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwPatientHeigthWeightConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwPatientStatusNonHubConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwTriageRecordConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.VwWorkflowEmailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WhiteListConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WhiteListChannelTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WhiteListEntityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WhiteListEntitySettingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowLookupConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowLookupItemConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowPaptypeConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowPdfConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowPdftaggingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowProgramConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowProgramEmailConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowProgramFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowProgramInvitationConfigConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowResponseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowStepConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowStepContentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.WorkflowStepProgramFieldConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ZUsplusGeoFullConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ZUszcGeoFullConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ZipCodeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ZipToCaseManagerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ZipToCaseManagerStageConfiguration());

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
