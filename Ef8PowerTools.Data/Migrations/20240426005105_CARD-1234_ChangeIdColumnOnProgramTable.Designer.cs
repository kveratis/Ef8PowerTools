// <auto-generated />
using System;
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ef8PowerTools.Data.Migrations
{
    [DbContext(typeof(SummaContext))]
    [Migration("20240426005105_CARD-1234_ChangeIdColumnOnProgramTable")]
    partial class CARD1234_ChangeIdColumnOnProgramTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspnetUsersInRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__aspnet_U__AF2760AD36670980");

                    b.HasIndex(new[] { "RoleId" }, "aspnet_UsersInRoles_index");

                    b.ToTable("aspnet_UsersInRoles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AMessage", b =>
                {
                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MessageText")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Message_Text");

                    b.Property<int?>("Messageid")
                        .HasColumnType("int")
                        .HasColumnName("messageid");

                    b.Property<int?>("Messageid2")
                        .HasColumnType("int")
                        .HasColumnName("messageid2");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("SendTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderFirstName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SenderLastName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Source")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Src")
                        .HasColumnType("int")
                        .HasColumnName("src");

                    b.Property<int?>("Threadid")
                        .HasColumnType("int")
                        .HasColumnName("threadid");

                    b.HasKey("Pkid");

                    b.ToTable("A_Message", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Aaa", b =>
                {
                    b.Property<int?>("Carecycleid")
                        .HasColumnType("int")
                        .HasColumnName("carecycleid");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<string>("MedEPayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Med_ePayerID");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("ThreadID");

                    b.Property<double?>("TimeSpend")
                        .HasColumnType("float");

                    b.ToTable("_Aaa", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AaoSrPatient", b =>
                {
                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.ToTable("AAO_SR_Patients", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Aaosummary", b =>
                {
                    b.Property<int>("AaosummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AAOSummaryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AaosummaryId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CoverageStatus")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CoverageType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LischeckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LISCheckDate");

                    b.Property<string>("Lislevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LISLevel");

                    b.Property<string>("PatientAge")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PatientPhase")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("AaosummaryId");

                    b.HasIndex(new[] { "ProgramId", "ServiceRequestId", "Deleted" }, "ProgramIndex");

                    b.ToTable("AAOSummary", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Instructions")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PayerDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PayerDetailID");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("AddressId");

                    b.HasIndex("PayerDetailId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AlertType", b =>
                {
                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AlertTypeID");

                    b.Property<string>("AlertTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AlertTypeId");

                    b.ToTable("AlertTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AndrogelIninlog", b =>
                {
                    b.Property<int>("AndrogelIninlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AndrogelININLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AndrogelIninlogId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InteractionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("InteractionID");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("Processed")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AndrogelIninlogId");

                    b.ToTable("AndrogelININLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AnnualGrossIncomeConfiguration", b =>
                {
                    b.Property<int>("AnnualGrossIncomeConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnualGrossIncomeConfigurationId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LowerAmount")
                        .HasColumnType("int");

                    b.Property<int?>("LowerIncomeRangeAmount")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UpperAmount")
                        .HasColumnType("int");

                    b.Property<int?>("UpperIncomeRangeAmount")
                        .HasColumnType("int");

                    b.HasKey("AnnualGrossIncomeConfigurationId")
                        .HasName("PK__AnnualGr__13F92CDC2F888D49");

                    b.ToTable("AnnualGrossIncomeConfiguration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ApiresponseMessage", b =>
                {
                    b.Property<int>("ResponseMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseMessageId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MessageModuleId")
                        .HasColumnType("int");

                    b.HasKey("ResponseMessageId");

                    b.HasIndex("MessageModuleId");

                    b.ToTable("APIResponseMessage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ApplicationId")
                        .HasName("PK__aspnet_A__C93A4C986FD49106");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ApplicationId"), false);

                    b.HasIndex(new[] { "LoweredApplicationName" }, "UQ__aspnet_A__17477DE472B0FDB1")
                        .IsUnique();

                    b.HasIndex(new[] { "ApplicationName" }, "UQ__aspnet_A__30910331758D6A5C")
                        .IsUnique();

                    b.ToTable("aspnet_Applications", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetMembership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobilePin")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("MobilePIN");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("int");

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId")
                        .HasName("PK__aspnet_M__1788CC4D0E591826");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UserId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredEmail" }, "aspnet_Membership_index");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredEmail" }, "aspnet_Membership_index"));

                    b.ToTable("aspnet_Membership", null, t =>
                        {
                            t.HasTrigger("update_aspnet_membership");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetMembershipUsersAuditLog", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecordId");

                    b.ToTable("aspnet_MembershipUsers_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPath", b =>
                {
                    b.Property<Guid>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoweredPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PathId")
                        .HasName("PK__aspnet_P__CD67DC5847919582");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PathId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredPath" }, "aspnet_Paths_index")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredPath" }, "aspnet_Paths_index"));

                    b.ToTable("aspnet_Paths", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPersonalizationAllUser", b =>
                {
                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PageSettings")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("PathId")
                        .HasName("PK__aspnet_P__CD67DC594F32B74A");

                    b.ToTable("aspnet_PersonalizationAllUsers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPersonalizationPerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PageSettings")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<Guid?>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__aspnet_P__3214EC0653F76C67");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "PathId", "UserId" }, "aspnet_PersonalizationPerUser_index1")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "PathId", "UserId" }, "aspnet_PersonalizationPerUser_index1"));

                    b.HasIndex(new[] { "UserId", "PathId" }, "aspnet_PersonalizationPerUser_ncindex2")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [PathId] IS NOT NULL");

                    b.ToTable("aspnet_PersonalizationPerUser", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PropertyNames")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<byte[]>("PropertyValuesBinary")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("PropertyValuesString")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("UserId")
                        .HasName("PK__aspnet_P__1788CC4C253C7D7E");

                    b.ToTable("aspnet_Profile", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredRoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RoleId")
                        .HasName("PK__aspnet_R__8AFACE1B30AE302A");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RoleId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredRoleName" }, "aspnet_Roles_index1")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredRoleName" }, "aspnet_Roles_index1"));

                    b.ToTable("aspnet_Roles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetSchemaVersion", b =>
                {
                    b.Property<string>("Feature")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CompatibleSchemaVersion")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("bit");

                    b.HasKey("Feature", "CompatibleSchemaVersion")
                        .HasName("PK__aspnet_S__5A1E6BC101F34141");

                    b.ToTable("aspnet_SchemaVersions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobileAlias")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId")
                        .HasName("PK__aspnet_U__1788CC4D7A521F79");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UserId"), false);

                    b.HasIndex(new[] { "ApplicationId", "LoweredUserName" }, "aspnet_Users_Index")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ApplicationId", "LoweredUserName" }, "aspnet_Users_Index"));

                    b.HasIndex(new[] { "ApplicationId", "LastActivityDate" }, "aspnet_Users_Index2");

                    b.ToTable("aspnet_Users", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetWebEventEvent", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("char(32)")
                        .IsFixedLength();

                    b.Property<string>("ApplicationPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ApplicationVirtualPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Details")
                        .HasColumnType("ntext");

                    b.Property<int>("EventCode")
                        .HasColumnType("int");

                    b.Property<int>("EventDetailCode")
                        .HasColumnType("int");

                    b.Property<decimal>("EventOccurrence")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<decimal>("EventSequence")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EventTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ExceptionType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Message")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("EventId")
                        .HasName("PK__aspnet_W__7944C81067FE6514");

                    b.ToTable("aspnet_WebEvent_Events", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SourceApplication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AutoCallingBvprocessConfiguration", b =>
                {
                    b.Property<long>("AutoCallingBvprocessConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AutoCallingBVProcessConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AutoCallingBvprocessConfigurationId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsBicreateAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsBICreateAllowed");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Srresolution")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRResolution");

                    b.Property<string>("SrtypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRTypeShortDesc");

                    b.HasKey("AutoCallingBvprocessConfigurationId")
                        .HasName("PK__AutoCall__75589DB98253BA96");

                    b.ToTable("AutoCallingBVProcessConfiguration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AutoDialer", b =>
                {
                    b.Property<int>("AutoDialerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AutoDialerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoDialerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssignmentGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PayerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimarySecondaryFlag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("TransactionResponseId")
                        .HasMaxLength(38)
                        .IsUnicode(false)
                        .HasColumnType("varchar(38)");

                    b.Property<string>("TransferPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AutoDialerId");

                    b.ToTable("AutoDialer", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistory", b =>
                {
                    b.Property<int>("BenefitHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitHistoryId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int>("BenefitHistoryFieldListId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldListID");

                    b.Property<string>("BenefitHistoryFieldValue")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int?>("BenefitInvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    b.Property<int?>("BiNdcRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("NA");

                    b.Property<int>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BenefitHistoryId");

                    b.HasIndex("BenefitHistoryFieldListId");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex(new[] { "BenefitInvestigationId", "Deleted", "ServiceRequestId" }, "IX_BenefitHistory_BIID");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_BenefitHistory_ProgramID");

                    b.ToTable("BenefitHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistoryEBv", b =>
                {
                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int>("BenefitHistoryEBvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistory_eBV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitHistoryEBvId"));

                    b.Property<int>("BenefitHistoryFieldListEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldList_eBV_ID");

                    b.Property<string>("BenefitHistoryFieldValue")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int?>("BenefitInvestigationEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    b.Property<int?>("BiNdcRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("NA");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable("BenefitHistory_eBV", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistoryFieldList", b =>
                {
                    b.Property<int>("BenefitHistoryFieldListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitHistoryFieldListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("AllowNa")
                        .HasColumnType("bit")
                        .HasColumnName("AllowNA");

                    b.Property<bool?>("ByTypeOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FieldDataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldDisplay")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("FieldLength")
                        .HasColumnType("smallint");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookUpDataListFunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("ProgramId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Required")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Script")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TemplateTagName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BenefitHistoryFieldListId");

                    b.HasIndex(new[] { "ProgramId", "FieldName", "Active", "Deleted" }, "IX_BenefitHistoryFieldList_ProgramID");

                    b.ToTable("BenefitHistoryFieldList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistoryFieldListEBv", b =>
                {
                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("AllowNa")
                        .HasColumnType("bit")
                        .HasColumnName("AllowNA");

                    b.Property<int>("BenefitHistoryFieldListEBvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldList_eBV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitHistoryFieldListEBvId"));

                    b.Property<bool?>("ByTypeOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FieldDataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldDisplay")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("FieldLength")
                        .HasColumnType("smallint");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookUpDataListFunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("ProgramId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Required")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Script")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TemplateTagName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("BenefitHistoryFieldList_eBV", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistoryFieldMappingListEBv", b =>
                {
                    b.Property<int>("BenefitHistoryFieldMappingListEBvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldMappingList_eBV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitHistoryFieldMappingListEBvId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BifieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BIFieldName");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EBvFieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("eBvFieldName");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("BenefitHistoryFieldMappingListEBvId");

                    b.ToTable("BenefitHistoryFieldMappingList_eBV", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistoryImportLogEBv", b =>
                {
                    b.Property<int>("BenefitHistoryImportLogEBvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistory_ImportLog_eBV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitHistoryImportLogEBvId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int>("BenefitHistoryFieldListId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldListID");

                    b.Property<string>("BenefitHistoryFieldValue")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int?>("BenefitInvestigationEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    b.Property<int?>("BenefitInvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    b.Property<int?>("BiNdcRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .HasColumnType("bit")
                        .HasColumnName("NA");

                    b.Property<int>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BenefitHistoryImportLogEBvId");

                    b.ToTable("BenefitHistory_ImportLog_eBV", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigation", b =>
                {
                    b.Property<int>("BenefitInvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitInvestigationId"));

                    b.Property<bool?>("BenefitInvestigationWorkDone")
                        .HasColumnType("bit");

                    b.Property<string>("BenefitInvestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ResponseTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BenefitInvestigationId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex(new[] { "PatientInsuranceId", "Deleted" }, "PatientInsuranceID_Deleted");

                    b.ToTable("BenefitInvestigation", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigationEBv", b =>
                {
                    b.Property<int>("BenefitInvestigationEBvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitInvestigationEBvId"));

                    b.Property<bool?>("BenefitInvestigationWorkDone")
                        .HasColumnType("bit");

                    b.Property<string>("BenefitInvestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BiId")
                        .HasColumnType("int")
                        .HasColumnName("BI_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BenefitInvestigationEBvId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("BenefitInvestigation_eBV", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigationRealtime", b =>
                {
                    b.Property<int>("BenefitInvestigationRealtimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_Realtime_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitInvestigationRealtimeId"));

                    b.Property<bool?>("BenefitInvestigationWorkDone")
                        .HasColumnType("bit");

                    b.Property<string>("BenefitInvestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BiId")
                        .HasColumnType("int")
                        .HasColumnName("BI_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable("BenefitInvestigation_Realtime", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigationTypeField", b =>
                {
                    b.Property<int>("BenefitInvestigationTypeFieldsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationTypeFieldsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitInvestigationTypeFieldsId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("AllowNa")
                        .HasColumnType("bit")
                        .HasColumnName("AllowNA");

                    b.Property<int>("BenefitHistoryFieldListId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldListID");

                    b.Property<string>("BenefitInvestigationType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("FieldDisplay")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("ProgramId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Required")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BenefitInvestigationTypeFieldsId");

                    b.ToTable("BenefitInvestigationTypeFields");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiNdcHistory", b =>
                {
                    b.Property<int>("BiNdcHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_History_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiNdcHistoryId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int>("BenefitHistoryFieldListId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldListID");

                    b.Property<string>("BenefitHistoryFieldValue")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int?>("BenefitInvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    b.Property<int>("BiNdcRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .HasColumnType("bit")
                        .HasColumnName("NA");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BiNdcHistoryId");

                    b.HasIndex(new[] { "ProgramId", "ServiceRequestId", "BiNdcRecordId", "Deleted" }, "IX_ServiceRequestID");

                    b.ToTable("BI_NDC_History", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiNdcHistoryImportLogEBv", b =>
                {
                    b.Property<int>("BiNdcImportLogEBvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_ImportLog_eBV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiNdcImportLogEBvId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int>("BenefitHistoryFieldListId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitHistoryFieldListID");

                    b.Property<string>("BenefitHistoryFieldValue")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int>("BenefitInvestigationEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    b.Property<int>("BenefitInvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    b.Property<int>("BiNdcHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_History_ID");

                    b.Property<int>("BiNdcRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .HasColumnType("bit")
                        .HasColumnName("NA");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BiNdcImportLogEBvId");

                    b.ToTable("BI_NDC_History_ImportLog_eBV", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiNdcRecord", b =>
                {
                    b.Property<int>("BiNdcRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiNdcRecordId"));

                    b.Property<int?>("BenefitInvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    b.Property<string>("Bitype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BIType");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OriginalId")
                        .HasColumnType("int")
                        .HasColumnName("OriginalID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("BiNdcRecordId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "ServiceRequestId" }, "IX_ServiceRequestID");

                    b.ToTable("BI_NDC_Records", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinConsentedPatient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("OtherConsentExpDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.HasKey("PatientId")
                        .HasName("PK_BiomarinConsentedPatients_1");

                    b.ToTable("BiomarinConsentedPatients");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinEntityToTerrStage", b =>
                {
                    b.Property<int>("EntityToTerrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityToTerrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityToTerrId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("EntityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Program")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EntityToTerrId");

                    b.ToTable("Biomarin_EntityToTerr_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinPatientDailyDiagnosis", b =>
                {
                    b.Property<int>("PatientDailyDiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientDailyDiagnosisID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientDailyDiagnosisId"));

                    b.Property<long?>("ArupaccessionNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("ARUPAccessionNumber");

                    b.Property<DateOnly?>("CollectionDate")
                        .HasColumnType("date");

                    b.Property<string>("CollectionTime")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EnhancedReportPdf")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EnhancedReportPDF");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianInstitutionCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianInstitutionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianInstitutionPostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhysicianInstitutionState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("ResultVerificationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StatusDate")
                        .HasColumnType("date");

                    b.Property<string>("TestResult")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("UbcpatientId")
                        .HasColumnType("int")
                        .HasColumnName("UBCPatientID");

                    b.Property<string>("UbcpatientStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UBCPatientStatus");

                    b.HasKey("PatientDailyDiagnosisId");

                    b.HasIndex(new[] { "PatientId", "ArupaccessionNumber" }, "IX_PDD_Patient_ARUP");

                    b.ToTable("Biomarin_PatientDailyDiagnosis", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinPatientDailyDiagnosisAuditLog", b =>
                {
                    b.Property<int>("PatientDailyDiagnosisAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientDailyDiagnosis_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientDailyDiagnosisAuditLogId"));

                    b.Property<long?>("ArupaccessionNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("ARUPAccessionNumber");

                    b.Property<DateOnly?>("CollectionDate")
                        .HasColumnType("date");

                    b.Property<string>("CollectionTime")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EnhancedReportPdf")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EnhancedReportPDF");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientDailyDiagnosisId")
                        .HasColumnType("int")
                        .HasColumnName("PatientDailyDiagnosisID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianInstitutionCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianInstitutionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianInstitutionPostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhysicianInstitutionState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("ResultVerificationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StatusDate")
                        .HasColumnType("date");

                    b.Property<string>("TestResult")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("UbcpatientId")
                        .HasColumnType("int")
                        .HasColumnName("UBCPatientID");

                    b.Property<string>("UbcpatientStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UBCPatientStatus");

                    b.HasKey("PatientDailyDiagnosisAuditLogId")
                        .HasName("PK__PatientD__3AC9B073FB3628C7");

                    b.ToTable("Biomarin_PatientDailyDiagnosis_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinPatientRem", b =>
                {
                    b.Property<string>("PatientRemsid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PatientREMSID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PatientBirthDate")
                        .HasColumnType("date");

                    b.Property<string>("PatientCity")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientRemsstatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PatientREMSStatus");

                    b.Property<string>("PatientState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PatientZip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PdrfileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PDRFileName");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("RemsstatusDate")
                        .HasColumnType("date")
                        .HasColumnName("REMSStatusDate");

                    b.HasKey("PatientRemsid");

                    b.ToTable("Biomarin_PatientREMS", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinPrescriberRem", b =>
                {
                    b.Property<string>("PrescriberRemsid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PrescriberREMSID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PrdrfileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRDRFileName");

                    b.Property<string>("PrescriberCity")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PrescriberFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberNpi")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PrescriberNPI");

                    b.Property<string>("PrescriberRemsstatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PrescriberREMSStatus");

                    b.Property<string>("PrescriberState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PrescriberZip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("RemsstatusDate")
                        .HasColumnType("date")
                        .HasColumnName("REMSStatusDate");

                    b.HasKey("PrescriberRemsid");

                    b.ToTable("Biomarin_PrescriberREMS", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinRosterStage", b =>
                {
                    b.Property<int>("RosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Roster_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RosterId"));

                    b.Property<string>("AssignmentCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Assignment_Code");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EffectiveDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("First")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Last")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Moblie")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Program")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RegionID");

                    b.Property<string>("RegionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RosterId");

                    b.ToTable("Biomarin_Roster_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BiomarinZipToTerrStage", b =>
                {
                    b.Property<int>("ZipTerrStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZipTerrStageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZipTerrStageId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Program")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zip");

                    b.HasKey("ZipTerrStageId");

                    b.ToTable("Biomarin_ZipToTerr_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCycle", b =>
                {
                    b.Property<int>("CareCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareCycleId"));

                    b.Property<DateTime?>("CareCycleEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CareCycleEndedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CareCycleStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CareCycleStartedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CareCycleState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CareCycleStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("CareCycleTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Custom1FieldLabel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Custom1_FieldLabel");

                    b.Property<string>("Custom1FieldValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Custom1_FieldValue");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("DrugStartDate")
                        .HasColumnType("date");

                    b.Property<string>("DrugTherapy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LegacyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LegacyID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("OrganizationLocationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationLocationID");

                    b.Property<DateOnly?>("PatientHasGenericperCc")
                        .HasColumnType("date")
                        .HasColumnName("PatientHasGenericperCC");

                    b.Property<string>("PatientHubStatus")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime?>("PatientHubStatusDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientLocationID");

                    b.Property<string>("PatientOtherStatusType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientOtherStatusValue")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PatientSpstatus")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("PatientSPStatus");

                    b.Property<DateTime?>("PatientSpstatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PatientSPStatusDate");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("PhysicianLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianLocationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CareCycleId");

                    b.HasIndex(new[] { "ProgramId", "DrugTherapy" }, "ProgramIDTherapy");

                    b.ToTable("CareCycles", t =>
                        {
                            t.HasTrigger("CareCyclesTrigger_ExternalID");

                            t.HasTrigger("TR_Carecycle_Audit");

                            t.HasTrigger("tr_CareCycle_Insert_PatientLinks");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCycleOrganization", b =>
                {
                    b.Property<int>("CareCycleOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareCycleOrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareCycleOrganizationId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientOrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CareCycleOrganizationId")
                        .HasName("PK_CareCycleOrganizationID");

                    b.HasIndex(new[] { "ProgramId", "Active", "Deleted", "Rank" }, "programIDActiveDeletedRank");

                    b.ToTable("CareCycleOrganizations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCyclePhysician", b =>
                {
                    b.Property<int>("CareCyclePhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareCyclePhysicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareCyclePhysicianId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("OrganizationLocationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationLocationID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PatientPhysicianID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("PhysicianLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianLocationID");

                    b.Property<string>("PhysicianType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("CareCyclePhysicianId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex(new[] { "CareCycleId", "PhysicianId", "Rank", "Deleted" }, "IX_CareCycleID_PhysicianID_Rank_Deleted_Includes");

                    b.HasIndex(new[] { "ProgramId", "Rank", "Active", "Deleted" }, "ProgramIDRandActiveDeleted");

                    b.ToTable("CareCyclePhysicians");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCycleSchedule", b =>
                {
                    b.Property<int>("CareCycleScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareCycleScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareCycleScheduleId"));

                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FirstScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRepeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("NextScheduleDate")
                        .HasColumnType("date");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonForScheduleChange")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<DateTime?>("SchEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Sch_EndDate");

                    b.Property<int?>("SchEndOccurrence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Sch_EndOccurrence");

                    b.Property<int?>("SchInterval")
                        .HasColumnType("int")
                        .HasColumnName("Sch_Interval");

                    b.Property<string>("SchMonthOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_MonthOption");

                    b.Property<string>("SchRepeatEnd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_RepeatEnd");

                    b.Property<string>("SchRepeatSubType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Sch_RepeatSubType");

                    b.Property<string>("SchRepeatType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_RepeatType");

                    b.Property<string>("SchWeekDayOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_WeekDayOption");

                    b.Property<string>("SrsubType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRSubType");

                    b.Property<string>("Srtype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRType");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Summary")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("CareCycleScheduleId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "ProgramIDInclude");

                    b.ToTable("CareCycleSchedule", null, t =>
                        {
                            t.HasTrigger("TR_CareCycleSchedule_Audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCycleScheduleAudit", b =>
                {
                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<int>("CareCycleScheduleAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareCycleSchedule_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareCycleScheduleAuditId"));

                    b.Property<int?>("CareCycleScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleScheduleID");

                    b.Property<string>("ChangeAction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Change_Action");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_log");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FirstScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRepeat")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("NextScheduleDate")
                        .HasColumnType("date");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonForScheduleChange")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<DateTime?>("SchEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Sch_EndDate");

                    b.Property<int?>("SchEndOccurrence")
                        .HasColumnType("int")
                        .HasColumnName("Sch_EndOccurrence");

                    b.Property<int?>("SchInterval")
                        .HasColumnType("int")
                        .HasColumnName("Sch_Interval");

                    b.Property<string>("SchMonthOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_MonthOption");

                    b.Property<string>("SchRepeatEnd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_RepeatEnd");

                    b.Property<string>("SchRepeatSubType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Sch_RepeatSubType");

                    b.Property<string>("SchRepeatType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_RepeatType");

                    b.Property<string>("SchWeekDayOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sch_WeekDayOption");

                    b.Property<string>("SrsubType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRSubType");

                    b.Property<string>("Srtype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRType");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Summary")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable("CareCycleSchedule_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCyclesAudit", b =>
                {
                    b.Property<DateTime?>("CareCycleEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CareCycleEndedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<DateTime?>("CareCycleStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CareCycleStartedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CareCycleState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CareCycleStatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("CareCycleTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CareCyclesAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CareCycles_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareCyclesAuditId"));

                    b.Property<string>("ChangeAction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Change_Action");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_log");

                    b.Property<string>("Custom1FieldLabel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Custom1_FieldLabel");

                    b.Property<string>("Custom1FieldValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Custom1_FieldValue");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugTherapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LegacyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LegacyID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("OrganizationLocationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationLocationID");

                    b.Property<string>("PatientHubStatus")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime?>("PatientHubStatusDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientLocationID");

                    b.Property<string>("PatientOtherStatusType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientOtherStatusValue")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PatientSpstatus")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("PatientSPStatus");

                    b.Property<DateTime?>("PatientSpstatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PatientSPStatusDate");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("PhysicianLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianLocationID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Source")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable("CareCycles_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareMetXDirSalesWProfId", b =>
                {
                    b.Property<string>("BankInsurNbr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Bank_Insur_Nbr");

                    b.Property<string>("DaysSup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Days_Sup");

                    b.Property<string>("DiagCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Diag_Code");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Drug_Name");

                    b.Property<string>("FillNbr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fill_Nbr");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("GrpNbr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Grp_Nbr");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("MedPlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Med_Plan_Name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MIDDLE_NAME");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<string>("Npinum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPINUM");

                    b.Property<string>("OrderNbr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Order_Nbr");

                    b.Property<string>("PatientCopay")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Patient_Copay");

                    b.Property<string>("PatientYearOfBirth")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Patient_Year_of_Birth");

                    b.Property<string>("PbmName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBM_Name");

                    b.Property<string>("PrimaryAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_ADDRESS1");

                    b.Property<string>("PrimaryAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_ADDRESS2");

                    b.Property<string>("PrimaryCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_CITY");

                    b.Property<string>("PrimaryLocationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_LOCATION_ID");

                    b.Property<string>("PrimaryState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_STATE");

                    b.Property<string>("PrimaryZip5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_ZIP5");

                    b.Property<string>("ProcCtrlNbr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Proc_Ctrl_Nbr");

                    b.Property<string>("ProfId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PROF_ID");

                    b.Property<string>("ProviderAddr1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_Addr1");

                    b.Property<string>("ProviderAddr2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_Addr2");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_City");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_First_Name");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_ID");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_Last_Name");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_NPI");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_State");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Provider_Zip");

                    b.Property<string>("Qty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReferredBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Referred_By");

                    b.Property<string>("RefillsRemain")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Refills_Remain");

                    b.Property<string>("ShipDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Ship_Date");

                    b.Property<string>("SpId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SP_ID");

                    b.Property<string>("SpPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SP_Patient_ID");

                    b.Property<string>("SpProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SP_Provider_ID");

                    b.Property<string>("TerrId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Terr_ID");

                    b.Property<string>("TransId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Trans_ID");

                    b.Property<string>("TransType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Trans_Type");

                    b.ToTable("CareMetX_Dir_Sales_wProf_IDs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseEnrollment", b =>
                {
                    b.Property<int>("CaseEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseEnrollmentId"));

                    b.Property<int>("CaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CaseRecordID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("PatientEnrollmentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("CaseEnrollmentId");

                    b.ToTable("CaseEnrollment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseJourneyByDrug", b =>
                {
                    b.Property<int>("CaseJourneyByDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseJourneyByDrugID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseJourneyByDrugId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<bool>("HappyPath")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MileStoneId")
                        .HasColumnType("int")
                        .HasColumnName("MileStoneID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CaseJourneyByDrugId")
                        .HasName("DF_CaseJourneyByDrug_CaseJourneyByDrugID_PK_N");

                    b.ToTable("CaseJourneyByDrug", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseJourneyCloserRulesSetting", b =>
                {
                    b.Property<int>("CaseJourneyCloserRuleSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseJourneyCloserRuleSettingId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CaseJourneyState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ServiceRequestResolution")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ServiceRequestTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CaseJourneyCloserRuleSettingId")
                        .HasName("PK__CaseJour__3B17BC73AC29B4FB");

                    b.ToTable("CaseJourneyCloserRulesSetting", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseManagerByRegion", b =>
                {
                    b.Property<int>("CaseManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseManagerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseManagerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CaseManagerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaseManagerLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaseManagerMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CaseManagerId");

                    b.ToTable("CaseManager_ByRegion", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseRecord", b =>
                {
                    b.Property<int>("CaseRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseRecordId"));

                    b.Property<bool>("CaseClosed")
                        .HasColumnType("bit");

                    b.Property<string>("CaseClosureReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CaseDrugName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CaseIntakeId")
                        .HasColumnType("int")
                        .HasColumnName("CaseIntakeID");

                    b.Property<string>("CaseSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CaseStartTrigger")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("CaseRecordId")
                        .HasName("PK__CaseRecord_CaseRecordID_N");

                    b.ToTable("CaseRecord", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseRecordTransaction", b =>
                {
                    b.Property<int>("CaseRecordTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaseRecordTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseRecordTransactionId"));

                    b.Property<string>("CaseFlowStep")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaseMileStone")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CaseRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CaseRecordID");

                    b.Property<int>("CaseTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("CaseTransactionID");

                    b.Property<bool>("CaseTransactionState")
                        .HasColumnType("bit");

                    b.Property<string>("CaseTransactionStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CaseTransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CaseRecordTransactionId")
                        .HasName("DF_CaseRecordTransaction_N_TransactionID_PK");

                    b.HasIndex("CaseRecordId");

                    b.ToTable("CaseRecordTransaction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaystonProcessActivityMapping", b =>
                {
                    b.Property<string>("Activity")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ProcessDate")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("process date");

                    b.ToTable("Cayston_ProcessActivityMapping", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaystonStagingPatientReferral", b =>
                {
                    b.Property<int>("PatientReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientReferralID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientReferralId"));

                    b.Property<string>("CfcareCenterAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterAddress1");

                    b.Property<string>("CfcareCenterAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterAddress2");

                    b.Property<string>("CfcareCenterCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterCity");

                    b.Property<string>("CfcareCenterId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CFCareCenterID");

                    b.Property<string>("CfcareCenterName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterName");

                    b.Property<string>("CfcareCenterPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterPhone");

                    b.Property<string>("CfcareCenterState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterState");

                    b.Property<string>("CfcareCenterZip")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CFCareCenterZip");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatingSp")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CreatingSP");

                    b.Property<string>("CreatingSpid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatingSPID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DuplicatePatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DuplicatePatientID");

                    b.Property<string>("Icd9code")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ICD9Code");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsNewCfcareCenter")
                        .HasColumnType("bit")
                        .HasColumnName("isNewCFCareCenter");

                    b.Property<bool?>("IsNewProvider")
                        .HasColumnType("bit")
                        .HasColumnName("isNewProvider");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Pafdocument")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PAFDocument");

                    b.Property<string>("PrimaryInsuranceCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryInsuranceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryInsurancePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryInsuranceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProviderID");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecordStatusReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PatientReferralId");

                    b.HasIndex(new[] { "ProgramId", "DuplicatePatientId" }, "IX_Cayston_Staging_Patient_Referral_ProgramID_DuplicatePatientID");

                    b.ToTable("Cayston_Staging_Patient_Referral", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CfIssueSubType", b =>
                {
                    b.Property<int>("CfIssueSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CF_IssueSubTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CfIssueSubTypeId"));

                    b.Property<int?>("CfIssueTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CF_IssueTypeID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("IssueSubTypeFullDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IssueSubTypeShortDesc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CfIssueSubTypeId")
                        .HasName("PK__CF_Issue__FD27DB90F6DC3F13");

                    b.HasIndex("CfIssueTypeId");

                    b.ToTable("CF_IssueSubType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CfIssueType", b =>
                {
                    b.Property<int>("CfIssueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CF_IssueTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CfIssueTypeId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("IssueTypeFullDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IssueTypeShortDesc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SrTypeList")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SR_TypeList");

                    b.HasKey("CfIssueTypeId")
                        .HasName("PK__CF_Issue__2756E855FDFB3D0E");

                    b.ToTable("CF_IssueType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CheckInsuranceResult", b =>
                {
                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.ToTable("CheckInsuranceResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ClaimsViewAuditLog", b =>
                {
                    b.Property<int>("ViewLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ViewLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewLogId"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int")
                        .HasColumnName("ClaimID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("ViewSource")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ViewLogId")
                        .HasName("PK_ClaimsViewAuditLog1");

                    b.ToTable("ClaimsViewAuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CmmstatusMailService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CmmOutcome")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CmmStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RequestID");

                    b.Property<bool>("SendFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CMMStatusMailService", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoherusEmployeesStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Active_End_Date");

                    b.Property<string>("ActiveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Active_Start_Date");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Address_Line_1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Address_Line_2");

                    b.Property<string>("BusinessUnit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Created")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("DepartmentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Department_Number");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsActive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Is_Active");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipExtension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ZIP_Extension");

                    b.HasKey("Id")
                        .HasName("PK_Coherus_Employees");

                    b.ToTable("Coherus_Employees_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoherusGroupAssignmentStage", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_ID");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PrimaryRepresentative")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_REPRESENTATIVE");

                    b.Property<string>("PrimaryTerritory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRIMARY_TERRITORY");

                    b.Property<string>("RepAlignmentActive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REP_ALIGNMENT_ACTIVE");

                    b.Property<string>("RepAlignmentActiveEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REP_ALIGNMENT_ACTIVE_END_DATE");

                    b.Property<string>("RepAlignmentActiveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REP_ALIGNMENT_ACTIVE_START_DATE");

                    b.Property<string>("RepAlignmentAllocationPercent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REP_ALIGNMENT_ALLOCATION_PERCENT");

                    b.ToTable("Coherus_Group_Assignment_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoherusGroupGeoStage", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_ID");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IsActive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("RegionOrCounty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REGION_OR_COUNTY");

                    b.Property<string>("SalesTeamActiveEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SALES_TEAM_ACTIVE_END_DATE");

                    b.Property<string>("SalesTeamActiveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SALES_TEAM_ACTIVE_START_DATE");

                    b.Property<string>("SalesTeamName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SALES_TEAM_NAME");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATE_OR_PROVINCE");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ZIP");

                    b.Property<string>("ZipAlignmtActiveEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ZIP_ALIGNMT_ACTIVE_END_DATE");

                    b.Property<string>("ZipAlignmtActiveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ZIP_ALIGNMT_ACTIVE_START_DATE");

                    b.ToTable("Coherus_Group_Geo_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoherusGroupsStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessUnitActiveEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BUSINESS_UNIT_ACTIVE_END_DATE");

                    b.Property<string>("BusinessUnitActiveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BUSINESS_UNIT_ACTIVE_START_DATE");

                    b.Property<string>("BusinessUnitName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BUSINESS_UNIT_NAME");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("GroupLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_LEVEL");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<string>("GroupType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_TYPE");

                    b.Property<string>("ParentGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PARENT_GROUP_ID");

                    b.Property<string>("SalesTeamName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SALES_TEAM_NAME");

                    b.Property<string>("TerrActiveEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TERR_ACTIVE_END_DATE");

                    b.Property<string>("TerrActiveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TERR_ACTIVE_START_DATE");

                    b.HasKey("Id");

                    b.ToTable("Coherus_Groups_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoherusRosterStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlignmentCodeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssignmentEnd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssignmentStart")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field7")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field8")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field9")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepLogin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepMiddleInitial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Coherus_Roster_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoherusZipTerrStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ZIP");

                    b.HasKey("Id");

                    b.ToTable("Coherus_ZipTerr_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Communication", b =>
                {
                    b.Property<int>("CommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommunicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CommunicationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("PortalUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Portal_UserID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusComments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("CommunicationId");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectFedexAddressVerification", b =>
                {
                    b.Property<long>("ConnectFedexAddressVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ConnectFedexAddressVerificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConnectFedexAddressVerificationId"));

                    b.Property<string>("Classification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("ConnectFedexApirequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("ConnectFedexAPIRequestID");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit");

                    b.Property<long>("MailingId")
                        .HasColumnType("bigint")
                        .HasColumnName("MailingID");

                    b.Property<string>("NotificationCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NotificationMessage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NotificationSeverity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotificationSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedBuilding")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedHouseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedLeadingDirectional")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedOrganization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedPobox")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ParsedPOBox");

                    b.Property<string>("ParsedPreStreetType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedRuralRoute")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedStreetName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedStreetSuffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedTrailingDirectional")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedUnitLabel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedUnitNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedZipCodeAddOn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParsedZipCodeBase")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ReplyDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestAddress")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("RequestCity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("RequestCountry")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("RequestState")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("RequestZipCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValue("");

                    b.Property<string>("ResponseAddress")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("ResponseCity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResponseCountry")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResponseState")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("ResponseZipCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValue("");

                    b.Property<string>("ResultAddressLine1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResultAddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResultAddressState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResultCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResultPostalCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ResultState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("UpdatedByID");

                    b.Property<DateTime>("UpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ConnectFedexAddressVerificationId")
                        .HasName("PK_SH_FedexAddressVerifications");

                    b.HasIndex("ConnectFedexApirequestId");

                    b.HasIndex("MailingId");

                    b.ToTable("ConnectFedexAddressVerifications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectFedexApierrorLog", b =>
                {
                    b.Property<long>("ConnectFedexApierrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ConnectFedexAPIErrorLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConnectFedexApierrorLogId"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ErrorLogIdkeysReturn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("ErrorLogIDKeysReturn");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ScreenName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<long>("UpdatedByIdkey")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedByIDKey");

                    b.Property<DateTime>("UpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ConnectFedexApierrorLogId")
                        .HasName("PK_ConnectFedexAPIErrorLog");

                    b.ToTable("ConnectFedexAPIErrorLogs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectFedexApirequest", b =>
                {
                    b.Property<long>("ConnectFedexApirequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ConnectFedexAPIRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConnectFedexApirequestId"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("");

                    b.Property<string>("ServiceUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasColumnName("ServiceURL");

                    b.Property<string>("SourceHostName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("SourceIpaddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("")
                        .HasColumnName("SourceIPAddress");

                    b.Property<DateTime>("UpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UpdatedId")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedID");

                    b.HasKey("ConnectFedexApirequestId")
                        .HasName("Pk_ConnectFedexAPIRequest_ConnectFedexAPIRequestIDKey");

                    b.ToTable("ConnectFedexAPIRequests", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectModularDocTransaction", b =>
                {
                    b.Property<int>("ConnectModularDocTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConnectModularDocTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectModularDocTransactionId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int?>("EbvModularTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("EBvModularTransactionID");

                    b.Property<bool>("IsDocumentGenerated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SelectedDrugNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SelectedDrugNDC");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("ConnectModularDocTransactionId")
                        .HasName("PK__ConnectM__DF49C1974CFC3802");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EbvModularTransactionId");

                    b.ToTable("ConnectModularDocTransaction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectPayerMap", b =>
                {
                    b.Property<int>("ConnectPayerMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConnectPayerMapID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectPayerMapId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ClientPayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConnectDefaultPayer")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("ConnectPayerId")
                        .HasColumnType("int")
                        .HasColumnName("ConnectPayerID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EBvpayerId")
                        .HasColumnType("int")
                        .HasColumnName("eBVPayerID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OfframpClientId")
                        .HasColumnType("int")
                        .HasColumnName("OfframpClientID");

                    b.HasKey("ConnectPayerMapId");

                    b.HasIndex("OfframpClientId");

                    b.ToTable("ConnectPayerMap", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectiveRxApilog", b =>
                {
                    b.Property<int>("ConnectiveRxApilogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConnectiveRxAPILogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectiveRxApilogId"));

                    b.Property<string>("Apirequest")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("APIRequest");

                    b.Property<string>("Apiresponse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("APIResponse");

                    b.Property<string>("Apitype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("APIType");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConnectiveRxApilogId");

                    b.ToTable("ConnectiveRxAPILog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ContactCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int?>("MasterContactId")
                        .HasColumnType("int")
                        .HasColumnName("MasterContactID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ContactId");

                    b.HasIndex("ProgramId");

                    b.HasIndex(new[] { "Deleted" }, "Deleted_Includes");

                    b.ToTable("Contacts", t =>
                        {
                            t.HasTrigger("Tr_Contacts_Audit_Delete");

                            t.HasTrigger("Tr_Contacts_Audit_Insert");

                            t.HasTrigger("Tr_Contacts_Audit_Update");

                            t.HasTrigger("Tr_Contacts_Whitelist_Insert");

                            t.HasTrigger("Tr_Contacts_Whitelist_Update");

                            t.HasTrigger("Tr_Contacts_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_Contacts_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactAddress", b =>
                {
                    b.Property<int>("ContactAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<bool>("FedexAddressVerifiedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("ContactAddressId");

                    b.HasIndex(new[] { "ContactId" }, "ContactID");

                    b.HasIndex(new[] { "Zip" }, "Zipcode");

                    b.ToTable("ContactAddresses", t =>
                        {
                            t.HasTrigger("Tr_ContactAddresses_Audit_Delete");

                            t.HasTrigger("Tr_ContactAddresses_Audit_Insert");

                            t.HasTrigger("Tr_ContactAddresses_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactAddressesAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ContactAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ContactAddressID");

                    b.Property<int>("ContactAddressesAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactAddresses_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactAddressesAuditId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<bool>("FedexAddressVerifiedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.ToTable("ContactAddresses_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactDynamicDatum", b =>
                {
                    b.Property<int>("ContactDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ContactDynamicDataId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DynamicDataListId");

                    b.ToTable("ContactDynamicData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactLicense", b =>
                {
                    b.Property<int>("ContactLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactLicenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactLicenseId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ContactLicenseId");

                    b.ToTable("ContactLicenses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactNote", b =>
                {
                    b.Property<int>("ContactNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactNoteId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ContactNoteId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactNotes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactOrganization", b =>
                {
                    b.Property<int>("ContactOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactOrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactOrganizationId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("ContactOrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "ContactId", "OrganizationId" }, "ContactID_OrganizationID");

                    b.ToTable("ContactOrganizations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactPhoneNumber", b =>
                {
                    b.Property<int>("ContactPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactPhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPhoneNumberId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OktoLeaveMsg")
                        .HasColumnType("bit")
                        .HasColumnName("OKtoLeaveMsg");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.HasKey("ContactPhoneNumberId");

                    b.HasIndex(new[] { "ProgramId", "ContactId", "Deleted" }, "ContactPhone");

                    b.HasIndex(new[] { "ContactId", "PhoneType", "Active", "Deleted" }, "IX_ContactID_PhoneType_Active_Deleted");

                    b.ToTable("ContactPhoneNumbers", t =>
                        {
                            t.HasTrigger("Tr_ContactPhoneNumbers_Audit_Insert");

                            t.HasTrigger("Tr_ContactPhoneNumbers_Audit_Update");

                            t.HasTrigger("Tr_ContactPhoneNumbers_Whitelist_Insert");

                            t.HasTrigger("Tr_ContactPhoneNumbers_Whitelist_Update");

                            t.HasTrigger("Tr_ContactPhoneNumbers_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_ContactPhoneNumbers_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactPhoneNumbersAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<int>("ContactPhoneNumberId")
                        .HasColumnType("int")
                        .HasColumnName("ContactPhoneNumberID");

                    b.Property<int>("ContactPhoneNumbersAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactPhoneNumbers_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPhoneNumbersAuditId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OktoLeaveMsg")
                        .HasColumnType("bit")
                        .HasColumnName("OKtoLeaveMsg");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.ToTable("ContactPhoneNumbers_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactPhysician", b =>
                {
                    b.Property<int>("ContactPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactPhysicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPhysicianId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Delegate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DelegateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Doneby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("ContactPhysicianId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex(new[] { "ProgramId", "ContactId" }, "IX_ContactPhysicians");

                    b.ToTable("ContactPhysicians", t =>
                        {
                            t.HasTrigger("ContactPhysicians_Insert");

                            t.HasTrigger("ContactPhysicians_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactPhysiciansAudit", b =>
                {
                    b.Property<int>("ContactPhysiciansAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactPhysicians_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPhysiciansAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<int?>("ContactPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("ContactPhysicianID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_Log");

                    b.Property<string>("CreatedbyLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Createdby_Log");

                    b.Property<bool?>("Delegate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DelegateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Doneby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("ContactPhysiciansAuditId");

                    b.ToTable("ContactPhysicians_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactProgram", b =>
                {
                    b.Property<int>("ContactProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactProgramId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SharedRecordProgramId")
                        .HasColumnType("int")
                        .HasColumnName("SharedRecordProgramID");

                    b.HasKey("ContactProgramId");

                    b.ToTable("ContactPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactsAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ContactCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("ContactType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ContactsAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Contacts_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactsAuditId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("EmailUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int?>("MasterContactId")
                        .HasColumnType("int")
                        .HasColumnName("MasterContactID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Contacts_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CopayAdjudication", b =>
                {
                    b.Property<int>("CopayAdjudicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Copay_Adjudication_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopayAdjudicationId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AckNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdjudicationResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdjudicationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("CopayAmt")
                        .HasColumnType("money");

                    b.Property<string>("CopayCardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DateofService")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<bool?>("IsTrialCard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<decimal?>("OutOfPocket")
                        .HasColumnType("money");

                    b.Property<int?>("ParentClaimId")
                        .HasColumnType("int");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PayorAmount")
                        .HasColumnType("money");

                    b.Property<string>("PrescriberNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ReasonRejectCode")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("Reversed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RxNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SiteOfService")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SpNpi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SP_NPI");

                    b.Property<string>("SpUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SP_UserName");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ThirdPartyPaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserIp")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("UserIP");

                    b.HasKey("CopayAdjudicationId");

                    b.ToTable("Copay_Adjudications", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CopayAdjudicationDenialReason", b =>
                {
                    b.Property<int>("CopayAdjudicationDenialReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Copay_Adjudication_DenialReason_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopayAdjudicationDenialReasonId"));

                    b.Property<int>("CopayAdjudicationId")
                        .HasColumnType("int")
                        .HasColumnName("Copay_Adjudication_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("CopayAdjudicationDenialReasonId");

                    b.ToTable("Copay_Adjudication_DenialReasons", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CopayInvoice", b =>
                {
                    b.Property<int>("CopayInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Copay_Invoice_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CopayInvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("CopayInvoiceId");

                    b.ToTable("Copay_Invoices", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CopayPskwredemption", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DateOfFill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DateProcessed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DateWritten")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Daw")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DAW");

                    b.Property<string>("DaySupply")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GroupNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Linenumber")
                        .HasColumnType("int");

                    b.Property<string>("MemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MemberID");

                    b.Property<string>("Nabp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NABP");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<string>("NewRefillCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("NumberOfRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherCoverageCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientBenefit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientCopayBeforeBenefitApplied")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientOop")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientOOP");

                    b.Property<string>("PharmacyTransactionFee")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhmAdd1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhmAdd2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhmCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhmName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhmState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhmZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyAdd1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyAdd2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyFn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhyFN");

                    b.Property<string>("PhyLn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhyLN");

                    b.Property<string>("PhyMi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhyMI");

                    b.Property<string>("PhyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyProfDesg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhySuffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rxnum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Spec1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Spec2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubmissionMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RecordId");

                    b.ToTable("Copay_PSKWRedemption", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CornerStoneCfsShipment", b =>
                {
                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("DeaNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("dea no");

                    b.Property<string>("Descr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descr");

                    b.Property<double?>("DispDaysSupply")
                        .HasColumnType("float")
                        .HasColumnName("disp days supply");

                    b.Property<string>("DispNdc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("disp ndc");

                    b.Property<double?>("DispenseQty")
                        .HasColumnType("float")
                        .HasColumnName("dispense qty");

                    b.Property<string>("DrId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Dr ID");

                    b.Property<string>("DxCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DX Code");

                    b.Property<string>("Fname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fname");

                    b.Property<string>("HubSrfid")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Hub SRFID");

                    b.Property<string>("Lname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("lname");

                    b.Property<string>("NpiId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("npi id");

                    b.Property<string>("PatientId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Patient ID");

                    b.Property<decimal?>("PatientPayPaid")
                        .HasColumnType("money")
                        .HasColumnName("patient pay paid");

                    b.Property<decimal?>("PertzyeCopayCardAmt")
                        .HasColumnType("money")
                        .HasColumnName("Pertzye Copay Card Amt");

                    b.Property<int>("Recordid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recordid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Recordid"));

                    b.Property<string>("ShipDate")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ship Date");

                    b.Property<string>("StateCd")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("state cd");

                    b.Property<string>("Zip")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("zip");

                    b.ToTable("CornerStone_CFS_Shipments", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CountriesList", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdated")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CountryId")
                        .HasName("PK_Countries");

                    b.ToTable("CountriesList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CountryList", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryCallingCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("CountryList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoveredCounty", b =>
                {
                    b.Property<int>("CoveredCountiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoveredCountiesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoveredCountiesId"));

                    b.Property<int?>("ConatctId")
                        .HasColumnType("int")
                        .HasColumnName("ConatctID");

                    b.Property<string>("CoveredCounty1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CoveredCounty");

                    b.Property<string>("CoveredCountyState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int")
                        .HasColumnName("OrgID");

                    b.HasKey("CoveredCountiesId");

                    b.HasIndex("ConatctId");

                    b.HasIndex("OrgId");

                    b.ToTable("CoveredCounties");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbAspnetApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("crossdb_aspnet_Applications", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbAspnetMembership", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobilePin")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("MobilePIN");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("int");

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("crossdb_aspnet_Membership", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbAspnetUser", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobileAlias")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("crossdb_aspnet_Users", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalAccount", b =>
                {
                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("CareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxRecordID");

                    b.Property<string>("CareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalAccounts", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalAccountProgram", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("CareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxRecordID");

                    b.Property<string>("CareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalAccountPrograms", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalClient", b =>
                {
                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientLogo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CssoverrideFile")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CSSOverrideFile");

                    b.Property<string>("DomainUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("DomainURL");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeaderLogo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PortalClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalClientID");

                    b.Property<int>("PortalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PortalTypeID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalClient", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalClientDrug", b =>
                {
                    b.Property<int>("CareMetxDrugId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxDrugID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PortalClientDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalClientDrugID");

                    b.Property<int>("PortalClientId")
                        .HasColumnType("int")
                        .HasColumnName("PortalClientID");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalClientDrug", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalUser", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxRecordID");

                    b.Property<string>("CareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PortalUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Portal_UserID");

                    b.Property<string>("ReviewOutcome")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Reviewed")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalUsers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalUserAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActiveChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActiveChangedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxRecordID");

                    b.Property<string>("CareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalUserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalUserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalUserAccounts", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbPortalUserApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("CareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxRecordID");

                    b.Property<string>("CareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("crossdb_PortalUserApplication", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrossdbUspsZipCoordinate", b =>
                {
                    b.Property<string>("AreaCode")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("CityName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("CityType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("CountyFips")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CountyFIPS");

                    b.Property<string>("CountyName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dst")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DST");

                    b.Property<byte[]>("GeoLoc")
                        .HasColumnType("image");

                    b.Property<bool?>("IsUrban")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(9, 6)");

                    b.Property<string>("Msacode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("MSACode");

                    b.Property<string>("StateAbbrev")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StateFips")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("StateFIPS");

                    b.Property<string>("StateName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<decimal?>("Utc")
                        .HasColumnType("numeric(3, 1)")
                        .HasColumnName("UTC");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ZipType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("ZpCrdntId")
                        .HasColumnType("int")
                        .HasColumnName("ZpCrdnt_Id");

                    b.ToTable((string)null);

                    b.ToView("crossdb_USPS_ZipCoordinates", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrushFileLog", b =>
                {
                    b.Property<long>("SftpLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SFTP_LOG_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SftpLogId"));

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileSizeBytes")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LogDateTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("LogRowNum")
                        .HasColumnType("bigint")
                        .HasColumnName("LOG_ROW_NUM");

                    b.Property<string>("Sftpoperation")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SFTPOperation");

                    b.Property<string>("SftpuserIp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SFTPUserIP");

                    b.Property<string>("SftpuserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SFTPUserName");

                    b.HasKey("SftpLogId")
                        .HasName("PK_SFTP_LOG");

                    b.ToTable("CRUSH_FILE_LOG", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CrushftpLog", b =>
                {
                    b.Property<long>("LogRowNum")
                        .HasColumnType("bigint")
                        .HasColumnName("LOG_ROW_NUM");

                    b.Property<string>("LogData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOG_DATA");

                    b.Property<long?>("LogMillis")
                        .HasColumnType("bigint")
                        .HasColumnName("LOG_MILLIS");

                    b.Property<string>("LogTag")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOG_TAG");

                    b.HasKey("LogRowNum");

                    b.ToTable("CRUSHFTP_LOG", null, t =>
                        {
                            t.HasTrigger("tr_CrushFTP_Log_Insert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Customer", b =>
                {
                    b.Property<string>("Customername")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customername");

                    b.Property<int?>("Idcustomer")
                        .HasColumnType("int")
                        .HasColumnName("idcustomer");

                    b.Property<int?>("Idusstate")
                        .HasColumnType("int")
                        .HasColumnName("idusstate");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CustomerState", b =>
                {
                    b.Property<int?>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("idState");

                    b.Property<string>("LabelState")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.ToTable("CustomerState", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DailyStatusChange", b =>
                {
                    b.Property<int>("DailyStatusChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DailyStatusChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyStatusChangeId"));

                    b.Property<string>("Acnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ACNumber");

                    b.Property<string>("CertificationNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateOnly?>("ChangeDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DateofContact")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fnrptype")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FNRPType");

                    b.Property<string>("FrpcategoryChange")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FRPCategoryChange");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PersonContacted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberAddressLine1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberAddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberChange")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("PrescriberCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberNpi")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PrescriberNPI");

                    b.Property<string>("PrescriberState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PrescriberZip")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("PrescriberZIP");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Spname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPName");

                    b.Property<string>("SppatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPPatientID");

                    b.Property<string>("TitleofPersonContacted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DailyStatusChangeId");

                    b.ToTable("DailyStatusChanges");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DashboardPanelList", b =>
                {
                    b.Property<int>("DashboardPanelListId")
                        .HasColumnType("int")
                        .HasColumnName("DashboardPanelListID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Panel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PanelType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Table");

                    b.HasKey("DashboardPanelListId");

                    b.ToTable("DashboardPanelList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DashboardPanelProgram", b =>
                {
                    b.Property<int>("DashboardPaneProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DashboardPaneProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashboardPaneProgramId"));

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("AuthRefreshDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("BlockFrom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DashboardPanelListId")
                        .HasColumnType("int")
                        .HasColumnName("DashboardPanelListID");

                    b.Property<bool?>("NewUserDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PanelType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.HasKey("DashboardPaneProgramId");

                    b.HasIndex("DashboardPanelListId");

                    b.HasIndex("ProgramId");

                    b.ToTable("DashboardPanelPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DashboardPanelUserSetting", b =>
                {
                    b.Property<int>("DashboardPanelUserSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DashboardPanelUserSettingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashboardPanelUserSettingId"));

                    b.Property<bool?>("AutoRefresh")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DashboardPanelListId")
                        .HasColumnType("int")
                        .HasColumnName("DashboardPanelListID");

                    b.Property<string>("DefaultDisplayMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Show");

                    b.Property<string>("Height")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PanelType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("table");

                    b.Property<string>("Position")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("L");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<double?>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Width")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DashboardPanelUserSettingId");

                    b.HasIndex("DashboardPanelListId");

                    b.HasIndex("ProgramId");

                    b.ToTable("DashboardPanelUserSettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DataConfiguration", b =>
                {
                    b.Property<int>("DataConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataConfigurationId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DataDictionaryId")
                        .HasColumnType("int")
                        .HasColumnName("DataDictionaryID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DynamicLookUpId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicLookUpID");

                    b.Property<string>("DynamicLookUpTableName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("HideField")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("ReferralField")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequiredforSrclose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("RequiredforSRClose");

                    b.Property<bool?>("RequiredforSrcreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("RequiredforSRCreation");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<bool?>("SrMissingInfo")
                        .HasColumnType("bit")
                        .HasColumnName("SR_MissingInfo");

                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("DataConfigurationId");

                    b.HasIndex("DataDictionaryId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SrTypeListId");

                    b.ToTable("DataConfiguration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DataDictionary", b =>
                {
                    b.Property<int>("DataDictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DataDictionaryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataDictionaryId"));

                    b.Property<string>("DataArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("EnableHideCheckBox")
                        .HasColumnType("bit");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldStorageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FlagToDisplay")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ReferralField")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequiredforSrclose")
                        .HasColumnType("bit")
                        .HasColumnName("RequiredforSRClose");

                    b.Property<bool?>("RequiredforSrcreation")
                        .HasColumnType("bit")
                        .HasColumnName("RequiredforSRCreation");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tooltip")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("DataDictionaryId")
                        .HasName("PK_Table_1");

                    b.ToTable("DataDictionary", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Databasechangelog", b =>
                {
                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("AUTHOR");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("Contexts")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CONTEXTS");

                    b.Property<DateTime>("Dateexecuted")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("DATEEXECUTED");

                    b.Property<string>("DeploymentId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("DEPLOYMENT_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Exectype")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("EXECTYPE");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FILENAME");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ID");

                    b.Property<string>("Labels")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LABELS");

                    b.Property<string>("Liquibase")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LIQUIBASE");

                    b.Property<string>("Md5sum")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnName("MD5SUM");

                    b.Property<int>("Orderexecuted")
                        .HasColumnType("int")
                        .HasColumnName("ORDEREXECUTED");

                    b.Property<string>("Tag")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TAG");

                    b.ToTable("DATABASECHANGELOG", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Databasechangeloglock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit")
                        .HasColumnName("LOCKED");

                    b.Property<string>("Lockedby")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LOCKEDBY");

                    b.Property<DateTime?>("Lockgranted")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("LOCKGRANTED");

                    b.HasKey("Id");

                    b.ToTable("DATABASECHANGELOGLOCK", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Databasechangestatus", b =>
                {
                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ID");

                    b.Property<int?>("RecordCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Pkid");

                    b.HasIndex(new[] { "Id" }, "Idx_DATABASECHANGESTATUS_ID");

                    b.HasIndex(new[] { "Status" }, "Idx_DATABASECHANGESTATUS_Status");

                    b.ToTable("DATABASECHANGESTATUS", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Databasechangestreleasebranch", b =>
                {
                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<string>("ConnectVersion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dbname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DBName");

                    b.Property<string>("FolderName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LiquibaseVersion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PathName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Pkid");

                    b.ToTable("DATABASECHANGESTRELEASEBRANCH", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DateWorkDay", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("WorkDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Date")
                        .HasName("PK__Date_Wor__77387D06695412AE");

                    b.ToTable("Date_WorkDay", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DboVwGetPatientRecentAddress", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.ToTable((string)null);

                    b.ToView("dbo.vw_GetPatientRecentAddress", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DemoSraccountAddress", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int>("AccountAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("AccountId")
                        .HasName("PK_DemoAccountID");

                    b.ToTable("Demo_SRAccountAddresses", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfAutomaticTaskLog", b =>
                {
                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DfAutomaticTaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_AutomaticTaskLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfAutomaticTaskLogId"));

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RuleName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RuleTriggerConditionId")
                        .HasColumnType("int")
                        .HasColumnName("RuleTriggerConditionID");

                    b.ToTable("DF_AutomaticTaskLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfAutomaticTaskRecord", b =>
                {
                    b.Property<int>("DfAutomaticTaskRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_AutomaticTaskRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfAutomaticTaskRecordId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobRootPid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Job_rootPid");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RecordID");

                    b.Property<string>("RecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RuleTriggerActionId")
                        .HasColumnType("int")
                        .HasColumnName("RuleTriggerActionID");

                    b.Property<int?>("RuleTriggerConditionId")
                        .HasColumnType("int")
                        .HasColumnName("RuleTriggerConditionID");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DfAutomaticTaskRecordId");

                    b.ToTable("DF_AutomaticTaskRecords", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfCdc", b =>
                {
                    b.Property<int>("DfCdcid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_CDCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfCdcid"));

                    b.Property<string>("CheckSumVal")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("KeyValInt")
                        .HasColumnType("int");

                    b.Property<string>("KeyValStr")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Optout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ProcessName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("DfCdcid")
                        .HasName("PK_Table_DF_CDC");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "KeyValInt" }, "IX_KeyValueInt");

                    b.HasIndex(new[] { "ProgramId", "KeyValStr" }, "IX_KeyValueStr");

                    b.ToTable("DF_CDC", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfCustomSchedule", b =>
                {
                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CustomParam1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomParam2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DfCustomScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_CustomScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfCustomScheduleId"));

                    b.Property<int?>("DfJobId")
                        .HasColumnType("int")
                        .HasColumnName("DF_JobID");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.ToTable("DF_CustomSchedule", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfDataExtractMaxEntityId", b =>
                {
                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<int?>("ContactAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ContactAddressID");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswerID");

                    b.ToTable("DF_DataExtractMaxEntityID", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfEbvTracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<string>("AltCoverageReferral")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("ClientPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CopayCardProgram")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CptCode1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CptCode2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CptCode3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CptCode4")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CptCode5")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("DateOfService")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("InternalReference")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("MedicareId")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Mfg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MFG");

                    b.Property<DateOnly?>("NextScheduledDate")
                        .HasColumnType("date");

                    b.Property<string>("NoFaxingFlag")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("PatientSSN");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Policy1MemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy1PatientSubscriber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy1PayerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy1PayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("Policy1PriorAuthEffDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Policy1PriorAuthEndDate")
                        .HasColumnType("date");

                    b.Property<string>("Policy1PriorAuthNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy1PriorAuthOnFile")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy1PriorAuthmisc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy1PriorAuthtype")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<DateOnly?>("Policy1SubscriberDob")
                        .HasColumnType("date")
                        .HasColumnName("Policy1SubscriberDOB");

                    b.Property<string>("Policy1SubscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy1SubscriberGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Policy1SubscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy1SubscriberMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy2McSuppPlanLetter")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Policy2MemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy2PatientSubscriber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy2PayerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy2PayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("Policy2PriorAuthEffDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Policy2PriorAuthEndDate")
                        .HasColumnType("date");

                    b.Property<string>("Policy2PriorAuthMisc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy2PriorAuthNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy2PriorAuthType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Policy2PriorAuthonFile")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("Policy2SubscriberDob")
                        .HasColumnType("date")
                        .HasColumnName("Policy2SubscriberDOB");

                    b.Property<string>("Policy2SubscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy2SubscriberGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Policy2SubscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy2SubscriberMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy3MemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy3PatientSubscriber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy3PayerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy3PayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("Policy3PriorAuthEffDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Policy3PriorAuthEndDate")
                        .HasColumnType("date");

                    b.Property<string>("Policy3PriorAuthMisc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy3PriorAuthNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy3PriorAuthOnFile")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Policy3PriorAuthType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<DateOnly?>("Policy3SubscriberDob")
                        .HasColumnType("date")
                        .HasColumnName("Policy3SubscriberDOB");

                    b.Property<string>("Policy3SubscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy3SubscriberGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Policy3SubscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Policy3SubscriberMemberid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pos")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("POS");

                    b.Property<string>("PracticeAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PracticeAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PracticeCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PracticeContactFname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PracticeContactFName");

                    b.Property<string>("PracticeContactLname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PracticeContactLName");

                    b.Property<string>("PracticeFaxnumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PracticeNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PracticeNPI");

                    b.Property<string>("PracticeState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PracticeZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrimaryDiagnosis")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Product")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ProviderTaxId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProviderTitle")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("ResponseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("text");

                    b.Property<string>("ResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryDiagnosis")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SiteOfficeFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TertiaryDiagnosis")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TrackingId")
                        .HasName("pk_DF_EbvTracking");

                    b.ToTable("DF_EbvTracking", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfEmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailBody")
                        .HasColumnType("text");

                    b.Property<string>("EmailStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobRootPid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Job_root_pid");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<string>("RecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("Id");

                    b.ToTable("DF_EmailLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfField", b =>
                {
                    b.Property<int>("DfFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_FieldID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfFieldId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("DfFileId")
                        .HasColumnType("int")
                        .HasColumnName("DF_FileID");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FieldOrder")
                        .HasColumnType("int");

                    b.Property<string>("KeyType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mask")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Required")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("DfFieldId")
                        .HasName("PK_ExtracxtFieldID");

                    b.ToTable("DF_Fields", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfFile", b =>
                {
                    b.Property<int>("DfFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_FileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfFileId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("DbnameForFileData")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DBNameForFileData");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("DfJobId")
                        .HasColumnType("int")
                        .HasColumnName("DF_JobID");

                    b.Property<string>("FileMask")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("FileOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("Header")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("HeaderValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Query")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Separator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpjsonParameters")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SPJsonParameters");

                    b.Property<string>("StoredProc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DfFileId")
                        .HasName("PK_ExtracxtFileID");

                    b.ToTable("DF_Files", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfInboundFileError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorCategory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("1 – Not processed/not loaded");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ErrorText")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<string>("InputRow")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RawInputRow")
                        .HasColumnType("text");

                    b.Property<string>("RecordContent")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResolvedResolution")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowOnRpt")
                        .HasColumnType("bit");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DF_InboundFileErrors", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfInboundFileLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<string>("JobRootPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Job_root_pid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MaxLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfRecords")
                        .HasColumnType("int");

                    b.Property<string>("Partner")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<string>("Response")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ResponseFileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_InboundFileLog");

                    b.ToTable("DF_InboundFileLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfInboundRecordDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RawInputRow")
                        .HasColumnType("text");

                    b.Property<string>("RecordContent")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<string>("RecordId2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID2");

                    b.Property<string>("RecordId3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID3");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DF_InboundRecordDetails", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfJob", b =>
                {
                    b.Property<int>("DfJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_JobID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfJobId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("ControlFile")
                        .HasColumnType("bit");

                    b.Property<string>("ControlFileMask")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ControlHeaderValue")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ControlLayout")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("EncryptFiles")
                        .HasColumnType("bit");

                    b.Property<string>("FailureEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Incremental")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PgprecipientName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PGPRecipientName");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SuccessEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Zip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ZipFileMask")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("DfJobId")
                        .HasName("PK__DF_Extra__683EC43128BDF3FF");

                    b.ToTable("DF_Jobs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfJobAlert", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobRootPid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_root_pid");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Partner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RecordID");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("DF_JobAlerts", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfJobEx", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExePath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("JobType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastRunBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Partner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("Id");

                    b.ToTable("DF_JobExes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfOutboundFileError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ErrorText")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("Id");

                    b.ToTable("DF_OutboundFileErrors", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfOutboundFileLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<string>("JobRootPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Job_root_pid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfRecords")
                        .HasColumnType("int");

                    b.Property<string>("Partner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<string>("Response")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RunId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RunID");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_WDDatafeedFileLog");

                    b.ToTable("DF_OutboundFileLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfOutboundRecordDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordContent")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DF_OutboundRecordDetails", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfOutboundRecordTracking", b =>
                {
                    b.Property<int>("DfOutBoundRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_OutBoundRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfOutBoundRecordId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastSent")
                        .HasColumnType("datetime");

                    b.Property<string>("Partner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("RecordAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("RecordContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RecordID");

                    b.Property<string>("RecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryID");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DfOutBoundRecordId")
                        .HasName("PK_DF_OutBoundRecords");

                    b.ToTable("DF_OutboundRecordTracking", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfRecurringProcessError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ErrorText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<string>("InputRow")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordContent")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DF_RecurringProcessErrors", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfRecurringProcessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileID");

                    b.Property<string>("JobRootPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Job_root_pid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MaxLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfRecords")
                        .HasColumnType("int");

                    b.Property<string>("Partner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RecordID");

                    b.Property<string>("Response")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ResponseFileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_RecurringProcessLog");

                    b.ToTable("DF_RecurringProcessLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfSftp", b =>
                {
                    b.Property<int>("DfSftpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DF_SFTPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DfSftpid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DfJobId")
                        .HasColumnType("int")
                        .HasColumnName("DF_JobID");

                    b.Property<string>("FailureEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileMask")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Host")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsCmdLineSftp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsCmdLineSFTP");

                    b.Property<bool?>("IsOutboundSftp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsOutboundSFTP");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LocalFolder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Login")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Port")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RemoteFolder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SftpPassword")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SFTP_Password");

                    b.Property<string>("SftpSshkeyFileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTP_SSHKeyFileName");

                    b.Property<string>("SftpcmdLine")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SFTPCmdLine");

                    b.Property<string>("SftpscriptText")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("SFTPScriptText");

                    b.Property<string>("SuccessEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DfSftpid");

                    b.ToTable("DF_SFTP", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfTalendContext", b =>
                {
                    b.Property<int>("ContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContextID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContextId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ConfigId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ConfigID");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Environment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("ProjectName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VarName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ContextId")
                        .HasName("PK_Context");

                    b.ToTable("DF_TalendContext", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfVermedicaEbvtracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<string>("AltCoverageReferral")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("altCoverageReferral");

                    b.Property<string>("ClientPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clientPatientId");

                    b.Property<string>("CopayCardProgram")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("copayCardProgram");

                    b.Property<string>("CptCode1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cptCode1");

                    b.Property<string>("CptCode2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cptCode2");

                    b.Property<string>("CptCode3")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cptCode3");

                    b.Property<string>("CptCode4")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cptCode4");

                    b.Property<string>("CptCode5")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cptCode5");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DateOfService")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("dateOfService");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("InternalReference")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("internalReference");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("MedicareId")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("medicareId");

                    b.Property<string>("Mfg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mfg");

                    b.Property<string>("NextScheduledDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("nextScheduledDate");

                    b.Property<string>("NoFaxingFlag")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("noFaxingFlag");

                    b.Property<string>("PatientDob")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("patientDOB");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patientFirstName");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("patientGender");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patientLastName");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("patientSSN");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("patientZip");

                    b.Property<string>("Policy1policyMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy1policyMemberId");

                    b.Property<string>("Policy1policyPatientSubscriber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy1policyPatientSubscriber");

                    b.Property<string>("Policy1policyPayerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy1policyPayerId");

                    b.Property<string>("Policy1policyPayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("policy1policyPayerName");

                    b.Property<string>("Policy1subscriberDob")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy1subscriberDOB");

                    b.Property<string>("Policy1subscriberGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("policy1subscriberGender");

                    b.Property<string>("Policy1subscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy1subscriberLastName");

                    b.Property<string>("Policy1subscriberMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy1subscriberMemberId");

                    b.Property<string>("Policy1subscriberfirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy1subscriberfirstName");

                    b.Property<string>("Policy2mcSuppPlanLetter")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("policy2mcSuppPlanLetter");

                    b.Property<string>("Policy2policyMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy2policyMemberId");

                    b.Property<string>("Policy2policyPatientSubscriber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy2policyPatientSubscriber");

                    b.Property<string>("Policy2policyPayerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy2policyPayerId");

                    b.Property<string>("Policy2policyPayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Policy2subscriberDob")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy2subscriberDOB");

                    b.Property<string>("Policy2subscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy2subscriberFirstName");

                    b.Property<string>("Policy2subscriberGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("policy2subscriberGender");

                    b.Property<string>("Policy2subscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy2subscriberLastName");

                    b.Property<string>("Policy2subscriberMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy2subscriberMemberId");

                    b.Property<string>("Policy3policyMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy3policyMemberId");

                    b.Property<string>("Policy3policyPatientSubscriber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy3policyPatientSubscriber");

                    b.Property<string>("Policy3policyPayerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy3policyPayerId");

                    b.Property<string>("Policy3policyPayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Policy3subscriberDob")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("policy3subscriberDOB");

                    b.Property<string>("Policy3subscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy3subscriberFirstName");

                    b.Property<string>("Policy3subscriberGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("policy3subscriberGender");

                    b.Property<string>("Policy3subscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy3subscriberLastName");

                    b.Property<string>("Policy3subscriberMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("policy3subscriberMemberId");

                    b.Property<string>("Pos")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("pos");

                    b.Property<string>("PracticeAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("practiceAddress1");

                    b.Property<string>("PracticeAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("practiceAddress2");

                    b.Property<string>("PracticeCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("practiceCity");

                    b.Property<string>("PracticeContactFname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("practiceContactFName");

                    b.Property<string>("PracticeContactLname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("practiceContactLName");

                    b.Property<string>("PracticeFaxNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("practiceFaxNumber");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("practiceName");

                    b.Property<string>("PracticeNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("practiceNPI");

                    b.Property<string>("PracticeState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("practiceState");

                    b.Property<string>("PracticeZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("practiceZip");

                    b.Property<string>("PrimaryDiagnosis")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("primaryDiagnosis");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Product")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("product");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("providerFirstName");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("providerLastName");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("providerNPI");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("providerState");

                    b.Property<string>("ProviderTaxId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("providerTaxId");

                    b.Property<string>("ProviderTitle")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("providerTitle");

                    b.Property<string>("ResponseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ResponseID");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("text");

                    b.Property<string>("ResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryDiagnosis")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("secondaryDiagnosis");

                    b.Property<string>("SiteOfficeFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("siteOfficeFax");

                    b.Property<string>("TertiaryDiagnosis")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("tertiaryDiagnosis");

                    b.HasKey("TrackingId");

                    b.ToTable("DF_Vermedica_EBVTracking", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DfZipRstTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LoadErrors")
                        .HasColumnType("text");

                    b.Property<string>("LoadedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LoadedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RosterContent")
                        .HasColumnType("text");

                    b.Property<string>("RstFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StageWarnings")
                        .HasColumnType("text");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ZipContent")
                        .HasColumnType("text");

                    b.Property<string>("ZipFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_DF_DF_ZipRstTracking");

                    b.ToTable("DF_ZipRstTracking", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DiagnosisList", b =>
                {
                    b.Property<int>("DiagnosisListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiagnosisListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("Icdcode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ICDCode");

                    b.Property<string>("IcdcodeType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ICDCodeType");

                    b.Property<string>("Icddescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ICDDescription");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DiagnosisListId");

                    b.HasIndex(new[] { "Icdcode", "Active" }, "ICDCode include");

                    b.ToTable("DiagnosisList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DiagnosisListProgram", b =>
                {
                    b.Property<int>("DiagnosisListProgramsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiagnosisListProgramsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisListProgramsId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DiagnosisListId")
                        .HasColumnType("int")
                        .HasColumnName("DiagnosisListID");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("DiagnosisListProgramsId");

                    b.ToTable("DiagnosisListPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DirectFaxAssignment", b =>
                {
                    b.Property<int>("DirectFaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DirectFaxID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectFaxId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<string>("FaxTo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FaxToNumberId")
                        .HasColumnType("int")
                        .HasColumnName("FaxToNumberID");

                    b.Property<int>("InboundFaxId")
                        .HasColumnType("int")
                        .HasColumnName("InboundFaxID");

                    b.Property<bool?>("IsFaxSend")
                        .HasColumnType("bit")
                        .HasColumnName("isFaxSend");

                    b.Property<bool?>("IsMarkedAsReviewed")
                        .HasColumnType("bit")
                        .HasColumnName("isMarkedAsReviewed");

                    b.Property<bool?>("IsParentEmailOrAddressMissing")
                        .HasColumnType("bit")
                        .HasColumnName("isParentEmailOrAddressMissing");

                    b.Property<bool?>("IsParentFullNameMissing")
                        .HasColumnType("bit")
                        .HasColumnName("isParentFullNameMissing");

                    b.Property<bool?>("IsPatientDobmissing")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientDOBMissing");

                    b.Property<bool?>("IsPediatricianZipmissing")
                        .HasColumnType("bit")
                        .HasColumnName("isPediatricianZIPMissing");

                    b.Property<string>("NumberOfCwcforms")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NumberOfCWCForms");

                    b.Property<string>("OtherComments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PageRange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentEmailOrAddressMissingComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParentFullNameMissingComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PatientDobmissingComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PatientDOBMissingComment");

                    b.Property<string>("PediatricianZipmissingComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PediatricianZIPMissingComment");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<byte[]>("Template")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("DirectFaxId");

                    b.ToTable("DirectFaxAssignment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DirectoriesOrganization", b =>
                {
                    b.Property<DateTime?>("ActiveEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActiveStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressLinel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AlternatePhoneNumbers")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CrossStreet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Deanumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DEANumber");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DirectAddress")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("DirectorySpecialtyName")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ElectronicMail")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FacilitylD")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MedicaidNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicareNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MutuallyDefined")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ncpdpid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NCPDPID");

                    b.Property<string>("Npi")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("NPI");

                    b.Property<string>("OldServiceLevel")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentOrganizationName")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("ParentOrganizationlD")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PartnerAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PayerID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Precise")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PrimaryTelephone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RecordChange")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReplaceNcpdpid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ReplaceNCPDPID");

                    b.Property<string>("ServiceLevel")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<string>("StandardizedAddressLine1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardizedAddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StandardizedCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardizedPostal")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("StandardizedStateProvince")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StateLicenseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StoreNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Upin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UPIN");

                    b.Property<string>("UseCase")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Directories_Organizations")
                        .IsUnique()
                        .HasFilter("[OrganizationID] IS NOT NULL");

                    b.ToTable("Directories_Organizations", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Dispense", b =>
                {
                    b.Property<int>("DispenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DispenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispenseId"));

                    b.Property<string>("AlteraId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlteraID");

                    b.Property<string>("BinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<bool?>("CoPayAssistanceApplied")
                        .HasColumnType("bit");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CopayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CopayCardAmountUsed")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CopayCardId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<decimal?>("CopayPaid")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedFileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CustomField1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceSerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Diagnosis2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Diagnosis3")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DispendsesFromSpid")
                        .HasColumnType("int")
                        .HasColumnName("Dispendses_fromSPID");

                    b.Property<string>("DispenseData")
                        .HasColumnType("xml");

                    b.Property<string>("DoseType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<string>("ExternalSpname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalSPName");

                    b.Property<string>("FacilityAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FemalePatientCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FillNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("FirstShipDate")
                        .HasColumnType("date")
                        .HasColumnName("First_Ship_Date");

                    b.Property<string>("Fnrptype")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FNRPType");

                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Frpcounseled")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPCounseled");

                    b.Property<string>("FrppatientPregnant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPPatientPregnant");

                    b.Property<string>("FrppregnancyTest")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPPregnancyTest");

                    b.Property<DateOnly?>("FulfillmentDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsurancePlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("LastReceivedRxdate")
                        .HasColumnType("date")
                        .HasColumnName("LastReceivedRXDate");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lftperformed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LFTPerformed");

                    b.Property<string>("MajorMedicalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MaterialsSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedGuideProvided")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Miligrams")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("MonthlyCounseled")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<bool?>("NeedlesShipped")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("NumberOfFillWritten")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderTransactionNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateOnly?>("PaapprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("PAApprovalDate");

                    b.Property<string>("Pacode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PACode");

                    b.Property<DateOnly?>("PaexpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("PAExpirationDate");

                    b.Property<bool?>("Parequired")
                        .HasColumnType("bit")
                        .HasColumnName("PARequired");

                    b.Property<string>("PastatusCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAStatusCode");

                    b.Property<string>("PatientAdr1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAdr2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientAge")
                        .HasColumnType("int");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientConsent")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("PatientConsentDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PatientCopay")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PatientPayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PatientPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("PatientPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_PhysicianID");

                    b.Property<string>("PatientState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("PatientYearofBirth")
                        .HasColumnType("int");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMName");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCN");

                    b.Property<bool?>("PenPakShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PharmaCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyDea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PharmacyDEA");

                    b.Property<string>("PharmacyNcpdp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PharmacyNCPDP");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PrescriberNotifiedLft")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrescriberNotifiedLFT");

                    b.Property<string>("PrescriberNotifiedPreg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberNotifiedType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryBenefitType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primary_Benefit_Type");

                    b.Property<string>("PrimaryClaimType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryCopayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primary_Copay_Type");

                    b.Property<string>("PrimaryCoverageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryDeductible")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primary_Deductible");

                    b.Property<string>("PrimaryLifetimeMax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primary_Lifetime_Max");

                    b.Property<string>("PrimaryMaxOop")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primary_Max_Oop");

                    b.Property<string>("PrimaryPlanType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Primary_Plan_Type");

                    b.Property<string>("ProductForm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Product_Form");

                    b.Property<string>("ProductLot")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderDea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ProviderDEA");

                    b.Property<string>("ProviderFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderSpecialty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProviderZIP");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ReasonForChange")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReferralDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferralNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReferralSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("RefillRemaining")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<string>("RestatementFlag")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("RxExpDate")
                        .HasColumnType("date");

                    b.Property<string>("RxLabelInfo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("RxWrittenDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RxfilledOrCancellationDate")
                        .HasColumnType("date")
                        .HasColumnName("RXFilledOrCancellationDate");

                    b.Property<string>("ScCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SC_CFCenterID");

                    b.Property<string>("ScCfcenterName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SC_CFCenterName");

                    b.Property<DateOnly?>("ScheduledShipDate")
                        .HasColumnType("date");

                    b.Property<string>("SecondaryBenefitType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Benefit_Type");

                    b.Property<string>("SecondaryCopayAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Copay_Amount");

                    b.Property<string>("SecondaryCopayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Copay_Type");

                    b.Property<string>("SecondaryDeductible")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Deductible");

                    b.Property<string>("SecondaryLifetimeMax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Lifetime_Max");

                    b.Property<string>("SecondaryMaxOop")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Max_Oop");

                    b.Property<DateTime?>("SecondaryPaExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Secondary_PA_Expiration_Date");

                    b.Property<string>("SecondaryPaRequired")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_PA_Required");

                    b.Property<string>("SecondaryPayerBinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerGroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryPayerPCN");

                    b.Property<string>("SecondaryPayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPlanType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Secondary_Plan_Type");

                    b.Property<bool?>("SharpsContainerShipped")
                        .HasColumnType("bit");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ShipQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ShipTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipToAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipToAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipToCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipToPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShipZipcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShipZIPCode");

                    b.Property<DateOnly>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("SourceID");

                    b.Property<string>("SpCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_CFCenterID");

                    b.Property<string>("SpProviderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_ProviderID");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPNPI");

                    b.Property<DateOnly?>("SpreadyToShipDate")
                        .HasColumnType("date")
                        .HasColumnName("SPReadyToShipDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TertiaryPayerBinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerGroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TertiaryPayerPCN");

                    b.Property<string>("TertiaryPayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionSequence")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransferPharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedFileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DispenseId");

                    b.HasIndex(new[] { "ItemName", "Deleted" }, "IX_Dispenses_ItemName_Deleted");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_Dispenses_ProgramID_Deleted");

                    b.HasIndex(new[] { "PatientId" }, "PatientID");

                    b.HasIndex(new[] { "ProgramId", "PatientId", "DrugName" }, "Program_PatientID_Drug");

                    b.ToTable("Dispenses", t =>
                        {
                            t.HasTrigger("UpdateDispenses");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DispenseOrderType", b =>
                {
                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PayOrder")
                        .HasColumnType("bit");

                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable("DispenseOrderTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DispenseQtyConversion", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("MultiplicationFactor")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.ToTable("DispenseQtyConversion", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DispensesFromSp", b =>
                {
                    b.Property<string>("Binnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BINNumber");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DispenseFromSpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dispense_fromSPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispenseFromSpid"));

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<string>("FillNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Icdcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ICDCode");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("LifeTimeMax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("MajorMedicalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MaxOop")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("MaxOOP");

                    b.Property<bool?>("MedGuideProvided")
                        .HasColumnType("bit");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderTransactionNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<decimal?>("PaitentOop")
                        .HasColumnType("numeric(8, 2)")
                        .HasColumnName("PaitentOOP");

                    b.Property<decimal?>("PatientCopay")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<bool?>("PatientOkleavePhoneMsg")
                        .HasColumnType("bit")
                        .HasColumnName("PatientOKLeavePhoneMsg");

                    b.Property<decimal?>("PatientWeight")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMName");

                    b.Property<string>("Pcnnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCNNumber");

                    b.Property<string>("PhysicianAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianSuffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PlanMax")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PrescriberNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrescriberNPI");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ReferredBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("ReferredDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("RefillRemaining")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<bool?>("Restatement")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Spid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPNPI");

                    b.Property<string>("SpprescriberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPPrescriberID");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Dispenses_fromSP", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DispensesHistory", b =>
                {
                    b.Property<int>("DispensesHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dispenses_HistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispensesHistoryId"));

                    b.Property<string>("AlteraId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlteraID");

                    b.Property<string>("BinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<bool?>("CoPayAssistanceApplied")
                        .HasColumnType("bit");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CopayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CopayCardAmountUsed")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CopayCardId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<decimal?>("CopayPaid")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomField1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomField5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceSerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Diagnosis2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Diagnosis3")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DispendsesFromSpid")
                        .HasColumnType("int")
                        .HasColumnName("Dispendses_fromSPID");

                    b.Property<string>("DispenseData")
                        .HasColumnType("xml");

                    b.Property<int>("DispenseId")
                        .HasColumnType("int")
                        .HasColumnName("DispenseID");

                    b.Property<string>("DoseType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<string>("ExternalSpname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalSPName");

                    b.Property<string>("FacilityAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FemalePatientCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FillNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("FirstShipDate")
                        .HasColumnType("date")
                        .HasColumnName("First_Ship_Date");

                    b.Property<string>("Fnrptype")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FNRPType");

                    b.Property<string>("Frpcounseled")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPCounseled");

                    b.Property<string>("FrppatientPregnant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPPatientPregnant");

                    b.Property<string>("FrppregnancyTest")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPPregnancyTest");

                    b.Property<DateOnly?>("FulfillmentDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsurancePlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("LastReceivedRxdate")
                        .HasColumnType("date")
                        .HasColumnName("LastReceivedRXDate");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lftperformed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LFTPerformed");

                    b.Property<string>("MajorMedicalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MaterialsSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedGuideProvided")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Miligrams")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("MonthlyCounseled")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<bool?>("NeedlesShipped")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("NumberOfFillWritten")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderTransactionNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateOnly?>("PaapprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("PAApprovalDate");

                    b.Property<string>("Pacode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PACode");

                    b.Property<DateOnly?>("PaexpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("PAExpirationDate");

                    b.Property<bool?>("Parequired")
                        .HasColumnType("bit")
                        .HasColumnName("PARequired");

                    b.Property<string>("PastatusCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAStatusCode");

                    b.Property<string>("PatientAdr1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAdr2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientAge")
                        .HasColumnType("int");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientConsent")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("PatientConsentDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PatientCopay")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<decimal?>("PatientPayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PatientPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("PatientPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_PhysicianID");

                    b.Property<string>("PatientState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("PatientYearofBirth")
                        .HasColumnType("int");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMName");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCN");

                    b.Property<bool?>("PenPakShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PharmaCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyDea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PharmacyDEA");

                    b.Property<string>("PharmacyNcpdp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PharmacyNCPDP");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PrescriberNotifiedLft")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrescriberNotifiedLFT");

                    b.Property<string>("PrescriberNotifiedPreg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberNotifiedType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryClaimType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryCoverageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductLot")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderDea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ProviderDEA");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderSpecialty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProviderZIP");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ReasonForChange")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReferralDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferralNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("RefillRemaining")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<string>("RestatementFlag")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("RxExpDate")
                        .HasColumnType("date");

                    b.Property<string>("RxLabelInfo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("RxWrittenDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RxfilledOrCancellationDate")
                        .HasColumnType("date")
                        .HasColumnName("RXFilledOrCancellationDate");

                    b.Property<string>("ScCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SC_CFCenterID");

                    b.Property<string>("ScCfcenterName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SC_CFCenterName");

                    b.Property<DateOnly?>("ScheduledShipDate")
                        .HasColumnType("date");

                    b.Property<string>("SecondaryPayerBinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerGroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryPayerPCN");

                    b.Property<string>("SecondaryPayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("SharpsContainerShipped")
                        .HasColumnType("bit");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ShipQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ShipTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipZipcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShipZIPCode");

                    b.Property<DateOnly>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("SourceID");

                    b.Property<string>("SpCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_CFCenterID");

                    b.Property<string>("SpProviderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_ProviderID");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPNPI");

                    b.Property<DateOnly?>("SpreadyToShipDate")
                        .HasColumnType("date")
                        .HasColumnName("SPReadyToShipDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TertiaryPayerBinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerGroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TertiaryPayerPCN");

                    b.Property<string>("TertiaryPayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionSequence")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransferPharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DispensesHistoryId");

                    b.ToTable("Dispenses_History", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DispensesLog", b =>
                {
                    b.Property<int>("DispenseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DispenseLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispenseLogId"));

                    b.Property<string>("BinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CopayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CopayCardAmountUsed")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CopayCardId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DispendsesFromSpid")
                        .HasColumnType("int")
                        .HasColumnName("Dispendses_fromSPID");

                    b.Property<int>("DispenseId")
                        .HasColumnType("int")
                        .HasColumnName("DispenseID");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<string>("FillNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("FulfillmentDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("MajorMedicalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MedGuideProvided")
                        .HasColumnType("bit");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<int?>("NumberOfFillWritten")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderTransactionNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PatientCopay")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<decimal?>("PatientPayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("PatientYearofBirth")
                        .HasColumnType("int");

                    b.Property<string>("PayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMName");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCN");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProviderZIP");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("RefillRemaining")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<DateOnly?>("RxExpDate")
                        .HasColumnType("date");

                    b.Property<string>("RxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ScCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SC_CFCenterID");

                    b.Property<string>("ScCfcenterName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SC_CFCenterName");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ShipQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ShipTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipZipcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShipZIPCode");

                    b.Property<DateOnly>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_CFCenterID");

                    b.Property<string>("SpProviderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_ProviderID");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPNPI");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DispenseLogId")
                        .HasName("PK_DispensesLog");

                    b.ToTable("Dispenses_Log", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DispensesWalgreen", b =>
                {
                    b.Property<string>("BilltoAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BilltoCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BilltoFirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BilltoLastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BilltoState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BilltoZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<int?>("DaysSupplied")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExhaustDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Height")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("HippaauthObtained")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("HIPPAAuthObtained");

                    b.Property<DateTime?>("InitialShipDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastShipDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NDC");

                    b.Property<string>("NewOrRefill")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("OrderNum")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhysicianAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianDea")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PhysicianDEA");

                    b.Property<string>("PhysicianFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianNpi")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PhysicianNPI");

                    b.Property<string>("PhysicianPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhysicianState")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PhysicianZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PlanType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PresciptionNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrimaryBeneType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PrimaryIcd")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PrimaryICD");

                    b.Property<string>("PrimaryInsBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryInsBIN");

                    b.Property<string>("PrimaryInsName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryInsPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryInsPCN");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("PtOop")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PtOOP");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReferralReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RefillNum")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("RefillsRemaining")
                        .HasColumnType("int");

                    b.Property<int?>("Rejected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RowID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("SecondaryIcd")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SecondaryICD");

                    b.Property<string>("SecondaryInsName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Spdea")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SPDEA");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("SPNPI");

                    b.Property<string>("StLicNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TotalShipments")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Weight")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToTable("Dispenses_Walgreens", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID")
                        .HasComment("unique identifier for each document record");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("FileStorageId")
                        .HasColumnType("int")
                        .HasColumnName("FileStorageID");

                    b.Property<string>("FormComplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("SigRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TotalPages")
                        .HasColumnType("int");

                    b.HasKey("DocumentId")
                        .HasName("PK_Documents_Temp");

                    b.HasIndex(new[] { "EntityId" }, "EntityID");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "EntityId", "EntityName", "FileStorageId", "FileName", "Source" }, "IX_Documents_Program");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentAttachmentsDocType", b =>
                {
                    b.Property<int>("DocumentsDocTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_DocTypesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsDocTypesId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<string>("VersionNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("DocumentsDocTypesId")
                        .HasName("PK_Documents_DocTypes");

                    b.HasIndex("LookupDataListId");

                    b.HasIndex(new[] { "DocumentId", "Deleted" }, "IX_DocumentAttachments_DocTypes");

                    b.ToTable("DocumentAttachments_DocTypes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentField", b =>
                {
                    b.Property<int>("DocumentFieldsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Document_FieldsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentFieldsId"));

                    b.Property<string>("DataValue")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("DocumentDocTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Document_DocTypeID");

                    b.Property<int>("DocumentFieldListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentFieldListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("DocumentFieldsId");

                    b.HasIndex("DocumentDocTypeId");

                    b.HasIndex("DocumentFieldListId");

                    b.HasIndex(new[] { "ProgramId", "DocumentDocTypeId", "Deleted" }, "IX_Document_Fields_Program");

                    b.ToTable("Document_Fields", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentFieldList", b =>
                {
                    b.Property<int>("DocumentFieldListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentFieldListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentFieldListId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<bool?>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("FieldLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FieldType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookUpDataListFunctionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.HasKey("DocumentFieldListId");

                    b.HasIndex("DocumentListId");

                    b.ToTable("DocumentFieldList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentFieldMultiAnswer", b =>
                {
                    b.Property<int>("DocumentFieldMultiAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Document_Field_MultiAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentFieldMultiAnswerId"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentFieldsId")
                        .HasColumnType("int")
                        .HasColumnName("Document_FieldsID");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("DocumentFieldMultiAnswerId");

                    b.ToTable("Document_Field_MultiAnswers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentList", b =>
                {
                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<bool?>("CoverPageRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DocumentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupName2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsCoverPage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotificationTemplate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("NumberofPages")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.Property<byte[]>("TemplateLocation")
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("VersionNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("DocumentListId")
                        .HasName("PK_DocumentList_Temp");

                    b.ToTable("DocumentList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentListLetter", b =>
                {
                    b.Property<int>("DocumentListId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LetterNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("DocumentListId")
                        .HasName("PK__Document__6E25082060B57663");

                    b.ToTable("DocumentListLetter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentManagement", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentManagementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentManagementId"));

                    b.Property<int?>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<int>("DocumentsInboundFaxId")
                        .HasColumnType("int")
                        .HasColumnName("Documents_InboundFaxID");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MissingPageNumbers")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PageNumbers")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("DocumentManagement", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentMapping", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentMappingId"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FundType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Srresolution")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRResolution");

                    b.Property<string>("Srtype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRType");

                    b.ToTable("DocumentMappings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentOutboundFaxis", b =>
                {
                    b.Property<int>("DocumentOutboundFaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Document_OutboundFaxID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentOutboundFaxId"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int?>("FaxJobId")
                        .HasColumnType("int")
                        .HasColumnName("FaxJobID");

                    b.Property<string>("FaxJobXdn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FaxJobXDN");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("FaxTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocumentOutboundFaxId");

                    b.HasIndex(new[] { "DocumentId", "ProgramId" }, "DocumentID_ProgramID_Includes");

                    b.ToTable("Document_OutboundFaxes", null, t =>
                        {
                            t.HasTrigger("Tr_Document_OutboundFaxes_Whitelist_Insert");

                            t.HasTrigger("Tr_Document_OutboundFaxes_Whitelist_Update");

                            t.HasTrigger("Tr_Document_OutboundFaxes_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_Document_OutboundFaxes_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentTemplate", b =>
                {
                    b.Property<int>("DocumentTemplatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentTemplatesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTemplatesId"));

                    b.Property<string>("CheckSum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<byte[]>("Template")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("DocumentTemplatesId");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsDocType", b =>
                {
                    b.Property<int>("DocumentsDocTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_DocTypesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsDocTypesId"));

                    b.Property<int?>("AttachmentDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentDocumentID");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("Reviewed")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.HasKey("DocumentsDocTypesId")
                        .HasName("PK_Documents_DocTypes_Temp");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentListId");

                    b.ToTable("Documents_DocTypes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsEHipaainvite", b =>
                {
                    b.Property<int>("DocumentsEHipaainvitesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_eHIPAAInvitesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsEHipaainvitesId"));

                    b.Property<bool?>("AssignmentInProgress")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int?>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<string>("DocumentStorageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("InvitateId")
                        .HasColumnType("int")
                        .HasColumnName("InvitateID");

                    b.Property<DateTime?>("InviteSent")
                        .HasColumnType("datetime")
                        .HasColumnName("Invite_Sent");

                    b.Property<int?>("InviteSrid")
                        .HasColumnType("int")
                        .HasColumnName("Invite_SRID");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastupdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastupdatedby");

                    b.Property<string>("NumberofPages")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("PafCompleted")
                        .HasColumnType("datetime")
                        .HasColumnName("PAF_Completed");

                    b.Property<int?>("Pafid")
                        .HasColumnType("int")
                        .HasColumnName("PAFID");

                    b.Property<string>("PageRange")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonDeleted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusInvite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status_Invite");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocumentsEHipaainvitesId");

                    b.HasIndex(new[] { "InvitateId" }, "InvitateID");

                    b.ToTable("Documents_eHIPAAInvites", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsEntity", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FileStorageId")
                        .HasColumnType("int")
                        .HasColumnName("FileStorageID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("SigRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TotalPages")
                        .HasColumnType("int");

                    b.HasKey("DocumentId")
                        .HasName("PK_Documents_Provider");

                    b.ToTable("Documents_Entity", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsFaxQueue", b =>
                {
                    b.Property<int>("DocumentsFaxQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_FaxQueueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsFaxQueueId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("DirectFax")
                        .HasColumnType("bit");

                    b.Property<string>("EmailBox")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FaxPortalPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FaxPortal_Password");

                    b.Property<string>("FaxPortalUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FaxPortal_URL");

                    b.Property<string>("FaxPortalUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FaxPortal_UserName");

                    b.Property<string>("FaxQueueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocumentsFaxQueueId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Documents_FaxQueues", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsFqUser", b =>
                {
                    b.Property<int>("DocumentsFqUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_FQ_UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsFqUserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentsFaxQueueId")
                        .HasColumnType("int")
                        .HasColumnName("Documents_FaxQueueID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocumentsFqUserId");

                    b.HasIndex("DocumentsFaxQueueId");

                    b.ToTable("Documents_FQ_Users", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsInboundFaxis", b =>
                {
                    b.Property<int>("DocumentsInboundFaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_InboundFaxID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsInboundFaxId"));

                    b.Property<bool?>("AssignmentInProgress")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DirectFaxDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DirectFaxId")
                        .HasColumnType("int")
                        .HasColumnName("DirectFaxID");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<string>("DocumentStorageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DocumentsFaxQueueId")
                        .HasColumnType("int")
                        .HasColumnName("Documents_FaxQueueID");

                    b.Property<string>("FaxBy")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FaxTo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("GroupMissingPageNumbers")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupPageNumbers")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NumberofPages")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OcrExtractStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OCR_Extract_Status");

                    b.Property<string>("PageRange")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonDeleted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("DocumentsInboundFaxId");

                    b.HasIndex(new[] { "DocumentsFaxQueueId", "GroupName", "ProcessedDate" }, "Documents_FaxQueueID_GroupName_ProcessedDate_Includes");

                    b.HasIndex(new[] { "DocumentsFaxQueueId", "Status" }, "IX_Documents_InboundFaxes_QID");

                    b.ToTable("Documents_InboundFaxes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsMoveAudit", b =>
                {
                    b.Property<int>("DocumentMoveAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Document_MoveAudit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentMoveAuditId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int>("MoveFromEntityId")
                        .HasColumnType("int")
                        .HasColumnName("MoveFromEntityID");

                    b.Property<int>("MoveToEntityId")
                        .HasColumnType("int")
                        .HasColumnName("MoveToEntityID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonMoved")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocumentMoveAuditId");

                    b.ToTable("Documents_MoveAudits", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsOcrCoordinate", b =>
                {
                    b.Property<int>("DocumentsOcrCoordinatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_OCR_CoordinatesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsOcrCoordinatesId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<double?>("BoundingBoxHeight")
                        .HasColumnType("float")
                        .HasColumnName("BoundingBox_Height");

                    b.Property<double?>("BoundingBoxLeft")
                        .HasColumnType("float")
                        .HasColumnName("BoundingBox_Left");

                    b.Property<double?>("BoundingBoxTop")
                        .HasColumnType("float")
                        .HasColumnName("BoundingBox_Top");

                    b.Property<double?>("BoundingBoxWidth")
                        .HasColumnType("float")
                        .HasColumnName("BoundingBox_Width");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentFormCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EntityFieldName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExtractType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FieldKeyName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("DocumentsOcrCoordinatesId")
                        .HasName("PK__Document__A7918205C7851CC9");

                    b.ToTable("Documents_OCR_Coordinates", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsOcrDynamicDatum", b =>
                {
                    b.Property<int>("DocumentsOcrDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_OCR_DynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsOcrDynamicDataId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DocumentsOcrCoordinatesId")
                        .HasColumnType("int")
                        .HasColumnName("Documents_OCR_CoordinatesID");

                    b.Property<string>("FieldKey")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FieldValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("InboundFaxId")
                        .HasColumnType("int")
                        .HasColumnName("InboundFaxID");

                    b.Property<bool?>("IsSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("DocumentsOcrDynamicDataId")
                        .HasName("PK__Document__39CAE9F91F458EE6");

                    b.ToTable("Documents_OCR_DynamicData", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsOutboundAttachment", b =>
                {
                    b.Property<int>("DocumentsOutboundAttachmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Documents_OutboundAttachments_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentsOutboundAttachmentsId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OutboundAcctachmentDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("OutboundAcctachment_DocumentID");

                    b.Property<DateTime?>("Reviewed")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.HasKey("DocumentsOutboundAttachmentsId");

                    b.ToTable("Documents_OutboundAttachments", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsSrType", b =>
                {
                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<string>("SrType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("DocumentListId", "SrType");

                    b.ToTable("Documents_SrTypes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsTherapyDrug", b =>
                {
                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<string>("TherapyDrug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocumentListId", "TherapyDrug")
                        .HasName("PK_Documents_TherapyDrugs_1");

                    b.ToTable("Documents_TherapyDrugs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugBrandName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DrugGenericName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugLabelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugNdc")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("DrugNDC");

                    b.Property<string>("Jcode1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("JCode1");

                    b.Property<string>("Jcode2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("JCode2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DrugId")
                        .HasName("PK_Drug_DrugID");

                    b.ToTable("Drug", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DrugCptcode", b =>
                {
                    b.Property<string>("Cptcode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CPTcode");

                    b.Property<string>("CptcodeDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CPTCodeDescription");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DrugCptcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrugCPTCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugCptcodeId"));

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("DrugCPTCode", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DrugCptcodeProgram", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DrugCptcodeId")
                        .HasColumnType("int")
                        .HasColumnName("DrugCPTCodeID");

                    b.Property<int>("DrugCptcodeProgramsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrugCPTCodeProgramsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugCptcodeProgramsId"));

                    b.Property<int?>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable("DrugCPTCodePrograms", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DrugDetail", b =>
                {
                    b.Property<int>("DrugDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrugDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugDetailId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<string>("DrugNdc")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("DrugNDC");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DrugDetailId")
                        .HasName("PK_DrugDetail_DrugDetailID");

                    b.ToTable("DrugDetail", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DrugResource", b =>
                {
                    b.Property<int>("DrugResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrugResourceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugResourceId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("URL");

                    b.HasKey("DrugResourceId");

                    b.ToTable("DrugResources");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DrugServiceLevel", b =>
                {
                    b.Property<int>("DrugServiceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrugServiceLevelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugServiceLevelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DrugLookupId")
                        .HasColumnType("int")
                        .HasColumnName("DrugLookupID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ServiceLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TriageGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DrugServiceLevelId");

                    b.ToTable("DrugServiceLevel", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Dup", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("Csz")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CSZ");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Dup", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DuplicateNpitracking", b =>
                {
                    b.Property<int>("DuplicateNpitrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DuplicateNPITrackingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DuplicateNpitrackingId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("Npi")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NPI");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.HasKey("DuplicateNpitrackingId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("DuplicateNPITracking", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DuplicatePatientQueue", b =>
                {
                    b.Property<int>("DuplicatePatientQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DuplicatePatientQueueID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DuplicatePatientQueueId"));

                    b.Property<bool?>("AssignmentInProgress")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientSearchResultId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("DuplicatePatientQueueId");

                    b.HasIndex("PatientSearchResultId");

                    b.ToTable("DuplicatePatientQueue", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DynamicDataByLookupDatum", b =>
                {
                    b.Property<int>("DynamicDataByLookupDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataByLookupDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DynamicDataByLookupDataId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AdditionalField")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<bool?>("AllowNa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("AllowNA");

                    b.Property<string>("ApprovalCode")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<string>("FieldCode")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<string>("ProgramFunction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<decimal>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("DynamicDataByLookupDataId")
                        .HasName("PK_SR_BridgeQuestionsByType");

                    b.HasIndex("DynamicDataListId");

                    b.HasIndex("LookupDataListId");

                    b.ToTable("DynamicDataByLookupData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DynamicDataList", b =>
                {
                    b.Property<int>("DynamicDataListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DynamicDataListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<bool?>("AllowNa")
                        .HasColumnType("bit")
                        .HasColumnName("AllowNA");

                    b.Property<string>("AutoPopulate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("mhu");

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DescriptionCode")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("DisableKeyElement")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldValidationMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookUpDataListFunctionName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegularExpression")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Required")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RowSize")
                        .HasColumnType("int");

                    b.Property<string>("Script")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("ShowCreateSr")
                        .HasColumnType("bit")
                        .HasColumnName("ShowCreateSR");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Srtype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRType");

                    b.Property<string>("TemplateTagName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DynamicDataListId")
                        .HasName("PK_DynamicData");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "Active" }, "Program_Deleted_Include");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "Program_Deleted_Include_All");

                    b.ToTable("DynamicDataList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvAgeLimit", b =>
                {
                    b.Property<int>("EBvAgeLimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvAgeLimitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvAgeLimitId"));

                    b.Property<string>("AgeLimitApplicable")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AgeLimitApplicableSpecified")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("EBvCoverageFactorsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageFactorsID");

                    b.Property<string>("MaximumAge")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("MaximumAgeQualifier")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MinimumAge")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("MinimumAgeQualifier")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EBvAgeLimitId");

                    b.HasIndex("EBvCoverageFactorsId");

                    b.ToTable("eBvAgeLimit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCopayFactor", b =>
                {
                    b.Property<int>("EBvCopayFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvCopayFactorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvCopayFactorId"));

                    b.Property<string>("CopayTier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DaysSupplyPerCopayField")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EBvInsuranceFormularyCoverageId")
                        .HasColumnType("int")
                        .HasColumnName("eBvInsuranceFormularyCoverageID");

                    b.Property<string>("FirstCopayTerm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("FirstCopayTermSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("FlatCopayAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaximumCopay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaximumCopayTier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MinimumCopay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OutOfPocketRangeEnd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OutOfPocketRangeStart")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PercentCopayRate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PharmacyType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("PharmacyTypeSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("ProductType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EBvCopayFactorId");

                    b.HasIndex("EBvInsuranceFormularyCoverageId");

                    b.ToTable("eBvCopayFactor", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageBenefitDetail", b =>
                {
                    b.Property<int>("EBvCoverageBenefitDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageBenefitDetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvCoverageBenefitDetailsId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("BenefitInvestigationEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    b.Property<string>("BinLocationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CardHolderID");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("CheckId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("GroupName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailOrderPharmacy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("MailOrderPharmacySpecified")
                        .HasColumnType("bit");

                    b.Property<string>("MedicareId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NDC");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientDataConflict")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("PatientDataConflictSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PatientDob")
                        .HasColumnType("datetime")
                        .HasColumnName("PatientDOB");

                    b.Property<bool?>("PatientDobspecified")
                        .HasColumnType("bit")
                        .HasColumnName("PatientDOBSpecified");

                    b.Property<string>("PatientEligibilityErrorMessage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientEligibilityStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientEligibilityStatusSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("PatientGenderSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientPrefix")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("PatientStateSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PatientSuffix")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PayerMessage")
                        .HasMaxLength(264)
                        .IsUnicode(false)
                        .HasColumnType("varchar(264)");

                    b.Property<string>("PbmId")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("PbmID");

                    b.Property<string>("PbmMemberId")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("PbmMemberID");

                    b.Property<string>("PbmName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("PcnNumber")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("PersonCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PharmacyBenefitLtcstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyBenefitLTCStatus");

                    b.Property<bool?>("PharmacyBenefitLtcstatusSpecified")
                        .HasColumnType("bit")
                        .HasColumnName("PharmacyBenefitLTCStatusSpecified");

                    b.Property<string>("PharmacyBenefitMailOrderStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PharmacyBenefitMailOrderStatusSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PharmacyBenefitRetailStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PharmacyBenefitRetailStatusSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PharmacyBenefitSpecialtyStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PharmacyBenefitSpecialtyStatusSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlanEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PlanEffectiveDateSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PlanName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Relationship")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RetailPharmacy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("RetailPharmacySpecified")
                        .HasColumnType("bit");

                    b.HasKey("EBvCoverageBenefitDetailsId");

                    b.HasIndex("BenefitInvestigationEBvId");

                    b.ToTable("eBvCoverageBenefitDetails", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageBenefitTransaction", b =>
                {
                    b.Property<int>("EBvCoverageBenefitTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageBenefitTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvCoverageBenefitTransactionId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EBvMasterTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("eBvMasterTransactionID");

                    b.Property<string>("ErrorLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("JsonResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Locale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequestContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseTypeCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("EBvCoverageBenefitTransactionId");

                    b.HasIndex("EBvMasterTransactionId");

                    b.ToTable("eBvCoverageBenefitTransactions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageFactor", b =>
                {
                    b.Property<int>("EBvCoverageFactorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageFactorsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvCoverageFactorsId"));

                    b.Property<string>("CoverageMessageList")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("EBvInsuranceFormularyCoverageId")
                        .HasColumnType("int")
                        .HasColumnName("eBvInsuranceFormularyCoverageID");

                    b.Property<string>("GenderLimitList")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PriorAuthorizationRequired")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StepTherapy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("StepTherapySpecified")
                        .HasColumnType("bit");

                    b.HasKey("EBvCoverageFactorsId");

                    b.HasIndex(new[] { "EBvInsuranceFormularyCoverageId" }, "UNIQUE_eBvInsuranceFormularyCoverageID")
                        .IsUnique();

                    b.ToTable("eBvCoverageFactors", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvDrugCoverageAlert", b =>
                {
                    b.Property<int>("EBvDrugCoverageAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvDrugCoverageAlertID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvDrugCoverageAlertId"));

                    b.Property<string>("DrugCoverageAlertCode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("DrugCoverageAlertText")
                        .HasMaxLength(210)
                        .IsUnicode(false)
                        .HasColumnType("varchar(210)");

                    b.Property<int>("EBvDrugPharmacyCoverageId")
                        .HasColumnType("int")
                        .HasColumnName("eBvDrugPharmacyCoverageID");

                    b.HasKey("EBvDrugCoverageAlertId");

                    b.HasIndex("EBvDrugPharmacyCoverageId");

                    b.ToTable("eBvDrugCoverageAlert", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvDrugPharmacyCoverage", b =>
                {
                    b.Property<int>("EBvDrugPharmacyCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvDrugPharmacyCoverageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvDrugPharmacyCoverageId"));

                    b.Property<string>("CoveragePhaseMessage")
                        .HasMaxLength(210)
                        .IsUnicode(false)
                        .HasColumnType("varchar(210)");

                    b.Property<string>("DaysSupplyPriced")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("DeductibleAppliedAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeductibleRemainingAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugFormularyStatusCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("DrugStatusCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EBvMedicationBenefitDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvMedicationBenefitDetailsID");

                    b.Property<string>("IsRequestedPharmacy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("IsRequestedPharmacySpecified")
                        .HasColumnType("bit");

                    b.Property<string>("OopAppliedAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OopRemainingAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPayAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyAddress1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PharmacyAddress2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PharmacyCity")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PharmacyFaxNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PharmacyNcpdpid")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("PharmacyNCPDPID");

                    b.Property<string>("PharmacyNpi")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("PharmacyNPI");

                    b.Property<string>("PharmacyPhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PharmacyState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PharmacyStateSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PharmacyTypes")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("PharmacyZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PlanPayAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PriorAuthorization")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PriorAuthorizationSpecified")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Quantity")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("QuantityUom")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("QuantityUOM");

                    b.Property<string>("TotalCost")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TotalSavings")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EBvDrugPharmacyCoverageId");

                    b.HasIndex("EBvMedicationBenefitDetailsId");

                    b.ToTable("eBvDrugPharmacyCoverage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvInsuranceFormularyCoverage", b =>
                {
                    b.Property<int>("EBvInsuranceFormularyCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvInsuranceFormularyCoverageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvInsuranceFormularyCoverageId"));

                    b.Property<int>("EBvCoverageBenefitDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageBenefitDetailsID");

                    b.Property<string>("FormularyStatus")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("FormularyStatusText")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Generic")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("GenericSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("Otc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("OtcSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("RelativeCost")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("RelativeCostLimit")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Supply")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("EBvInsuranceFormularyCoverageId");

                    b.HasIndex(new[] { "EBvCoverageBenefitDetailsId" }, "UNIQUE_eBvCoverageBenefitDetailsID")
                        .IsUnique();

                    b.ToTable("eBvInsuranceFormularyCoverage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMasterTransaction", b =>
                {
                    b.Property<int>("EBvMasterTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvMasterTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvMasterTransactionId"));

                    b.Property<string>("Activity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("BenefitInvestigationEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EBvType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("eBvType");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("EBvMasterTransactionId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("eBvMasterTransactions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMedicationBenefitDetail", b =>
                {
                    b.Property<int>("EBvMedicationBenefitDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvMedicationBenefitDetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvMedicationBenefitDetailsId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("BenefitInvestigationEBvId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigation_eBV_ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugBrandName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugCodeQualifier")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DrugCodeValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("DrugCoverageStatusCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugDaysSupply")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("DrugDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DrugForm")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DrugGenericName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugQuantity")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DrugQuantityUom")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DrugQuantityUOM");

                    b.Property<string>("DrugRoute")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("DrugStrength")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugStrengthUnit")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EBvCoverageBenefitDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageBenefitDetailsID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NDC");

                    b.Property<string>("PbmErrorMessage")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PbmName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("PlanName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PriorAuthorizationStatusCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<short>("ProgramId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPId");

                    b.HasKey("EBvMedicationBenefitDetailsId");

                    b.HasIndex("BenefitInvestigationEBvId");

                    b.HasIndex("EBvCoverageBenefitDetailsId");

                    b.ToTable("eBvMedicationBenefitDetails", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMedicationBenefitTransaction", b =>
                {
                    b.Property<int>("EBvMedicationBenefitTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvMedicationBenefitTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvMedicationBenefitTransactionId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EBvMasterTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("eBvMasterTransactionID");

                    b.Property<string>("ErrorLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("JsonResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Locale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<string>("PbmId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequestContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseTypeCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPId");

                    b.HasKey("EBvMedicationBenefitTransactionId");

                    b.HasIndex("EBvMasterTransactionId");

                    b.ToTable("eBvMedicationBenefitTransactions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMockResponse", b =>
                {
                    b.Property<int>("EBvMockResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvMockResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvMockResponseId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CoverageRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverageResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugNdc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("DrugNDC");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientBenefitRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientBenefitResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerId")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("PayerID");

                    b.Property<string>("PayerName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PharmacyNcpdpid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyNCPDPID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("EBvMockResponseId");

                    b.ToTable("eBvMockResponses", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvModularTransaction", b =>
                {
                    b.Property<int>("EBvModularTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvModularTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvModularTransactionId"));

                    b.Property<string>("ClientApplicationName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DrugNDC");

                    b.Property<string>("Ebvtype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EBVType");

                    b.Property<string>("EligibityDrugName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalAccountId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ExternalAccountID");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateTime?>("PatientDob")
                        .HasColumnType("datetime")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhysicianNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhysicianNPI");

                    b.Property<int?>("PrimaryInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryInsuranceID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RxCoverageJsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RxEbvcontrolNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RxEBVControlNumber");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TransactionID");

                    b.HasKey("EBvModularTransactionId")
                        .HasName("PK__eBvModul__B109E3829FC48482");

                    b.ToTable("eBvModularTransaction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvQuantityLimit", b =>
                {
                    b.Property<int>("EBvQuantityLimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvQuantityLimitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvQuantityLimitId"));

                    b.Property<int>("EBvCoverageFactorsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageFactorsID");

                    b.Property<string>("MaximumAmount")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MaximumAmountQualifier")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MaximumAmountTimePeriod")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MaximumAmountTimePeriodEndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MaximumAmountTimePeriodEndDateSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("MaximumAmountTimePeriodStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MaximumAmountTimePeriodStartDateSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("MaximumAmountTimePeriodUnits")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("QuantityLimitApplicable")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("QuantityLimitApplicableSpecified")
                        .HasColumnType("bit");

                    b.HasKey("EBvQuantityLimitId");

                    b.HasIndex("EBvCoverageFactorsId");

                    b.ToTable("eBvQuantityLimit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvResourceLink", b =>
                {
                    b.Property<int>("EBvResourceLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvResourceLinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvResourceLinkId"));

                    b.Property<int>("EBvCoverageFactorsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageFactorsID");

                    b.Property<string>("ResourceLinkMessage")
                        .HasMaxLength(265)
                        .IsUnicode(false)
                        .HasColumnType("varchar(265)");

                    b.Property<string>("ResourceLinkMessageType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("ResourceLinkMessageTypeSpecified")
                        .HasColumnType("bit");

                    b.HasKey("EBvResourceLinkId");

                    b.HasIndex("EBvCoverageFactorsId");

                    b.ToTable("eBvResourceLink", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvStepDrug", b =>
                {
                    b.Property<int>("EBvStepDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eBvStepDrugID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EBvStepDrugId"));

                    b.Property<string>("DiagnosisCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DiagnosisCodeQualifier")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("DiagnosisCodeQualifierSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("EBvCoverageFactorsId")
                        .HasColumnType("int")
                        .HasColumnName("eBvCoverageFactorsID");

                    b.Property<string>("NumberToTry")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("StepDrugCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("StepDrugCodeQualifier")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("StepDrugCodeQualifierSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("StepDrugDbcode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("StepDrugDBCode");

                    b.Property<string>("StepDrugDbcodeQualifier")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StepDrugDBCodeQualifier");

                    b.Property<bool?>("StepDrugDbcodeQualifierSpecified")
                        .HasColumnType("bit")
                        .HasColumnName("StepDrugDBCodeQualifierSpecified");

                    b.Property<string>("StepDrugDeaschedule")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StepDrugDEASchedule");

                    b.Property<string>("StepDrugGeneric")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("StepDrugGenericSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("StepDrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StepDrugOtc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StepDrugOTC");

                    b.Property<bool?>("StepDrugOtcspecified")
                        .HasColumnType("bit")
                        .HasColumnName("StepDrugOTCSpecified");

                    b.Property<string>("StepDrugStrength")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("StepDrugStrengthForm")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StepDrugStrengthUom")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StepDrugStrengthUOM");

                    b.Property<string>("StepDrugSupply")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("StepDrugSupplySpecified")
                        .HasColumnType("bit");

                    b.Property<string>("StepOrder")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("EBvStepDrugId");

                    b.HasIndex("EBvCoverageFactorsId");

                    b.ToTable("eBvStepDrug", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EConsent", b =>
                {
                    b.Property<int>("EConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eConsentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EConsentId"));

                    b.Property<bool?>("AssignmentInProgress")
                        .HasColumnType("bit");

                    b.Property<string>("CaregiverFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverHomePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverMobilePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("FinalTemplate")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPrimaryInsurance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSecondaryInsurance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberSignature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateOnly?>("PrescriberSignatureDate")
                        .HasColumnType("date");

                    b.Property<string>("PrescriberState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ProcessingInProgress")
                        .HasColumnType("bit");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RequestIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RequestIP");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("StagingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("EConsentId")
                        .HasName("PK_eConsentID");

                    b.ToTable("eConsent", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EHipaaApiProgram", b =>
                {
                    b.Property<int>("EHipaaProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eHipaaProgramId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EHipaaProgramId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApiClientId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApiClientKey")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConsentDrug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EHipaaId")
                        .HasColumnType("int")
                        .HasColumnName("eHipaaID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("EHipaaProgramId");

                    b.ToTable("eHipaaApiPrograms", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EHipaaPatientInvite", b =>
                {
                    b.Property<int>("EHipaaPatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eHipaaPatId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EHipaaPatId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("InviteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("EHipaaPatId");

                    b.ToTable("eHipaaPatientInvites", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EPafemailLinkAudit", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit")
                        .HasColumnName("isSubmitted");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<DateTime?>("Submitted")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("EmailId");

                    b.ToTable("ePAFEmailLinkAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EServiceApilog", b =>
                {
                    b.Property<int>("EServiceApilogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eServiceAPILog_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EServiceApilogId"));

                    b.Property<string>("Apiname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("APIName");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("int")
                        .HasColumnName("PolicyID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequestJson")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RequestJSON");

                    b.Property<string>("ResponseJson")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ResponseJSON");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EServiceApilogId");

                    b.ToTable("eServiceAPILog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EServicesConfigList", b =>
                {
                    b.Property<int>("EServicesConfigListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eServicesConfigListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EServicesConfigListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PortalFunctionListId")
                        .HasColumnType("int")
                        .HasColumnName("PortalFunctionListID");

                    b.Property<string>("UsingApplication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EServicesConfigListId");

                    b.HasIndex("PortalFunctionListId");

                    b.ToTable("eServicesConfigList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EServicesProgramConfig", b =>
                {
                    b.Property<int>("EServicesProgramConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("eServicesProgramConfigID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EServicesProgramConfigId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EServicesConfigListId")
                        .HasColumnType("int")
                        .HasColumnName("eServicesConfigListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("EServicesProgramConfigId");

                    b.HasIndex("EServicesConfigListId");

                    b.HasIndex("ProgramId");

                    b.ToTable("eServicesProgramConfig", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EagleForceApilog", b =>
                {
                    b.Property<int>("EagleForceApiLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EagleForceAPI_LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EagleForceApiLogId"));

                    b.Property<string>("Apirequest")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("APIRequest");

                    b.Property<string>("Apiresponse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("APIResponse");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EagleForceApiLogId");

                    b.ToTable("EagleForceAPILog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EbvmedicalResponseTypeCode", b =>
                {
                    b.Property<int>("EbvmedicalResponseTypeCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EBVMedicalResponseTypeCodeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EbvmedicalResponseTypeCodeId"));

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EligibilityStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsOfframpResponseCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumberOfPayers")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlanTypes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ResponseTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EbvmedicalResponseTypeCodeId")
                        .HasName("PK__EBVMedic__124355B4B97AA110");

                    b.ToTable("EBVMedicalResponseTypeCode", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EmailHistory", b =>
                {
                    b.Property<int>("EmailHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailHistoryId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("CareMetxRecordID");

                    b.Property<string>("CareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("EmailMessageStub")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ToEmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmailHistoryId")
                        .HasName("PK_EmailHistories");

                    b.ToTable("EmailHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EmailSubscriptionType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000)
                        .HasColumnName("ProgramID");

                    b.HasKey("EmailTypeId");

                    b.ToTable("EmailSubscriptionTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EmailTemplate", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailBody")
                        .HasColumnType("text");

                    b.Property<string>("EmailFrom")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailTemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("HasPortalAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<byte[]>("AdditionalDocumentsData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AdditionalDocumentsName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("AdministrationInformation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("AdministrationInformationFormData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AdministrationInformationFormName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CaregiverEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CaregiverFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverHomePhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("CaregiverIsLegallyAuthorizedRep")
                        .HasColumnType("bit");

                    b.Property<string>("CaregiverLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverMobilePhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CaregiverRelationship")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CaremetxRecordId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CaremetxRecordID");

                    b.Property<string>("CaremetxRecordType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ClinicalAllergies")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("ClinicalAnyKnownDrugAllergies")
                        .HasColumnType("bit");

                    b.Property<string>("ClinicalAscvdtext")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ClinicalASCVDText");

                    b.Property<string>("ClinicalBillingPreference")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClinicalContraindications")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClinicalCptcode1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClinicalCPTCode1");

                    b.Property<string>("ClinicalCptcode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClinicalCPTCode2");

                    b.Property<string>("ClinicalCptcode3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClinicalCPTCode3");

                    b.Property<string>("ClinicalCptcode4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClinicalCPTCode4");

                    b.Property<string>("ClinicalCptcode5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClinicalCPTCode5");

                    b.Property<DateOnly?>("ClinicalDateProductNeeded")
                        .HasColumnType("date");

                    b.Property<bool?>("ClinicalHasStartedTreatment")
                        .HasColumnType("bit");

                    b.Property<string>("ClinicalHeFhtext")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ClinicalHeFHText");

                    b.Property<bool?>("ClinicalOptIn")
                        .HasColumnType("bit");

                    b.Property<string>("ClinicalOtherText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClinicalPreviousTreatment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClinicalPreviousTreatment1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClinicalPreviousTreatment2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClinicalPreviousTreatmentDose")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ClinicalPreviousTreatmentDose1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ClinicalPreviousTreatmentDose2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("ClinicalPreviousTreatmentEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ClinicalPreviousTreatmentEndDate1")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ClinicalPreviousTreatmentEndDate2")
                        .HasColumnType("date");

                    b.Property<string>("ClinicalPreviousTreatmentFrequency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ClinicalPreviousTreatmentFrequency1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ClinicalPreviousTreatmentFrequency2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("ClinicalPreviousTreatmentStartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ClinicalPreviousTreatmentStartDate1")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ClinicalPreviousTreatmentStartDate2")
                        .HasColumnType("date");

                    b.Property<string>("ClinicalVisualAcuityLeftEye")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClinicalVisualAcuityRightEye")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ClinicalisSampleProductAdministered")
                        .HasColumnType("bit");

                    b.Property<bool?>("CommercialPrivateInsurance")
                        .HasColumnType("bit")
                        .HasColumnName("Commercial/PrivateInsurance");

                    b.Property<bool?>("ContactPatientForEnrollmentIssues")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DiagnosisCodes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DiagnosisCodesSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DiagnosisCodesTertiary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DiagnosisDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<string>("ElectronicAttestationPatientEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ElectronicAttestationPatientPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EnrollmentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityCity")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("FacilityID");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FacilityOfficeContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityOfficeContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityOfficeContactPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FacilityTaxId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FacilityTaxID");

                    b.Property<string>("FacilityZip")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FacilityZIP");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("HasAscvd")
                        .HasColumnType("bit")
                        .HasColumnName("HasASCVD");

                    b.Property<bool?>("HasAscvsorHeFh")
                        .HasColumnType("bit")
                        .HasColumnName("HasASCVSorHeFH");

                    b.Property<bool?>("HasCaregiver")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasClinicalOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasHeFh")
                        .HasColumnType("bit")
                        .HasColumnName("HasHeFH");

                    b.Property<bool?>("HasPatientInsurance")
                        .HasColumnType("bit");

                    b.Property<byte[]>("InsuranceCardData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InsuranceCardName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<bool?>("IsCertified")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCertified2")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCertified3")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ManualAttestationFileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ManualAttestationFileName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<bool?>("Medicaid")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedicaidPending")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalBeneficiaryId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicalBeneficiaryID");

                    b.Property<bool?>("MedicareAdvantage")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedicarePartB")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedicarePartD")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OfficeContactEMail");

                    b.Property<string>("OfficeContactFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeContactPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<string>("OrganizationEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<bool?>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherCardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OtherCardHolderID");

                    b.Property<string>("OtherDiagnosisCodes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OtherGroupNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OtherInsurance")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OtherPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OtherPlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherPolicyHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID");

                    b.Property<int?>("PatientAttestationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAttestationID");

                    b.Property<string>("PatientAttestationType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientCopayCardId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("PatientCopayCardID");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("PatientEnrollmentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientHomePhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLast4Ssn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PatientLast4SSN");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMobileNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("PatientOkToLeaveMsgHome")
                        .HasColumnType("bit");

                    b.Property<bool?>("PatientOkToLeaveMsgMobile")
                        .HasColumnType("bit");

                    b.Property<string>("PatientOtherLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPreferredLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPreferredPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("PatientPreviouslyEnrolled")
                        .HasColumnType("bit");

                    b.Property<string>("PatientState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PatientZIP");

                    b.Property<string>("PharmacyCardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PharmacyOtherValue")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PharmacyPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PharmacyPlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianCity")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhysicianDea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhysicianDEA");

                    b.Property<string>("PhysicianEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianFaxNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianLicenseState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhysicianMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianNpi")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhysicianOrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianOrganizationNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhysicianOrganizationTaxId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhysicianOrganizationTaxID");

                    b.Property<string>("PhysicianPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhysicianPtan")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhysicianPTAN");

                    b.Property<string>("PhysicianState")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhysicianStateLicenseNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhysicianTaxId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhysicianTaxID");

                    b.Property<string>("PhysicianZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PhysicianZIP");

                    b.Property<string>("PlaceOfService")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PolicyHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredMethodOfPayment")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Prescription15mg")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Prescription20mg")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrescriptionAdditionalNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("PrescriptionAllowSubstitutions")
                        .HasColumnType("bit");

                    b.Property<string>("PrescriptionBsa")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PrescriptionBSA");

                    b.Property<int?>("PrescriptionDaysSupply")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionDirectionForUse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PrescriptionDrugDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("PrescriptionEffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("PrescriptionFixedDoseTablet")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrescriptionHeight")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrescriptionInitialDose")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PrescriptionNumberOfRefills")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionNumberOfRefills1")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionPhysicianSignatureType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PrescriptionQuantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PrescriptionQuantityUnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriptionSecondDose")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PrescriptionSig")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("PrescriptionSIG");

                    b.Property<string>("PrescriptionSig1")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("PrescriptionSIG1");

                    b.Property<bool?>("PrescriptionSigningAttestation")
                        .HasColumnType("bit");

                    b.Property<string>("PrescriptionTabletsPerCycle")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrescriptionTypedSignature")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("PrescriptionTypedSignatureDate")
                        .HasColumnType("date");

                    b.Property<string>("PrescriptionWeight")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrimaryCardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryCardHolderID");

                    b.Property<string>("PrimaryEmployer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrimaryGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PrimaryPatientIsPrimaryCardholder")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrimaryPlanName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrimaryPolicyHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("PrimarySubscriberDob")
                        .HasColumnType("date")
                        .HasColumnName("PrimarySubscriberDOB");

                    b.Property<string>("PrimarySubscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimarySubscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimarySubscriberRelationshipToCardholder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RxBin")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RxBIN");

                    b.Property<string>("RxGroupNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RxPcn")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RxPCN");

                    b.Property<string>("SecondaryCardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryCardHolderID");

                    b.Property<string>("SecondaryEmployer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecondaryGroupNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("SecondaryIsMedicalSupplementPlan")
                        .HasColumnType("bit");

                    b.Property<string>("SecondaryMedicalSupplementPlanLetter")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("SecondaryPatientIsPrimaryCardholder")
                        .HasColumnType("bit");

                    b.Property<string>("SecondaryPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecondaryPlanName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecondaryPolicyHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("SecondarySubscriberDob")
                        .HasColumnType("date")
                        .HasColumnName("SecondarySubscriberDOB");

                    b.Property<string>("SecondarySubscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondarySubscriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondarySubscriberRelationshipToCardholder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("SignatureDate")
                        .HasColumnType("date");

                    b.Property<string>("Signatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatingSiteContactName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("TreatmentStartDate")
                        .HasColumnType("date");

                    b.Property<string>("TypedSignature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("VaMilitary")
                        .HasColumnType("bit")
                        .HasColumnName("VA/Military");

                    b.HasKey("EnrollmentId")
                        .HasName("Pk_Enrollment_EnrollmentID");

                    b.ToTable("Enrollment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EnrollmentDupSearchLog", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Entity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("LogSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("RowsReturned")
                        .HasColumnType("int");

                    b.ToTable("Enrollment_DupSearchLogs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EntityCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EntityDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EntityDupeSearchRequest", b =>
                {
                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("EntityDupeSearchRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityDupeSearchRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityDupeSearchRequestId"));

                    b.Property<string>("EntityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InputParameters")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ServiceUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ServiceURL");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceHostName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceIpaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SourceIPAddress");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.ToTable("EntityDupeSearchRequests");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EntityId", b =>
                {
                    b.Property<int>("EntityIdsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Entity_IDs_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityIdsId"));

                    b.Property<string>("Current")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("End")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EntityIdsId");

                    b.ToTable("Entity_IDs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EntityMergeDetailsLog", b =>
                {
                    b.Property<int>("EntityMergeDetailsLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityMergeDetailsLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityMergeDetailsLogId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityMergeLogId")
                        .HasColumnType("int");

                    b.Property<string>("KeyColumn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("KeyColumnValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OriginalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EntityMergeDetailsLogId")
                        .HasName("PK__EntityMe__C6CDA825BDA42B45");

                    b.HasIndex("EntityMergeLogId");

                    b.ToTable("EntityMergeDetailsLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EntityMergeLog", b =>
                {
                    b.Property<int>("EntityMergeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityMergeLogId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityIdnew")
                        .HasColumnType("int")
                        .HasColumnName("EntityIDNew");

                    b.Property<int>("EntityIdold")
                        .HasColumnType("int")
                        .HasColumnName("EntityIDOld");

                    b.Property<bool>("IsUnMerged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MergeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OriginalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("EntityMergeLogId")
                        .HasName("PK__EntityMe__91D0FE9AF9B8CE93");

                    b.ToTable("EntityMergeLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpapApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationID")
                        .HasComment("The primary key");

                    b.Property<Guid>("ApplicationState")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The application state where the lookup is APPLICATION_STATES");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasComment("The created timestamp");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvitationID")
                        .HasComment("The invitation id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID")
                        .HasComment("The program id");

                    b.Property<string>("ScreenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ApplicationId")
                        .HasName("Pk_Applications_application_id");

                    b.HasIndex("InvitationId");

                    b.ToTable("EPAP_Applications", null, t =>
                        {
                            t.HasComment("The ePap application");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpapApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Callsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Https")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LineNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Logger")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServerAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Log");

                    b.ToTable("EPAP_ApplicationLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpapInvitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvitationID")
                        .HasComment("The primary key");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("The created timestamp");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("The user that generated the invitation");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("The email address for which the invitation was sent");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime")
                        .HasComment("The invitation expiration timestamp");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Active flag");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Deleted flag for backend soft deletes");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasComment("The last updated timestamp");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("The user that last performed an update to the invitation");

                    b.Property<string>("OnBehalfOf")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID")
                        .HasComment("The program id");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublicID")
                        .HasComment("The public invitation id");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID")
                        .HasComment("The service request id");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvitationId")
                        .HasName("Pk_ePAP_Invites_InvitationID");

                    b.ToTable("EPAP_Invitations", null, t =>
                        {
                            t.HasComment("The ePAP invitation");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpsilonCallLog", b =>
                {
                    b.Property<int>("EpsilonCallLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EpsilonCallLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpsilonCallLogId"));

                    b.Property<string>("ActivityTypeTrigger")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CallDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CallType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("LogMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequestXml")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RequestXML");

                    b.Property<string>("ResponseXml")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ResponseXML");

                    b.Property<string>("ScreenName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("SrsubTypeTrigger")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRSubTypeTrigger");

                    b.HasKey("EpsilonCallLogId");

                    b.ToTable("EpsilonCallLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Ereferral", b =>
                {
                    b.Property<int>("EreferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EReferralID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EreferralId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateOnly>("ReferralDate")
                        .HasColumnType("date");

                    b.Property<string>("RxProduct")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("EreferralId");

                    b.ToTable("EReferrals", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EventsQueue", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EventSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("SourceID");

                    b.Property<string>("SourceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EventId");

                    b.ToTable("EventsQueue", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ExperianApilog", b =>
                {
                    b.Property<int>("ExperianApilogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExperianAPILog_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperianApilogId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EncryptedSsn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EncryptedSSN");

                    b.Property<string>("Errors")
                        .HasColumnType("xml");

                    b.Property<decimal?>("EstimatedHouseholdIncome")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("EstimatedHouseholdSize")
                        .HasColumnType("int");

                    b.Property<double?>("FplPercentage")
                        .HasColumnType("float");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PortalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SappCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("SendSsntoVendor")
                        .HasColumnType("bit")
                        .HasColumnName("SendSSNToVendor");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.HasKey("ExperianApilogId");

                    b.ToTable("ExperianAPILog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaqSrtype", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FaqListId")
                        .HasColumnType("int")
                        .HasColumnName("FaqListID");

                    b.Property<int>("FaqSrtypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FAQ_SRTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaqSrtypeId"));

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ServiceRequestType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasIndex("FaqListId");

                    b.ToTable("FAQ_SRType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Faqlist", b =>
                {
                    b.Property<int>("FaqListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FaqListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaqListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Answer")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("FaqListId");

                    b.ToTable("FAQList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxInboundReport", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ALIAS");

                    b.Property<string>("Ani")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ANI");

                    b.Property<string>("Billcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BILLCODE");

                    b.Property<string>("Completedate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPLETEDATE");

                    b.Property<string>("Completetime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPLETETIME");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cref")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREF");

                    b.Property<string>("Dnis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DNIS");

                    b.Property<string>("Faxpartial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FAXPARTIAL");

                    b.Property<string>("Groupname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUPNAME");

                    b.Property<string>("Jobno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JOBNO");

                    b.Property<bool>("Matched")
                        .HasColumnType("bit");

                    b.Property<string>("Pages")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAGES");

                    b.Property<string>("Retries")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RETRIES");

                    b.Property<string>("Startdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STARTDATE");

                    b.Property<string>("Starttime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STARTTIME");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SUBJECT");

                    b.Property<string>("To")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TO");

                    b.Property<string>("Uan")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UAN");

                    b.ToTable("FAX_INBOUND_REPORT", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogDetail", b =>
                {
                    b.Property<int>("FldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FLD_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FldId"));

                    b.Property<DateTime?>("FldDeliveryConfirmationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FLD_DELIVERY_CONFIRMATION_DATE");

                    b.Property<int?>("FldDocumentsInboundfaxesId")
                        .HasColumnType("int")
                        .HasColumnName("FLD_DOCUMENTS_INBOUNDFAXES_ID");

                    b.Property<int?>("FldDocumentsOutboundfaxesId")
                        .HasColumnType("int")
                        .HasColumnName("FLD_DOCUMENTS_OUTBOUNDFAXES_ID");

                    b.Property<string>("FldEasylinkJobid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FLD_EASYLINK_JOBID");

                    b.Property<int>("FldFlsId")
                        .HasColumnType("int")
                        .HasColumnName("FLD_FLS_ID");

                    b.Property<DateTime>("FldRecordCreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FLD_RECORD_CREATED_DATE");

                    b.Property<DateTime?>("FldSentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FLD_SENT_DATE");

                    b.Property<string>("FldStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FLD_STATUS");

                    b.HasKey("FldId")
                        .HasName("PK__FAX_LOG___84774207108B795B");

                    b.HasIndex("FldFlsId");

                    b.ToTable("FAX_LOG_DETAILS", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogException", b =>
                {
                    b.Property<int>("FleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FLE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FleId"));

                    b.Property<DateTime>("FleCreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FLE_CREATED_DATE");

                    b.Property<string>("FleErrorMessageText")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FLE_ERROR_MESSAGE_TEXT");

                    b.Property<int?>("FleFldId")
                        .HasColumnType("int")
                        .HasColumnName("FLE_FLD_ID");

                    b.Property<int?>("FleFlsId")
                        .HasColumnType("int")
                        .HasColumnName("FLE_FLS_ID");

                    b.Property<string>("FleStackTraceText")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FLE_STACK_TRACE_TEXT");

                    b.HasKey("FleId")
                        .HasName("PK__FAX_LOG___ADE5768D15502E78");

                    b.HasIndex("FleFldId");

                    b.HasIndex("FleFlsId");

                    b.ToTable("FAX_LOG_EXCEPTIONS", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogSummary", b =>
                {
                    b.Property<int>("FlsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FLS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlsId"));

                    b.Property<DateTime?>("FlsEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FLS_END_DATE");

                    b.Property<string>("FlsJobType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FLS_JOB_TYPE");

                    b.Property<int?>("FlsRecordsProcessed")
                        .HasColumnType("int")
                        .HasColumnName("FLS_RECORDS_PROCESSED");

                    b.Property<DateTime?>("FlsStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FLS_START_DATE");

                    b.Property<string>("FlsStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FLS_STATUS");

                    b.Property<int?>("FlsTotalRecords")
                        .HasColumnType("int")
                        .HasColumnName("FLS_TOTAL_RECORDS");

                    b.HasKey("FlsId")
                        .HasName("PK__FAX_LOG___1FBBDC350CBAE877");

                    b.ToTable("FAX_LOG_SUMMARY", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxNumber", b =>
                {
                    b.Property<int>("FaxNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FaxNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaxNumberId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FaxNumber");

                    b.Property<string>("FaxType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PayerDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PayerDetailID");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("FaxNumberId");

                    b.HasIndex("PayerDetailId");

                    b.ToTable("FaxNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxSampleReport", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ALIAS");

                    b.Property<string>("Ani")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ANI");

                    b.Property<string>("Billcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BILLCODE");

                    b.Property<string>("CompleteDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPLETE DATE");

                    b.Property<string>("CompleteTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPLETE TIME");

                    b.Property<string>("Cref")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREF");

                    b.Property<string>("Dnis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DNIS");

                    b.Property<string>("FaxPartial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FAX PARTIAL");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GROUP NAME");

                    b.Property<string>("Jobno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JOBNO");

                    b.Property<string>("Pages")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAGES");

                    b.Property<string>("Retries")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RETRIES");

                    b.Property<string>("StartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("START DATE");

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("START TIME");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SUBJECT");

                    b.Property<string>("To")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TO");

                    b.Property<string>("Uan")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UAN");

                    b.ToTable("FAX_Sample_Report", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FedExMailTrackInterfacer", b =>
                {
                    b.Property<long>("FedexMailTrackInterfacerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FedexMailTrackInterfacerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FedexMailTrackInterfacerId"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CustomerReference")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DeclaredValue")
                        .HasColumnType("money");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveryDateDt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryInstruction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DimHeight")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<decimal>("DimLenth")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<decimal>("DimWidth")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<bool?>("EmailFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityReferenceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("EntityReferenceID");

                    b.Property<decimal>("GrossCharges")
                        .HasColumnType("money");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("MailDateDt")
                        .HasColumnType("datetime");

                    b.Property<long>("MailingId")
                        .HasColumnType("bigint")
                        .HasColumnName("MailingID");

                    b.Property<string>("MailingNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("");

                    b.Property<string>("MasterTrackingNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("NetCharges")
                        .HasColumnType("money");

                    b.Property<decimal>("NoofPackages")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<decimal>("PackageWeight")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<decimal>("PackageWeightType")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<decimal>("PaymentType")
                        .HasColumnType("decimal(1, 0)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientAddress1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientAddress2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientCity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientCompany")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientCountry")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientPostalCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("RecipientState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderAddress1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderAddress2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderCity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderCompany")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderContactName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderCountry")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderPhoneNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderPostalCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("SenderState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipmentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("");

                    b.Property<string>("ShippingCompany")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("SignatureReleaseNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("");

                    b.Property<int>("SignatureRequiredFlag")
                        .HasColumnType("int");

                    b.Property<string>("SmartPostTrackingNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("money");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("UpdatedByID");

                    b.Property<DateTime>("UpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FedexMailTrackInterfacerId");

                    b.ToTable("FedExMailTrackInterfacer", null, t =>
                        {
                            t.HasTrigger("trUpdateFedExMailTrackInterfacer");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FederalPovertyLeveList", b =>
                {
                    b.Property<int>("FederalPovertyLevelListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FederalPovertyLevelList_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FederalPovertyLevelListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("AdditionalAmount")
                        .HasColumnType("money");

                    b.Property<int?>("AdditionalFrom")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int?>("HouseholdSize")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateOnly?>("LastUpdatedDate")
                        .HasColumnType("date");

                    b.Property<string>("PovertyLevelYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("Threshold")
                        .HasColumnType("money");

                    b.HasKey("FederalPovertyLevelListId");

                    b.ToTable("FederalPovertyLeveList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FeedbackConfiguration", b =>
                {
                    b.Property<int>("FeedbackConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackConfigurationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUdpated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ManagementUserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("ManagementUserGroupID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrActivityListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("FeedbackConfigurationId")
                        .HasName("PK_Feedback_Configuration");

                    b.HasIndex("ManagementUserGroupId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SrActivityListId");

                    b.HasIndex("SrTypeListId");

                    b.ToTable("Feedback_Configurations", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FieldPortalConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConfigName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConfigValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Lastupdated")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ManufactureName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__FieldPor__3214EC0703D0A495");

                    b.ToTable("FieldPortalConfig", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplication", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<int?>("ApplicantCareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicantCareMetxRecordID");

                    b.Property<string>("ApplicantCareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ApplicationState")
                        .HasColumnType("int");

                    b.Property<string>("ApplyingFor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApproveComments")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("AssistanceFromOtherFoundation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("AttestationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("AttestationSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CallerAttestation")
                        .HasColumnType("bit");

                    b.Property<string>("CallerFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CallerLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CallerMiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CallerPhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CallerType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("ClaimedAsDependant")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("ContactNotifyOptOut")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("CopyFundApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreateSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EnrollmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ExceptionServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityFax")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FacilityPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FacilityZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstNameOnCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("FundCriteriaId")
                        .HasColumnType("int");

                    b.Property<int?>("FundId")
                        .HasColumnType("int");

                    b.Property<string>("FundName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("FundReopenSubscriptionOptedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FundReopenSubscriptionOptedOutDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("GrossHouseholdIncome")
                        .HasColumnType("money");

                    b.Property<bool?>("HasCommercialInsurance")
                        .HasColumnType("bit")
                        .HasColumnName("hasCommercialInsurance");

                    b.Property<bool?>("HasDifferentShippingAddress")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInsurance")
                        .HasColumnType("bit")
                        .HasColumnName("hasInsurance");

                    b.Property<bool?>("HasMedicare")
                        .HasColumnType("bit")
                        .HasColumnName("hasMedicare");

                    b.Property<int?>("HouseholdSize")
                        .HasColumnType("int");

                    b.Property<string>("HowHear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceDefinitions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAuthorizedContactOpted")
                        .HasColumnType("bit")
                        .HasColumnName("isAuthorizedContactOpted");

                    b.Property<bool?>("IsNoEmailProvidedOpted")
                        .HasColumnType("bit")
                        .HasColumnName("isNoEmailProvidedOpted");

                    b.Property<bool?>("IsNoSsnopted")
                        .HasColumnType("bit")
                        .HasColumnName("isNoSSNOpted");

                    b.Property<bool?>("IsUsresident")
                        .HasColumnType("bit")
                        .HasColumnName("isUSResident");

                    b.Property<string>("LastNameOnCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("LastSectionViewed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdateSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OptOutOrganization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientAttestationReceived")
                        .HasColumnType("bit");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientContactPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientContactRelationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientEmploymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int")
                        .HasColumnName("PatientGrantID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<bool?>("PatientIsEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientPreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPreferredLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientReceiveTreatmentAt")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientSSN");

                    b.Property<string>("PatientSsnlastFourDigits")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PatientSSNLastFourDigits");

                    b.Property<string>("PatientState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhysicianEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianNotifyOptOut")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PhysicianNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PhysicianNPI");

                    b.Property<string>("PhysicianPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhysicianPreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianSpecialty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianSpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianSpecialtyID");

                    b.Property<string>("PhysicianStateLicenseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescreenComments")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("PrescreenDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("PrescreenDenialCode")
                        .HasColumnType("int");

                    b.Property<string>("PrescreenDenialMessage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PrescreenPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PrimaryInsuranceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RepLastSectionViewed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("ShippingAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShippingZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<bool?>("TaxReturnRequired")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnemploymentBenefits")
                        .HasColumnType("bit");

                    b.HasKey("FundEnrollmentApplicationId");

                    b.HasIndex(new[] { "EnrollmentType", "CreatedBy", "SubmitDate", "Deleted", "ApplicationState" }, "ix_FundEnrollmentApplications_EnrollmentType_CreatedBy_SubmitDate_Deleted_ApplicationState_includes");

                    b.HasIndex(new[] { "EnrollmentType", "FundId", "PatientId", "ApplicationState", "Deleted" }, "ix_FundEnrollmentApplications_EnrollmentType_FundId_PatientID_ApplicationState_Deleted");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "PatientId", "EnrollmentType", "SubmitDate" }, "ix_FundEnrollmentApplications_ProgramID_Deleted_PatientID_EnrollmentType_SubmitDate");

                    b.HasIndex(new[] { "ServiceRequestId", "Deleted" }, "ix_FundEnrollmentApplications_ServiceRequestID_Deleted");

                    b.ToTable("FundEnrollmentApplications", t =>
                        {
                            t.HasTrigger("utFundEnrollmentApplications");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationInsurance", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationInsuranceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationInsuranceId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InsuranceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceTypeID");

                    b.Property<int?>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<string>("PayerType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("PayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PayerTypeID");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PolicyIdnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PolicyIDNumber");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("FundEnrollmentApplicationInsuranceId");

                    b.ToTable("FundEnrollmentApplicationInsurances", t =>
                        {
                            t.HasTrigger("Tr_FundEnrollmentApplicationInsurances_Audit_Insert");

                            t.HasTrigger("Tr_FundEnrollmentApplicationInsurances_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationInsurancesAudit", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationInsuranceAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationInsuranceAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationInsuranceAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<int?>("FundEnrollmentApplicationInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationInsuranceID");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InsuranceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceTypeID");

                    b.Property<int?>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<string>("PayerType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("PayerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PayerTypeID");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PolicyIdnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PolicyIDNumber");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("FundEnrollmentApplicationInsuranceAuditId");

                    b.ToTable("FundEnrollmentApplicationInsurances_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationMedication", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationMedicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationMedicationId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("FundEnrollmentApplicationMedicationId");

                    b.ToTable("FundEnrollmentApplicationMedications", t =>
                        {
                            t.HasTrigger("Tr_FundEnrollmentApplicationMedications_Audit_Insert");

                            t.HasTrigger("Tr_FundEnrollmentApplicationMedications_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationMedicationsAudit", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationMedicationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationMedicationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationMedicationAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<int?>("FundEnrollmentApplicationMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationMedicationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("FundEnrollmentApplicationMedicationAuditId");

                    b.ToTable("FundEnrollmentApplicationMedications_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationPatientSite", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationSiteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationSiteId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OriginalDistance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneExtenstion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("FundEnrollmentApplicationSiteId")
                        .HasName("PK_dbo.FundEnrollmentApplicationPatientSite");

                    b.HasIndex("FundEnrollmentApplicationId");

                    b.ToTable("FundEnrollmentApplicationPatientSite", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationsAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ApplicantCareMetxRecordId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicantCareMetxRecordID");

                    b.Property<string>("ApplicantCareMetxRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ApplicationState")
                        .HasColumnType("int");

                    b.Property<string>("ApplyingFor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApproveComments")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("AssistanceFromOtherFoundation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("AttestationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("AttestationSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CallerAttestation")
                        .HasColumnType("bit");

                    b.Property<string>("CallerFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CallerLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CallerMiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CallerPhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CallerType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("ClaimedAsDependant")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("ContactNotifyOptOut")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("CopyFundApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreateSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EnrollmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ExceptionServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FacilityFax")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FacilityPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FacilityZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstNameOnCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("FundCriteriaId")
                        .HasColumnType("int");

                    b.Property<int?>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<int>("FundEnrollmentApplicationIdAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationIdAuditId"));

                    b.Property<int?>("FundId")
                        .HasColumnType("int");

                    b.Property<string>("FundName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("FundReopenSubscriptionOptedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FundReopenSubscriptionOptedOutDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("GrossHouseholdIncome")
                        .HasColumnType("money");

                    b.Property<bool?>("HasCommercialInsurance")
                        .HasColumnType("bit")
                        .HasColumnName("hasCommercialInsurance");

                    b.Property<bool?>("HasDifferentShippingAddress")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInsurance")
                        .HasColumnType("bit")
                        .HasColumnName("hasInsurance");

                    b.Property<bool?>("HasMedicare")
                        .HasColumnType("bit")
                        .HasColumnName("hasMedicare");

                    b.Property<int?>("HouseholdSize")
                        .HasColumnType("int");

                    b.Property<string>("HowHear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceDefinitions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAuthorizedContactOpted")
                        .HasColumnType("bit")
                        .HasColumnName("isAuthorizedContactOpted");

                    b.Property<bool?>("IsNoEmailProvidedOpted")
                        .HasColumnType("bit")
                        .HasColumnName("isNoEmailProvidedOpted");

                    b.Property<bool?>("IsNoSsnopted")
                        .HasColumnType("bit")
                        .HasColumnName("isNoSSNOpted");

                    b.Property<bool?>("IsUsresident")
                        .HasColumnType("bit")
                        .HasColumnName("isUSResident");

                    b.Property<string>("LastNameOnCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("LastSectionViewed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdateSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OptOutOrganization")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientAttestationReceived")
                        .HasColumnType("bit");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientContactPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientContactRelationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientEmploymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int")
                        .HasColumnName("PatientGrantID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<bool?>("PatientIsEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientPreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPreferredLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientReceiveTreatmentAt")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientSSN");

                    b.Property<string>("PatientSsnlastFourDigits")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PatientSSNLastFourDigits");

                    b.Property<string>("PatientState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhysicianEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhysicianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianNotifyOptOut")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PhysicianNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PhysicianNPI");

                    b.Property<string>("PhysicianPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhysicianPreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianSpecialty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PhysicianSpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianSpecialtyID");

                    b.Property<string>("PhysicianStateLicenseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescreenComments")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("PrescreenDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PrescreenDenialCode")
                        .HasColumnType("int");

                    b.Property<string>("PrescreenDenialMessage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PrescreenPassed")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryInsuranceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RepLastSectionViewed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("ShippingAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShippingZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<bool?>("TaxReturnRequired")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnemploymentBenefits")
                        .HasColumnType("bit");

                    b.ToTable("FundEnrollmentApplications_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationsExtension", b =>
                {
                    b.Property<int>("FundEnrollmentApplicationExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundEnrollmentApplicationExtensionId"));

                    b.Property<DateTime?>("AttestationExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("AttestationIsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AttestationStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EligibilityStartDate")
                        .HasColumnType("date");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<int>("FundEnrollmentApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("FundEnrollmentApplicationID");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PatientAttestationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAttestationID");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int");

                    b.Property<string>("Pcn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PCN");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RxBin")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("money");

                    b.HasKey("FundEnrollmentApplicationExtensionId")
                        .HasName("PK_FundEnrollmentApplications_Extension_FundEnrollmentApplicationExtensionId");

                    b.ToTable("FundEnrollmentApplications_Extension", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionDetail", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("FundEnrollmentApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("FundId")
                        .HasColumnType("int");

                    b.Property<string>("GrantType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("OptedOut")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PatientAddress1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("PatientDateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("PatientEmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int")
                        .HasColumnName("PatientGrantID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSsn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientSSN");

                    b.Property<string>("PatientSsnlastFourDigits")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PatientSSNLastFourDigits");

                    b.Property<string>("PatientState")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("FundEnrollmentApplicationId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("FundReopenSubscriptionDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionMedication", b =>
                {
                    b.Property<int>("FundReopenSubscriptionMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FundReopenSubscriptionMedicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundReopenSubscriptionMedicationId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("FundReopenSubscriptionMedicationId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("FundReopenSubscriptionMedications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionSubscriber", b =>
                {
                    b.Property<int>("FundReopenSubscriptionSubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundReopenSubscriptionSubscriberId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberEmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubscriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberLastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SubscriberType")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("FundReopenSubscriptionSubscriberId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("FundReopenSubscriptionSubscribers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetAgeInYearDayResult", b =>
                {
                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<int?>("Years")
                        .HasColumnType("int");

                    b.ToTable("GetAgeInYearDayResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_MedImmuneSPPResult", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_MedImmuneSPPResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_MedImmuneSPP_V2Result", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_MedImmuneSPP_V2Result");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_PathwayOpsumitResult", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_PathwayOpsumitResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_PathwayTracleerResult", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_PathwayTracleerResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_PathwayUptraviResult", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_PathwayUptraviResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_PathwayUptravi_V2Result", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_PathwayUptravi_V2Result");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_PathwayUptravi_testsudhaResult", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_PathwayUptravi_testsudhaResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetExtendedTriageRecord_PathwayVentavisResult", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetExtendedTriageRecord_PathwayVentavisResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetMedicalHistoryResult", b =>
                {
                    b.Property<string>("ALT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ALTDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AST")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ASTDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP_DIASTOLIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP_DIASTOLICDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP_SYSTOLIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP_SYSTOLICDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREAT_SER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREAT_SERDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HDLC")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HDL-C");

                    b.Property<string>("HDLCDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HDL-CDate");

                    b.Property<string>("HEIGHT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HEIGHTDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HGB_A1C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HGB_A1CDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hyperlipidemia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hypertension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LDL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LDLDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("TRIGLYC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TRIGLYCDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UMCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UMCRDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WEIGHT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WEIGHTDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("surveyelementsid")
                        .HasColumnType("int");

                    b.ToTable("GetMedicalHistoryResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetSRManagementResult_ishitaTestResult", b =>
                {
                    b.Property<DateOnly?>("NextInjectionDate")
                        .HasColumnType("date");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPayer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SRDrugName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SR_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SR_TypeFullDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPayer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceRequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetSRManagementResult_ishitaTestResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GetWorkHours_TableResult", b =>
                {
                    b.Property<int?>("ret_hours")
                        .HasColumnType("int");

                    b.Property<int?>("ret_mins")
                        .HasColumnType("int");

                    b.ToTable("GetWorkHours_TableResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GlobalConfiguration", b =>
                {
                    b.Property<int>("GlobalConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlobalConfigurationId"));

                    b.Property<byte[]>("BinaryData")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<decimal?>("RawValue")
                        .HasColumnType("decimal(14, 3)");

                    b.Property<string>("TextData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlobalConfigurationId")
                        .HasName("PK__GlobalCo__443F5BA29E63C53A");

                    b.ToTable("GlobalConfigurations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GrantUsePolicyException", b =>
                {
                    b.Property<int>("GrantUsePolicyExceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GrantUsePolicyExceptionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ExceptionEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExceptionStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ExtensionReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Pandecision")
                        .HasColumnType("bit")
                        .HasColumnName("PANDecision");

                    b.Property<DateOnly?>("PanreceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANReceivedDate");

                    b.Property<DateOnly?>("PanrequestedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANRequestedDate");

                    b.Property<int>("PatientGrantId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReasonEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReasonStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupervisorComments")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<bool>("SupervisorNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("UserComments")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.HasKey("GrantUsePolicyExceptionId")
                        .HasName("PK_GrantUsePolicyExceptionId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("GrantUsePolicyExceptionId"), false);

                    b.HasIndex("ExtensionReasonId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("StatusId");

                    b.ToTable("GrantUsePolicyException", null, t =>
                        {
                            t.HasTrigger("utGrantUsePolicyException");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GrantUsePolicyExceptionAudit", b =>
                {
                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ExceptionEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExceptionStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ExtensionReasonId")
                        .HasColumnType("int");

                    b.Property<Guid?>("GrantUsePolicyExceptionAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("GrantUsePolicyExceptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Pandecision")
                        .HasColumnType("bit")
                        .HasColumnName("PANDecision");

                    b.Property<DateOnly?>("PanreceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANReceivedDate");

                    b.Property<DateOnly?>("PanrequestedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANRequestedDate");

                    b.Property<int>("PatientGrantId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReasonEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReasonStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupervisorComments")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<bool>("SupervisorNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("UserComments")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.ToTable("GrantUsePolicyException_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.HcpPortalPatientCaregiver", b =>
                {
                    b.Property<int>("CaregiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CaregiverID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaregiverId"));

                    b.Property<string>("CaregiverFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaregiverPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CaregiverId");

                    b.ToTable("HCP_Portal_PatientCaregiver", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.HcpPortalSrtypeMapping", b =>
                {
                    b.Property<int>("HcpportalSrtypeMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HCPPortalSRTypeMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HcpportalSrtypeMappingId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("HcpSrtypeDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("HCP_SRType_Description");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SrSubTypeListIds")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeListIDs");

                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("HcpportalSrtypeMappingId")
                        .HasName("PK_HCP_Portal_SRType_Mapping_1");

                    b.ToTable("HCP_Portal_SRType_Mapping", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.HcpportalNlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Callsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Logger")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HCPPortalLog");

                    b.ToTable("HCPPortalNLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.HcpservicesApicallLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestMethod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RequestPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RequestURL");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("ResponseStatusCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogId")
                        .HasName("PK_dbo.HCPServicesAPICallLogs");

                    b.ToTable("HCPServicesAPICallLogs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Image", b =>
                {
                    b.Property<double>("Imgid")
                        .HasColumnType("float")
                        .HasColumnName("imgid");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DRUG_NAME");

                    b.Property<byte[]>("Image1")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("Imgfilenm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("imgfilenm");

                    b.HasKey("Imgid");

                    b.ToTable("IMAGES", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ImportProvider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("AcctAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AcctAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AcctCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AcctState")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AcctZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CleanedExt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CleanedPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dea")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DEA");

                    b.Property<string>("Degree")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("First")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Last")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProviderId");

                    b.ToTable("Import_Providers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.IncomeAttestation", b =>
                {
                    b.Property<int>("IncomeAttestationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncomeAttestationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeAttestationId"));

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DrugTherapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("OptOutDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Optout")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("IncomeAttestationId");

                    b.ToTable("IncomeAttestation", null, t =>
                        {
                            t.HasTrigger("tr_Income_AttestationInsert");

                            t.HasTrigger("tr_Income_AttestationUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.IncomeAttestationAudit", b =>
                {
                    b.Property<int>("IncomeAttestationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncomeAttestationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeAttestationAuditId"));

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DrugTherapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IncomeAttestationId")
                        .HasColumnType("int")
                        .HasColumnName("IncomeAttestationID");

                    b.Property<bool?>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("OptOutDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Optout")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("IncomeAttestationAuditId");

                    b.ToTable("IncomeAttestationAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.IninincomeLog", b =>
                {
                    b.Property<int>("IninincomeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ININIncomeLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IninincomeLogId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentUserResponse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InteractionId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("InteractionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Processed")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IninincomeLogId");

                    b.ToTable("ININIncomeLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Ininlog", b =>
                {
                    b.Property<int>("IninlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ININLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IninlogId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InteractionId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("InteractionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Processed")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IninlogId")
                        .HasName("PK_ININLog1");

                    b.HasIndex(new[] { "InteractionId", "ProgramId", "Active" }, "ProgramAndID");

                    b.ToTable("ININLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("BenefitPlanType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BenefitType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Binnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BINNumber");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalPayorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPayorID");

                    b.Property<string>("ExternalPbmid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPBMID");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceBenefitPlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InsuranceEligibilityCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Insurance_Eligibility_Code");

                    b.Property<string>("InsuranceEligibilityName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Insurance_Eligibility_Name");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int>("MdmprogramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasColumnName("MDMProgramID");

                    b.Property<int?>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<string>("PayerTypeCode1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PayerTypeCode_1");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCN");

                    b.Property<string>("PlanTypeCode2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PlanTypeCode_2");

                    b.Property<string>("PlanTypeDetailBreakdownCode4")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PlanTypeDetailBreakdownCode_4");

                    b.Property<string>("PlanTypeDetailBreakdownCode5")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PlanTypeDetailBreakdownCode_5");

                    b.Property<string>("PlanTypeDetailCode3")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PlanTypeDetailCode_3");

                    b.Property<string>("ProductType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SoftwareVendorCertificationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SoftwareVendorCertificationID");

                    b.HasKey("InsuranceId")
                        .HasName("PK_PayerBenefitPlans");

                    b.HasIndex("PayerId");

                    b.ToTable("Insurances", t =>
                        {
                            t.HasTrigger("Insurances_AlwaysActive");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceAddress", b =>
                {
                    b.Property<int>("InsuranceAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsuranceAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("InsuranceAddressId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceAddresses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceDynamicDatum", b =>
                {
                    b.Property<int>("InsuranceDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsuranceDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("InsuranceDynamicDataId");

                    b.HasIndex("DynamicDataListId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceDynamicData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceEligibilityCode", b =>
                {
                    b.Property<string>("EnrollmentRequired")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Enrollment Required");

                    b.Property<string>("PayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payer Id");

                    b.Property<string>("PayerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Payer name");

                    b.ToTable("InsuranceEligibilityCodes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceEligibilityLookUpList", b =>
                {
                    b.Property<int>("InsuranceEligibilityLookUpListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Insurance_Eligibility_LookUpListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceEligibilityLookUpListId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("InsuranceEligibilityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Insurance_Eligibility_Code");

                    b.Property<string>("InsuranceEligibilityName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Insurance_Eligibility_Name");

                    b.HasKey("InsuranceEligibilityLookUpListId");

                    b.ToTable("Insurance_Eligibility_LookUpList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceNote", b =>
                {
                    b.Property<int>("InsuranceNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsuranceNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceNoteId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("InsuranceNoteId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceNotes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsurancePhoneNumber", b =>
                {
                    b.Property<int>("InsurancePhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsurancePhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsurancePhoneNumberId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InsurancePhoneNumberId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsurancePhoneNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceProgram", b =>
                {
                    b.Property<int>("InsuranceProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsuranceProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceProgramId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SharedRecordProgramId")
                        .HasColumnType("int")
                        .HasColumnName("SharedRecordProgramID");

                    b.HasKey("InsuranceProgramId");

                    b.ToTable("InsurancePrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InvalidPatientEmailCleanUp", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Insertdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("InsertedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InvalidEmailRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvalidEmailRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvalidEmailRecordId"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MemberID");

                    b.Property<string>("OriginalRecordCreatedOn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("SsnlastFourDigits")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("SSNLastFourDigits");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.ToTable("InvalidPatientEmailCleanUp", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Log4NetError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Exception")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Thread")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_log4net_error");

                    b.ToTable("Log4Net_Error", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LookupDataList", b =>
                {
                    b.Property<int>("LookupDataListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupDataListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalField")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("AlwaysActive")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldValidations")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("GenericDrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsCarecycle")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ListValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("OffRampClientDaysOfYear")
                        .HasColumnType("int");

                    b.Property<string>("OptionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PortalVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("SrResolutions")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("SR_Resolutions");

                    b.Property<string>("SrSubTypes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_SubTypes");

                    b.Property<string>("SrTypes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_Types");

                    b.Property<string>("Symbol")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TemplateTagName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TriggerRules")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("LookupDataListId");

                    b.HasIndex(new[] { "FunctionName" }, "IX_LokupDataList_FunctionName");

                    b.HasIndex(new[] { "Category" }, "IX_LookupDataList_Category");

                    b.HasIndex(new[] { "ProgramId", "Active" }, "IX_LookupDataList_ProgramID");

                    b.ToTable("LookupDataList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LookupInfinitusPayerId", b =>
                {
                    b.Property<string>("InfinitusPayerId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("InfinitusPayerID");

                    b.Property<string>("PayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("LookupInfinitusPayerID", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LookupList", b =>
                {
                    b.Property<int>("LookupListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CareMetxProgramtId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LookupListId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("LookupListId"), false);

                    b.HasIndex(new[] { "Code" }, "UQ_StatusList")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Code" }, "UQ_StatusList"));

                    b.ToTable("LookupLists");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LookupPa", b =>
                {
                    b.Property<string>("Appeal118")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Appeal119")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F4")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F6")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Pa118")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PA118");

                    b.Property<string>("Pa119")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PA119");

                    b.Property<string>("Sort")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sort");

                    b.ToTable("Lookup_PA", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailErrorLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmailNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("EmailNotificationID");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EntityTypeID");

                    b.Property<string>("ErrorDetails")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ErrorSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("LogId");

                    b.HasIndex("EmailNotificationId");

                    b.ToTable("LTR_EmailError_Log", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailNotification", b =>
                {
                    b.Property<int>("EmailNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailNotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailNotificationId"));

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailBody")
                        .HasColumnType("text");

                    b.Property<int?>("EmailStatusId")
                        .HasColumnType("int")
                        .HasColumnName("EmailStatusID");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EventType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ExternalMailId")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ExternalMailID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Sent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int?>("TrackAttempt")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TrackDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmailNotificationId");

                    b.HasIndex("NotificationItemId");

                    b.ToTable("LTR_EmailNotification", null, t =>
                        {
                            t.HasTrigger("Tr_LTR_EmailNotification_Audit_Insert");

                            t.HasTrigger("Tr_LTR_EmailNotification_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailNotificationAudit", b =>
                {
                    b.Property<int>("EmailNotificationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailNotificationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailNotificationAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailBody")
                        .HasColumnType("text");

                    b.Property<int>("EmailNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("EmailNotificationID");

                    b.Property<int?>("EmailStatusId")
                        .HasColumnType("int")
                        .HasColumnName("EmailStatusID");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EventType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ExternalMailId")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ExternalMailID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Sent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("EmailNotificationAuditId");

                    b.ToTable("LTR_EmailNotification_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailTransaction", b =>
                {
                    b.Property<int>("EmailTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmailTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTransactionId"));

                    b.Property<int?>("AttemptNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailEvent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmailNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("EmailNotificationID");

                    b.Property<DateTime?>("EventTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("EmailTransactionId");

                    b.HasIndex("EmailNotificationId");

                    b.ToTable("LTR_EmailTransaction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorLogId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ErrorContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorLevel")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ErrorLogId");

                    b.ToTable("LTR_ErrorLogs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxErrorLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EntityTypeID");

                    b.Property<string>("ErrorDetails")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ErrorSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FaxNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("FaxNotificationID");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("LogId");

                    b.HasIndex("FaxNotificationId");

                    b.ToTable("LTR_FaxError_Log", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxNotification", b =>
                {
                    b.Property<int>("FaxNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FaxNotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaxNotificationId"));

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxJobId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FaxJobID");

                    b.Property<string>("FaxJobXdn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FaxJobXDN");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FaxStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FaxStatusID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Sent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TrackAttempt")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TrackDate")
                        .HasColumnType("datetime");

                    b.HasKey("FaxNotificationId");

                    b.HasIndex("NotificationItemId");

                    b.ToTable("LTR_FaxNotification", null, t =>
                        {
                            t.HasTrigger("Tr_LTR_FaxNotification_Audit_Insert");

                            t.HasTrigger("Tr_LTR_FaxNotification_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxNotificationAudit", b =>
                {
                    b.Property<int>("FaxNotificationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FaxNotificationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaxNotificationAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Delivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxJobId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FaxJobID");

                    b.Property<string>("FaxJobXdn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FaxJobXDN");

                    b.Property<int>("FaxNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("FaxNotificationID");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FaxStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FaxStatusID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Sent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("FaxNotificationAuditId");

                    b.ToTable("LTR_FaxNotification_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxTransaction", b =>
                {
                    b.Property<int>("FaxTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FaxTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaxTransactionId"));

                    b.Property<int?>("AttemptNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EventTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("FaxNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("FaxNotificationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("FaxTransactionId");

                    b.HasIndex("FaxNotificationId");

                    b.ToTable("LTR_FaxTransaction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrLookupList", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ListCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ListDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("ListId");

                    b.ToTable("LTR_LookupList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrLookupListItem", b =>
                {
                    b.Property<int>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListItemId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("ListItemId");

                    b.HasIndex("ListId");

                    b.ToTable("LTR_LookupListItem", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrMailNotification", b =>
                {
                    b.Property<int>("MailNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MailNotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailNotificationId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("MailStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MailStatusID");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("MailNotificationId");

                    b.HasIndex("NotificationItemId");

                    b.ToTable("LTR_MailNotification", null, t =>
                        {
                            t.HasTrigger("Tr_LTR_MailNotification_Audit_Insert");

                            t.HasTrigger("Tr_LTR_MailNotification_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrMailNotificationAudit", b =>
                {
                    b.Property<int>("MailNotificationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MailNotificationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailNotificationAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("MailNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("MailNotificationID");

                    b.Property<int?>("MailStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MailStatusID");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("MailNotificationAuditId");

                    b.ToTable("LTR_MailNotification_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrMailTransaction", b =>
                {
                    b.Property<int>("MailNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("MailNotificationID");

                    b.Property<int?>("AttemptNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EventTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("MailTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MailTransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailTransactionId"));

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("MailNotificationId");

                    b.ToTable("LTR_MailTransaction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationItem", b =>
                {
                    b.Property<int>("NotificationItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationItemId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<int?>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("EmailTemplateID");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EntityTypeID");

                    b.Property<bool?>("IsException")
                        .HasColumnType("bit");

                    b.Property<string>("Jsondata")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JSONData");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("NotificationContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<bool?>("OptedOut")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentNotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("ParentNotificationItemID");

                    b.Property<string>("Pmc")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PMC");

                    b.Property<int>("PmctypeId")
                        .HasColumnType("int")
                        .HasColumnName("PMCTypeID");

                    b.Property<int?>("ProcessStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessStatusID");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("ReSend")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int")
                        .HasColumnName("RecipientID");

                    b.Property<int?>("RecipientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipientTypeID");

                    b.Property<string>("Source")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("System");

                    b.Property<int?>("TransmissionStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TransmissionStatusID");

                    b.HasKey("NotificationItemId");

                    b.HasIndex("DocumentListId");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("NotificationId");

                    b.ToTable("LTR_NotificationItems", null, t =>
                        {
                            t.HasTrigger("Tr_LTR_NotificationItems_Audit_Insert");

                            t.HasTrigger("Tr_LTR_NotificationItems_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationItemsAudit", b =>
                {
                    b.Property<int>("NotificationItemAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationItemAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<int?>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("EmailTemplateID");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EntityTypeID");

                    b.Property<bool?>("IsException")
                        .HasColumnType("bit");

                    b.Property<string>("Jsondata")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JSONData");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("NotificationContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<bool?>("OptedOut")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentNotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("ParentNotificationItemID");

                    b.Property<string>("Pmc")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PMC");

                    b.Property<int>("PmctypeId")
                        .HasColumnType("int")
                        .HasColumnName("PMCTypeID");

                    b.Property<int?>("ProcessStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessStatusID");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("ReSend")
                        .HasColumnType("bit");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int")
                        .HasColumnName("RecipientID");

                    b.Property<int?>("RecipientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipientTypeID");

                    b.Property<string>("Source")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("TransmissionStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TransmissionStatusID");

                    b.HasKey("NotificationItemAuditId");

                    b.ToTable("LTR_NotificationItems_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationMaster", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MasterStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MasterStatusID");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("NotificationId");

                    b.ToTable("LTR_NotificationMaster", null, t =>
                        {
                            t.HasTrigger("Tr_LTR_NotificationMaster_Audit_Insert");

                            t.HasTrigger("Tr_LTR_NotificationMaster_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationMasterAudit", b =>
                {
                    b.Property<int>("NotificationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MasterStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MasterStatusID");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("NotificationAuditId");

                    b.ToTable("LTR_NotificationMaster_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrProcessLog", b =>
                {
                    b.Property<int>("ProcessLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProcessLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessLogId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<int>("NotificationItemId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationItemID");

                    b.Property<string>("ProcessStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ProcessLogId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("NotificationItemId");

                    b.ToTable("LTR_ProcessLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MailTracking", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("BillToName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("CandidateBookmark")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit");

                    b.Property<string>("DeliveredAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("DeliveredDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("DeliveredDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeliveredStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("");

                    b.Property<string>("DeliveredTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("InquiryNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<long>("MailTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MailTrackingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MailTrackingId"));

                    b.Property<long>("MailingId")
                        .HasColumnType("bigint")
                        .HasColumnName("MailingID");

                    b.Property<string>("PackageWeight")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("PickupDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResponseStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("");

                    b.Property<string>("ServiceCenter")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipmentAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipmentService")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipmentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipmentWeight")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ShipperNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.ToTable("MailTrackings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MailTrackingError", b =>
                {
                    b.Property<long>("MailTrackingErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MailTrackingErrorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MailTrackingErrorId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDt")
                        .HasColumnType("datetime");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int");

                    b.Property<string>("ErrorDetails")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ErrorTrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("datetime");

                    b.HasKey("MailTrackingErrorId");

                    b.ToTable("MailTrackingErrors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Mailing", b =>
                {
                    b.Property<long>("MailingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MailingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MailingId"));

                    b.Property<string>("AddressVerifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("AddressVerifiedDateDt")
                        .HasColumnType("datetime");

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContactAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ContactAddressID");

                    b.Property<int?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID")
                        .HasComment("This column holds the foreign key reference to the EntityID field of Entity Table");

                    b.Property<bool?>("IsAddressVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("LastUpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("MailAddress1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("MailAddress2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("MailCarrier")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("MailCity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("MailCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("MailDateDt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MailDeliveryDateDt")
                        .HasColumnType("datetime");

                    b.Property<string>("MailShippingMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("MailState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("");

                    b.Property<string>("MailStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("MailZip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("MailingNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasComment("This will be the number that can be searchable in Fedex Ship Manager App.");

                    b.Property<int?>("PatientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("PatientAddressID");

                    b.Property<int?>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int?>("PhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("TrackingNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("MailingId")
                        .HasName("PK_SH_Shipments");

                    b.HasIndex("ContactAddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EntityId");

                    b.HasIndex("PatientAddressId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianAddressId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex(new[] { "MailingNumber" }, "IX_SH_Shipments")
                        .IsUnique()
                        .HasFilter("[MailingNumber] IS NOT NULL");

                    b.ToTable("Mailings", t =>
                        {
                            t.HasTrigger("trInsertMailings");

                            t.HasTrigger("trUpdateMailings");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MailingDocument", b =>
                {
                    b.Property<long>("MailingDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MailingDocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MailingDocumentId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<string>("LastUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("LastUpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MailingId")
                        .HasColumnType("bigint")
                        .HasColumnName("MailingID");

                    b.HasKey("MailingDocumentId")
                        .HasName("PK_SH_ShipmentDocuments");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MailingId");

                    b.ToTable("MailingDocuments");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MailingWebServiceRequest", b =>
                {
                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("MailingWebServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MailingWebServiceRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MailingWebServiceRequestId"));

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValue("");

                    b.Property<string>("ServiceUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasColumnName("ServiceURL");

                    b.Property<string>("SourceHostName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("SourceIpaddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("")
                        .HasColumnName("SourceIPAddress");

                    b.Property<DateTime>("UpdatedDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("UpdatedId")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedID");

                    b.ToTable("MailingWebServiceRequests");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmLocation", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("LocationId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("LocationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("MDM_Location", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmOrganization", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("EntityId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("EntityID");

                    b.Property<decimal?>("LocationId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("LocationID");

                    b.Property<decimal?>("OrganizationId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToTable("MDM_Organization", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmProvider", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<decimal?>("PrimaryLocationId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("PrimaryLocationID");

                    b.Property<decimal?>("ProfId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("Prof_ID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal>("ProviderId")
                        .HasColumnType("numeric(10, 0)")
                        .HasColumnName("ProviderID");

                    b.ToTable("MDM_Provider", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmSalesAlignment", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("DFProduct");

                    b.Property<int?>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(112)
                        .HasColumnName("ProgramID");

                    b.Property<string>("SaleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SALE_ID");

                    b.Property<string>("TerrId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TERR_ID");

                    b.ToTable("MDM_SalesAlignment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmpatientProcessResult", b =>
                {
                    b.Property<int>("MdmpatientProcessResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MDMPatientProcessResultId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MdmpatientProcessResultId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MatchedPatientId")
                        .HasColumnType("int")
                        .HasColumnName("MatchedPatientID");

                    b.Property<int?>("PatientSearchResultId")
                        .HasColumnType("int");

                    b.HasKey("MdmpatientProcessResultId")
                        .HasName("PK_MDMPatientSearchResult_MDMPatientProcessResultId");

                    b.HasIndex("PatientSearchResultId");

                    b.ToTable("MDMPatientProcessResult", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmpatientSearchResult", b =>
                {
                    b.Property<int>("MdmpatientSearchResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MDMPatientSearchResultId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MdmpatientSearchResultId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DOB");

                    b.Property<bool>("DupCheckOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Phone")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MdmpatientSearchResultId")
                        .HasName("PK_MDMPatientSearchResult_MDMPatientSearchResultId");

                    b.ToTable("MDMPatientSearchResult", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedOffRampSupplementPlan", b =>
                {
                    b.Property<string>("AccumulatorDetailsDeductibleIndividualAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxIndividualAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CobSummaryAdminAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummaryDeductibleRemaining")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummaryOfficeVisitAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummaryProductAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummarycoordinatedPlanBenefits")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CptstatusDetailsCopayCoInsurance")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CPTStatusDetailsCopayCoInsurance");

                    b.Property<string>("CptstatusDetailsCopayCoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CPTStatusDetailsCopayCoInsuranceAmount");

                    b.Property<string>("CptstatusDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CPTStatusDetailsDeductibleApplies");

                    b.Property<string>("CptstatusDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CPTStatusDetailsOopMaxApplies");

                    b.Property<string>("CptstatusDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("CPTStatusDetailsStatus");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugRequirementsBuyBillPermitted")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyAvailable")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementspriorAuthorizationRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeVisitDetailsCopayCoInsurance")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsCopayCoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsCopayCoInsurance")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsCopayCoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SupplementDescription")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SupplementLetter")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("SupplementPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplementPlanId"));

                    b.ToTable("MedOffRampSupplementPlan", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedOffRampSupplementPlanOffRampClient", b =>
                {
                    b.Property<int>("MedOffRampSupplementPlanOffRampClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedOffRampSupplementPlan_OffRampClientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedOffRampSupplementPlanOffRampClientId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CobSummarycoordinatedPlanBenefits")
                        .IsRequired()
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OffRampClientId")
                        .HasColumnType("int")
                        .HasColumnName("OffRampClientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SupplementLetter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MedOffRampSupplementPlanOffRampClientId");

                    b.ToTable("MedOffRampSupplementPlan_OffRampClient", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpClientResponseTypeCode", b =>
                {
                    b.Property<int>("MedeBvofframpClientResponseTypeCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpClientResponseTypeCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedeBvofframpClientResponseTypeCodeId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MedeBvofframpResponseTypeCodeListId")
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpResponseTypeCodeListID");

                    b.Property<int>("OfframpClientId")
                        .HasColumnType("int")
                        .HasColumnName("OfframpClientID");

                    b.HasKey("MedeBvofframpClientResponseTypeCodeId");

                    b.ToTable("MedeBVOfframpClientResponseTypeCodes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpCobblurbAdditionalRule", b =>
                {
                    b.Property<int>("MedeBvofframpCobblurbAdditionalRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpCOBBlurbAdditionalRulesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedeBvofframpCobblurbAdditionalRulesId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CopayContributestoOopmax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayContributestoOOPMax");

                    b.Property<string>("CopayContributestoOopmaxMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CopayContributestoOOPMaxMessage");

                    b.Property<string>("CoversPartbdeductible")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CoversPARTBDeductible");

                    b.Property<string>("CoversPartbdeductibleMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CoversPARTBDeductibleMessage");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeductibleApplies")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DeductibleAppliesMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FollowsMedicareGuidelineMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FollowsMedicareGuidelines")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MedeBvofframpCobblurbRulesId")
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpCOBBlurbRulesID");

                    b.Property<string>("Oopapplies")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OOPApplies");

                    b.Property<string>("OopappliesMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("OOPAppliesMessage");

                    b.Property<string>("OvcopayApplies")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OVCopayApplies");

                    b.Property<string>("OvcopayAppliesMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("OVCopayAppliesMessage");

                    b.Property<string>("PayerType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PayerTypeSpecificMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ProductCoinsuranceApplies")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCoinsuranceAppliesMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SentenceEndMessage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MedeBvofframpCobblurbAdditionalRulesId");

                    b.HasIndex("MedeBvofframpCobblurbRulesId");

                    b.ToTable("MedeBVOfframpCOBBlurbAdditionalRules", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpCobblurbRule", b =>
                {
                    b.Property<int>("MedeBvofframpCobblurbRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpCOBBlurbRulesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedeBvofframpCobblurbRulesId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AdditionalRule")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("BlurbMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SecCoordinates")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecEligibilityStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MedeBvofframpCobblurbRulesId");

                    b.ToTable("MedeBVOfframpCOBBlurbRules", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpErrorList", b =>
                {
                    b.Property<int>("MedeBvofframpErrorListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpErrorListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedeBvofframpErrorListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConnectOfframpMessage")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedeBvcircumstance")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MedeBVCircumstance");

                    b.Property<string>("MedeBvpolicyMessageContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MedeBVPolicyMessageContent");

                    b.Property<int>("MedeBvpolicyMessageId")
                        .HasColumnType("int")
                        .HasColumnName("MedeBVPolicyMessageID");

                    b.HasKey("MedeBvofframpErrorListId");

                    b.ToTable("MedeBVOfframpErrorList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpRequiredRule", b =>
                {
                    b.Property<int>("MedeBvofframpRequiredRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpRequiredRulesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedeBvofframpRequiredRulesId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MedeBvofframpClientResponseTypeCodeId")
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpClientResponseTypeCodeID");

                    b.HasKey("MedeBvofframpRequiredRulesId");

                    b.ToTable("MedeBVOfframpRequiredRules", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpResponseTypeCodeList", b =>
                {
                    b.Property<int>("MedeBvofframpResponseTypeCodeListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedeBVOfframpResponseTypeCodeListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedeBvofframpResponseTypeCodeListId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ResponseTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ResponseTypeDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MedeBvofframpResponseTypeCodeListId");

                    b.ToTable("MedeBVOfframpResponseTypeCodeList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedicaidIncomeEligibilityLimitList", b =>
                {
                    b.Property<int>("MedicaidIncomeEligibilityLimitListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicaidIncomeEligibilityLimitList_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicaidIncomeEligibilityLimitListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MedicaidEligibilityFplpercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(138)
                        .HasColumnName("MedicaidEligibilityFPLPercentage");

                    b.Property<int>("MedicaidExpansionExcluded")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(case when [State]='WY' OR [State]='WI' OR [State]='TX' OR [State]='TN' OR [State]='SC' OR [State]='MS' OR [State]='KS' OR [State]='GA' OR [State]='FL' OR [State]='AL' then (1) else (0) end)", false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("ThresholdFamily")
                        .HasColumnType("money");

                    b.Property<decimal>("ThresholdIndividual")
                        .HasColumnType("money");

                    b.HasKey("MedicaidIncomeEligibilityLimitListId");

                    b.ToTable("MedicaidIncomeEligibilityLimitList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedvantxInventoryUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("InsertDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("OnHandQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TriageRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Medvantx__3214EC07D756E626");

                    b.HasIndex("TriageRecordId");

                    b.ToTable("MedvantxInventoryUpdate", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedvantxLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("MedvantxInventoryUpdateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Medvantx__3214EC0705797FDD");

                    b.HasIndex("MedvantxInventoryUpdateId");

                    b.ToTable("MedvantxLots");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MergeLog", b =>
                {
                    b.Property<int>("MergeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MergeLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MergeLogId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdKept")
                        .HasColumnType("int")
                        .HasColumnName("ID_Kept");

                    b.Property<int>("IdMerged")
                        .HasColumnType("int")
                        .HasColumnName("ID_Merged");

                    b.Property<string>("MergeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("MergeLogId");

                    b.ToTable("MergeLogs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("Reviewed")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("SendFromUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SendFromUserID");

                    b.Property<string>("SenderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("ThreadID");

                    b.HasKey("MessageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ThreadId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_MessagesProgram");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageModule", b =>
                {
                    b.Property<int>("MessageModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageModuleId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MessageModuleId");

                    b.ToTable("MessageModule", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageQueue", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<bool?>("Archived")
                        .HasColumnType("bit");

                    b.Property<bool?>("AssignmentInProgress")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DestinationApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("MessageSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Message_Subject");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Message_Text");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Reviewed")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SendTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sender_First_Name");

                    b.Property<string>("SenderLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sender_Last_Name");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MessageId");

                    b.HasIndex(new[] { "ProgramId", "Source", "Status", "Deleted" }, "ProgramID_Source_Status_Deleted");

                    b.ToTable("Message_Queue", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageThread", b =>
                {
                    b.Property<int>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThreadID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThreadId"));

                    b.Property<bool?>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("AssignedToGroupId")
                        .HasColumnType("int")
                        .HasColumnName("AssignedToGroupID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMessageDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LastSendFromUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastSendFromUserID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MessageTypeID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<Guid>("SendFromApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SendFromApplicationID");

                    b.Property<Guid>("SendFromUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SendFromUserID");

                    b.Property<Guid>("SendToApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SendToApplicationID");

                    b.Property<Guid?>("SendToUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SendToUserID");

                    b.Property<string>("SenderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("O");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Therapy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ThreadId")
                        .HasName("PK_Threads");

                    b.HasIndex("MessageTypeId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_ThreadsProgram");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "LastMessageDate" }, "ProgramLastMsgDate");

                    b.ToTable("MessageThreads");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageThreadReader", b =>
                {
                    b.Property<int>("MessageThreadReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageThreadReaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageThreadReaderId"));

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("ThreadID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("MessageThreadReaderId");

                    b.HasIndex(new[] { "ThreadId" }, "NonClusteredIndex-20220514-022345");

                    b.ToTable("MessageThreadReaders");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageType", b =>
                {
                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MessageTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MessageTypeId");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessagesSm", b =>
                {
                    b.Property<int>("MessagesSmsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessagesSMSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessagesSmsid"));

                    b.Property<string>("AccountSid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("AssignmentInProgress")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MessageDirection")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MessageFrom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MessageSid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MessageText")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MessageTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NumberOfMedia")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Uri")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("MessagesSmsid");

                    b.ToTable("MessagesSMS", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessagesSmsmedium", b =>
                {
                    b.Property<int>("MessagesSmsmediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessagesSMSMediaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessagesSmsmediaId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<string>("DocumentStorageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MessagesSmsid")
                        .HasColumnType("int")
                        .HasColumnName("MessagesSMSID");

                    b.Property<string>("ParentSid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Sid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("MessagesSmsmediaId");

                    b.ToTable("MessagesSMSMedia", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileDrugSurveyElement", b =>
                {
                    b.Property<int>("MobileDrugSurveyElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileDrugSurveyElementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileDrugSurveyElementId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugNdc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("DrugNDC");

                    b.Property<int>("MobileSurveyElementId")
                        .HasColumnType("int")
                        .HasColumnName("MobileSurveyElementID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("MobileDrugSurveyElementId");

                    b.HasIndex("MobileSurveyElementId");

                    b.ToTable("MobileDrugSurveyElements");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileMasterSurvey", b =>
                {
                    b.Property<int>("MobileMasterSurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileMasterSurveyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileMasterSurveyId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<DateTime?>("SurveyActiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SurveyDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MobileMasterSurveyId");

                    b.ToTable("MobileMasterSurveys");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobilePatientSurveyAnswer", b =>
                {
                    b.Property<int>("MobilePatientSurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobilePatientSurveyAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobilePatientSurveyAnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<int>("MobileDrugSurveyElementId")
                        .HasColumnType("int")
                        .HasColumnName("MobileDrugSurveyElementID");

                    b.Property<int>("MobilePatientSurveyAnswerMasterId")
                        .HasColumnType("int")
                        .HasColumnName("MobilePatientSurveyAnswerMasterID");

                    b.Property<int>("MobileSurveySubElementId")
                        .HasColumnType("int")
                        .HasColumnName("MobileSurveySubElementID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("MobilePatientSurveyAnswerId");

                    b.HasIndex("MobileDrugSurveyElementId");

                    b.HasIndex("MobilePatientSurveyAnswerMasterId");

                    b.HasIndex("MobileSurveySubElementId");

                    b.ToTable("MobilePatientSurveyAnswers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobilePatientSurveyAnswerMaster", b =>
                {
                    b.Property<int>("MobilePatientSurveyAnswerMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobilePatientSurveyAnswerMasterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobilePatientSurveyAnswerMasterId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MobileMasterSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("MobileMasterSurveyID");

                    b.Property<string>("Ndc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("datetime");

                    b.HasKey("MobilePatientSurveyAnswerMasterId");

                    b.HasIndex("MobileMasterSurveyId");

                    b.ToTable("MobilePatientSurveyAnswerMaster", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileRefillOrder", b =>
                {
                    b.Property<int>("MobileRefillOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileRefillOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileRefillOrderId"));

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CcacctNumber")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("CCAcctNumber");

                    b.Property<string>("CcexpDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CCExpDate");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("UseCardonFile")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("UseDefaultAddress")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("MobileRefillOrderId");

                    b.ToTable("MobileRefillOrders");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileRefillOrderItem", b =>
                {
                    b.Property<int>("MobileRefillOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileRefillOrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileRefillOrderItemId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MobileRefillOrderId")
                        .HasColumnType("int")
                        .HasColumnName("MobileRefillOrderID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RxProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RxProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MobileRefillOrderItemId");

                    b.HasIndex("MobileRefillOrderId");

                    b.ToTable("MobileRefillOrderItems");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileRequestPharmacyCall", b =>
                {
                    b.Property<int>("MobileRequestPharmacyCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileRequestPharmacyCallID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileRequestPharmacyCallId"));

                    b.Property<string>("CallBackNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ClientPatientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientPatientID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("MobileRequestPharmacyCallId");

                    b.HasIndex(new[] { "PatientId" }, "IX_MobileRequestPharmacyCall");

                    b.ToTable("MobileRequestPharmacyCall", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileSurveyElement", b =>
                {
                    b.Property<int>("MobileSurveyElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileSurveyElementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileSurveyElementId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("QuestionCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("MobileSurveyElementId");

                    b.ToTable("MobileSurveyElements");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileSurveySubElement", b =>
                {
                    b.Property<int>("MobileSurveySubElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MobileSurveySubElementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileSurveySubElementId"));

                    b.Property<string>("AnswerChoiceLookup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MobileSurveyElementId")
                        .HasColumnType("int")
                        .HasColumnName("MobileSurveyElementID");

                    b.Property<string>("SubElementType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("MobileSurveySubElementId")
                        .HasName("PK_MobileSurveyAnswers");

                    b.HasIndex("MobileSurveyElementId");

                    b.ToTable("MobileSurveySubElements");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessment", b =>
                {
                    b.Property<string>("Active")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("active");

                    b.Property<string>("AssessmentComment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_comment");

                    b.Property<string>("AssessmentGuid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_guid");

                    b.Property<string>("AssessmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("AssessmentScore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_score");

                    b.Property<string>("AssessmentStatusId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_status_id");

                    b.Property<string>("AssessmentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_type_id");

                    b.Property<string>("CaseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("case_id");

                    b.Property<string>("ClinicId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clinic_id");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_user");

                    b.Property<string>("ModifiedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_user");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patient_id");

                    b.ToTable("MPU_Assessment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessmentAnswer", b =>
                {
                    b.Property<string>("Active")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("active");

                    b.Property<string>("AssessmentAnswer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("assessment_answer");

                    b.Property<string>("AssessmentAnswerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_answer_id");

                    b.Property<string>("AssessmentAnswerScore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_answer_score");

                    b.Property<string>("AssessmentQuestionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_id");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_user");

                    b.Property<string>("DisableList")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("disable_list");

                    b.Property<string>("DisplayTextControl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_text_control");

                    b.Property<string>("DisplayTextControlRequired")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_text_control_required");

                    b.Property<string>("EnableList")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("enable_list");

                    b.Property<string>("ModifiedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_user");

                    b.Property<string>("NextQuestionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("next_question_id");

                    b.Property<string>("ResetOtherOptions")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("reset_other_options");

                    b.ToTable("MPU_Assessment_Answer", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessmentDetail", b =>
                {
                    b.Property<string>("AssessmentDetailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_detail_id");

                    b.Property<string>("AssessmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("AssessmentQuestionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_id");

                    b.Property<string>("AssessmentQuestionScore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_score");

                    b.ToTable("MPU_Assessment_Detail", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessmentDetailAnswer", b =>
                {
                    b.Property<string>("AssessmentAnswerCustom")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("assessment_answer_custom");

                    b.Property<string>("AssessmentAnswerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_answer_id");

                    b.Property<string>("AssessmentAnswerScore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_answer_score");

                    b.Property<string>("AssessmentDetailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_detail_id");

                    b.ToTable("MPU_Assessment_Detail_Answer", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessmentQuestion", b =>
                {
                    b.Property<string>("Active")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("active");

                    b.Property<string>("AnswerControlType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("answer_control_type");

                    b.Property<string>("AssessmentMinAnswerCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_min_answer_count");

                    b.Property<string>("AssessmentQuestion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("assessment_question");

                    b.Property<string>("AssessmentQuestionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_id");

                    b.Property<string>("AssessmentQuestionMaxScore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_max_score");

                    b.Property<string>("AssessmentQuestionTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_type_id");

                    b.Property<string>("AssessmentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_type_id");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_user");

                    b.Property<string>("DisplayQuestionNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_question_number");

                    b.Property<string>("IsRequired")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("is_required");

                    b.Property<string>("ModifiedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_user");

                    b.ToTable("MPU_Assessment_Question", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessmentQuestionType", b =>
                {
                    b.Property<string>("Active")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("active");

                    b.Property<string>("AssessmentQuestionTypeDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_type_desc");

                    b.Property<string>("AssessmentQuestionTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_type_id");

                    b.Property<string>("AssessmentQuestionTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_question_type_name");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_user");

                    b.Property<string>("ModifiedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_user");

                    b.ToTable("MPU_Assessment_Question_Type", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MpuAssessmentType", b =>
                {
                    b.Property<string>("Active")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("active");

                    b.Property<string>("AssessmentTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("assessment_type_desc");

                    b.Property<string>("AssessmentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assessment_type_id");

                    b.Property<string>("AssessmentTypeName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("assessment_type_name");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_date");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_user");

                    b.Property<string>("ModifiedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modified_user");

                    b.ToTable("MPU_Assessment_Type", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NcpdpRejectCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RejectCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Id");

                    b.ToTable("NCPDP_RejectCodes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NoteOverride", b =>
                {
                    b.Property<int>("NoteOverrideRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Note_Override_RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteOverrideRecordId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int")
                        .HasColumnName("NoteID");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("NoteOverrideRecordId");

                    b.ToTable("Note_Overrides", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NoteTemplateList", b =>
                {
                    b.Property<int>("NoteTemplateListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Note_TemplateList_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteTemplateListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("SrTypeShortDesc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.Property<string>("TemplateSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TemplateText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("NoteTemplateListId");

                    b.ToTable("Note_TemplateList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentListID");

                    b.Property<int?>("DocumentStorageId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentStorageID");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("EmailNotification")
                        .HasColumnType("bit");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Jsondata")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JSONData");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LetterSentToPrintVendorDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Recipient")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("SendFax")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendPhysicalLetter")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<int?>("TriggerEmailTemplagteListId")
                        .HasColumnType("int")
                        .HasColumnName("Trigger_EmailTemplagte_ListID");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NotificationTemplate", b =>
                {
                    b.Property<int>("NotificationTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationTemplateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTemplateId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTemplateID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotificationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("TemplateText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("NotificationTemplateId");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgency", b =>
                {
                    b.Property<int>("NurseAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseAgencyId"));

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("NurseAgencyId");

                    b.ToTable("NurseAgencies");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyAccreditation", b =>
                {
                    b.Property<int>("NurseAgencyAccreditationId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyAccreditationID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ExpDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NaAccreditationListId")
                        .HasColumnType("int")
                        .HasColumnName("NA_AccreditationListID");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.HasKey("NurseAgencyAccreditationId");

                    b.HasIndex("NaAccreditationListId");

                    b.HasIndex("NurseAgencyId");

                    b.ToTable("NurseAgencyAccreditations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyAccreditationList", b =>
                {
                    b.Property<int>("NaAccreditationListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NA_AccreditationListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaAccreditationListId"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("NaAccreditationListId");

                    b.ToTable("NurseAgencyAccreditationList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyAddress", b =>
                {
                    b.Property<int>("NurseAgnecyAddressId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgnecyAddressID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("NurseAgnecyAddressId");

                    b.HasIndex("NurseAgencyId");

                    b.ToTable("NurseAgencyAddresses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyCertification", b =>
                {
                    b.Property<int>("NurseAgencyCertificationId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyCertificationID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NaCertificationListId")
                        .HasColumnType("int")
                        .HasColumnName("NA_CertificationListID");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.HasKey("NurseAgencyCertificationId");

                    b.HasIndex("NaCertificationListId");

                    b.HasIndex("NurseAgencyId");

                    b.ToTable("NurseAgencyCertifications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyCertificationList", b =>
                {
                    b.Property<int>("NaCertificationListId")
                        .HasColumnType("int")
                        .HasColumnName("NA_CertificationListID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("NaCertificationListId");

                    b.ToTable("NurseAgencyCertificationList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyCoveredCounty", b =>
                {
                    b.Property<int>("NaCoveredCountiesId")
                        .HasColumnType("int")
                        .HasColumnName("NA_CoveredCountiesID");

                    b.Property<string>("CoveredCounty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CoveredCountyState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.HasKey("NaCoveredCountiesId")
                        .HasName("PK_NurseAgency_CoveredCounties");

                    b.HasIndex("NurseAgencyId");

                    b.ToTable("NurseAgencyCoveredCounties");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyNurse", b =>
                {
                    b.Property<int>("NaNurseId")
                        .HasColumnType("int")
                        .HasColumnName("NA_NurseID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ActiveDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.Property<string>("NurseFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NurseLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("NaNurseId")
                        .HasName("PK_NurseAgency_Nurses");

                    b.HasIndex("NurseAgencyId");

                    b.ToTable("NurseAgencyNurses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyPhoneNumber", b =>
                {
                    b.Property<int>("NurseAgencyPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyPhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseAgencyPhoneNumberId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("NurseAgencyPhoneNumberId");

                    b.ToTable("NurseAgencyPhoneNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyRate", b =>
                {
                    b.Property<int>("NurseAgencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyRate_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseAgencyRateId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("NurseAgencyRateId");

                    b.ToTable("NurseAgencyRates");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OffRampClientPayerRelationship", b =>
                {
                    b.Property<int>("OffRampClientPayerRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OffRampClient_Payer_Relationship_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffRampClientPayerRelationshipId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("OffRampClientId")
                        .HasColumnType("int")
                        .HasColumnName("OffRampClientID");

                    b.Property<int>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.HasKey("OffRampClientPayerRelationshipId");

                    b.ToTable("OffRampClient_Payer_Relationship", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OffRampClientPrimarySecondaryRelationship", b =>
                {
                    b.Property<int>("OffRampClientPrimarySecondaryRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OffRampClient_Primary_Secondary_Relationship_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffRampClientPrimarySecondaryRelationshipId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("OffRampClientId")
                        .HasColumnType("int")
                        .HasColumnName("OffRampClientID");

                    b.Property<int>("PrimaryPayerId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryPayerID");

                    b.Property<int?>("SecondaryPayerId")
                        .HasColumnType("int")
                        .HasColumnName("SecondaryPayerID");

                    b.HasKey("OffRampClientPrimarySecondaryRelationshipId");

                    b.ToTable("OffRampClient_Primary_Secondary_Relationship", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OfframpClient", b =>
                {
                    b.Property<int>("OfframpClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfframpClientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfframpClientId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ClientApplicationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientDrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultUserGroupName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EBvtype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("eBVType");

                    b.Property<bool>("HubInConnect")
                        .HasColumnType("bit");

                    b.Property<bool>("InternalClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayerSamplingEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("isPayerSamplingEnabled");

                    b.Property<bool>("IsRepSamplingEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("isRepSamplingEnabled");

                    b.Property<bool>("IsSeasonalClient")
                        .HasColumnType("bit")
                        .HasColumnName("isSeasonalClient");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("ManualInOfframp")
                        .HasColumnType("bit");

                    b.Property<string>("PaexpiryUserGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PAExpiryUserGroup");

                    b.Property<int?>("PaexpiryYears")
                        .HasColumnType("int")
                        .HasColumnName("PAExpiryYears");

                    b.HasKey("OfframpClientId");

                    b.ToTable("OfframpClients");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OfframpCustomConnectInfo", b =>
                {
                    b.Property<int>("OfframpCustomConnectInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfframpCustomConnectInfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfframpCustomConnectInfoId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CustomConnectProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CustomConnectProgramID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OfframpClientId")
                        .HasColumnType("int")
                        .HasColumnName("OfframpClientID");

                    b.Property<string>("SrsubTypeToCreate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRSubTypeToCreate");

                    b.Property<string>("SrtypeToCreate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRTypeToCreate");

                    b.HasKey("OfframpCustomConnectInfoId");

                    b.HasIndex("OfframpClientId");

                    b.ToTable("OfframpCustomConnectInfo", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OfframpExternalHubInfo", b =>
                {
                    b.Property<int>("OfframpExternalHubInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfframpExternalHubInfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfframpExternalHubInfoId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AuthEndpoint")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BaseUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ClientID");

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DatafeedFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DatafeedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalHubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OfframpClientId")
                        .HasColumnType("int")
                        .HasColumnName("OfframpClientID");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProcessEndpoint")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SftpfolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTPFolderName");

                    b.Property<string>("Sftppassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SFTPPassword");

                    b.Property<string>("Sftpurl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SFTPUrl");

                    b.Property<string>("Sftpusername")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SFTPUsername");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.HasKey("OfframpExternalHubInfoId");

                    b.HasIndex("OfframpClientId");

                    b.ToTable("OfframpExternalHubInfo", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OnsitePharmacy", b =>
                {
                    b.Property<int>("OnsitePharmaciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OnsitePharmaciesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OnsitePharmaciesId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ParentOrganizationName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PharmacyNotAssigned")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelephoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("OnsitePharmaciesId");

                    b.HasIndex("VendorId");

                    b.ToTable("OnsitePharmacies");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrderProductForm", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AddressID");

                    b.Property<string>("BillToAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillToAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillToCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillToName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BillToPracticeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BillToState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillToZip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardExpirationMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardExpirationYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderZip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardSecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Eligibility340b")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gpoaffiliation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GPOAffiliation");

                    b.Property<bool?>("IsUseShipToInfoForBillTo")
                        .HasColumnType("bit")
                        .HasColumnName("isUseShipToInfoForBillTo");

                    b.Property<string>("LocationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OfficeContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderQuantity10000")
                        .HasColumnType("int");

                    b.Property<int?>("OrderQuantity2500")
                        .HasColumnType("int");

                    b.Property<int?>("OrderQuantity5000")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<byte[]>("Pdf")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PDF");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhysicianId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PhysicianName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ponumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PONumber");

                    b.Property<string>("Price10000")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Price2500")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Price5000")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("ShipToAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipToAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipToCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipToName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipToPracticeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipToState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipToZip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingPreference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StateLicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TaxID");

                    b.HasKey("OrderId");

                    b.ToTable("OrderProductForm", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("AccountableCareOrganization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("BaaOnFile")
                        .HasColumnType("bit")
                        .HasColumnName("BAA_On_File");

                    b.Property<string>("CaseManager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<DateTime?>("DateBaaSent")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Sent");

                    b.Property<DateTime?>("DateBaaSigned")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Signed");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<bool?>("HighTouch")
                        .HasColumnType("bit");

                    b.Property<string>("HighTouchNote")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("Hin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HIN");

                    b.Property<string>("IndependentPracticeOrganization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int?>("MasterOrgnizationId")
                        .HasColumnType("int")
                        .HasColumnName("MasterOrgnizationID");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("OrganizationMethodContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrganizationURL");

                    b.Property<string>("OtherIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Other_Identifier");

                    b.Property<int?>("PreferredContactMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PreferredContactMethodID");

                    b.Property<string>("RegistrationStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SiteReadiness")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TaxID");

                    b.Property<string>("Title10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Title10ExpDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Vip")
                        .HasColumnType("bit")
                        .HasColumnName("VIP");

                    b.Property<DateTime?>("W9date")
                        .HasColumnType("datetime")
                        .HasColumnName("W9Date");

                    b.Property<bool?>("W9onFile")
                        .HasColumnType("bit")
                        .HasColumnName("W9OnFile");

                    b.HasKey("OrganizationId")
                        .HasName("PK_Orgnizations");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted", "OrganizationName" }, "IX_Organizations");

                    b.HasIndex(new[] { "OrganizationName" }, "Org Name");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted" }, "ProgramIDDeleted");

                    b.ToTable("Organizations", t =>
                        {
                            t.HasTrigger("tr_Organizations_Insert");

                            t.HasTrigger("tr_Organizations_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationAddress", b =>
                {
                    b.Property<int>("OrganizationAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax2Comments")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Fax2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SiteOfService")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("OrganizationAddressId")
                        .HasName("PK_OrgnizationAddresses");

                    b.HasIndex(new[] { "OrganizationId" }, "OrganizationID");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted" }, "ProgramIDDeleted");

                    b.ToTable("OrganizationAddresses", t =>
                        {
                            t.HasTrigger("Tr_OrganizationAddresses_Whitelist_Insert");

                            t.HasTrigger("Tr_OrganizationAddresses_Whitelist_Update");

                            t.HasTrigger("Tr_OrganizationAddresses_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_OrganizationAddresses_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationDynamicDatum", b =>
                {
                    b.Property<int>("OrganizationDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("OrganizationDynamicDataId");

                    b.HasIndex("DynamicDataListId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationDynamicData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationEnrollment", b =>
                {
                    b.Property<int>("OrganizationEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationEnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationEnrollmentId"));

                    b.Property<string>("AdditionalOrgFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AdditionalRepName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AdditionalRepPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("AdditionalRepSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AdditionalType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("AttachedDocumentIdIpe")
                        .HasColumnType("int")
                        .HasColumnName("AttachedDocumentID_IPE");

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugCertificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<string>("OrgAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrgCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("OrgIsPrimaryLocation")
                        .HasColumnType("bit");

                    b.Property<string>("OrgPhone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("OrgState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OrgZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("OrganizationHin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrganizationHIN");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrganizationNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrganizationNPI");

                    b.Property<string>("OrganizationOtherId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SrAssignedTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_AssignedTo");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<string>("Srfcomplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRFComplete");

                    b.Property<string>("Srfreason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRFReason");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("OrganizationEnrollmentId")
                        .HasName("PK_OrganizationCertifications");

                    b.HasIndex(new[] { "Srid" }, "IX_NCI_OrgEnrollments_SRID");

                    b.ToTable("OrganizationEnrollments", t =>
                        {
                            t.HasTrigger("TR_OrganizationEnrollments_Audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationEnrollmentsAudit", b =>
                {
                    b.Property<int>("OrganizationEnrollmentsAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationEnrollments_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationEnrollmentsAuditId"));

                    b.Property<string>("AdditionalOrgFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AdditionalRepName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AdditionalRepPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("AdditionalRepSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AdditionalType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("AttachedDocumentIdIpe")
                        .HasColumnType("int")
                        .HasColumnName("AttachedDocumentID_IPE");

                    b.Property<string>("ChangeAction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Change_Action");

                    b.Property<string>("ContactName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_log");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugCertificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<string>("OrgAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrgCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("OrgIsPrimaryLocation")
                        .HasColumnType("bit");

                    b.Property<string>("OrgPhone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("OrgState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OrgZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("OrganizationEnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationEnrollmentID");

                    b.Property<string>("OrganizationHin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrganizationHIN");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrganizationNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrganizationNPI");

                    b.Property<string>("OrganizationOtherId")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SrAssignedTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_AssignedTo");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<string>("Srfcomplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRFComplete");

                    b.Property<string>("Srfreason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRFReason");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("OrganizationEnrollmentsAuditId");

                    b.ToTable("OrganizationEnrollments_Audit", null, t =>
                        {
                            t.HasTrigger("TR_OrganizationEnrollments_Audit_Permission");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationMergeLog", b =>
                {
                    b.Property<int>("OrganizationMergeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationMergeLogId"));

                    b.Property<long?>("AccountIdNew")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID_New");

                    b.Property<long?>("AccountIdOld")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID_Old");

                    b.Property<string>("AccountNameNew")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountName_New");

                    b.Property<string>("AccountNameOld")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountName_Old");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNpiupdated")
                        .HasColumnType("bit")
                        .HasColumnName("IsNPIUpdated");

                    b.Property<bool>("IsTaxIdupdated")
                        .HasColumnType("bit")
                        .HasColumnName("IsTaxIDUpdated");

                    b.Property<bool>("IsTitle10ExpDateUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTitle10Updated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MergeStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationIdNew")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationId_New");

                    b.Property<int>("OrganizationIdOld")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationId_Old");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("OrganizationMergeLogId");

                    b.ToTable("OrganizationMergeLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationMergeLogDetail", b =>
                {
                    b.Property<int>("OrganizationMergeLogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationMergeLogDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationMergeLogDetailId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("IdValue")
                        .HasColumnType("int");

                    b.Property<string>("KeyColumn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationMergeLogId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("OrganizationMergeLogDetailId");

                    b.ToTable("OrganizationMergeLogDetail", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationNote", b =>
                {
                    b.Property<int>("OrganizationNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationNoteId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("OrganizationNoteId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationNotes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationNpi", b =>
                {
                    b.Property<int>("OrganizationNpiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationNPIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationNpiid"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NPI");

                    b.Property<int>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("PharmacyNabp")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .HasColumnName("PharmacyNABP")
                        .IsFixedLength();

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("OrganizationNpiid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("OrganizationNpiid"), false);

                    b.HasIndex("OrganizationAddressId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProgramId");

                    b.ToTable("OrganizationNPIs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationPhoneNumber", b =>
                {
                    b.Property<int>("OrganizationPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationPhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationPhoneNumberId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("OrganizationPhoneNumberId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "ProgramId", "OrganizationId", "Deleted" }, "IX_ProgramID_OrganizationID_Deleted_Includes");

                    b.ToTable("OrganizationPhoneNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationProgram", b =>
                {
                    b.Property<int>("OrgnizationProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrgnizationProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrgnizationProgramId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrgnizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrgnizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SharedRecordProgramId")
                        .HasColumnType("int")
                        .HasColumnName("SharedRecordProgramID");

                    b.HasKey("OrgnizationProgramId")
                        .HasName("PK_OrgnizationPrograms");

                    b.HasIndex("OrgnizationId");

                    b.ToTable("OrganizationPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationTaxId", b =>
                {
                    b.Property<int>("OrganizationTaxIdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationTaxID_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationTaxIdId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TaxID");

                    b.HasKey("OrganizationTaxIdId");

                    b.HasIndex("OrganizationAddressId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProgramId");

                    b.ToTable("OrganizationTaxIDs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationTerritoryAlignment", b =>
                {
                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Frm")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FRM");

                    b.Property<string>("Frmemail")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FRMEmail");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Paa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PAA");

                    b.Property<string>("PaaphoneExtension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAAPhoneExtension");

                    b.Property<string>("Pam")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PAM");

                    b.Property<string>("Pas")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PAS");

                    b.Property<string>("Pod")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("POD");

                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000)
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ZIPCode");

                    b.ToTable("OrganizationTerritoryAlignment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationsAudit", b =>
                {
                    b.Property<int>("OrganizationsAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Organizations_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationsAuditId"));

                    b.Property<string>("AccountableCareOrganization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("BaaOnFile")
                        .HasColumnType("bit")
                        .HasColumnName("BAA_On_File");

                    b.Property<string>("CaseManager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<DateTime?>("DateBaaSent")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Sent");

                    b.Property<DateTime?>("DateBaaSigned")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Signed");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<bool?>("HighTouch")
                        .HasColumnType("bit");

                    b.Property<bool>("HighTouchChanged")
                        .HasColumnType("bit");

                    b.Property<string>("HighTouchNote")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("Hin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HIN");

                    b.Property<string>("IndependentPracticeOrganization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int?>("MasterOrgnizationId")
                        .HasColumnType("int")
                        .HasColumnName("MasterOrgnizationID");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationMethodContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrganizationURL");

                    b.Property<string>("OtherIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Other_Identifier");

                    b.Property<int?>("PreferredContactMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PreferredContactMethodID");

                    b.Property<string>("SubType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TaxID");

                    b.Property<string>("Title10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Title10ExpDate")
                        .HasColumnType("date");

                    b.HasKey("OrganizationsAuditId");

                    b.HasIndex(new[] { "MdmprogramId", "HighTouchChanged" }, "ProgramHighTouchChange");

                    b.ToTable("Organizations_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ApplicationId");

                    b.ToTable("PAN_Applications", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanApplicationRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("PAN_ApplicationRoles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanApplicationTokenRole", b =>
                {
                    b.Property<int>("ApplicationTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationTokenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationTokenId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("TokenKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TokenSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ApplicationTokenId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoleId");

                    b.ToTable("PAN_ApplicationTokenRoles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanDisenrollmentReversal", b =>
                {
                    b.Property<int>("DisenrollmentReversalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisenrollmentReversalId"));

                    b.Property<bool?>("ContactedPan")
                        .HasColumnType("bit")
                        .HasColumnName("ContactedPAN");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FinalizedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("PanfundDecision")
                        .HasColumnType("bit")
                        .HasColumnName("PANFundDecision");

                    b.Property<DateOnly?>("PanfundRequestDate")
                        .HasColumnType("date")
                        .HasColumnName("PANFundRequestDate");

                    b.Property<DateOnly?>("PanfundResponseDate")
                        .HasColumnType("date")
                        .HasColumnName("PANFundResponseDate");

                    b.Property<DateOnly?>("PanreceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANReceivedDate");

                    b.Property<DateOnly?>("PanrequestedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANRequestedDate");

                    b.Property<int?>("PatientGrantDisenrollmentId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<bool?>("RequiredOverride")
                        .HasColumnType("bit");

                    b.Property<string>("ResultMessage")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateOnly?>("ReversalDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ReversalDecision")
                        .HasColumnType("bit");

                    b.Property<string>("ReversalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReversalReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DisenrollmentReversalId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DisenrollmentReversalId"), false);

                    b.HasIndex("StatusId");

                    b.ToTable("PAN_DisenrollmentReversal", null, t =>
                        {
                            t.HasTrigger("utPAN_DisenrollmentReversal");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanDisenrollmentReversalAudit", b =>
                {
                    b.Property<Guid>("DisenrollmentReversalAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AuditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("AuditType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<bool?>("ContactedPan")
                        .HasColumnType("bit")
                        .HasColumnName("ContactedPAN");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DisenrollmentReversalId")
                        .HasColumnType("int");

                    b.Property<string>("FinalizedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("PanfundDecision")
                        .HasColumnType("bit")
                        .HasColumnName("PANFundDecision");

                    b.Property<DateOnly?>("PanfundRequestDate")
                        .HasColumnType("date")
                        .HasColumnName("PANFundRequestDate");

                    b.Property<DateOnly?>("PanfundResponseDate")
                        .HasColumnType("date")
                        .HasColumnName("PANFundResponseDate");

                    b.Property<DateOnly?>("PanreceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANReceivedDate");

                    b.Property<DateOnly?>("PanrequestedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANRequestedDate");

                    b.Property<int?>("PatientGrantDisenrollmentId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<bool?>("RequiredOverride")
                        .HasColumnType("bit");

                    b.Property<string>("ResultMessage")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateOnly?>("ReversalDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ReversalDecision")
                        .HasColumnType("bit");

                    b.Property<string>("ReversalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReversalReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DisenrollmentReversalAuditId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DisenrollmentReversalAuditId"), false);

                    b.ToTable("PAN_DisenrollmentReversal_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanDisenrollmentReversalTemp", b =>
                {
                    b.Property<int>("DisenrollmentReversalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisenrollmentReversalId"));

                    b.Property<bool?>("ContactedPan")
                        .HasColumnType("bit")
                        .HasColumnName("ContactedPAN");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FinalizedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("PanfundDecision")
                        .HasColumnType("bit")
                        .HasColumnName("PANFundDecision");

                    b.Property<DateOnly?>("PanfundRequestDate")
                        .HasColumnType("date")
                        .HasColumnName("PANFundRequestDate");

                    b.Property<DateOnly?>("PanfundResponseDate")
                        .HasColumnType("date")
                        .HasColumnName("PANFundResponseDate");

                    b.Property<DateOnly?>("PanreceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANReceivedDate");

                    b.Property<DateOnly?>("PanrequestedDate")
                        .HasColumnType("date")
                        .HasColumnName("PANRequestedDate");

                    b.Property<bool?>("PanreversalDecision")
                        .HasColumnType("bit")
                        .HasColumnName("PANReversalDecision");

                    b.Property<int?>("PatientGrantDisenrollmentId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientGrantId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ReversalDate")
                        .HasColumnType("date");

                    b.Property<string>("ReversalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReversalReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DisenrollmentReversalId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DisenrollmentReversalId"), false);

                    b.HasIndex("StatusId");

                    b.ToTable("PAN_DisenrollmentReversal_temp", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanReversal", b =>
                {
                    b.Property<string>("C111ttAccumulatorAppliedInd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_ACCUMULATOR_APPLIED_IND");

                    b.Property<string>("C111ttAdminFee")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_ADMIN_FEE");

                    b.Property<string>("C111ttAlternateCardNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_ALTERNATE_CARD_NUMBER");

                    b.Property<string>("C111ttAmountAppliedToOop")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_AMOUNT_APPLIED_TO_OOP");

                    b.Property<string>("C111ttAmountCoinsurance")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_AMOUNT_COINSURANCE");

                    b.Property<string>("C111ttAmountCopay")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_AMOUNT_COPAY");

                    b.Property<string>("C111ttAwp")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_AWP");

                    b.Property<string>("C111ttBatchDate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_BATCH_DATE");

                    b.Property<string>("C111ttBenefitCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_BENEFIT_CODE");

                    b.Property<string>("C111ttCardholderNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CARDHOLDER_NUMBER");

                    b.Property<string>("C111ttChainNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CHAIN_NUMBER");

                    b.Property<string>("C111ttClaimBatchNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CLAIM_BATCH_NUMBER");

                    b.Property<string>("C111ttClaimCounter")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CLAIM_COUNTER");

                    b.Property<string>("C111ttClaimInd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CLAIM_IND");

                    b.Property<string>("C111ttClaimNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CLAIM_NUMBER");

                    b.Property<string>("C111ttClaimType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CLAIM_TYPE");

                    b.Property<string>("C111ttCompoundCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_COMPOUND_CODE");

                    b.Property<string>("C111ttControlledSubstance")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_CONTROLLED_SUBSTANCE");

                    b.Property<string>("C111ttCopay")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_COPAY");

                    b.Property<string>("C111ttD0RxNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_D0_RX_NUMBER");

                    b.Property<string>("C111ttDawInd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DAW_IND");

                    b.Property<string>("C111ttDaysSupply")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DAYS_SUPPLY");

                    b.Property<string>("C111ttDeductibleAmount")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DEDUCTIBLE_AMOUNT");

                    b.Property<string>("C111ttDiagnosisCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DIAGNOSIS_CODE");

                    b.Property<string>("C111ttDiagnosisCodeIcd10")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DIAGNOSIS_CODE_ICD10");

                    b.Property<string>("C111ttDispensingFee")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DISPENSING_FEE");

                    b.Property<string>("C111ttDrugManufacturer")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DRUG_MANUFACTURER");

                    b.Property<string>("C111ttDrugPreferenceInd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DRUG_PREFERENCE_IND");

                    b.Property<string>("C111ttDrugTypeCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_DRUG_TYPE_CODE");

                    b.Property<string>("C111ttExceptionCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_EXCEPTION_CODE");

                    b.Property<string>("C111ttFillerOne")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_FILLER_ONE");

                    b.Property<string>("C111ttFillerTwo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_FILLER_TWO");

                    b.Property<string>("C111ttGenericCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_GENERIC_CODE");

                    b.Property<string>("C111ttGpi")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_GPI");

                    b.Property<string>("C111ttGroupNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_GROUP_NUMBER");

                    b.Property<string>("C111ttIngredientCostBilled")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_INGREDIENT_COST_BILLED");

                    b.Property<string>("C111ttIngredientCostPaid")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_INGREDIENT_COST_PAID");

                    b.Property<string>("C111ttMacNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_MAC_NUMBER");

                    b.Property<string>("C111ttMailOrder")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_MAIL_ORDER");

                    b.Property<string>("C111ttMemberBirthdate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_MEMBER_BIRTHDATE");

                    b.Property<string>("C111ttMemberNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_MEMBER_NUMBER");

                    b.Property<string>("C111ttMemberSex")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_MEMBER_SEX");

                    b.Property<string>("C111ttMetricQuantity")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_METRIC_QUANTITY");

                    b.Property<string>("C111ttNationalDrugCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_NATIONAL_DRUG_CODE");

                    b.Property<string>("C111ttNewRefillInd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_NEW_REFILL_IND");

                    b.Property<string>("C111ttNumberOnCard")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_NUMBER_ON_CARD");

                    b.Property<string>("C111ttOtherCoverageCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_OTHER_COVERAGE_CODE");

                    b.Property<string>("C111ttOverrideCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_OVERRIDE_CODE");

                    b.Property<string>("C111ttPaidDate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PAID_DATE");

                    b.Property<string>("C111ttPatientFirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PATIENT_FIRST_NAME");

                    b.Property<string>("C111ttPatientLastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PATIENT_LAST_NAME");

                    b.Property<string>("C111ttPatientMiddleInit")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PATIENT_MIDDLE_INIT");

                    b.Property<string>("C111ttPatientRelationship")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PATIENT_RELATIONSHIP");

                    b.Property<string>("C111ttPaymentDirect")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PAYMENT_DIRECT");

                    b.Property<string>("C111ttPdmGroupNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PDM_GROUP_NUMBER");

                    b.Property<string>("C111ttPdmSponsorNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PDM_SPONSOR_NUMBER");

                    b.Property<string>("C111ttPdmSystemNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PDM_SYSTEM_NUMBER");

                    b.Property<string>("C111ttPenaltyAmount")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PENALTY_AMOUNT");

                    b.Property<string>("C111ttPeriodEndingDate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PERIOD_ENDING_DATE");

                    b.Property<string>("C111ttPharmacyName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PHARMACY_NAME");

                    b.Property<string>("C111ttPharmacyNpiNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PHARMACY_NPI_NUMBER");

                    b.Property<string>("C111ttPharmacyNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PHARMACY_NUMBER");

                    b.Property<string>("C111ttPhysicianNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PHYSICIAN_NUMBER");

                    b.Property<string>("C111ttPricingInd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PRICING_IND");

                    b.Property<string>("C111ttProductName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_PRODUCT_NAME");

                    b.Property<string>("C111ttRejectCode01")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_REJECT_CODE_01");

                    b.Property<string>("C111ttRejectCode02")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_REJECT_CODE_02");

                    b.Property<string>("C111ttReversalDate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_REVERSAL_DATE");

                    b.Property<string>("C111ttRxDate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_RX_DATE");

                    b.Property<string>("C111ttRxOtcCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_RX_OTC_CODE");

                    b.Property<string>("C111ttTax")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_TAX");

                    b.Property<string>("C111ttTherapeuticClassCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_THERAPEUTIC_CLASS_CODE");

                    b.Property<string>("C111ttThirdPartyCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_THIRD_PARTY_CODE");

                    b.Property<string>("C111ttTotalAmountPaid")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_TOTAL_AMOUNT_PAID");

                    b.Property<string>("C111ttUcrAmount")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("C111TT_UCR_AMOUNT");

                    b.ToTable("PanReversals");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Papextension", b =>
                {
                    b.Property<int>("PapextensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PAPExtensionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PapextensionId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("HouseHoldIncome")
                        .HasColumnType("numeric(16, 2)");

                    b.Property<int?>("HouseHoldSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("ProcessedMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("PapextensionId")
                        .HasName("PK__PAPExten__6D123B98F3620F42");

                    b.ToTable("PAPExtension", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime?>("ConsentDateManu")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentDate_Manu");

                    b.Property<DateTime?>("ConsentManuExpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Consent_Manu_ExpDate");

                    b.Property<string>("ConsentProvider")
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<string>("ConsentReceivedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ConsentReceivedManu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("ConsentReceived_Manu");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("GenderOther")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("HighTouch")
                        .HasColumnType("bit");

                    b.Property<string>("HighTouchNote")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("HubCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<string>("LegacyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LegacyID");

                    b.Property<string>("MarketingMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MarketingMemberID");

                    b.Property<int?>("MasterPatientId")
                        .HasColumnType("int")
                        .HasColumnName("MasterPatientID");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAuthCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMethodContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("PortalUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("ProductUsageDate")
                        .HasColumnType("date");

                    b.Property<bool?>("RefusedToProvideDob")
                        .HasColumnType("bit")
                        .HasColumnName("RefusedToProvideDOB");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.Property<string>("SsnlastFourDigits")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("SSNLastFourDigits");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("YearofBirth")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("PatientId");

                    b.HasIndex(new[] { "Deleted", "PatientAuthCode" }, "IX_Deleted_PatientAuthCode_Includes");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted" }, "NonClusteredIndex-20170511-130055");

                    b.HasIndex(new[] { "Deleted" }, "PatientName");

                    b.ToTable("Patients", t =>
                        {
                            t.HasTrigger("Set_ExternalID");

                            t.HasTrigger("Tr_Patients_Enrollment_Audit_Insert");

                            t.HasTrigger("Tr_Patients_Enrollment_Audit_Update");

                            t.HasTrigger("tr_Patients_ConsentInsert");

                            t.HasTrigger("tr_Patients_ConsentUpdate");

                            t.HasTrigger("tr_Patients_Whitelist_Insert");

                            t.HasTrigger("tr_Patients_Whitelist_Update");

                            t.HasTrigger("tr_Patients_Whitelist_Validation_Insert");

                            t.HasTrigger("tr_Patients_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientAddress", b =>
                {
                    b.Property<int>("PatientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("United States");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<bool>("FedexAddressVerifiedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(99);

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.HasKey("PatientAddressId");

                    b.HasIndex("MdmprogramId");

                    b.HasIndex(new[] { "PatientId", "Active", "Deleted", "Rank" }, "NonClusteredIndex-20170427-021308");

                    b.ToTable("PatientAddresses", t =>
                        {
                            t.HasTrigger("Tr_PatientAddresses_Audit_Delete");

                            t.HasTrigger("Tr_PatientAddresses_Audit_Insert");

                            t.HasTrigger("Tr_PatientAddresses_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientAddressesAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<bool>("FedexAddressVerifiedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<int?>("PatientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID");

                    b.Property<int>("PatientAddressIdAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAddressIdAuditId"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.ToTable("PatientAddresses_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientAttestation", b =>
                {
                    b.Property<int>("PatientAttestationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientAttestationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAttestationId"));

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttesterEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AttesterFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttesterLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttesterPhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Brccode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BRCCode");

                    b.Property<bool?>("CheckBox1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CheckBox2")
                        .HasColumnType("bit");

                    b.Property<string>("Contact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseState")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DrugTherapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ExpirationDateNa")
                        .HasColumnType("bit")
                        .HasColumnName("ExpirationDateNA");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<int?>("FundId")
                        .HasColumnType("int")
                        .HasColumnName("FundID");

                    b.Property<string>("FundName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("NurseOptOutDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NurseOptout")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OptOutDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Optout")
                        .HasColumnType("bit");

                    b.Property<string>("OptoutReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientLocationID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VerbalConsent")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientAttestationId");

                    b.ToTable("PatientAttestation", null, t =>
                        {
                            t.HasTrigger("tr_Patients_AttestationInsert");

                            t.HasTrigger("tr_Patients_AttestationUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientAttestationAudit", b =>
                {
                    b.Property<int>("PatientAttestationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientAttestationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAttestationAuditId"));

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttesterEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AttesterFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttesterLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AttesterPhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Brccode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BRCCode");

                    b.Property<bool?>("CheckBox1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CheckBox2")
                        .HasColumnType("bit");

                    b.Property<string>("Contact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseState")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DrugTherapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ExpirationDateNa")
                        .HasColumnType("bit")
                        .HasColumnName("ExpirationDateNA");

                    b.Property<int?>("FundId")
                        .HasColumnType("int")
                        .HasColumnName("FundID");

                    b.Property<string>("FundName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("NurseOptOutDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NurseOptout")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OptOutDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Optout")
                        .HasColumnType("bit");

                    b.Property<string>("OptoutReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientAttestationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAttestationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PatientLocationID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VerbalConsent")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientAttestationAuditId");

                    b.ToTable("PatientAttestationAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientCommunicationMethod", b =>
                {
                    b.Property<int>("PatientCommunicationMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientCommunicationMethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientCommunicationMethodId"));

                    b.Property<int?>("CommunicatioMethodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationMethodName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Note")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PatientCommunicationMethodId");

                    b.ToTable("PatientCommunicationMethods");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientConsentAudit", b =>
                {
                    b.Property<int>("PatientConsentAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientConsentAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientConsentAuditId"));

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("ConsentDateManu")
                        .HasColumnType("date")
                        .HasColumnName("ConsentDate_Manu");

                    b.Property<string>("ConsentFormVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ConsentManuExpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Consent_Manu_ExpDate");

                    b.Property<string>("ConsentProvider")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConsentReceivedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ConsentReceivedManu")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentReceived_Manu");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConsentSourceSubtype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsOptOut")
                        .HasColumnType("bit")
                        .HasColumnName("isOptOut");

                    b.Property<DateOnly?>("OptOutDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PatientConsentAuditId");

                    b.HasIndex(new[] { "PatientId", "ProgramId" }, "INDX_PatientConsentAudit_PatientID_ProgramID");

                    b.ToTable("PatientConsentAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientConsentPerDrug", b =>
                {
                    b.Property<int>("ConsentPerDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsentPerDrugID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsentPerDrugId"));

                    b.Property<string>("AttestationRecordingId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AttestationRecordingID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("ConsentDateManu")
                        .HasColumnType("date")
                        .HasColumnName("ConsentDate_Manu");

                    b.Property<string>("ConsentFormVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("N/A");

                    b.Property<DateOnly?>("ConsentManuExpDate")
                        .HasColumnType("date")
                        .HasColumnName("Consent_Manu_ExpDate");

                    b.Property<bool>("ConsentReceived")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConsentSourceSubtype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("N/A");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OptOut")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OptOutDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("ConsentPerDrugId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "PatientId", "ConsentReceived", "OptOut", "ConsentManuExpDate", "DrugName" }, "PatientConsentPerDrug_IDX_Covering");

                    b.HasIndex(new[] { "ProgramId", "ConsentReceived", "Deleted", "ConsentManuExpDate" }, "PatientConsentPerDrug_optoutInfo");

                    b.HasIndex(new[] { "ProgramId", "ConsentReceived", "OptOut", "Deleted", "ConsentManuExpDate" }, "ProgramID_ConsentReceived_OptOut_Deleted_Consent_Manu_ExpDate_Includes");

                    b.HasIndex(new[] { "ProgramId", "PatientId", "Deleted" }, "ProgramPatientID");

                    b.ToTable("PatientConsentPerDrug", null, t =>
                        {
                            t.HasTrigger("tr_Patients_ConsentPerDrugInsert");

                            t.HasTrigger("tr_Patients_ConsentPerDrugUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientContact", b =>
                {
                    b.Property<int>("PatientContactsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientContactsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientContactsId"));

                    b.Property<bool?>("CaregiverStatmtRead")
                        .HasColumnType("bit");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("LegallyAuthRep")
                        .HasColumnType("bit");

                    b.Property<string>("PatientContactType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("contact");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhiauthBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PHIAuthBy");

                    b.Property<DateTime?>("PhiauthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PHIAuthDate");

                    b.Property<bool?>("PhiauthRep")
                        .HasColumnType("bit")
                        .HasColumnName("PHIAuthRep");

                    b.Property<string>("PhiauthSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PHIAuthSource");

                    b.Property<string>("PhiinteractionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PHIInteractionID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientContactsId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientContact", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDevice", b =>
                {
                    b.Property<int>("PatientDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientDeviceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientDeviceId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Make")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WirelessNetwork")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientDeviceId");

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientDevices");

                    b.ToTable("PatientDevices");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDeviceId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Assigned")
                        .HasColumnType("bit");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("Id");

                    b.ToTable("Patient_DeviceID", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDeviceUsageLog", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProductUsageDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable("PatientDeviceUsageLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDiagnosis", b =>
                {
                    b.Property<int>("PatientDiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientDiagnosisID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientDiagnosisId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DateofDiagnosis")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DiagnosisListId")
                        .HasColumnType("int")
                        .HasColumnName("DiagnosisListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("PatientDiagnosisId");

                    b.HasIndex("DiagnosisListId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDiagnosis", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDupeSearchResponse", b =>
                {
                    b.Property<int>("PatientDupeSearchResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientDupeSearchResponseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientDupeSearchResponseId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<int?>("EntityDupeSearchRequestId")
                        .HasColumnType("int")
                        .HasColumnName("EntityDupeSearchRequestID");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MatchScore")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SSN");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZIP");

                    b.HasKey("PatientDupeSearchResponseId");

                    b.ToTable("PatientDupeSearchResponses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDynamicDatum", b =>
                {
                    b.Property<int>("PatientDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PatientDynamicDataId")
                        .HasName("PK_EntityDynamicData");

                    b.HasIndex("DynamicDataListId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "PatientId" }, "IX_PatientDynamicData_Program");

                    b.HasIndex(new[] { "PatientId", "ProgramId" }, "PatientID_ProgramID");

                    b.HasIndex(new[] { "PatientId", "ProgramId", "DynamicDataListId", "Deleted" }, "PatientID_ProgramID_DynamicDataListID_Deleted");

                    b.ToTable("PatientDynamicData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientEligibilityResponseCodeList", b =>
                {
                    b.Property<int>("PatientEligibilityResponseCodeListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientEligibility_ResponseCodeListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientEligibilityResponseCodeListId"));

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResponseCodeDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ResponseComments")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.HasKey("PatientEligibilityResponseCodeListId");

                    b.ToTable("PatientEligibility_ResponseCodeList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientEligibilityTransaction", b =>
                {
                    b.Property<int>("PatientEligilibityTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientEligilibity_TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientEligilibityTransactionId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RawRequest")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RawResponce")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RequestBasisOfCostDetermn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_BasisOfCostDetermn");

                    b.Property<string>("RequestBinNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_BinNumber");

                    b.Property<string>("RequestCardholderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CardholderFirstName");

                    b.Property<string>("RequestCardholderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CardholderLastName");

                    b.Property<string>("RequestCertificationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CertificationID");

                    b.Property<string>("RequestCmsPartDdefinedQualifiedFacility")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CmsPartDDefinedQualifiedFacility");

                    b.Property<string>("RequestCompCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CompCode");

                    b.Property<DateTime?>("RequestDatePresWritten")
                        .HasColumnType("datetime")
                        .HasColumnName("Request_DatePresWritten");

                    b.Property<int?>("RequestDaysSupply")
                        .HasColumnType("int")
                        .HasColumnName("Request_DaysSupply");

                    b.Property<string>("RequestDispenseAsWritten")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_DispenseAsWritten");

                    b.Property<decimal?>("RequestDispensingFeeSub")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_DispensingFeeSub");

                    b.Property<string>("RequestEligibilityClarificationCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_EligibilityClarificationCode");

                    b.Property<string>("RequestEmployerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_EmployerId");

                    b.Property<int?>("RequestFillNumber")
                        .HasColumnType("int")
                        .HasColumnName("Request_FillNumber");

                    b.Property<decimal?>("RequestGrossAmountDue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_GrossAmountDue");

                    b.Property<string>("RequestGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_GroupID");

                    b.Property<string>("RequestHomePlan")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_HomePlan");

                    b.Property<decimal?>("RequestIngredientCostSub")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_IngredientCostSub");

                    b.Property<string>("RequestMedicaidIdNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_MedicaidIdNumber");

                    b.Property<string>("RequestMedicaidIndicator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_MedicaidIndicator");

                    b.Property<string>("RequestMedigapId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_MedigapId");

                    b.Property<string>("RequestNumOfRefillsAuthorized")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_NumOfRefillsAuthorized");

                    b.Property<decimal?>("RequestOtherAmountClaimedSubmitted")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_OtherAmountClaimedSubmitted");

                    b.Property<string>("RequestOtherAmountClaimedSubmittedQualifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherAmountClaimedSubmittedQualifier");

                    b.Property<string>("RequestOtherAmtClaimedSubCnt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherAmtClaimedSubCnt");

                    b.Property<string>("RequestOtherPayerCoverageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherPayerCoverageType");

                    b.Property<string>("RequestOtherPaymentsCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherPaymentsCount");

                    b.Property<string>("RequestPatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientCity");

                    b.Property<int?>("RequestPatientGenderCode")
                        .HasColumnType("int")
                        .HasColumnName("Request_PatientGenderCode");

                    b.Property<string>("RequestPatientIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientIdQual");

                    b.Property<string>("RequestPatientPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientPhoneNo");

                    b.Property<string>("RequestPatientRelationshipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientRelationshipCode");

                    b.Property<string>("RequestPatientState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientState");

                    b.Property<string>("RequestPatientStreet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientStreet");

                    b.Property<string>("RequestPatientZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientZipCode");

                    b.Property<string>("RequestPbmcardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PBMCardHolderID");

                    b.Property<string>("RequestPersonCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PersonCode");

                    b.Property<string>("RequestPlaceOfService")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PlaceOfService");

                    b.Property<string>("RequestPresOriginCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PresOriginCode");

                    b.Property<string>("RequestPrescriberCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberCity");

                    b.Property<string>("RequestPrescriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberFirstName");

                    b.Property<string>("RequestPrescriberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberId");

                    b.Property<string>("RequestPrescriberIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberIdQual");

                    b.Property<string>("RequestPrescriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberLastName");

                    b.Property<string>("RequestPrescriberPhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberPhoneNumber");

                    b.Property<string>("RequestPrescriberState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberState");

                    b.Property<string>("RequestPrescriberStreet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberStreet");

                    b.Property<string>("RequestPrescriberZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberZipCode");

                    b.Property<string>("RequestPrescriptionRefNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriptionRefNum");

                    b.Property<string>("RequestPrescriptionRefNumQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriptionRefNumQual");

                    b.Property<string>("RequestPrimaryCareProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrimaryCareProviderId");

                    b.Property<string>("RequestPrimaryCareProviderIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrimaryCareProviderIdQual");

                    b.Property<string>("RequestPrimaryCareProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrimaryCareProviderLastName");

                    b.Property<string>("RequestProcessorControlNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProcessorControlNumber");

                    b.Property<string>("RequestProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProductId");

                    b.Property<string>("RequestProductIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProductIdQual");

                    b.Property<string>("RequestProviderAcceptAssignmentIndicator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProviderAcceptAssignmentIndicator");

                    b.Property<string>("RequestProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProviderId");

                    b.Property<string>("RequestProviderIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProviderIdQual");

                    b.Property<int?>("RequestQtyDispensed")
                        .HasColumnType("int")
                        .HasColumnName("Request_QtyDispensed");

                    b.Property<int?>("RequestQtyIntendedDisp")
                        .HasColumnType("int")
                        .HasColumnName("Request_QtyIntendedDisp");

                    b.Property<string>("RequestReleaseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ReleaseNumber");

                    b.Property<DateTime?>("RequestServiceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Request_ServiceDate");

                    b.Property<string>("RequestServiceProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ServiceProviderId");

                    b.Property<string>("RequestServiceProviderIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ServiceProviderIdQual");

                    b.Property<string>("RequestSplPackageInd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_SplPackageInd");

                    b.Property<string>("RequestSubClarifiCodeCnt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_SubClarifiCodeCnt");

                    b.Property<string>("RequestSubClarificatoinCodes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_SubClarificatoinCodes");

                    b.Property<string>("RequestTransactionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_TransactionCode");

                    b.Property<string>("RequestTransactionCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_TransactionCount");

                    b.Property<string>("RequestUnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_UnitOfMeasure");

                    b.Property<decimal?>("RequestUsualCustomaryCharge")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_UsualCustomaryCharge");

                    b.Property<string>("ResponseAdditionalMessageInfo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Response_AdditionalMessageInfo");

                    b.Property<string>("ResponseApprovedMsgCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ApprovedMsgCode");

                    b.Property<string>("ResponseApprovedMsgCodeCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ApprovedMsgCodeCount");

                    b.Property<string>("ResponseAuthorizationNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_AuthorizationNo");

                    b.Property<string>("ResponseBenefitId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_BenefitID");

                    b.Property<string>("ResponseBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_BIN");

                    b.Property<string>("ResponseCardholderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_CardholderID");

                    b.Property<string>("ResponseClaimNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Response_ClaimNumber");

                    b.Property<bool?>("ResponseClaimReversed")
                        .HasColumnType("bit")
                        .HasColumnName("Response_ClaimReversed");

                    b.Property<string>("ResponseCmsLowIncomeCostSharingLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_CmsLowIncomeCostSharingLevel");

                    b.Property<decimal?>("ResponseCoPayAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Response_CoPayAmount");

                    b.Property<bool?>("ResponseCoPayAmountSpecified")
                        .HasColumnType("bit")
                        .HasColumnName("Response_CoPayAmountSpecified");

                    b.Property<string>("ResponseContractId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ContractId");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_Date");

                    b.Property<DateTime?>("ResponseEffectiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_EffectiveDate");

                    b.Property<string>("ResponseFormularyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_FormularyId");

                    b.Property<string>("ResponseGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_GroupID");

                    b.Property<string>("ResponseHeaderResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_HeaderResponseStatus");

                    b.Property<string>("ResponseHlpDskPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_HlpDskPhoneNo");

                    b.Property<string>("ResponseHlpDskPhoneQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_HlpDskPhoneQual");

                    b.Property<string>("ResponseInsuranceGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_InsuranceGroupID");

                    b.Property<string>("ResponseInsurancePlanId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_InsurancePlanID");

                    b.Property<string>("ResponseMedicarePartDcoverageCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_MedicarePartDCoverageCode");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_Message");

                    b.Property<string>("ResponseNetworkReimburseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_NetworkReimburseId");

                    b.Property<bool?>("ResponsePaNeeded")
                        .HasColumnType("bit")
                        .HasColumnName("Response_PaNeeded");

                    b.Property<string>("ResponsePayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PayerId");

                    b.Property<string>("ResponsePayerIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PayerIdQual");

                    b.Property<string>("ResponsePcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PCN");

                    b.Property<string>("ResponsePersonCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PersonCode");

                    b.Property<string>("ResponsePrefProductCopayIncentive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductCopayIncentive");

                    b.Property<string>("ResponsePrefProductCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductCount");

                    b.Property<string>("ResponsePrefProductDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductDesc");

                    b.Property<string>("ResponsePrefProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductId");

                    b.Property<string>("ResponsePrefProductIdQualifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductIdQualifier");

                    b.Property<string>("ResponsePrefProductIncentive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductIncentive");

                    b.Property<string>("ResponsePrescriptionRefNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrescriptionRefNum");

                    b.Property<string>("ResponsePrescriptionRefNumQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrescriptionRefNumQual");

                    b.Property<string>("ResponsePricingMessage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PricingMessage");

                    b.Property<string>("ResponseRejectCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RejectCode");

                    b.Property<string>("ResponseRejectCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RejectCount");

                    b.Property<string>("ResponseRejectFldOccuranceInd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RejectFldOccuranceInd");

                    b.Property<string>("ResponseStatusMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Response_StatusMessage");

                    b.Property<DateTime?>("ResponseTerminationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_TerminationDate");

                    b.Property<string>("ResponseTranResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_TranResponseStatus");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_Type");

                    b.Property<string>("ResponseTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Response_TypeDesc");

                    b.Property<string>("ResponseXml")
                        .HasColumnType("xml")
                        .HasColumnName("Response_XML");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("TransactionInsuranceCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Transaction_InsuranceCode");

                    b.Property<string>("TransactionInsuranceName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Transaction_InsuranceName");

                    b.Property<string>("TransactionPatientDob")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientDOB");

                    b.Property<string>("TransactionPatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientFirstName");

                    b.Property<string>("TransactionPatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientLastName");

                    b.Property<string>("TransactionPatientMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientMemberID");

                    b.Property<string>("TransactionProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_ProviderFirstName");

                    b.Property<string>("TransactionProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_ProviderLastName");

                    b.Property<string>("TransactionProviderNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_ProviderNPI");

                    b.Property<int?>("WebServicesRequestType")
                        .HasColumnType("int");

                    b.HasKey("PatientEligilibityTransactionId");

                    b.ToTable("PatientEligibility_Transactions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientFmrsrHistory", b =>
                {
                    b.Property<int>("PatientFmrsrHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientFMRSR_HistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientFmrsrHistoryId"));

                    b.Property<string>("AddressPhy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Address_Phy");

                    b.Property<string>("CityPhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("City_Phy");

                    b.Property<string>("ContactName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("DocName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugCertificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EnrollmentDatePhy")
                        .HasColumnType("datetime")
                        .HasColumnName("EnrollmentDate_Phy");

                    b.Property<string>("EntityAsContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FaxPhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fax_Phy");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName_Phy");

                    b.Property<string>("FmrscAnnualVerification")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Annual_Verification");

                    b.Property<string>("FmrscInteractionId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("FMRSC_InteractionID");

                    b.Property<string>("FmrscNegativePregnancyTest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FMRSC_Negative_Pregnancy_Test");

                    b.Property<string>("FmrscPrescriberSignatureDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FMRSC_PrescriberSignatureDate");

                    b.Property<string>("FmrscReasonForChange")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Reason_for_Change");

                    b.Property<string>("FmrscReasonForChangeDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Reason_for_Change_Description");

                    b.Property<string>("FmrscReproductiveStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Reproductive_Status");

                    b.Property<string>("FmrscStatusDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Status_Description");

                    b.Property<string>("FmrscType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Type");

                    b.Property<string>("FmrscVerballyAccepted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FMRSC_VerballyAccepted");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName_phy");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBY_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<string>("NpiPhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI_Phy");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientSpid")
                        .HasColumnType("int")
                        .HasColumnName("PatientSPID");

                    b.Property<string>("PhonePat")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Pat");

                    b.Property<string>("PhonePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Phy");

                    b.Property<int?>("PhysicianAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    b.Property<DateTime?>("ShCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_Created");

                    b.Property<string>("ShCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_CreatedBy");

                    b.Property<DateTime?>("ShLastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_LastUpdated");

                    b.Property<string>("ShLastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_LastUpdatedby");

                    b.Property<string>("Spname")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SPName");

                    b.Property<string>("SrStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_Status");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<int?>("SrSubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<string>("Srfcomplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRFComplete");

                    b.Property<string>("Srfreason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRFReason");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("StatePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("State_Phy");

                    b.Property<string>("StatusPat")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)")
                        .HasColumnName("Status_Pat");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.Property<int?>("TriageSrid")
                        .HasColumnType("int")
                        .HasColumnName("TriageSRID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipPhy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Zip_Phy");

                    b.HasKey("PatientFmrsrHistoryId");

                    b.HasIndex(new[] { "Srid", "EnrollmentDate" }, "IX_NCI_PATFMHIS_SRID_EnrollmentDate");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "Program_SRID_SHID");

                    b.ToTable("PatientFMRSR_History", null, t =>
                        {
                            t.HasTrigger("TR_PatientFMRSR_History_Audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientFmrsrHistoryAudit", b =>
                {
                    b.Property<int>("PatientFmrsrHistoryAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientFMRSR_History_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientFmrsrHistoryAuditId"));

                    b.Property<string>("AddressPhy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Address_Phy");

                    b.Property<string>("ChangeAction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Change_Action");

                    b.Property<string>("CityPhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("City_Phy");

                    b.Property<string>("ContactName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateOnly?>("CreatedLog")
                        .HasColumnType("date")
                        .HasColumnName("Created_log");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("DocName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugCertificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EnrollmentDatePhy")
                        .HasColumnType("datetime")
                        .HasColumnName("EnrollmentDate_Phy");

                    b.Property<string>("EntityAsContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxPhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fax_Phy");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName_Phy");

                    b.Property<string>("FmrscAnnualVerification")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Annual_Verification");

                    b.Property<string>("FmrscInteractionId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("FMRSC_InteractionID");

                    b.Property<string>("FmrscNegativePregnancyTest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FMRSC_Negative_Pregnancy_Test");

                    b.Property<string>("FmrscPrescriberSignatureDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FMRSC_PrescriberSignatureDate");

                    b.Property<string>("FmrscReasonForChange")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Reason_for_Change");

                    b.Property<string>("FmrscReasonForChangeDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Reason_for_Change_Description");

                    b.Property<string>("FmrscReproductiveStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Reproductive_Status");

                    b.Property<string>("FmrscStatusDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Status_Description");

                    b.Property<string>("FmrscType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FMRSC_Type");

                    b.Property<string>("FmrscVerballyAccepted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FMRSC_VerballyAccepted");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName_phy");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<string>("NpiPhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI_Phy");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PatientFmrsrHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("PatientFMRSR_HistoryID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientSpid")
                        .HasColumnType("int")
                        .HasColumnName("PatientSPID");

                    b.Property<string>("PhonePat")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Pat");

                    b.Property<string>("PhonePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Phy");

                    b.Property<int?>("PhysicianAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    b.Property<DateTime?>("ShCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_Created");

                    b.Property<string>("ShCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_CreatedBy");

                    b.Property<DateTime?>("ShLastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_LastUpdated");

                    b.Property<string>("ShLastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_LastUpdatedby");

                    b.Property<string>("Spname")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SPName");

                    b.Property<string>("SrStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_Status");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<int?>("SrSubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<string>("Srfcomplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRFComplete");

                    b.Property<string>("Srfreason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRFReason");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("StatePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("State_Phy");

                    b.Property<string>("StatusPat")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)")
                        .HasColumnName("Status_Pat");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.Property<int?>("TriageSrid")
                        .HasColumnType("int")
                        .HasColumnName("TriageSRID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipPhy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Zip_Phy");

                    b.HasKey("PatientFmrsrHistoryAuditId");

                    b.ToTable("PatientFMRSR_History_Audit", null, t =>
                        {
                            t.HasTrigger("TR_PatientFMRSR_History_Audit_Permission");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientFulfillment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CampaignCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CellCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("ExtractDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Field1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Field7")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FulfillmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FulfillmentID");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IndividualID");

                    b.Property<string>("KitCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Kit_Code");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NamePrefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ResponseSourceCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("Patient_Fulfillment_ID");

                    b.ToTable("Patient_Fulfillment", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientInsurance", b =>
                {
                    b.Property<int>("PatientInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientInsuranceId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Binnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BINNumber");

                    b.Property<string>("CardHolder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ChCell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CH_Cell");

                    b.Property<DateOnly?>("ChDob")
                        .HasColumnType("date")
                        .HasColumnName("CH_DOB");

                    b.Property<string>("ChEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CH_Email");

                    b.Property<string>("ChPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CH_Phone");

                    b.Property<string>("ChSsn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CH_SSN");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EBvModularTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("eBvModularTransactionID");

                    b.Property<string>("EligibityDrugName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmployerAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmployerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalPayorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPayorID");

                    b.Property<string>("ExternalPbmid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPBMID");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("InsuranceEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsurancePayerId")
                        .HasColumnType("int")
                        .HasColumnName("InsurancePayerID");

                    b.Property<string>("InsurancePhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsMedicalSupplementPlan")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicalGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MedicalInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("MedicalInsuranceID");

                    b.Property<string>("MedicalSupplementPlanLetter")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PayerPlanTypeLookupId")
                        .HasColumnType("int")
                        .HasColumnName("PayerPlanTypeLookupID");

                    b.Property<string>("Pbmcategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMCategory");

                    b.Property<string>("PbminsurancePhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMInsurancePhoneNumber");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCN");

                    b.Property<int?>("PharmacyInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PharmacyInsuranceID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RxCoverageJsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RxEbvcontrolNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RxEBVControlNumber");

                    b.Property<string>("SubscriberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SubscriberID");

                    b.Property<string>("SubscriberIdPbm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SubscriberID_PBM");

                    b.Property<int?>("TruePharmacyInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("TruePharmacyInsuranceID");

                    b.HasKey("PatientInsuranceId");

                    b.HasIndex("MedicalInsuranceId");

                    b.HasIndex("PharmacyInsuranceId");

                    b.HasIndex(new[] { "InsuranceType" }, "IX_PatientInsurance_InsuranceType");

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientInsurance_PatientID");

                    b.ToTable("PatientInsurance", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientInvitationEmailAudit", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit")
                        .HasColumnName("isSubmitted");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.ToTable("PatientInvitationEmailAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientJourneyDatum", b =>
                {
                    b.Property<string>("Bicompleted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BICompleted");

                    b.Property<string>("BicompletedColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BICompletedColor");

                    b.Property<string>("BicompletedNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BICompletedNA");

                    b.Property<string>("Call24hourPostInitiation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_24HourPostInitiation");

                    b.Property<string>("Call24hourPostInitiationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_24HourPostInitiationColor");

                    b.Property<string>("Call24hourPostInitiationNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_24HourPostInitiationNA");

                    b.Property<string>("Call2weekpostinitiationeducation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_2weekpostinitiationeducation");

                    b.Property<string>("Call2weekpostinitiationeducationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_2weekpostinitiationeducationColor");

                    b.Property<string>("Call2weekpostinitiationeducationNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_2weekpostinitiationeducationNA");

                    b.Property<string>("CallPostInitiationTitration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_PostInitiationTitration");

                    b.Property<string>("CallPostInitiationTitrationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_PostInitiationTitrationColor");

                    b.Property<string>("CallPostInitiationTitrationNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_PostInitiationTitrationNA");

                    b.Property<string>("CareCycleState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CarecycleId")
                        .HasColumnType("int")
                        .HasColumnName("CarecycleID");

                    b.Property<DateTime?>("CarecycleStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CoCnurseCurrent")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CoCNurse_Current");

                    b.Property<string>("CoCnurseInit")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CoCNurse_Init");

                    b.Property<string>("CompleteSmnreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CompleteSMNReceived");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentMaintenanceSmnreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentMaintenanceSMNReceived");

                    b.Property<string>("CurrentMaintenanceSmnreceivedNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentMaintenanceSMNReceivedNA");

                    b.Property<string>("CurrentPacompletedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPACompletedDate");

                    b.Property<string>("CurrentPacompletedDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPACompletedDateColor");

                    b.Property<string>("CurrentPacompletedDateNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPACompletedDateNA");

                    b.Property<string>("CurrentPastartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPAStartDate");

                    b.Property<string>("CurrentPastartDateNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPAStartDateNA");

                    b.Property<string>("DaysSinceLastFill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ExportId")
                        .HasColumnType("int")
                        .HasColumnName("ExportID");

                    b.Property<string>("FirstWecomeCallAttempt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstWecomeCallAttemptColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstWecomeCallAttemptNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstWecomeCallAttemptNA");

                    b.Property<string>("InitialPriorAuthorization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialPriorAuthorizationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialPriorAuthorizationNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("InitialPriorAuthorizationNA");

                    b.Property<string>("InitialShipDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialShipDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialShipDateNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("InitialShipDateNA");

                    b.Property<string>("InitiationVisit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitiationVisitColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitiationVisitNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("InitiationVisitNA");

                    b.Property<string>("LastShipDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastShipDateNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastShipDateNA");

                    b.Property<string>("MaintenancePriorAuthorization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaintenancePriorAuthorizationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaintenancePriorAuthorizationNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaintenancePriorAuthorizationNA");

                    b.Property<string>("MaintenanceSmnreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaintenanceSMNReceived");

                    b.Property<string>("MaintenanceSmnreceivedColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaintenanceSMNReceivedColor");

                    b.Property<string>("MaintenanceSmnreceivedNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaintenanceSMNReceivedNA");

                    b.Property<string>("MonthlyFollowUp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MonthlyFollowUpNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MonthlyFollowUpNA");

                    b.Property<string>("MostRecentCompletedContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MostRecentContactAttempt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NurseAssignmentDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NurseAssignmentDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NurseAssignmentDateNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NurseAssignmentDateNA");

                    b.Property<bool?>("Over180days")
                        .HasColumnType("bit");

                    b.Property<string>("Pafreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAFReceived");

                    b.Property<string>("PafreceivedColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAFReceivedColor");

                    b.Property<string>("PafreceivedNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAFReceivedNA");

                    b.Property<string>("Painitiated")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAInitiated");

                    b.Property<string>("PatCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientInit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientName")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.Property<string>("PatientStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PatientStatusDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicianName")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<string>("PostInitiationFollowUpVisit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostInitiationFollowUpVisitNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PostInitiationFollowUpVisitNA");

                    b.Property<string>("PreInitiationEducationVisit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreInitiationEducationVisitNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PreInitiationEducationVisitNA");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RefillRemaining")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SmnreferralReceivedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SMNReferralReceivedDate");

                    b.Property<string>("SmnreferralReceivedDateNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SMNReferralReceivedDateNA");

                    b.Property<string>("SpecialtyPharmacy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StartSmntype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("StartSMNType");

                    b.Property<string>("Territory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("TitrationFormFaxedtoHcp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TitrationFormFaxedtoHCP");

                    b.Property<string>("TitrationFormFaxedtoHcpna")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TitrationFormFaxedtoHCPNA");

                    b.Property<string>("Visit1weekPostinitiation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("visit_1weekPostinitiation");

                    b.Property<string>("Visit1weekPostinitiationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("visit_1weekPostinitiationColor");

                    b.Property<string>("Visit1weekPostinitiationNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("visit_1weekPostinitiationNA");

                    b.Property<string>("WelcomeCallCompleted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WelcomeCallCompletedNa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WelcomeCallCompletedNA");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasIndex(new[] { "Pkid" }, "Pkid_PatientJourney");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Pkid" }, "Pkid_PatientJourney"));

                    b.ToTable("PatientJourneyData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientLischeck", b =>
                {
                    b.Property<int>("PatientLischeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientLISCheckID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientLischeckId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("GrossIncome")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("HouseHoldNumber")
                        .HasColumnType("int");

                    b.Property<string>("Medicaid")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Medicare")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientLischeckId");

                    b.HasIndex(new[] { "ProgramId", "ServiceRequestId", "Deleted" }, "ProgramSRID");

                    b.ToTable("PatientLISCheck", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientLischeckBatch", b =>
                {
                    b.Property<int>("PatientLischeckBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientLISCheckBatchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientLischeckBatchId"));

                    b.Property<string>("AbRejectCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ab_reject_code");

                    b.Property<string>("AbRejectCode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ab_reject_code_2");

                    b.Property<string>("AbRejectText")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ab_reject_text");

                    b.Property<string>("ClientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_bin");

                    b.Property<string>("DContractId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_contract_id");

                    b.Property<string>("DGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_group");

                    b.Property<string>("DMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_member_id");

                    b.Property<string>("DPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_pcn");

                    b.Property<string>("DPlanId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_plan_id");

                    b.Property<string>("DPlanName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("d_plan_name");

                    b.Property<string>("DRejectCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_reject_code");

                    b.Property<string>("DRejectCode2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("d_reject_code_2");

                    b.Property<string>("DRejectText")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("d_reject_text");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Dob")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("dob");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Hcin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("hcin");

                    b.Property<string>("InboundFileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LischeckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LISCheckDate");

                    b.Property<string>("Lislevel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LISLevel");

                    b.Property<string>("PartA")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("part_a");

                    b.Property<string>("PartB")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("part_b");

                    b.Property<string>("PartD")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("part_d");

                    b.Property<string>("PatientFirst")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patient_first");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLast")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patient_last");

                    b.Property<string>("ProcessingComments")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("processing_comments");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ssn");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transaction_status");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.HasKey("PatientLischeckBatchId");

                    b.ToTable("PatientLISCheckBatch", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientMarketingStatus", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DrugTherapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OptStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientMarketingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientMarketingStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientMarketingStatusId"));

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SurveyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("PatientMarketingStatus", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientNote", b =>
                {
                    b.Property<int>("PatientNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientNoteId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PatientNoteId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientOrganization", b =>
                {
                    b.Property<int>("PatientOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientOrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientOrganizationId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Relationship")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasDefaultValue("N/A");

                    b.HasKey("PatientOrganizationId");

                    b.HasIndex(new[] { "PatientId", "OrganizationId", "Deleted" }, "NonClusteredIndex-20170427-021209");

                    b.ToTable("PatientOrganizations", t =>
                        {
                            t.HasTrigger("Set_InactiveRelationship");

                            t.HasTrigger("tr_PatientOrganizations_Insert_OrganizationLinks");

                            t.HasTrigger("tr_PatientOrganizations_Update_OrganizationLinks");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPhoneNumber", b =>
                {
                    b.Property<int>("PatientPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientPhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientPhoneNumberId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("United States");

                    b.Property<string>("CountryCallingCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OktoLeaveMsg")
                        .HasColumnType("bit")
                        .HasColumnName("OKtoLeaveMsg");

                    b.Property<bool?>("OktoSendTextMsg")
                        .HasColumnType("bit")
                        .HasColumnName("OKtoSendTextMsg");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredCallingRate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.HasKey("PatientPhoneNumberId");

                    b.HasIndex(new[] { "PatientId", "Active", "Deleted", "Rank" }, "NonClusteredIndex-20170511-125020");

                    b.HasIndex(new[] { "ProgramId", "PatientId", "Deleted" }, "PatientPhone");

                    b.ToTable("PatientPhoneNumbers", t =>
                        {
                            t.HasTrigger("Tr_PatientPhoneNumbers_Audit_Delete");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Audit_Insert");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Audit_Update");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Whitelist_Insert");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Whitelist_Update");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Whitelist_Validation_Insert_POC");

                            t.HasTrigger("Tr_PatientPhoneNumbers_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPhoneNumbersAudit", b =>
                {
                    b.Property<int>("PatientPhoneNumberIdAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientPhoneNumberID_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientPhoneNumberIdAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryCallingCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OktoLeaveMsg")
                        .HasColumnType("bit")
                        .HasColumnName("OKtoLeaveMsg");

                    b.Property<bool?>("OktoSendTextMsg")
                        .HasColumnType("bit")
                        .HasColumnName("OKtoSendTextMsg");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientPhoneNumberId")
                        .HasColumnType("int")
                        .HasColumnName("PatientPhoneNumberID");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredCallingRate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("PatientPhoneNumberIdAuditId");

                    b.ToTable("PatientPhoneNumbers_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPhysician", b =>
                {
                    b.Property<int>("PatientPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientPhysicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientPhysicianId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("OrganizationLocationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationLocationID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("PhysicianLocationId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianLocationID");

                    b.Property<string>("PhysicianType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasDefaultValue("N/A");

                    b.HasKey("PatientPhysicianId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex(new[] { "Deleted" }, "IX_Deleted");

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientPhysicians");

                    b.HasIndex(new[] { "ProgramId", "Rank", "Active", "Deleted" }, "IX_PatientPhysicians_ProgramID_Rank_Active_Deleted");

                    b.ToTable("PatientPhysicians", t =>
                        {
                            t.HasTrigger("tr_PatientPhysicians_Insert_PhysicianLinks");

                            t.HasTrigger("tr_PatientPhysicians_Update_PhysicianLinks");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPrescription", b =>
                {
                    b.Property<int>("PatientPrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientPrescriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientPrescriptionId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ExternalPrescriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("ExternalPrescriptionID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PatientPrescriptionId")
                        .HasName("PK__PatientP__6AB6BE9BD561D7D0");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PatientPrescription", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientProgram", b =>
                {
                    b.Property<int>("PatientProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientProgramId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SharedRecordProgramId")
                        .HasColumnType("int")
                        .HasColumnName("SharedRecordProgramID");

                    b.HasKey("PatientProgramId");

                    b.ToTable("PatientPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientReactivation", b =>
                {
                    b.Property<int>("PatientReactivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientReactivationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientReactivationId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<bool?>("PendingReactive")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("ReactivationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("PatientReactivationId");

                    b.ToTable("PatientReactivations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientRefill", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RefillResponse")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RefillResponseDateTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("PatientRefill", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientRem", b =>
                {
                    b.Property<int>("PatientRemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientREMS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientRemsId"));

                    b.Property<string>("ContactName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("DocName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugCertificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EnrollmentDatePhy")
                        .HasColumnType("datetime")
                        .HasColumnName("EnrollmentDate_Phy");

                    b.Property<string>("EntityAsContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName_Phy");

                    b.Property<string>("FrsNagitivePregnancyTest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FRS_NagitivePregnancyTest");

                    b.Property<string>("FrsReproductiveStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FRS_ReproductiveStatus");

                    b.Property<string>("FrsStatusDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FRS_StatusDescription");

                    b.Property<string>("FrsType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FRS_Type");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName_phy");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<string>("LiverFnTest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<DateOnly?>("PrescriberSignatureDt")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RemsSignature")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("REMS_Signature");

                    b.Property<DateOnly?>("RemsSignatureDt")
                        .HasColumnType("date")
                        .HasColumnName("REMS_SignatureDt");

                    b.Property<string>("RemsSignatureSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REMS_SignatureSource");

                    b.Property<string>("RemsVerbalSourceLink")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("REMS_VerbalSourceLink");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    b.Property<DateTime?>("ShCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_Created");

                    b.Property<string>("ShCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_CreatedBy");

                    b.Property<DateTime?>("ShLastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_LastUpdated");

                    b.Property<string>("ShLastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_LastUpdatedBy");

                    b.Property<string>("SrStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_Status");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<int?>("SrSubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<string>("Srfcomplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRFComplete");

                    b.Property<string>("Srfreason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRFReason");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("StatusPat")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)")
                        .HasColumnName("Status_Pat");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientRemsId");

                    b.HasIndex(new[] { "Srid", "EnrollmentDate", "Resolution" }, "IX_NCI_PREMS_SRID_EnrollmentDate_Resolution");

                    b.HasIndex(new[] { "PatientId", "Deleted" }, "PatentID");

                    b.HasIndex(new[] { "PatientId", "ProgramId", "DrugName", "Deleted" }, "PatientID");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "ProgramID_Include");

                    b.ToTable("PatientREMS", null, t =>
                        {
                            t.HasTrigger("TR_PatientREMS_Audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientRemsAudit", b =>
                {
                    b.Property<int>("PatientRemsAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientREMS_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientRemsAuditId"));

                    b.Property<string>("ChangeAction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Change_Action");

                    b.Property<string>("ContactName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<string>("CreatedByRems")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_REMS");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_log");

                    b.Property<DateTime?>("CreatedRems")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_REMS");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("DocName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EnrollmentDatePhy")
                        .HasColumnType("datetime")
                        .HasColumnName("EnrollmentDate_Phy");

                    b.Property<string>("EntityAsContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName_Phy");

                    b.Property<string>("FrsNagitivePregnancyTest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FRS_NagitivePregnancyTest");

                    b.Property<string>("FrsReproductiveStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FRS_ReproductiveStatus");

                    b.Property<string>("FrsStatusDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FRS_StatusDescription");

                    b.Property<string>("FrsType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FRS_Type");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName_phy");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<string>("LiverFnTest")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientRemsId")
                        .HasColumnType("int")
                        .HasColumnName("PatientREMS_ID");

                    b.Property<string>("Pcnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCNumber");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<DateOnly?>("PrescriberSignatureDt")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RemsSignature")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("REMS_Signature");

                    b.Property<DateOnly?>("RemsSignatureDt")
                        .HasColumnType("date")
                        .HasColumnName("REMS_SignatureDt");

                    b.Property<string>("RemsSignatureSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REMS_SignatureSource");

                    b.Property<string>("RemsVerbalSourceLink")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("REMS_VerbalSourceLink");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    b.Property<DateTime?>("ShCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_Created");

                    b.Property<string>("ShCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_CreatedBy");

                    b.Property<DateTime?>("ShLastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("SH_LastUpdated");

                    b.Property<string>("ShLastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SH_LastUpdatedBy");

                    b.Property<string>("SrStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_Status");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<int?>("SrSubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<string>("Srfcomplete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRFComplete");

                    b.Property<string>("Srfreason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SRFReason");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("StatusPat")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)")
                        .HasColumnName("Status_Pat");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientRemsAuditId");

                    b.ToTable("PatientREMS_Audit", null, t =>
                        {
                            t.HasTrigger("TR_PatientREMS_Audit_Permission");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientRxDetail", b =>
                {
                    b.Property<int>("PatientRxDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientRxDetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientRxDetailsId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<short>("FillsPrescribed")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientDeviceID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<short>("RefillsRemaining")
                        .HasColumnType("smallint");

                    b.Property<string>("RxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RxWrittenDate")
                        .HasColumnType("datetime");

                    b.HasKey("PatientRxDetailsId");

                    b.ToTable("PatientRxDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSite", b =>
                {
                    b.Property<int>("PatientSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientSiteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientSiteId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OriginalDistance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhoneExtenstion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PatientSiteId")
                        .HasName("PK_dbo.PatientSite");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientSite", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSmstextConsent", b =>
                {
                    b.Property<int>("PatientSmstextConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientSMSTextConsentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientSmstextConsentId"));

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConsentRecordingId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ConsentRecordingID");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeclinedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DrugTherapy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IsReceived")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Optout")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OptoutDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PatientSmstextConsentId");

                    b.ToTable("PatientSMSTextConsent", null, t =>
                        {
                            t.HasTrigger("tr_Patient_SMSTextConsentInsert");

                            t.HasTrigger("tr_Patient_SMSTextConsentUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSmstextConsentAudit", b =>
                {
                    b.Property<int>("PatientSmstextConsentAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientSMSTextConsentAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientSmstextConsentAuditId"));

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConsentRecordingId")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ConsentRecordingID");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeclinedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DrugTherapy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IsReceived")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Optout")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OptoutDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientSmstextConsentId")
                        .HasColumnType("int")
                        .HasColumnName("PatientSMSTextConsentID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PatientSmstextConsentAuditId");

                    b.ToTable("PatientSMSTextConsentAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSnoozedAlert", b =>
                {
                    b.Property<int>("PatientSnoozedAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientSnoozedAlertID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientSnoozedAlertId"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("SnoozedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("SnoozedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SnoozedDays")
                        .HasColumnType("int");

                    b.HasKey("PatientSnoozedAlertId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientSnoozedAlerts");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSpecialtyPharmaciesAudit", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_log");

                    b.Property<string>("CreatedbyLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Createdby_log");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientSpecialtyPharmaciesAutidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientSpecialtyPharmacies_AutidID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientSpecialtyPharmaciesAutidId"));

                    b.Property<int?>("PatientSpecialtyPharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("PatientSpecialtyPharmacyID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.ToTable("PatientSpecialtyPharmacies_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSpecialtyPharmacy", b =>
                {
                    b.Property<int>("PatientSpecialtyPharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientSpecialtyPharmacyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientSpecialtyPharmacyId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("PatientSpecialtyPharmacyId");

                    b.HasIndex(new[] { "ProgramId", "PatientId", "DrugName", "EndDate" }, "ProgramID_PatientID_DrugName_EndDate");

                    b.ToTable("PatientSpecialtyPharmacies", t =>
                        {
                            t.HasTrigger("PatientSpecialtyPharmaciesDeleteTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSsnEncrypted", b =>
                {
                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.Property<int?>("WasEncrypted")
                        .HasColumnType("int");

                    b.ToTable("PatientSSN_Encrypted", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSsnshowAuditLog", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.HasKey("RecordId");

                    b.ToTable("PatientSSNShow_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatus", b =>
                {
                    b.Property<int>("PatientStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientStatusId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedFileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DrugNDC");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RestatementFlag")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Hub");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TransactionID");

                    b.HasKey("PatientStatusId");

                    b.HasIndex("PatientStatusListId");

                    b.HasIndex(new[] { "PatientId", "Deleted" }, "PatientID_Deleted");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "PatientId" }, "ProgramInclude");

                    b.ToTable("PatientStatus", null, t =>
                        {
                            t.HasTrigger("UpdatePatientReactivationsTable_insert");

                            t.HasTrigger("UpdatePatientReactivationsTable_update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatusList", b =>
                {
                    b.Property<int>("PatientStatusListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientStatusListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusDetailCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDetailDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientStatusListId");

                    b.ToTable("PatientStatusList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatusNonHub", b =>
                {
                    b.Property<int>("PatientStatusNonHubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusNonHubID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientStatusNonHubId"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("xml");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedFileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("GlobalPatientId")
                        .HasColumnType("int")
                        .HasColumnName("GlobalPatientID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("SppatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPPatientID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("SP");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TransactionID");

                    b.HasKey("PatientStatusNonHubId");

                    b.HasIndex("PatientStatusListId");

                    b.ToTable("PatientStatusNonHub", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatusProgramList", b =>
                {
                    b.Property<int>("ProgramPatientStatusListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramPatientStatusListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramPatientStatusListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("ProgramPatientStatusListId")
                        .HasName("PK_ProgramPatientStatusList");

                    b.HasIndex("PatientStatusListId");

                    b.HasIndex("ProgramId");

                    b.ToTable("PatientStatusProgramList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientXmldatum", b =>
                {
                    b.Property<int>("PatientXmldataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientXMLData_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientXmldataId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Xmldata")
                        .HasColumnType("xml")
                        .HasColumnName("XMLData");

                    b.HasKey("PatientXmldataId");

                    b.ToTable("PatientXMLData", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientsAudit", b =>
                {
                    b.Property<int>("PatientsAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Patients_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientsAuditId"));

                    b.Property<DateTime?>("ConsentDateManu")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentDate_Manu");

                    b.Property<DateTime?>("ConsentManuExpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Consent_Manu_ExpDate");

                    b.Property<string>("ConsentProvider")
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<string>("ConsentReceivedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ConsentReceivedManu")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentReceived_Manu");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_Log");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("EmailUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<bool?>("HighTouch")
                        .HasColumnType("bit");

                    b.Property<bool?>("HighTouchChanged")
                        .HasColumnType("bit");

                    b.Property<string>("HighTouchNote")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("HubCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<string>("LegacyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LegacyID");

                    b.Property<string>("MarketingMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MarketingMemberID");

                    b.Property<int?>("MasterPatientId")
                        .HasColumnType("int")
                        .HasColumnName("MasterPatientID");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAuthCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("ProductUsageDate")
                        .HasColumnType("date");

                    b.Property<bool?>("RefusedToProvideDob")
                        .HasColumnType("bit")
                        .HasColumnName("RefusedToProvideDOB");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN");

                    b.Property<string>("SsnlastFourDigits")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("SSNLastFourDigits");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("YearofBirth")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("PatientsAuditId");

                    b.HasIndex(new[] { "PatientId", "MdmprogramId" }, "ProgramIDandPatientID");

                    b.ToTable("Patients_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Payer", b =>
                {
                    b.Property<int>("PayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayerId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedEPayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Med_ePayerID");

                    b.Property<string>("MedPapayerId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("MedPAPayerID");

                    b.Property<int?>("ParentPayerId")
                        .HasColumnType("int")
                        .HasColumnName("ParentPayerID");

                    b.Property<string>("PayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PriorityPayer")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PayerId");

                    b.ToTable("Payers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerAddress", b =>
                {
                    b.Property<int>("PayerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayerAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayerAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("PayerAddressId");

                    b.HasIndex("PayerId");

                    b.ToTable("PayerAddresses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerAdminTicket", b =>
                {
                    b.Property<int>("PayerAdminTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayerAdminTicketID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayerAdminTicketId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("BenefitInvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("BenefitInvestigationID");

                    b.Property<string>("BenefitType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<string>("PayerAdminComments")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequesterComments")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Resolvedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("New");

                    b.HasKey("PayerAdminTicketId");

                    b.HasIndex("BenefitInvestigationId");

                    b.HasIndex("PatientInsuranceId");

                    b.ToTable("PayerAdminTicket", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerCode", b =>
                {
                    b.Property<string>("EnrollmentRequired")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Enrollment Required");

                    b.Property<string>("PayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payer Id");

                    b.Property<string>("PayerName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Payer name");

                    b.ToTable("payer codes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerDetail", b =>
                {
                    b.Property<int>("PayerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayerDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayerDetailId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("LongHoldTimes")
                        .HasColumnType("bit");

                    b.Property<bool?>("NonRecordedLine")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<string>("ReleasesBenefitsToThirdParty")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PayerDetailId");

                    b.ToTable("PayerDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerInjectionDateConfigInfinitu", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConfigID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<int?>("DbrowLimiter")
                        .HasColumnType("int")
                        .HasColumnName("DBRowLimiter");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("HeaderValue")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<DateOnly?>("InjectionDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PayerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("RowLimiter")
                        .HasColumnType("int");

                    b.ToTable("PayerInjectionDateConfig_Infinitus", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayersPayerCategory", b =>
                {
                    b.Property<int>("PayersPayerCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payers_PayerCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayersPayerCategoryId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<int>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.HasKey("PayersPayerCategoryId")
                        .HasName("PK_Payer_PayerCategories");

                    b.HasIndex("LookupDataListId");

                    b.ToTable("Payers_PayerCategories", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PecosProvidersNpiLookUpList", b =>
                {
                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Npi")
                        .HasName("PK_Table_NPI");

                    b.HasIndex(new[] { "LastName" }, "IX_Table_LastName");

                    b.ToTable("PECOS_Providers_NPI_LookUpList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberId"));

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PayerDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PayerDetailID");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("PayerDetailId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Physician", b =>
                {
                    b.Property<int>("PhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianId"));

                    b.Property<bool?>("BaaOnFile")
                        .HasColumnType("bit")
                        .HasColumnName("BAA_On_File");

                    b.Property<string>("CaseManager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<DateTime?>("DateBaaSent")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Sent");

                    b.Property<DateTime?>("DateBaaSigned")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Signed");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("HighTouch")
                        .HasColumnType("bit");

                    b.Property<string>("HighTouchNote")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int?>("MasterPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("MasterPhysicianID");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NPI");

                    b.Property<bool?>("PaSubmissionService")
                        .HasColumnType("bit")
                        .HasColumnName("PA_Submission_Service");

                    b.Property<int?>("PreferredPharmacy")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderMethodContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ValidationFormOnFile")
                        .HasColumnType("bit")
                        .HasColumnName("Validation_Form_On_File");

                    b.Property<DateTime?>("W9date")
                        .HasColumnType("datetime")
                        .HasColumnName("W9Date");

                    b.Property<bool?>("W9onFile")
                        .HasColumnType("bit")
                        .HasColumnName("W9OnFile");

                    b.HasKey("PhysicianId");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted" }, "IX_MDM,Deleted");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted" }, "IX_Physicians");

                    b.ToTable("Physicians", t =>
                        {
                            t.HasTrigger("Set_ProviderExternalID");

                            t.HasTrigger("Tr_Physicians_Audit_Delete");

                            t.HasTrigger("Tr_Physicians_Audit_Insert");

                            t.HasTrigger("Tr_Physicians_Audit_Update");

                            t.HasTrigger("Tr_Physicians_Whitelist_Insert");

                            t.HasTrigger("Tr_Physicians_Whitelist_Update");

                            t.HasTrigger("Tr_Physicians_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_Physicians_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianAddress", b =>
                {
                    b.Property<int>("PhysicianAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianAddressId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Fax2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fax2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("FedexAddressVerifiedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PhysicianAddressId");

                    b.HasIndex(new[] { "PhysicianId" }, "IX_PhysicianAddresses");

                    b.HasIndex(new[] { "MdmprogramId", "Deleted", "Active" }, "IX_PhysicianAddresses_Program_Deleted");

                    b.ToTable("PhysicianAddresses", t =>
                        {
                            t.HasTrigger("Tr_PhysicianAddresses_Audit_Delete");

                            t.HasTrigger("Tr_PhysicianAddresses_Audit_Insert");

                            t.HasTrigger("Tr_PhysicianAddresses_Audit_Update");

                            t.HasTrigger("Tr_PhysicianAddresses_Whitelist_Insert");

                            t.HasTrigger("Tr_PhysicianAddresses_Whitelist_Update");

                            t.HasTrigger("Tr_PhysicianAddresses_Whitelist_Validation_Insert");

                            t.HasTrigger("Tr_PhysicianAddresses_Whitelist_Validation_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianAddressesAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Fax2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fax2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FaxComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("FedexAddressVerifiedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone1Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone1Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone2Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int>("PhysicianAddressesAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddresses_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianAddressesAuditId"));

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToTable("PhysicianAddresses_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianClinicalTrial", b =>
                {
                    b.Property<int>("PhysicianClinicalTrialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianClinicalTrialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianClinicalTrialId"));

                    b.Property<string>("ClinicalTrialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.HasKey("PhysicianClinicalTrialId");

                    b.HasIndex("ProviderId");

                    b.ToTable("PhysicianClinicalTrials");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianDynamicDatum", b =>
                {
                    b.Property<int>("PhysicianDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PhysicianDynamicDataId");

                    b.HasIndex("DynamicDataListId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("PhysicianDynamicData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianEnrollment", b =>
                {
                    b.Property<int>("PhysicianEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianEnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianEnrollmentId"));

                    b.Property<DateTime?>("AdditionalRemssigDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AdditionalREMSSigDate");

                    b.Property<int?>("AttachedDocumentIdPe")
                        .HasColumnType("int")
                        .HasColumnName("AttachedDocumentID_PE");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugCertificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName_Phy");

                    b.Property<string>("LastNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName_phy");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<bool?>("LocationIsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("OrgAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrgCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("PhyAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhyAddressName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("phyAddressName");

                    b.Property<string>("PhyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyPhone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PhyState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SrAssignedTo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SR_AssignedTo");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("PhysicianEnrollmentId")
                        .HasName("PK_PhysicianCertifications");

                    b.HasIndex(new[] { "Srid" }, "IX_NCI_PhysicianEnrollments_SRID");

                    b.HasIndex(new[] { "PhysicianId", "ProgramId", "DrugName", "Deleted" }, "Phy_Program_Drug_Deleted");

                    b.ToTable("PhysicianEnrollments", t =>
                        {
                            t.HasTrigger("TR_PhysicianEnrollments_Audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianEnrollmentsAudit", b =>
                {
                    b.Property<int>("PhysicianEnrollmentAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianEnrollment_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianEnrollmentAuditId"));

                    b.Property<DateTime?>("AdditionalRemssigDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AdditionalREMSSigDate");

                    b.Property<int?>("AttachedDocumentIdPe")
                        .HasColumnType("int")
                        .HasColumnName("AttachedDocumentID_PE");

                    b.Property<string>("ChangeAction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Change_Action");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByLog")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_log");

                    b.Property<string>("CreatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBy_SR");

                    b.Property<DateTime?>("CreatedLog")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_log");

                    b.Property<DateTime?>("CreatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_SR");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugCertificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName_Phy");

                    b.Property<string>("LastNamePhy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName_phy");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBySr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastUpdatedBy_SR");

                    b.Property<DateTime?>("LastUpdatedSr")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated_SR");

                    b.Property<bool?>("LocationIsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("OrgAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OrgCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("PhyAddress1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhyAddressName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("phyAddressName");

                    b.Property<string>("PhyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyPhone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PhyState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhyZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("PhysicianEnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianEnrollmentID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SrAssignedTo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SR_AssignedTo");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<string>("SrTypeFullDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("PhysicianEnrollmentAuditId");

                    b.ToTable("PhysicianEnrollments_Audit", null, t =>
                        {
                            t.HasTrigger("TR_PhysicianEnrollments_Audit_Permission");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianNote", b =>
                {
                    b.Property<int>("PhysicianNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianNoteId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PhysicianNoteId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("PhysicianNotes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianOrganization", b =>
                {
                    b.Property<int>("PhysicianOrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianOrgID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianOrgId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("PhysicianOrgId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_PhysicianOrganizations_ProgramID_Deleted");

                    b.ToTable("PhysicianOrganizations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianPhoneNumber", b =>
                {
                    b.Property<int>("PhysicianPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianPhoneNumberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianPhoneNumberId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PhysicianPhoneNumberId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ProgramId");

                    b.ToTable("PhysicianPhoneNumbers", t =>
                        {
                            t.HasTrigger("Tr_PhysicianPhoneNumbers_Audit_Delete");

                            t.HasTrigger("Tr_PhysicianPhoneNumbers_Audit_Insert");

                            t.HasTrigger("Tr_PhysicianPhoneNumbers_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianPhoneNumbersAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("PhysicianPhoneNumberId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianPhoneNumberID");

                    b.Property<int>("PhysicianPhoneNumbersAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianPhoneNumbers_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianPhoneNumbersAuditId"));

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable("PhysicianPhoneNumbers_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianProgram", b =>
                {
                    b.Property<int>("PhysicianProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianProgramId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SharedRecordProgramId")
                        .HasColumnType("int")
                        .HasColumnName("SharedRecordProgramID");

                    b.HasKey("PhysicianProgramId");

                    b.ToTable("PhysicianPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianSignature", b =>
                {
                    b.Property<int>("PhysicianSignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianSignatureId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PhysicianSignatureId")
                        .HasName("PK__Physicia__5F42708FBF0C3A88");

                    b.HasIndex(new[] { "PhysicianId" }, "PhysicianSignature_PhysicianID");

                    b.ToTable("PhysicianSignature", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianSpecialty", b =>
                {
                    b.Property<int>("PhysicianSpecialtiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianSpecialtiesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianSpecialtiesId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<int>("PhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("PhysicianSpecialtiesId")
                        .HasName("PK_PhysicianSpecialties_1");

                    b.HasIndex("LookupDataListId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("PhysicianSpecialties");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianStateLicense", b =>
                {
                    b.Property<int>("PhysicianStateLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysicianStateLicenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicianStateLicenseId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("StateLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PhysicianStateLicenseId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("PhysicianStateLicenses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysiciansAudit", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("BaaOnFile")
                        .HasColumnType("bit")
                        .HasColumnName("BAA_On_File");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedProgramID");

                    b.Property<DateTime?>("DateBaaSent")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Sent");

                    b.Property<DateTime?>("DateBaaSigned")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_BAA_Signed");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("ExternalId2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("HighTouch")
                        .HasColumnType("bit");

                    b.Property<bool?>("HighTouchChanged")
                        .HasColumnType("bit");

                    b.Property<string>("HighTouchNote")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LastUpdatedProgramId")
                        .HasColumnType("int")
                        .HasColumnName("LastUpdatedProgramID");

                    b.Property<int?>("MasterPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("MasterPhysicianID");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NPI");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("PhysiciansAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Physicians_Audit_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysiciansAuditId"));

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("W9date")
                        .HasColumnType("datetime")
                        .HasColumnName("W9Date");

                    b.Property<bool?>("W9onFile")
                        .HasColumnType("bit")
                        .HasColumnName("W9OnFile");

                    b.ToTable("Physicians_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysiciansDetail", b =>
                {
                    b.Property<int>("PhysiciansDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysiciansDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysiciansDetailId"));

                    b.Property<string>("Bcbsid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BCBSID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data2000WaiverXdea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Data2000WaiverXDEA");

                    b.Property<string>("Dea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DEA");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("Hin")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("HIN");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicaidId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicaidID");

                    b.Property<string>("MedicareId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicareID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ptan")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PTAN");

                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TaxID");

                    b.HasKey("PhysiciansDetailId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("PhysiciansDetail", null, t =>
                        {
                            t.HasTrigger("Tr_PhysiciansDetail_Audit_Insert");

                            t.HasTrigger("Tr_PhysiciansDetail_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysiciansDetailAudit", b =>
                {
                    b.Property<int>("PhysiciansDetailAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhysiciansDetailAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysiciansDetailAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Bcbsid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BCBSID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data2000WaiverXdea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Data2000WaiverXDEA");

                    b.Property<string>("Dea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DEA");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicaidId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicaidID");

                    b.Property<string>("MedicareId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicareID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("PhysiciansDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PhysiciansDetailID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ptan")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PTAN");

                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TaxID");

                    b.HasKey("PhysiciansDetailAuditId");

                    b.ToTable("PhysiciansDetail_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalAdsartoSocStage", b =>
                {
                    b.Property<string>("AdsarTerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ADSAR_Territory_ID");

                    b.Property<string>("AdsarTerritoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ADSAR_Territory_Name");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RegionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Region_ID");

                    b.Property<string>("RegionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Region_Name");

                    b.Property<string>("SocAccountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_Account_Name");

                    b.Property<string>("SocAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_Address");

                    b.Property<string>("SocCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_CITY");

                    b.Property<string>("SocId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_ID");

                    b.Property<string>("SocState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_STATE");

                    b.Property<string>("SocZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_ZIP");

                    b.ToTable("Portal_ADSARtoSOC_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalAnnouncement", b =>
                {
                    b.Property<int>("PortalAnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalAnnouncementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalAnnouncementId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("AnnouncementName")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("AnnouncementTypeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Portal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PortalAnnouncementId");

                    b.ToTable("PortalAnnouncement", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalDataLoadRecord", b =>
                {
                    b.Property<string>("ErrorMsg")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsError")
                        .HasColumnType("bit")
                        .HasColumnName("isError");

                    b.Property<int>("LoadId")
                        .HasColumnType("int")
                        .HasColumnName("LoadID");

                    b.Property<bool?>("Old")
                        .HasColumnType("bit");

                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasIndex(new[] { "LoadId" }, "IX_PortalData_LoadRecord_LoadID")
                        .IsUnique();

                    b.HasIndex(new[] { "ProgramId", "LoadId", "Status", "RegionId", "TerritoryId" }, "ProgramLoadID");

                    b.ToTable("PortalData_LoadRecord", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalDataReportRecordCount", b =>
                {
                    b.Property<int?>("Deleted")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int")
                        .HasColumnName("DrugID");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LoadDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LoadId")
                        .HasColumnType("int")
                        .HasColumnName("LoadID");

                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("RecCnt")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<string>("Report")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("UserSessionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserSessionID");

                    b.ToTable("PortalData_ReportRecordCount", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalEntityToTerr", b =>
                {
                    b.Property<int>("EntityToTerrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityToTerrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityToTerrId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("CustomData1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData3")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData4")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData5")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NPI");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TerritoryType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EntityToTerrId");

                    b.HasIndex(new[] { "ProgramId", "EntityId", "EntityType" }, "IX_Portal_EntityToTerr_ProgramID__EntityID__EntityType");

                    b.HasIndex(new[] { "ProgramId", "TerritoryCode", "TerritoryType" }, "IX_Portal_EntityToTerr_ProgramID__TerritoryCode__TerritoryType");

                    b.HasIndex(new[] { "ProgramId", "Npi" }, "ProgramIDNPI");

                    b.HasIndex(new[] { "ProgramId", "TerritoryCode" }, "TerritoryCode");

                    b.ToTable("Portal_EntityToTerr", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalEntityToTerrStage", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("CustomData1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData3")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EntityToTerrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityToTerrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityToTerrId"));

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NPI");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TerritoryType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasIndex(new[] { "ProgramId" }, "IX_Portal_EntityToTerr_Stage_ProgramID");

                    b.ToTable("Portal_EntityToTerr_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalFilterRequestConfig", b =>
                {
                    b.Property<int>("PortalFilterRequestConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalFilterRequestConfigID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalFilterRequestConfigId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Deleted")
                        .HasColumnType("int");

                    b.Property<string>("FilterRequestData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FilterRequestName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PortalName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PortalFilterRequestConfigId")
                        .HasName("PK__PortalFi__4F5CAD8F9F306C5F");

                    b.ToTable("PortalFilterRequestConfig", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalFunction", b =>
                {
                    b.Property<int>("PortalFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalFunctionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalFunctionId"));

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PortalFunctionListId")
                        .HasColumnType("int")
                        .HasColumnName("PortalFunctionListID");

                    b.Property<int>("ProgramPortalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramPortalTypeID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("PortalFunctionId");

                    b.HasIndex("PortalFunctionListId");

                    b.HasIndex("ProgramPortalTypeId");

                    b.ToTable("PortalFunctions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalFunctionList", b =>
                {
                    b.Property<int>("PortalFunctionListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalFunctionListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalFunctionListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FunctionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PortalFunctionListId");

                    b.ToTable("PortalFunctionList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalHcpButtonsAuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("ButtonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClickedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ClickedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPhysician")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStagingSr")
                        .HasColumnType("bit")
                        .HasColumnName("IsStagingSR");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AuditId");

                    b.ToTable("Portal_HCP_Buttons_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalNpitoFacilitytoSocStage", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("FacilityCity")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("facility_city");

                    b.Property<string>("FacilityEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("facility_email");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("facility_id");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("facility_name");

                    b.Property<string>("FacilityOffice")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("facility_office");

                    b.Property<string>("FacilityState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("facility_state");

                    b.Property<string>("FacilityZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("facility_zip");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MdmId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mdm_id");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("npi");

                    b.Property<string>("SocCity")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("soc_city");

                    b.Property<string>("SocEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("soc_email");

                    b.Property<string>("SocId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("soc_id");

                    b.Property<string>("SocName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("soc_name");

                    b.Property<string>("SocOffice")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("soc_office");

                    b.Property<string>("SocState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("soc_state");

                    b.Property<string>("SocZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("soc_zip");

                    b.ToTable("Portal_NPItoFacilitytoSOC_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalNpitoSoc", b =>
                {
                    b.Property<int>("PortalNpitoSocid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_NPItoSOCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalNpitoSocid"));

                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Facility_ID");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastupdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SocId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SOC_ID");

                    b.HasKey("PortalNpitoSocid");

                    b.HasIndex(new[] { "ProgramId", "Npi" }, "ProgramNPI");

                    b.HasIndex(new[] { "ProgramId", "SocId" }, "ProgramSOCID");

                    b.ToTable("Portal_NPItoSOC", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalPatientTempRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Medication")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UID");

                    b.HasKey("Id");

                    b.ToTable("Portal_PatientTempRegistration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRegion", b =>
                {
                    b.Property<int>("PortalRegionId")
                        .HasColumnType("int")
                        .HasColumnName("Portal_RegionID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationID");

                    b.Property<string>("ClientCustomDataField1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField7")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientCustomDataField8")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientRegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientRegionID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PortalRegionId");

                    b.HasIndex(new[] { "ProgramId", "Active" }, "ProgramInclude");

                    b.ToTable("Portal_Regions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRoster", b =>
                {
                    b.Property<int>("PortalRosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_RosterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalRosterId"));

                    b.Property<int?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Business_Phone");

                    b.Property<string>("BusinessPhoneExtension")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Business_Phone_Extension");

                    b.Property<string>("ClientCustomDataField1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientCustomDataField2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedBY")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("EmailOptOut")
                        .HasColumnType("bit");

                    b.Property<string>("EmpId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Emp_ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("InternalPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Internal_Phone");

                    b.Property<int?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("IsInsightFlag")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Middle_Name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Mobile_Phone");

                    b.Property<int?>("Primary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(112)
                        .HasColumnName("ProgramID");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.Property<string>("TerrId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Terr_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("WorkEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Work_Email");

                    b.HasKey("PortalRosterId");

                    b.ToTable("Portal_Roster", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRosterAreaMapping", b =>
                {
                    b.Property<int>("PortalRosterAreaMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_Roster_Area_Mapping_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalRosterAreaMappingId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PortalRosterId")
                        .HasColumnType("int")
                        .HasColumnName("Portal_RosterID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PortalRosterAreaMappingId");

                    b.HasIndex("PortalRosterId");

                    b.ToTable("Portal_Roster_Area_Mapping", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRosterRelation", b =>
                {
                    b.Property<int>("PortalRosterRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_Roster_RelationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalRosterRelationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FrmPortalRosterId")
                        .HasColumnType("int")
                        .HasColumnName("FRM_Portal_RosterID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaaPortalRosterId")
                        .HasColumnType("int")
                        .HasColumnName("PAA_Portal_RosterID");

                    b.Property<string>("Pamname")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PAMName");

                    b.Property<string>("Pasname")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PASName");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PortalRosterRelationId");

                    b.HasIndex("FrmPortalRosterId");

                    b.ToTable("Portal_Roster_Relation", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRosterStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssignmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("CustomData1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData3")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMail");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Hire Date");

                    b.Property<string>("InternalPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RegionID");

                    b.Property<string>("RegionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesDivision")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Portal_Roster_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalSalesForceProgram", b =>
                {
                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FunctionLabel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SalesForceProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesForceProgramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesForceProgramId"));

                    b.Property<string>("Therapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Portal_SalesForceProgram", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalSoc", b =>
                {
                    b.Property<int>("PortalSocid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_SOCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalSocid"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Createby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastupdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SocAccountName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("SOC_Account_Name");

                    b.Property<string>("SocId")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("SOC_ID");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Territory_ID");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PortalSocid");

                    b.HasIndex(new[] { "SocId" }, "NonClusteredIndex-20200924-105249")
                        .IsUnique()
                        .HasFilter("[SOC_ID] IS NOT NULL");

                    b.HasIndex(new[] { "ProgramId", "SocId" }, "ProgramTerritoryID");

                    b.ToTable("Portal_SOC", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingCmmSr", b =>
                {
                    b.Property<int>("StagingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StagingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StagingId"));

                    b.Property<bool>("AdditionalInfoRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CmmoutCome")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CMMOutCome");

                    b.Property<string>("Cmmstatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CMMStatus");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("HcpPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("HCP_PhysicianID");

                    b.Property<bool?>("IsEPa")
                        .HasColumnType("bit")
                        .HasColumnName("is_ePA");

                    b.Property<bool>("Isphysician")
                        .HasColumnType("bit")
                        .HasColumnName("ISPhysician");

                    b.Property<DateTime>("LastStatusUpdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdateBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Pbmbin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PBMBIN");

                    b.Property<string>("PbmgroupId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PBMGroupID");

                    b.Property<string>("Pbminsurername")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PBMInsurername");

                    b.Property<string>("Pbmpcn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PBMPCN");

                    b.Property<int>("PhysicianContactId")
                        .HasColumnType("int")
                        .HasColumnName("Physician_ContactID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RequestID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TblFileId")
                        .HasColumnType("int")
                        .HasColumnName("tbl_fileID");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TokenID");

                    b.HasKey("StagingId");

                    b.ToTable("Portal_Staging_CMM_SR", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingHcpSr", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("AccountableCareOrganization")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AdditionalClinicalInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("AdditionalInfoRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Dosage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<string>("IndependentClinicalJudgement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndependentPracticeAssociation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Infuse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedDate");

                    b.Property<bool?>("NoInsurance")
                        .HasColumnType("bit");

                    b.Property<int>("OrgAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrgAddressID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OtherPrescriptionInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PafTblFileIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PafTblFileIDs");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("PatientEligibityInfo")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientIncomeInfo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PatientSavingProgramInfo")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PatientWeight")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PbmbinNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMBinNumber");

                    b.Property<string>("PbmcardholderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMCardholderName");

                    b.Property<DateTime?>("Pbmdob")
                        .HasColumnType("datetime")
                        .HasColumnName("PBMDOB");

                    b.Property<string>("PbmgroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMGroupNumber");

                    b.Property<string>("PbminsurerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMInsurerName");

                    b.Property<string>("Pbmpcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMPCN");

                    b.Property<string>("Pbmphone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMPhone");

                    b.Property<string>("PbmpolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMPolicyNumber");

                    b.Property<string>("PendingSrshortDescs")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PendingSRShortDescs");

                    b.Property<string>("PendingSrsubTypeListIds")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PendingSRSubTypeListIds");

                    b.Property<string>("PendingSrtypeListIds")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PendingSRTypeListIDs");

                    b.Property<string>("PharmacyFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PrescriberName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberSignature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryCardholderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PrimaryDob")
                        .HasColumnType("datetime")
                        .HasColumnName("PrimaryDOB");

                    b.Property<string>("PrimaryGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryIcddiagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryICDDiagnosis");

                    b.Property<string>("PrimaryInsurerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Refills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryCardholderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SecondaryDob")
                        .HasColumnType("datetime")
                        .HasColumnName("SecondaryDOB");

                    b.Property<string>("SecondaryGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryIcddiagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryICDDiagnosis");

                    b.Property<string>("SecondaryInsurerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<bool>("SignatureRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SrSubTypeListIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeListIDs");

                    b.Property<string>("SrtypeListIds")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRTypeListIDs");

                    b.Property<string>("SrtypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRTypeShortDesc");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TblFilesIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TblFilesIDs");

                    b.Property<int?>("TreatingOrgAddressId")
                        .HasColumnType("int")
                        .HasColumnName("TreatingOrgAddressID");

                    b.Property<string>("TreatingPracticeInfo")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("RequestId");

                    b.ToTable("Portal_Staging_HCP_SR", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingHcpSrAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountableCareOrganization")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AdditionalClinicalInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("AdditionalInfoRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Dosage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<string>("IndependentClinicalJudgement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndependentPracticeAssociation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedDate");

                    b.Property<bool?>("NoInsurance")
                        .HasColumnType("bit");

                    b.Property<int>("OrgAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrgAddressID");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<string>("OtherPrescriptionInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PafTblFileIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PafTblFileIDs");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PbmbinNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMBinNumber");

                    b.Property<DateTime?>("Pbmdob")
                        .HasColumnType("datetime")
                        .HasColumnName("PBMDOB");

                    b.Property<string>("PbmgroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMGroupNumber");

                    b.Property<string>("PbminsurerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMInsurerName");

                    b.Property<string>("Pbmpcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMPCN");

                    b.Property<string>("Pbmphone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMPhone");

                    b.Property<string>("PbmpolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMPolicyNumber");

                    b.Property<string>("PharmacyFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PrescriberName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberSignature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PrimaryDob")
                        .HasColumnType("datetime")
                        .HasColumnName("PrimaryDOB");

                    b.Property<string>("PrimaryGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryIcddiagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryICDDiagnosis");

                    b.Property<string>("PrimaryInsurerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Refills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<DateTime?>("SecondaryDob")
                        .HasColumnType("datetime")
                        .HasColumnName("SecondaryDOB");

                    b.Property<string>("SecondaryGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryIcddiagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryICDDiagnosis");

                    b.Property<string>("SecondaryInsurerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<bool>("SignatureRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SrSubTypeListIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SR_SubTypeListIDs");

                    b.Property<string>("SrtypeListIds")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRTypeListIDs");

                    b.Property<string>("SrtypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRTypeShortDesc");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TblFilesIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TblFilesIDs");

                    b.HasKey("Id");

                    b.ToTable("Portal_Staging_HCP_SR_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistration", b =>
                {
                    b.Property<int>("RegistratoinRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegistratoinRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistratoinRecordId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("AuthorizeContact")
                        .HasColumnType("bit");

                    b.Property<bool>("Baaacknowledgement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("BAAAcknowledgement");

                    b.Property<int?>("BaadocumentListId")
                        .HasColumnType("int")
                        .HasColumnName("BAADocumentListID");

                    b.Property<bool>("BaalanguageAcknowledgement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("BAALanguageAcknowledgement");

                    b.Property<DateOnly?>("BaasignatureDate")
                        .HasColumnType("date")
                        .HasColumnName("BAASignatureDate");

                    b.Property<string>("BaasignatureText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BAASignatureText");

                    b.Property<string>("BestTimeToContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BifileDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("BIFileDocumentID");

                    b.Property<string>("BillingPreference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("DEA");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Facility")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("HubRecordId")
                        .HasColumnType("int")
                        .HasColumnName("HubRecordID");

                    b.Property<int?>("HubRecordOrgId")
                        .HasColumnType("int")
                        .HasColumnName("HubRecordOrgID");

                    b.Property<string>("IndividualNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IndividualNPI");

                    b.Property<string>("IndividualTaxId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LicensingState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("MedicareId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicareID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ncpdp")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("NCPDP");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("OptOut")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone2_Extension");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Extension");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PortalRegistrationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PortalType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("HCP");

                    b.Property<bool?>("PotentialDuplicate")
                        .HasColumnType("bit");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PracticeUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PracticeURL");

                    b.Property<string>("PreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ProcessingInProgress")
                        .HasColumnType("bit");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ptan")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PTAN");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegisteredFromIpaddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RegisteredFromIPAddress");

                    b.Property<int?>("RegistrationRecordAddressId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordAddressID");

                    b.Property<string>("SiteOfService")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Speciality")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StagingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StateLicenseNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TaxID");

                    b.Property<bool>("TermsAndConditionsAcknowledgement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("TermsOfUserFileDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("TermsOfUserFileDocumentID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegistratoinRecordId")
                        .HasName("PK_Portal_Straging_Registration");

                    b.ToTable("Portal_Staging_Registration", null, t =>
                        {
                            t.HasTrigger("tr_PortalStagingRegistrationInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationAddrEntityMapping", b =>
                {
                    b.Property<int>("RegistrationRecordMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationRecordMappingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("RegistrationRecordAddressId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordAddressID");

                    b.Property<int>("RegistrationRecordEntityId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordEntityID");

                    b.HasKey("RegistrationRecordMappingId")
                        .HasName("PK__Portal_S__E4B76BF860DDFCE7");

                    b.HasIndex("RegistrationRecordAddressId");

                    b.HasIndex("RegistrationRecordEntityId");

                    b.ToTable("Portal_Staging_Registration_Addr_Entity_Mapping", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationAddress", b =>
                {
                    b.Property<int>("RegistrationRecordAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordAddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationRecordAddressId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsOrganizationAddress")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("RegistrationRecordId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordID");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegistrationRecordAddressId")
                        .HasName("PK__Portal_S__F5325311760E23F7");

                    b.HasIndex("RegistrationRecordId");

                    b.ToTable("Portal_Staging_Registration_Addresses", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationEntity", b =>
                {
                    b.Property<int>("RegistrationRecordEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordEntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationRecordEntityId"));

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("BestTimeToContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DEA");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hin")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("HIN");

                    b.Property<int?>("HubPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("HubPhysicianID");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LicensingState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Extension");

                    b.Property<string>("PreferredCommunicationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Ptan")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PTAN");

                    b.Property<int>("RegistrationRecordId")
                        .HasColumnType("int")
                        .HasColumnName("RegistrationRecordID");

                    b.Property<string>("StagingStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StateLicenseNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TaxID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegistrationRecordEntityId")
                        .HasName("PK__Portal_S__A04536DD7AD2D914");

                    b.HasIndex("RegistrationRecordId");

                    b.ToTable("Portal_Staging_Registration_Entity", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRequest", b =>
                {
                    b.Property<int>("StagingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StagingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomJsonField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EBvtransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("eBVTransactionId");

                    b.Property<string>("EPatransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ePATransactionId");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedPatransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MedPATransactionId");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("OrgAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("RequestPath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceRequestIds")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubTypes")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TblFileId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tbl_FileId");

                    b.HasKey("StagingId")
                        .HasName("PK_Portal_Staging_Request");

                    b.ToTable("Portal_Staging_Requests", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingSrf", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Allergies")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Attn")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Checksum")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ClinicalRationaleForChoosingDurolane")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Clinical_Rationale_for_choosing_DUROLANE");

                    b.Property<string>("ClinicalRationaleForChoosingSupartz")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Clinical_Rationale_for_choosing_SUPARTZ");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateProductNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DatesOfAdministration")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Dates_of_Administration");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeletedByType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("FinalTemplate")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("HubSrid")
                        .HasColumnType("int")
                        .HasColumnName("HubSRID");

                    b.Property<string>("Icd9code")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ICD9Code");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("IsBllateral")
                        .HasColumnType("bit")
                        .HasColumnName("isBllateral");

                    b.Property<bool?>("IsBllateralDurolane")
                        .HasColumnType("bit")
                        .HasColumnName("isBllateralDurolane");

                    b.Property<bool?>("IsBllateralGelsyn3")
                        .HasColumnType("bit")
                        .HasColumnName("isBllateralGelsyn3");

                    b.Property<bool?>("IsDispenseAsWritten")
                        .HasColumnType("bit")
                        .HasColumnName("isDispenseAsWritten");

                    b.Property<bool?>("IsLeft")
                        .HasColumnType("bit")
                        .HasColumnName("isLeft");

                    b.Property<bool?>("IsLeftDurolane")
                        .HasColumnType("bit")
                        .HasColumnName("isLeftDurolane");

                    b.Property<bool?>("IsLeftGelsyn3")
                        .HasColumnType("bit")
                        .HasColumnName("isLeftGelsyn3");

                    b.Property<bool?>("IsMedicalAndPharmacyBenefit")
                        .HasColumnType("bit")
                        .HasColumnName("isMedicalAndPharmacyBenefit");

                    b.Property<bool?>("IsMedicalBenefitOnly")
                        .HasColumnType("bit")
                        .HasColumnName("isMedicalBenefitOnly");

                    b.Property<bool?>("IsNewProvider")
                        .HasColumnType("bit")
                        .HasColumnName("isNewProvider");

                    b.Property<bool?>("IsOfficeAcceptsDefaultTriage")
                        .HasColumnType("bit")
                        .HasColumnName("isOfficeAcceptsDefaultTriage");

                    b.Property<bool?>("IsPatientFailed3MonthsOfConservativeTreatment")
                        .HasColumnType("bit")
                        .HasColumnName("Is_patient_failed_3_months_of_conservative_treatment");

                    b.Property<bool?>("IsPatientHadReductionOfPainWithPreviousTreatment")
                        .HasColumnType("bit")
                        .HasColumnName("Is_patient_had_reduction_of_pain_with_previous_treatment");

                    b.Property<bool?>("IsPatientHome")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientHome");

                    b.Property<bool?>("IsPatientPresent")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientPresent");

                    b.Property<bool?>("IsPatientPreviouslyBeenTreatedWithSodiumHyaluronate")
                        .HasColumnType("bit")
                        .HasColumnName("Is_patient_previously_been_treated_with_sodium_hyaluronate");

                    b.Property<bool?>("IsPatientReceivedIntraArticularSteroidInjection")
                        .HasColumnType("bit")
                        .HasColumnName("Is_patient_received_intra_articular_steroid_injection");

                    b.Property<bool?>("IsPharmacyBenefitOnly")
                        .HasColumnType("bit")
                        .HasColumnName("isPharmacyBenefitOnly");

                    b.Property<bool?>("IsPhysicianOffice")
                        .HasColumnType("bit")
                        .HasColumnName("isPhysicianOffice");

                    b.Property<bool?>("IsProviderPresent")
                        .HasColumnType("bit")
                        .HasColumnName("isProviderPresent");

                    b.Property<bool?>("IsRight")
                        .HasColumnType("bit")
                        .HasColumnName("isRight");

                    b.Property<bool?>("IsRightDurolane")
                        .HasColumnType("bit")
                        .HasColumnName("isRightDurolane");

                    b.Property<bool?>("IsRightGelsyn3")
                        .HasColumnType("bit")
                        .HasColumnName("isRightGelsyn3");

                    b.Property<bool?>("IsRx")
                        .HasColumnType("bit")
                        .HasColumnName("isRx");

                    b.Property<bool?>("IsRxDurolane")
                        .HasColumnType("bit")
                        .HasColumnName("isRxDurolane");

                    b.Property<bool?>("IsRxGelsyn3")
                        .HasColumnType("bit")
                        .HasColumnName("isRxGelsyn3");

                    b.Property<bool?>("IsSubstitutionsAllowed")
                        .HasColumnType("bit")
                        .HasColumnName("isSubstitutionsAllowed");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAlternateContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientContactPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientDaytimePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PatientDob")
                        .HasColumnType("datetime")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientEveningPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPrefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPrimaryLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientRecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PatientSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientSignatureOutput")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PatientState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSuffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientTypedName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientZIP");

                    b.Property<bool?>("Pbmcard")
                        .HasColumnType("bit")
                        .HasColumnName("PBMCard");

                    b.Property<string>("PbmgroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMGroupID");

                    b.Property<string>("PbmmemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMMemberID");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMName");

                    b.Property<DateTime?>("PrescriberSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PrescriberSignatureOutput")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PrescriberTypedName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriptionDirections")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PrescriptionHeight")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriptionWeight")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryMedicalGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryMedicalInsuranceCardHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryMedicalInsuranceEmployerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PrimaryMedicalInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryMedicalInsuranceID");

                    b.Property<string>("PrimaryMedicalInsuranceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryMedicalInsurancePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryMedicalInsuranceRelationship")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("PrimaryMedicalPatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryMedicalPatientInsuranceID");

                    b.Property<string>("PrimaryMedicalPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductDateRangeOfTreatment")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("product_date_range_of_treatment");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderFax")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderMdspecialty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ProviderMDSpecialty");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderOfficeContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderPracticeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderStateMedLicNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderTaxId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ProviderTaxID");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RelationToPatient")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("SceduledInjectionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SecondaryMedicalGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryMedicalInsuranceCardHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryMedicalInsuranceEmployerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SecondaryMedicalInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("SecondaryMedicalInsuranceID");

                    b.Property<string>("SecondaryMedicalInsuranceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryMedicalInsurancePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryMedicalInsuranceRelationship")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("SecondaryMedicalPatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("SecondaryMedicalPatientInsuranceID");

                    b.Property<string>("SecondaryMedicalPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SyringesKnee")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SyringesKneeDurolane")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SyringesKneeGelsyn3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Therapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RecordId")
                        .HasName("PK_Portal_Straging_SRF");

                    b.ToTable("Portal_Staging_SRF", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingTblFile", b =>
                {
                    b.Property<int>("IFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iFileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IFileId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("PortalStagingHcpSrrequestId")
                        .HasColumnType("int")
                        .HasColumnName("Portal_Staging_HCP_SRRequestID");

                    b.HasKey("IFileId");

                    b.HasIndex("PortalStagingHcpSrrequestId");

                    b.ToTable("Portal_Staging_tblFiles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalTakedaHierarchy", b =>
                {
                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CM");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hce")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HCE");

                    b.Property<string>("Hceemail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HCEEmail");

                    b.Property<string>("Hcemanager")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HCEManager");

                    b.Property<string>("HcemanagerEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HCEManagerEmail");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pam")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAM");

                    b.Property<string>("Pamdirector")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAMDirector");

                    b.Property<string>("PamdirectorEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAMDirectorEmail");

                    b.Property<string>("Pamemail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAMEmail");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Portal_Takeda_Hierarchy", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalTerritory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TerritoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerritoryId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ClientCustomDataField1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientTerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionID");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TerritoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TerritoryId");

                    b.HasIndex(new[] { "ClientTerritoryCode" }, "Portal_Territories_ClientTerritoryCode");

                    b.HasIndex(new[] { "ProgramId", "ClientTerritoryCode" }, "ProgramID");

                    b.ToTable("Portal_Territories", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalTerritoryCaseManager", b =>
                {
                    b.Property<int>("PortalTerritoryCaseManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_TerritoryCaseManagerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalTerritoryCaseManagerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastupdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("TerritoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PortalTerritoryCaseManagerId");

                    b.ToTable("Portal_TerritoryCaseManager", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalTier", b =>
                {
                    b.Property<int>("TierId")
                        .HasColumnType("int")
                        .HasColumnName("TierID");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("RosterId")
                        .HasColumnType("int")
                        .HasColumnName("RosterID");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("TierId");

                    b.ToTable("Portal_Tiers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalType", b =>
                {
                    b.Property<int>("PortalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PortalType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PortalType");

                    b.HasKey("PortalTypeId");

                    b.ToTable("PortalType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalTypeAnnouncement", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PortalAnnouncementId")
                        .HasColumnType("int")
                        .HasColumnName("PortalAnnouncementID");

                    b.Property<int>("PortalTypeAnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortalTypeAnnouncementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalTypeAnnouncementId"));

                    b.Property<int>("ProgramTypePortalId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramTypePortalID");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.ToTable("PortalTypeAnnouncement", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalUserSession", b =>
                {
                    b.Property<int>("PortalUserSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Portal_UserSessionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalUserSessionId"));

                    b.Property<string>("Apply")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Catrgoey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DataValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastupdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Method")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UserID");

                    b.Property<int?>("UserLoginHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("UserLoginHistoryID");

                    b.HasKey("PortalUserSessionId");

                    b.HasIndex(new[] { "UserId", "Deleted" }, "UserID_deleted");

                    b.ToTable("Portal_UserSession", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalZipToTerr", b =>
                {
                    b.Property<int>("ZipToTerrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZIP_ToTerrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZipToTerrId"));

                    b.Property<bool?>("ClickToChat")
                        .HasColumnType("bit");

                    b.Property<string>("ClientCustomDataField1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientCustomDataField2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TerritoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ZIPCode");

                    b.HasKey("ZipToTerrId")
                        .HasName("PK_ZIP_ToTerr");

                    b.HasIndex(new[] { "TerritoryCode" }, "Portal_ZIP_ToTerr_TerritoryCode");

                    b.HasIndex(new[] { "ProgramId" }, "ProgramID");

                    b.HasIndex(new[] { "ProgramId", "Zipcode" }, "ProgramZIPCODE");

                    b.HasIndex(new[] { "ProgramId", "SalesForce" }, "programIDandSelesForce");

                    b.ToTable("Portal_ZIP_ToTerr", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalZipToTerrMinimalStage", b =>
                {
                    b.Property<string>("TerrId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Terr_ID");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Portal_Zip_ToTerr_Minimal_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalZipToTerrStage", b =>
                {
                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("County")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("CustomData1")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData2")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData3")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData4")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData5")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData6")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData7")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData8")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CustomData9")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("DistrictId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RegionID");

                    b.Property<string>("RegionName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("SalesForce")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ZipStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZipStageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZipStageId"));

                    b.ToTable("Portal_Zip_ToTerr_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("ApplicationSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BenefitPlanId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Bin")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("BIN")
                        .IsFixedLength();

                    b.Property<string>("CardholderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CardholderID");

                    b.Property<string>("CarrierName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateOnly?>("DateWritten")
                        .HasColumnType("date");

                    b.Property<string>("Daw")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DAW");

                    b.Property<string>("DaysSupply")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Diagnoses")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DoseType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugBasis")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExternalPrescriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("ExternalPrescriptionID");

                    b.Property<string>("FormularyId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("FormularyID")
                        .IsFixedLength();

                    b.Property<DateTime?>("FutureEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FutureTerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("GroupID");

                    b.Property<string>("HelpDeskPhone")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.Property<bool>("IsCreatedByFax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrescriptionClosed")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("LastFillDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LicseffectDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LICSEffectDate");

                    b.Property<string>("Licslevel")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LICSLevel")
                        .IsFixedLength();

                    b.Property<string>("Licsplan")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("LICSPlan")
                        .IsFixedLength();

                    b.Property<DateTime?>("LicstermDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LICSTermDate");

                    b.Property<bool>("MedicareFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Ndc")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PatientAddressLine1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientAddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPhoneNumber1")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("PatientPhoneNumber2")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("PatientState")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("PatientSuffix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pcn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PCN")
                        .IsFixedLength();

                    b.Property<string>("PersonCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("PharmacistValidated")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PrescriberOrderNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriptionSource")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PriorAuth")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PriorAuthQual")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PriorAuthStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Quantity")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("RefillQualifier")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Refills")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("RefillsRemaining")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateOnly?>("RxEffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("RxReferenceId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RxReferenceID");

                    b.Property<string>("Sig")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubstitutionPermitted")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitofMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValidatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ValidatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId")
                        .HasName("PK__Prescrip__4013081205059ED9");

                    b.ToTable("Prescription", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PrescriptionEligibility", b =>
                {
                    b.Property<int>("PrescriptionEligibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionEligibilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionEligibilityId"));

                    b.Property<string>("BenefitPlanId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Bin")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("BIN")
                        .IsFixedLength();

                    b.Property<string>("CardholderId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("CardholderID");

                    b.Property<string>("CarrierName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Consent")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormularyId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("FormularyID")
                        .IsFixedLength();

                    b.Property<DateTime?>("FutureEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FutureTerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("GroupID");

                    b.Property<string>("HelpDeskPhone")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LicseffectDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LICSEffectDate");

                    b.Property<string>("Licslevel")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LICSLevel")
                        .IsFixedLength();

                    b.Property<string>("Licsplan")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("LICSPlan")
                        .IsFixedLength();

                    b.Property<DateTime?>("LicstermDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LICSTermDate");

                    b.Property<bool>("MedicareFlag")
                        .HasColumnType("bit");

                    b.Property<string>("MutuallyDefined")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientRelationship")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PayerExternalId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PayerExternalID");

                    b.Property<string>("PayerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PayerResponsibilityCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PbmexternalMemberId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PBMExternalMemberID");

                    b.Property<string>("Pcn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PCN")
                        .IsFixedLength();

                    b.Property<string>("PersonCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<string>("ProcessorIdentificationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceTypeCoded")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionEligibilityId")
                        .HasName("PK__Prescrip__B724A2D78FC12491");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionEligibility", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PrescriptionPharmacy", b =>
                {
                    b.Property<int>("PrescriptionPharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionPharmacyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionPharmacyId"));

                    b.Property<string>("Addressline1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Addressline2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Fax")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ncpdp")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("NCPDP")
                        .IsFixedLength();

                    b.Property<string>("Npi")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NPI");

                    b.Property<string>("Phone")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<string>("State")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("StoreName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PrescriptionPharmacyId")
                        .HasName("PK__Prescrip__6323F1C9FE9E55BF");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionPharmacy", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PrescriptionProvider", b =>
                {
                    b.Property<int>("PrescriptionProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionProviderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionProviderId"));

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Dea")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("DEA");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Fax")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsSupervisingPrescriberinfo")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicaidId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicaidID");

                    b.Property<string>("MedicareId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MedicareID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NPI");

                    b.Property<string>("Phone1")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<string>("State")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("StateLicenseNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PrescriptionProviderId")
                        .HasName("PK__Prescrip__13BDE1C8C2753988");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionProvider", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProductOrderList", b =>
                {
                    b.Property<int>("ProductOrderListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductOrderListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductOrderListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Flavor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("ItemNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("ProductOrderListId");

                    b.ToTable("ProductOrderList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProductRequestedOrder", b =>
                {
                    b.Property<int>("ProductRequestedOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductRequestedOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductRequestedOrderId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DateReportedToProgram")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly>("RequestedShipmentDate")
                        .HasColumnType("date");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShipToAddressID");

                    b.Property<int>("ShipToEntityId")
                        .HasColumnType("int")
                        .HasColumnName("ShipToEntityID");

                    b.Property<string>("ShipToEntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIP");

                    b.HasKey("ProductRequestedOrderId")
                        .HasName("PK__ProductR__8ED4E214ECA21136");

                    b.ToTable("ProductRequestedOrder", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProductRequestedOrderDetail", b =>
                {
                    b.Property<int>("ProductRequestedOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductRequestedOrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductRequestedOrderDetailId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Flavor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ItemNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductRequestedOrderId")
                        .HasColumnType("int")
                        .HasColumnName("ProductRequestedOrderID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductRequestedOrderDetailId");

                    b.HasIndex("ProductRequestedOrderId");

                    b.ToTable("ProductRequestedOrderDetail", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProfiseeEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EventId")
                        .HasName("PK__Profisee__7944C81076EC25ED");

                    b.ToTable("ProfiseeEvent", null, t =>
                        {
                            t.HasTrigger("FireProfiseeEvent");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Program", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateOnly?>("ActiveDate")
                        .HasColumnType("date");

                    b.Property<string>("ClientApplicationName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("CopayGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayGroupID");

                    b.Property<int?>("CopayPeriodDays")
                        .HasColumnType("int");

                    b.Property<string>("CopayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("DefaultProgram")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisplayScientificDrugName")
                        .HasColumnType("bit");

                    b.Property<string>("HcpapplicationName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HCPApplicationName");

                    b.Property<string>("LayoutType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ManuPortalConfigDb")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ManuPortalConfigDB");

                    b.Property<string>("ManufacturerApplicationName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MaxCopayAmount")
                        .HasColumnType("int");

                    b.Property<int>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SharedRecordProgramId")
                        .HasColumnType("int")
                        .HasColumnName("SharedRecordProgramID");

                    b.HasKey("Id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramCopayCardId", b =>
                {
                    b.Property<int>("ProgramCopayCardId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Program_CopayCard_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramCopayCardId1"));

                    b.Property<string>("Bin")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BIN");

                    b.Property<int?>("CopayCardIdBegin")
                        .HasColumnType("int")
                        .HasColumnName("CopayCardID_Begin");

                    b.Property<int?>("CopayCardIdEnd")
                        .HasColumnType("int")
                        .HasColumnName("CopayCardID_End");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("NextCopayCardId")
                        .HasColumnType("int")
                        .HasColumnName("NextCopayCardID");

                    b.Property<string>("Pcn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PCN");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ProgramCopayCardId1");

                    b.ToTable("Program_CopayCard_IDs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramFunction", b =>
                {
                    b.Property<int>("ProgramFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramFunctionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramFunctionId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramFunctionListId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramFunctionListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("ProgramFunctionId");

                    b.ToTable("ProgramFunctions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramFunctionList", b =>
                {
                    b.Property<int>("ProgramFunctionListId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramFunctionListID");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProgramFunctionListId");

                    b.ToTable("ProgramFunctionList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramMailingList", b =>
                {
                    b.Property<int>("ProgramMailingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramMailingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramMailingId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IncludeReturnLabel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NumberOfPackages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("PackageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProgramName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Standard Overnight");

                    b.Property<int?>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("ServiceTypeID");

                    b.Property<string>("ShipDate")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Today");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("WeightInLb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WeightInLB")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ProgramMailingId");

                    b.ToTable("ProgramMailingList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramNdc", b =>
                {
                    b.Property<int>("ProgramNdcid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramNDCID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramNdcid"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<string>("DefalultTestClaimQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultUnitofMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ndc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("TestClaimAllowed")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y");

                    b.HasKey("ProgramNdcid");

                    b.ToTable("ProgramNDCs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramPhoneNumberList", b =>
                {
                    b.Property<int>("ProgramPhoneNumberListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramPhoneNumberListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramPhoneNumberListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ProgramPhoneNumberListId")
                        .HasName("PK__ProgramP__A7B361B75F79313C");

                    b.ToTable("ProgramPhoneNumberList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramPortalType", b =>
                {
                    b.Property<int>("ProgramPortalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramPortalTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramPortalTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PortalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PortalTypeID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ProgramPortalTypeId");

                    b.HasIndex("PortalTypeId");

                    b.ToTable("ProgramPortalType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramUrl", b =>
                {
                    b.Property<int>("ProgramUrlid")
                        .HasColumnType("int")
                        .HasColumnName("ProgramURLID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PortalTypeDisplayText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("URL");

                    b.Property<string>("Urltype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("URLType");

                    b.HasKey("ProgramUrlid");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramURLs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramVendor", b =>
                {
                    b.Property<int>("ProgramVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgramVendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramVendorId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("EBvpharmacyExcludeSp")
                        .HasColumnType("bit")
                        .HasColumnName("eBVPharmacyExcludeSP");

                    b.Property<bool?>("Eaptriage")
                        .HasColumnType("bit")
                        .HasColumnName("EAPTriage");

                    b.Property<string>("ExternalSpid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalSPID");

                    b.Property<bool>("IsCopayCardVendor")
                        .HasColumnType("bit")
                        .HasColumnName("isCopayCardVendor");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Paptriage")
                        .HasColumnType("bit")
                        .HasColumnName("PAPTriage");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("QuickStartTriage")
                        .HasColumnType("bit");

                    b.Property<decimal>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("SptriageUsingApi")
                        .HasColumnType("bit")
                        .HasColumnName("SPTriageUsingAPI");

                    b.Property<bool?>("SrtypeSpecific")
                        .HasColumnType("bit")
                        .HasColumnName("SRTypeSpecific");

                    b.Property<bool?>("Susptriage")
                        .HasColumnType("bit")
                        .HasColumnName("SUSPTriage");

                    b.Property<bool?>("TestClaimEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("UserInRotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("ProgramVendorId")
                        .HasName("PK_ProgramSPs");

                    b.HasIndex(new[] { "ProgramId", "VendorId", "Active" }, "ProgramVendorID");

                    b.ToTable("ProgramVendors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PsiIcd9", b =>
                {
                    b.Property<string>("Icd9")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ICD9");

                    b.Property<string>("SpPatientId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SP_PatientID");

                    b.Property<string>("Yob")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("YOB");

                    b.ToTable("PSI_ICD9", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PublicNumber", b =>
                {
                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable("PublicNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.QaRepPayerCriterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RepOrPayer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepOrPayerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RepOrPayerID");

                    b.Property<int?>("SamplingCount")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("SrcloseDate")
                        .HasColumnType("date")
                        .HasColumnName("SRCloseDate");

                    b.Property<int?>("Srcount")
                        .HasColumnType("int")
                        .HasColumnName("SRCount");

                    b.HasKey("Id")
                        .HasName("PK__QA_RepPa__3214EC07FE0CF88C");

                    b.ToTable("QA_RepPayer_Criteria", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.QaSettingAdmin", b =>
                {
                    b.Property<int>("QasettingAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QASettingAdminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QasettingAdminId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NoSr")
                        .HasColumnType("int")
                        .HasColumnName("NoSR");

                    b.Property<int?>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RepName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SrUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Threshold")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("QasettingAdminId");

                    b.ToTable("QA_Setting_Admin", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FlowId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("QuestionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("QuestionText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.QuestionAnswers");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.QuestionAnswerFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("File")
                        .HasColumnType("image");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlowId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PermenentlySaved")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.QuestionAnswerFiles");

                    b.ToTable("QuestionAnswerFiles");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.QuickCode", b =>
                {
                    b.Property<int>("QuickCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuickCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuickCodeId"));

                    b.Property<string>("ClientPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientPatientID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("QuickCode1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("QuickCode");

                    b.HasKey("QuickCodeId");

                    b.HasIndex(new[] { "QuickCode1" }, "IX_QuickCodes")
                        .IsUnique()
                        .HasFilter("[QuickCode] IS NOT NULL");

                    b.ToTable("QuickCodes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RefillReminderCleanUpSpreadsheetFinal", b =>
                {
                    b.Property<string>("BridgeSrDetails")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Bridge SR Details");

                    b.Property<string>("Column1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 1");

                    b.Property<string>("Column10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 10");

                    b.Property<string>("Column11")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 11");

                    b.Property<string>("Column12")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 12");

                    b.Property<string>("Column13")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 13");

                    b.Property<string>("Column14")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 14");

                    b.Property<string>("Column15")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 15");

                    b.Property<string>("Column16")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 16");

                    b.Property<string>("Column17")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 17");

                    b.Property<string>("Column18")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 18");

                    b.Property<string>("Column19")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 19");

                    b.Property<string>("Column2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 2");

                    b.Property<string>("Column21")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 21");

                    b.Property<string>("Column22")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 22");

                    b.Property<string>("Column23")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 23");

                    b.Property<string>("Column24")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 24");

                    b.Property<string>("Column3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 3");

                    b.Property<string>("Column4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 4");

                    b.Property<string>("Column5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 5");

                    b.Property<string>("Column6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 6");

                    b.Property<string>("Column7")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 7");

                    b.Property<string>("Column8")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 8");

                    b.Property<string>("Column9")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 9");

                    b.Property<string>("RrSrDetails")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RR SR Details");

                    b.ToTable("RefillReminderCleanUpSpreadsheet_Final", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReimbursementEnrollmentForm", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("AdditionalComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AltContactFullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("AppointmentUnknown")
                        .HasColumnType("bit");

                    b.Property<bool?>("BestContactAfternoon")
                        .HasColumnType("bit");

                    b.Property<bool?>("BestContactEvening")
                        .HasColumnType("bit");

                    b.Property<string>("BestContactMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("BestContactMorning")
                        .HasColumnType("bit");

                    b.Property<string>("BridgeMnthmg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("BridgeMonthly")
                        .HasColumnType("bit");

                    b.Property<bool?>("BridgeWeekly")
                        .HasColumnType("bit");

                    b.Property<string>("BridgeWkmg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Bsa")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BSA");

                    b.Property<string>("Checksum")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChemoTargetedTherapyOther")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ChronicMyelomodysplasticeLukemia")
                        .HasColumnType("bit");

                    b.Property<string>("ClinicalTnmstageOtherStr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClinicalTNMStageOtherStr");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ContactEMail");

                    b.Property<string>("ContactFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPhoneExt")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("ContactState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeashipTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DEAShipTo");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Diagnosis1")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Diagnosis1Date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosisOther")
                        .HasColumnType("bit");

                    b.Property<string>("DiagnosisOtherDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("DispenseAsWritten")
                        .HasColumnType("bit");

                    b.Property<bool?>("Dose1")
                        .HasColumnType("bit");

                    b.Property<string>("Dose1DaysSupply")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dose1Frequncy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Dose1Qty")
                        .HasColumnType("int");

                    b.Property<int?>("Dose1Refill")
                        .HasColumnType("int");

                    b.Property<bool?>("Dose2")
                        .HasColumnType("bit");

                    b.Property<string>("Dose2DaysSupply")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dose2Frequncy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Dose2Qty")
                        .HasColumnType("int");

                    b.Property<int?>("Dose2Refill")
                        .HasColumnType("int");

                    b.Property<bool?>("Dose3")
                        .HasColumnType("bit");

                    b.Property<string>("Dose3DaysSupply")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dose3Frequncy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Dose3Qty")
                        .HasColumnType("int");

                    b.Property<int?>("Dose3Refill")
                        .HasColumnType("int");

                    b.Property<string>("Drug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EHipaaFileId")
                        .HasColumnType("int")
                        .HasColumnName("eHipaaFileId");

                    b.Property<int?>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("FileID");

                    b.Property<bool?>("HasContact")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInsuranceCoverage")
                        .HasColumnType("bit");

                    b.Property<string>("Height")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("HowManyPeopleLiveInHousehold")
                        .HasColumnType("int");

                    b.Property<string>("Icd10code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICD10Code");

                    b.Property<bool?>("IncludeNursingServices")
                        .HasColumnType("bit");

                    b.Property<string>("InjectQuantity10mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectQuantity20mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectQuantity25mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("InjectQuantity2_5mg");

                    b.Property<string>("InjectQuantity40mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectRefills10mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InjectRefills20mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InjectRefills25mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("InjectRefills2_5mg");

                    b.Property<string>("InjectRefills40mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InjectTimePerWeek10mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectTimePerWeek20mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjectTimePerWeek25mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("InjectTimePerWeek2_5mg");

                    b.Property<string>("InjectTimePerWeek40mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("InqoviFixedDosageTab")
                        .HasColumnType("bit");

                    b.Property<bool?>("InsuranceEnrolledInGovernmentProgram")
                        .HasColumnType("bit");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IPAddress");

                    b.Property<bool?>("Ipsshigh")
                        .HasColumnType("bit")
                        .HasColumnName("IPSSHigh");

                    b.Property<bool?>("Ipssintermediate")
                        .HasColumnType("bit")
                        .HasColumnName("IPSSIntermediate");

                    b.Property<bool?>("Ipssintermediate1")
                        .HasColumnType("bit")
                        .HasColumnName("IPSSIntermediate1");

                    b.Property<bool?>("Ipssrhigh")
                        .HasColumnType("bit")
                        .HasColumnName("IPSSRHigh");

                    b.Property<bool?>("Ipssrintermediate")
                        .HasColumnType("bit")
                        .HasColumnName("IPSSRIntermediate");

                    b.Property<bool?>("IpssrveryHigh")
                        .HasColumnType("bit")
                        .HasColumnName("IPSSRVeryHigh");

                    b.Property<bool?>("IsAutoInjectFillAtLocal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAutoInjectFillAtSp")
                        .HasColumnType("bit")
                        .HasColumnName("IsAutoInjectFillAtSP");

                    b.Property<bool?>("IsBridgePrescriptionKuvan")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInject10mgSyringe")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInject20mgSyringe")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInject25mgSyringe")
                        .HasColumnType("bit")
                        .HasColumnName("IsInject2_5mgSyringe");

                    b.Property<bool?>("IsInject40mgSyringe")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMedicaidPending")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNewPatient")
                        .HasColumnType("bit")
                        .HasColumnName("isNewPatient");

                    b.Property<bool?>("IsNkda")
                        .HasColumnType("bit")
                        .HasColumnName("IsNKDA");

                    b.Property<bool?>("IsPal60mgCustom")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPal60mgRecommend")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPalynziq10mg")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPalynziq10mgSyringe")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPalynziq20mg")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPalynziq20mgSyringe")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPalynziq25mg")
                        .HasColumnType("bit")
                        .HasColumnName("IsPalynziq2_5mg");

                    b.Property<bool?>("IsPalynziq25mgSyringe")
                        .HasColumnType("bit")
                        .HasColumnName("IsPalynziq2_5mgSyringe");

                    b.Property<bool?>("IsPalynziq40mgSyringe")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPalynziqType40mg")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPatientReferralToPap")
                        .HasColumnType("bit")
                        .HasColumnName("IsPatientReferralToPAP");

                    b.Property<bool?>("IsPimaryParticipating")
                        .HasColumnType("bit")
                        .HasColumnName("isPimaryParticipating");

                    b.Property<bool?>("IsPowder")
                        .HasColumnType("bit")
                        .HasColumnName("isPowder");

                    b.Property<bool?>("IsPreMedFillAtLocal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPreMedFillAtSp")
                        .HasColumnType("bit")
                        .HasColumnName("IsPreMedFillAtSP");

                    b.Property<bool?>("IsPrimaryChampusTriCare")
                        .HasColumnType("bit")
                        .HasColumnName("isPrimaryChampusTriCARE");

                    b.Property<bool?>("IsPrimaryCommercial")
                        .HasColumnType("bit")
                        .HasColumnName("isPrimaryCommercial");

                    b.Property<bool?>("IsPrimaryMedicaid")
                        .HasColumnType("bit")
                        .HasColumnName("isPrimaryMedicaid");

                    b.Property<bool?>("IsPrimaryMedicare")
                        .HasColumnType("bit")
                        .HasColumnName("isPrimaryMedicare");

                    b.Property<bool?>("IsPrimaryNonParticipating")
                        .HasColumnType("bit")
                        .HasColumnName("isPrimaryNonParticipating");

                    b.Property<bool?>("IsPrimaryWorkerCompensation")
                        .HasColumnType("bit")
                        .HasColumnName("isPrimaryWorkerCompensation");

                    b.Property<bool?>("IsProvideFreeKuvan")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRequirePreMed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSecondaryChampusTriCare")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryChampusTriCARE");

                    b.Property<bool?>("IsSecondaryCommercial")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryCommercial");

                    b.Property<bool?>("IsSecondaryMedicaid")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryMedicaid");

                    b.Property<bool?>("IsSecondaryMedicare")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryMedicare");

                    b.Property<bool?>("IsSecondaryNonParticipating")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryNonParticipating");

                    b.Property<bool?>("IsSecondaryParticipating")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryParticipating");

                    b.Property<bool?>("IsSecondaryWorkerCompensation")
                        .HasColumnType("bit")
                        .HasColumnName("isSecondaryWorkerCompensation");

                    b.Property<bool?>("IsShipmentAlcoholWipes")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentBandAids")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentBridgePrescription")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentEpinephrineAutoInjectable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentGauze")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentGloves")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentOtherSupplies")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentSharpsContainer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShipmentShip")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTablet")
                        .HasColumnType("bit")
                        .HasColumnName("isTablet");

                    b.Property<bool?>("IsTreatmentAsc")
                        .HasColumnType("bit")
                        .HasColumnName("isTreatmentASC");

                    b.Property<bool?>("IsTreatmentHospitalInpaitient")
                        .HasColumnType("bit")
                        .HasColumnName("isTreatmentHospitalInpaitient");

                    b.Property<bool?>("IsTreatmentHospitalOutpatient")
                        .HasColumnType("bit")
                        .HasColumnName("isTreatmentHospitalOutpatient");

                    b.Property<bool?>("IsTreatmentOther")
                        .HasColumnType("bit")
                        .HasColumnName("isTreatmentOther");

                    b.Property<bool?>("IsTreatmentPhysicianOffice")
                        .HasColumnType("bit")
                        .HasColumnName("isTreatmentPhysicianOffice");

                    b.Property<string>("KnownAllergies")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginAs")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicaidId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("MedicarePays")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationDirection")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MonthlyMg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MonthlyRefills")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("MyelodysplasticSyndromes")
                        .HasColumnType("bit");

                    b.Property<bool?>("NoKnownAllergies")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("NumberOfTabletsPerCycle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("OnceMonthly")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnceWeekly")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("OrganizationName")
                        .HasColumnType("int");

                    b.Property<string>("OtherDiagnosisDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("OtherSyndromes")
                        .HasColumnType("bit");

                    b.Property<string>("Pal60mgCustomFrequency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pal60mgCustomQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pal60mgCustomRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pal60mgCustomUnit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pal60mgRecommendQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pal60mgRecommendRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PalInductionCustomRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PalTitraCustomRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PalynziqCustomUnitInduction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PalynziqCustomUnit_Induction");

                    b.Property<string>("PalynziqCustomUnitMaintain")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PalynziqCustomUnit_Maintain");

                    b.Property<string>("PalynziqCustomUnitMax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PalynziqCustomUnit_Max");

                    b.Property<string>("PalynziqCustomUnitTitra")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PalynziqCustomUnit_Titra");

                    b.Property<string>("PalynziqQuantity10mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PalynziqQuantity20mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PalynziqQuantity25mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PalynziqQuantity2_5mg");

                    b.Property<string>("PalynziqQuantity40mg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PalynziqRefills10mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PalynziqRefills20mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PalynziqRefills25mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PalynziqRefills2_5mg");

                    b.Property<string>("PalynziqRefills40mg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PapDayPowder100")
                        .HasColumnType("int");

                    b.Property<int?>("PapDayPowder500")
                        .HasColumnType("int");

                    b.Property<int?>("PapDayTablet100")
                        .HasColumnType("int");

                    b.Property<bool?>("PapIs10mgkg")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIs20mgkg")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsContact")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsMgkgOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsPowder100")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsPowder500")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsShippingInstruction")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsSignaturePermitted")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsSignatureWritten")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsSupply30")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsSupply90")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsTablet100")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsTakeOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsTakePowder")
                        .HasColumnType("bit");

                    b.Property<bool?>("PapIsTakeTablet")
                        .HasColumnType("bit");

                    b.Property<int?>("PapMgkgOther")
                        .HasColumnType("int");

                    b.Property<int?>("PapNumRefill")
                        .HasColumnType("int");

                    b.Property<string>("PapPatientSignature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("PapPatientSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PapPatientSignatureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PapPhysicianSignature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("PapPhysicianSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PapPhysicianSignatureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PapTakeOther")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("PapTakePowder100")
                        .HasColumnType("int");

                    b.Property<int?>("PapTakePowder500")
                        .HasColumnType("int");

                    b.Property<int?>("PapTakePowderTotal")
                        .HasColumnType("int");

                    b.Property<int?>("PapTakeTablet")
                        .HasColumnType("int");

                    b.Property<int?>("PapTakeTabletTotal")
                        .HasColumnType("int");

                    b.Property<int?>("PapTotalDay")
                        .HasColumnType("int");

                    b.Property<decimal?>("PapWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ParentGuardianName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PatientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID");

                    b.Property<string>("PatientAltContactEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PatientAnnualHouseholdIncome")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("PatientBestTimeToContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientCanVoiceMessageBeLeft")
                        .HasColumnType("bit");

                    b.Property<string>("PatientCellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientContactPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientDriverLicense")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientDriverLicenseState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientEap")
                        .HasColumnType("bit")
                        .HasColumnName("PatientEAP");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientFaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientHomePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPreferredPhoneType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientPrefix")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientPrimaryContact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPrimaryContactRelationship")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPrimaryLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSecondaryContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSignature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("PatientSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientSignatureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSignatureRelationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PatientSSN");

                    b.Property<string>("PatientState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientStudySite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientSuffix")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientWorkPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PatientZIP");

                    b.Property<string>("PayerSpecificId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PayerSpecificID");

                    b.Property<byte[]>("Pdf")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PDF");

                    b.Property<bool?>("PharmacyAccredo")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyAmber")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyAvella")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyBergen")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyBiologics")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyBiologictx")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyCvsCaremark")
                        .HasColumnType("bit")
                        .HasColumnName("PharmacyCVS_Caremark");

                    b.Property<bool?>("PharmacyCvsspeciality")
                        .HasColumnType("bit")
                        .HasColumnName("PharmacyCVSSpeciality");

                    b.Property<bool?>("PharmacyDiplomat")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyFoundationCare")
                        .HasColumnType("bit");

                    b.Property<string>("PharmacyInsuranceBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyInsuranceBIN");

                    b.Property<string>("PharmacyInsuranceGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyInsuranceGroupID");

                    b.Property<string>("PharmacyInsuranceMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyInsuranceMemberID");

                    b.Property<string>("PharmacyInsurancePcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyInsurancePCN");

                    b.Property<string>("PharmacyInsurancePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyInsurancePlanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PharmacyInsurancePolicyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyInsurancePolicyID");

                    b.Property<bool?>("PharmacyIvsolutions")
                        .HasColumnType("bit")
                        .HasColumnName("PharmacyIVSolutions");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PharmacyOnSiteDispensing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyOnco360")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyPharmaceuticalSpecialities")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyRxAlreadySentToPharmacy")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyTlcrx")
                        .HasColumnType("bit")
                        .HasColumnName("PharmacyTLCRx");

                    b.Property<bool?>("PharmacyWalgreens")
                        .HasColumnType("bit");

                    b.Property<bool?>("PharmacyWalgreensSpeciality")
                        .HasColumnType("bit");

                    b.Property<string>("PreferPharmacyAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PreferPharmacyContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferPharmacyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferPharmacyPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PreferPhrarmacyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferPhrarmacyState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferPhrarmacyStoreLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferPhrarmacyZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredPharmacy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("PrescIsDermatology")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescIsGeneralPractice")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescIsGenetics")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescIsInternalMedicine")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescIsOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescIsPediatricDermatologist")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescIsPediatrician")
                        .HasColumnType("bit");

                    b.Property<string>("PrescOtherSpeciality")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PreviousTreatmentChemoTargetedTherapy")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreviousTreatmentNone")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreviousTreatmentRadiation")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreviousTreatmentSurgery")
                        .HasColumnType("bit");

                    b.Property<string>("PrimaryInsuranceInformationChanged")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("PrimaryInsuranceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrimaryMedicalInsuranceAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMedicalInsuranceBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryMedicalInsuranceBIN");

                    b.Property<DateOnly?>("PrimaryMedicalInsuranceCardHolderDob")
                        .HasColumnType("date")
                        .HasColumnName("PrimaryMedicalInsuranceCardHolderDOB");

                    b.Property<string>("PrimaryMedicalInsuranceCardHolderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMedicalInsuranceCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryMedicalInsuranceEmployerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMedicalInsuranceFax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryMedicalInsuranceGroupNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrimaryMedicalInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryMedicalInsuranceID");

                    b.Property<string>("PrimaryMedicalInsuranceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMedicalInsurancePcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrimaryMedicalInsurancePCN");

                    b.Property<string>("PrimaryMedicalInsurancePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryMedicalInsurancePolicyId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PrimaryMedicalInsurancePolicyID");

                    b.Property<string>("PrimaryMedicalInsuranceProviderNpi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PrimaryMedicalInsuranceProviderNPI");

                    b.Property<string>("PrimaryMedicalInsuranceRelationshipToPatient")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryMedicalInsuranceSsn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PrimaryMedicalInsuranceSSN");

                    b.Property<string>("PrimaryMedicalInsuranceState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrimaryMedicalInsuranceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrimaryMedicalInsuranceZip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PrimaryMedicalPatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryMedicalPatientInsuranceID");

                    b.Property<string>("PriorTherapy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderAddressContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderAddressContactMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderAddressContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderAddressEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderAddressFax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderAddressHospital")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProviderAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderAddressID");

                    b.Property<string>("ProviderAddressName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderAddressPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderAddressSpecialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderDea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProviderDEA");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderFacilityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderFaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderFullName")
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("ProviderIndividualCompletingForm")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderLicenseState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderMedicaidId")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("ProviderMedicaidID")
                        .IsFixedLength();

                    b.Property<string>("ProviderMiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderPhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderPhoneNumber2Ext")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderPhoneNumberExt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderSpecialty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderStateLicense")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderStateMedicalLic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderTaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProviderTaxID");

                    b.Property<string>("ProviderTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderUpin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProviderUPIN");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProviderZIP");

                    b.Property<string>("ProviderxDea")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ProviderxDEA");

                    b.Property<string>("ReferralStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RegDayPowder100")
                        .HasColumnType("int");

                    b.Property<int?>("RegDayPowder500")
                        .HasColumnType("int");

                    b.Property<int?>("RegDayTablet100")
                        .HasColumnType("int");

                    b.Property<bool?>("RegIs10mgkg")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIs20mgkg")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsContact")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsMgkgOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsPowder100")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsPowder500")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsShippingInstruction")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsSignaturePermitted")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsSignatureWritten")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsSupply30")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsSupply90")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsTablet100")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsTakeOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsTakePowder")
                        .HasColumnType("bit");

                    b.Property<bool?>("RegIsTakeTablet")
                        .HasColumnType("bit");

                    b.Property<int?>("RegMgkgOther")
                        .HasColumnType("int");

                    b.Property<int?>("RegNumRefill")
                        .HasColumnType("int");

                    b.Property<string>("RegPatientSignature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("RegPatientSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegPatientSignatureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegPhysicianSignature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("RegPhysicianSignatureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegPhysicianSignatureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RegTakeOther")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("RegTakePowder100")
                        .HasColumnType("int");

                    b.Property<int?>("RegTakePowder500")
                        .HasColumnType("int");

                    b.Property<int?>("RegTakePowderTotal")
                        .HasColumnType("int");

                    b.Property<int?>("RegTakeTablet")
                        .HasColumnType("int");

                    b.Property<int?>("RegTakeTabletTotal")
                        .HasColumnType("int");

                    b.Property<int?>("RegTotalDay")
                        .HasColumnType("int");

                    b.Property<decimal?>("RegWeight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SecondaryAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressContactMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryAddressContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryAddressEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressFax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryAddressHospital")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressSpecialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryAddressState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryAddressZip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryInsuranceInformationChanged")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("SecondaryInsuranceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecondaryMedicalInsuranceAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryMedicalInsuranceBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryMedicalInsuranceBIN");

                    b.Property<DateOnly?>("SecondaryMedicalInsuranceCardHolderDob")
                        .HasColumnType("date")
                        .HasColumnName("SecondaryMedicalInsuranceCardHolderDOB");

                    b.Property<string>("SecondaryMedicalInsuranceCardHolderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryMedicalInsuranceCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryMedicalInsuranceEmployerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryMedicalInsuranceFax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondaryMedicalInsuranceGroupNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SecondaryMedicalInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("SecondaryMedicalInsuranceID");

                    b.Property<string>("SecondaryMedicalInsuranceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryMedicalInsurancePcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryMedicalInsurancePCN");

                    b.Property<string>("SecondaryMedicalInsurancePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondaryMedicalInsurancePolicyId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SecondaryMedicalInsurancePolicyID");

                    b.Property<string>("SecondaryMedicalInsuranceProviderNpi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SecondaryMedicalInsuranceProviderNPI");

                    b.Property<string>("SecondaryMedicalInsuranceRelationshipToPatient")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryMedicalInsuranceSsn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SecondaryMedicalInsuranceSSN");

                    b.Property<string>("SecondaryMedicalInsuranceState")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondaryMedicalInsuranceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecondaryMedicalInsuranceZip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SecondaryMedicalPatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("SecondaryMedicalPatientInsuranceID");

                    b.Property<string>("ShipmentClinicEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipmentClinicPointOfContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipmentClinicPointOfContactPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipmentOtherDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipmentShipToAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipmentState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipmentWeeks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipmentZip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ShipmentZIP");

                    b.Property<string>("Signature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Signature2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SignatureDate2")
                        .HasColumnType("datetime");

                    b.Property<string>("SignatureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SignatureName2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpecialDeliveryInstructions")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SpecialDeliveryInstructions2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SrType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("SubstitutionPermitted")
                        .HasColumnType("bit");

                    b.Property<string>("Therapy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TherapyType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("TreatAdministrationDate")
                        .HasColumnType("date");

                    b.Property<string>("TreatAllergyKnown")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TreatBaselinePhe")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateOnly?>("TreatBaselinePheLevelDate")
                        .HasColumnType("date");

                    b.Property<bool?>("TreatIsAllergyKnownNo")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsAllergyKnownYes")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsBh4")
                        .HasColumnType("bit")
                        .HasColumnName("TreatIsBH4");

                    b.Property<bool?>("TreatIsClassicPku")
                        .HasColumnType("bit")
                        .HasColumnName("TreatIsClassicPKU");

                    b.Property<bool?>("TreatIsE701")
                        .HasColumnType("bit")
                        .HasColumnName("TreatIsE70_1");

                    b.Property<bool?>("TreatIsHyperphenylalaninemia")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsMaternalPhenylketonuria")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsOtherMed")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsPhe")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsPheOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatIsPhenylketonuria")
                        .HasColumnType("bit");

                    b.Property<string>("TreatOther")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TreatOtherMed")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TreatPheOther")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Treatment10000UnitCount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Treatment2500UnitCount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Treatment5000UnitCount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("TreatmentBevacizumab")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentCapeOx")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentCapecitabine")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentCetuximab")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentClinicalTnmstageMetastaticColorectalCancer")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentClinicalTNMStageMetastaticColorectalCancer");

                    b.Property<bool?>("TreatmentClinicalTnmstageMetastaticGastricCancer")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentClinicalTNMStageMetastaticGastricCancer");

                    b.Property<bool?>("TreatmentClinicalTnmstageOther")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentClinicalTNMStageOther");

                    b.Property<string>("TreatmentCptcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TreatmentCPTCode");

                    b.Property<string>("TreatmentCptcode2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TreatmentCPTCode2");

                    b.Property<string>("TreatmentCptcode3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TreatmentCPTCode3");

                    b.Property<string>("TreatmentCptcode4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TreatmentCPTCode4");

                    b.Property<string>("TreatmentCptcode5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TreatmentCPTCode5");

                    b.Property<DateTime?>("TreatmentDateOfService")
                        .HasColumnType("datetime");

                    b.Property<string>("TreatmentDatePreTherapy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TreatmentDate_PreTherapy");

                    b.Property<DateTime?>("TreatmentDateTaken1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TreatmentDateTaken2")
                        .HasColumnType("datetime");

                    b.Property<string>("TreatmentDiagnosisCodePrimary1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TreatmentDiagnosisCodePrimary2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TreatmentDiagnosisCodePrimary3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TreatmentDiagnosisCodePrimary4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TreatmentDiagnosisCodePrimary5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TreatmentDose")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentDose2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentDrugAllergies")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentEgfrtestCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentEGFRTestCompleted");

                    b.Property<string>("TreatmentEgfrtestResult")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TreatmentEGFRTestResult");

                    b.Property<string>("TreatmentEmgcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TreatmentEMGCode");

                    b.Property<bool?>("TreatmentFiveFu")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentFiveFU");

                    b.Property<bool?>("TreatmentFolfiri")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentFOLFIRI");

                    b.Property<bool?>("TreatmentFolfox")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentFOLFOX");

                    b.Property<bool?>("TreatmentFolfoxiri")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentFOLFOXIRI");

                    b.Property<string>("TreatmentFrequency")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TreatmentFrequency2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentHer2testCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentHER-2TestCompleted");

                    b.Property<string>("TreatmentHer2testResult")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TreatmentHER-2TestResult");

                    b.Property<string>("TreatmentHistory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentIrinotecan")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsBreastCarcinoma")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsFirstFill")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsHypogonadotropicHypogonadism")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsIdiopathicGonadotropinDeficiency")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsLhrhdeficiency")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentIsLHRHDeficiency");

                    b.Property<bool?>("TreatmentIsNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsPrimaryHypogonadism")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsProstateCarcinoma")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentIsTesticularFailure")
                        .HasColumnType("bit");

                    b.Property<string>("TreatmentKrasstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TreatmentKRASStatus");

                    b.Property<string>("TreatmentLast4digitsOfNdc")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("TreatmentLast4digitsOfNDC");

                    b.Property<bool?>("TreatmentLineOfTherapyFifth")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentLineOfTherapyFourth")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentLineOfTherapyOther")
                        .HasColumnType("bit");

                    b.Property<string>("TreatmentLineOfTherapyOtherStr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentLineOfTherapyThird")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentMsiHtestCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentMSI-HTestCompleted");

                    b.Property<string>("TreatmentMsiHtestResult")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TreatmentMSI-HTestResult");

                    b.Property<bool?>("TreatmentNivolumab")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentOneTabAday")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentOneTabADay");

                    b.Property<string>("TreatmentOther")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentPantiumumab")
                        .HasColumnType("bit");

                    b.Property<string>("TreatmentPatientDosage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TreatmentPatientDosage2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentPatientDosage3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentPembrolizumab")
                        .HasColumnType("bit");

                    b.Property<int?>("TreatmentPercentPredicted")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentPreTherapy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TreatmentPrescriptionStrengthPrescribed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentQuantity2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentRamucirumab")
                        .HasColumnType("bit");

                    b.Property<string>("TreatmentRefRange1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentRefRange2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentRegorafenib")
                        .HasColumnType("bit");

                    b.Property<string>("TreatmentRxType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentSig")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TreatmentSIG");

                    b.Property<bool?>("TreatmentSigother")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentSIGOther");

                    b.Property<string>("TreatmentSigotherDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TreatmentSIGOtherDesc");

                    b.Property<string>("TreatmentSpecialInstructions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("TreatmentStartDateFill")
                        .HasColumnType("date")
                        .HasColumnName("TreatmentStart_Date_Fill");

                    b.Property<string>("TreatmentSymptom")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TreatmentTabletsPerCycle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentTabletsPerCycle2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TreatmentTestosteroneLevel1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TreatmentTestosteroneLevel2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TreatmentTestosteroneLevels")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TreatmentTrastuzumab")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentUseDevice1")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentUseDevice2")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentZivAflibercept")
                        .HasColumnType("bit");

                    b.Property<bool?>("TreatmentdMmrtestCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("TreatmentdMMRTestCompleted");

                    b.Property<string>("TreatmentdMmrtestResult")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TreatmentdMMRTestResult");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WeeklyMg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WeeklyRefills")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Weight")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("Wpsshigh")
                        .HasColumnType("bit")
                        .HasColumnName("WPSSHigh");

                    b.Property<bool?>("WpssveryHigh")
                        .HasColumnType("bit")
                        .HasColumnName("WPSSVeryHigh");

                    b.HasKey("RecordId");

                    b.ToTable("ReimbursementEnrollmentForm", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReminderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<string>("ClientPatientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientPatientID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("NextReminderDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReminderEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReminderPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly?>("ReminderTime")
                        .HasColumnType("time");

                    b.Property<string>("ReminderTimeString")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RepeatType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Repeating")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("TimeZoneString")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("ReminderId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReminderNotificationLog", b =>
                {
                    b.Property<int>("ReminderNotificationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReminderNotificationLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderNotificationLogId"));

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BatchID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Platform")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<int>("PortalUserDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("PortalUserDeviceID");

                    b.Property<DateTime>("ReminderDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ReminderId")
                        .HasColumnType("int")
                        .HasColumnName("ReminderID");

                    b.Property<string>("ResponseCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("SentTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReminderNotificationLogId")
                        .HasName("PK_ReminderNotifcationLogs");

                    b.ToTable("ReminderNotificationLogs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RemindersChild", b =>
                {
                    b.Property<decimal>("ChildReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("ChildReminderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("ChildReminderId"));

                    b.Property<int>("ReminderId")
                        .HasColumnType("int")
                        .HasColumnName("ReminderID");

                    b.Property<TimeOnly?>("ReminderTime")
                        .HasColumnType("time");

                    b.HasKey("ChildReminderId")
                        .HasName("PK_ChildReminder");

                    b.HasIndex("ReminderId");

                    b.ToTable("Reminders_Child", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportActivityHistory", b =>
                {
                    b.Property<int>("ReportActivityHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportActivityHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportActivityHistoryId"));

                    b.Property<DateOnly?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Drug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("OtherParameter1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherParameter2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherParameter3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ReportProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ReportProgramID");

                    b.Property<string>("Srstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRStatus");

                    b.Property<string>("SrsubType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRSubType");

                    b.Property<string>("Srtype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRType");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("ReportActivityHistoryId");

                    b.HasIndex("ReportProgramId");

                    b.ToTable("ReportActivityHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportList", b =>
                {
                    b.Property<int>("ReportListId")
                        .HasColumnType("int")
                        .HasColumnName("ReportListID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReportPath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ReportListId")
                        .HasName("PK_Reports_Master");

                    b.ToTable("ReportList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportParameter", b =>
                {
                    b.Property<int>("ReportParamaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportParamaterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportParamaterId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ParameterDataType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParameterDefault")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ParameterDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParameterName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParameterPrompt")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ReportListId")
                        .HasColumnType("int")
                        .HasColumnName("ReportListID");

                    b.HasKey("ReportParamaterId");

                    b.HasIndex("ReportListId");

                    b.ToTable("ReportParameters");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportProgram", b =>
                {
                    b.Property<int>("ReportProgramsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportProgramsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportProgramsId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ReportListId")
                        .HasColumnType("int")
                        .HasColumnName("ReportListID");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.HasKey("ReportProgramsId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ReportListId");

                    b.ToTable("ReportPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RequestInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DrugFullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FormDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FormId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FormName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrescriberName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.RequestInfoes");

                    b.ToTable("RequestInfoes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rimgimg2Image", b =>
                {
                    b.Property<double>("Imgid")
                        .HasColumnType("float")
                        .HasColumnName("IMGID");

                    b.Property<string>("Imgfilenm")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IMGFILENM");

                    b.HasKey("Imgid");

                    b.ToTable("RIMGIMG2_IMAGE", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rimgudg2UnqDrug", b =>
                {
                    b.Property<double>("Imguniqid")
                        .HasColumnType("float")
                        .HasColumnName("IMGUNIQID");

                    b.Property<double?>("Imgdfid")
                        .HasColumnType("float")
                        .HasColumnName("IMGDFID");

                    b.Property<double?>("Imgmfgid")
                        .HasColumnType("float")
                        .HasColumnName("IMGMFGID");

                    b.Property<string>("Imgndc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IMGNDC");

                    b.HasKey("Imguniqid");

                    b.ToTable("RIMGUDG2_UNQ_DRUG", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rimguij2UnqDrugJrnl", b =>
                {
                    b.Property<double>("Imguniqid")
                        .HasColumnType("float")
                        .HasColumnName("IMGUNIQID");

                    b.Property<double>("Imgstrtdt")
                        .HasColumnType("float")
                        .HasColumnName("IMGSTRTDT");

                    b.Property<double?>("Imgid")
                        .HasColumnType("float")
                        .HasColumnName("IMGID");

                    b.Property<double?>("Imgstopdt")
                        .HasColumnType("float")
                        .HasColumnName("IMGSTOPDT");

                    b.HasKey("Imguniqid", "Imgstrtdt");

                    b.ToTable("RIMGUIJ2_UNQ_DRUG_JRNL", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RiteAidHoliday", b =>
                {
                    b.Property<int>("RiteAidHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RiteAidHolidayID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiteAidHolidayId"));

                    b.Property<TimeOnly?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Holiday")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("Y");

                    b.Property<TimeOnly?>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("RiteAidHolidayId");

                    b.ToTable("RiteAidHolidays");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RiteAidHour", b =>
                {
                    b.Property<int>("RiteAidHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RiteAidHoursID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiteAidHoursId"));

                    b.Property<TimeOnly>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("DayofWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("OpenClosed")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<TimeOnly>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("RiteAidHoursId");

                    b.ToTable("RiteAidHours");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rmiid1Med", b =>
                {
                    b.Property<double?>("GcnSeqno")
                        .HasColumnType("float")
                        .HasColumnName("GCN_SEQNO");

                    b.Property<double?>("GenericMedid")
                        .HasColumnType("float")
                        .HasColumnName("GENERIC_MEDID");

                    b.Property<string>("MedGcnseqnoAssignCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_GCNSEQNO_ASSIGN_CD");

                    b.Property<string>("MedMedidDesc")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("MED_MEDID_DESC");

                    b.Property<string>("MedNameSourceCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_NAME_SOURCE_CD");

                    b.Property<string>("MedRefDeaCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_DEA_CD");

                    b.Property<string>("MedRefDesi2Ind")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_DESI2_IND");

                    b.Property<string>("MedRefDesiInd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_DESI_IND");

                    b.Property<string>("MedRefFedLegendInd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_FED_LEGEND_IND");

                    b.Property<string>("MedRefGenCompPriceCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_GEN_COMP_PRICE_CD");

                    b.Property<string>("MedRefGenDrugNameCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_GEN_DRUG_NAME_CD");

                    b.Property<string>("MedRefGenSpreadCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_GEN_SPREAD_CD");

                    b.Property<string>("MedRefGenTheraEquCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_GEN_THERA_EQU_CD");

                    b.Property<string>("MedRefInnovInd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_INNOV_IND");

                    b.Property<string>("MedRefMultiSourceCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_REF_MULTI_SOURCE_CD");

                    b.Property<string>("MedStatusCd")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MED_STATUS_CD");

                    b.Property<string>("MedStrength")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MED_STRENGTH");

                    b.Property<string>("MedStrengthUom")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MED_STRENGTH_UOM");

                    b.Property<double?>("Medid")
                        .HasColumnType("float")
                        .HasColumnName("MEDID");

                    b.Property<double?>("RoutedDosageFormMedId")
                        .HasColumnType("float")
                        .HasColumnName("ROUTED_DOSAGE_FORM_MED_ID");

                    b.ToTable("RMIID1_MED", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rmindc1NdcMedid", b =>
                {
                    b.Property<double?>("Medid")
                        .HasColumnType("float")
                        .HasColumnName("MEDID");

                    b.Property<string>("Ndc")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("NDC");

                    b.ToTable("RMINDC1_NDC_MEDID", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rndc14NdcMstr", b =>
                {
                    b.Property<string>("Ndc")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("NDC");

                    b.Property<string>("Ad")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AD");

                    b.Property<double?>("Bbdc")
                        .HasColumnType("float")
                        .HasColumnName("BBDC");

                    b.Property<string>("Bn")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("BN");

                    b.Property<string>("Cl")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("CL");

                    b.Property<double?>("Csp")
                        .HasColumnType("float")
                        .HasColumnName("CSP");

                    b.Property<double?>("Daddnc")
                        .HasColumnType("float")
                        .HasColumnName("DADDNC");

                    b.Property<string>("Dea")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("DEA");

                    b.Property<double?>("Des2dtec")
                        .HasColumnType("float")
                        .HasColumnName("DES2DTEC");

                    b.Property<double?>("Desdtec")
                        .HasColumnType("float")
                        .HasColumnName("DESDTEC");

                    b.Property<string>("Desi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("DESI");

                    b.Property<string>("Desi2")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("DESI2");

                    b.Property<string>("Df")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("DF");

                    b.Property<double?>("Dupdc")
                        .HasColumnType("float")
                        .HasColumnName("DUPDC");

                    b.Property<double?>("GcnSeqno")
                        .HasColumnType("float")
                        .HasColumnName("GCN_SEQNO");

                    b.Property<string>("Gmi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("GMI");

                    b.Property<string>("Gni")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("GNI");

                    b.Property<string>("Gpi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("GPI");

                    b.Property<double?>("Gpidc")
                        .HasColumnType("float")
                        .HasColumnName("GPIDC");

                    b.Property<string>("Gsi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("GSI");

                    b.Property<string>("Gti")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("GTI");

                    b.Property<double?>("HcfaAppc")
                        .HasColumnType("float")
                        .HasColumnName("HCFA_APPC");

                    b.Property<string>("HcfaDc")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("HCFA_DC");

                    b.Property<double?>("HcfaDesc1")
                        .HasColumnType("float")
                        .HasColumnName("HCFA_DESC1");

                    b.Property<string>("HcfaDesi1")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("HCFA_DESI1");

                    b.Property<string>("HcfaFda")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("HCFA_FDA");

                    b.Property<double?>("HcfaMrkc")
                        .HasColumnType("float")
                        .HasColumnName("HCFA_MRKC");

                    b.Property<double?>("HcfaPs")
                        .HasColumnType("float")
                        .HasColumnName("HCFA_PS");

                    b.Property<double?>("HcfaTrmc")
                        .HasColumnType("float")
                        .HasColumnName("HCFA_TRMC");

                    b.Property<string>("HcfaTyp")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("HCFA_TYP");

                    b.Property<string>("HcfaUnit")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("HCFA_UNIT");

                    b.Property<string>("Home")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("HOME");

                    b.Property<string>("Hosp")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("HOSP");

                    b.Property<string>("Innov")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("INNOV");

                    b.Property<string>("Inpcki")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("INPCKI");

                    b.Property<string>("Ipi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("IPI");

                    b.Property<string>("Lblrid")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("LBLRID");

                    b.Property<string>("Ln")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LN");

                    b.Property<string>("Ln25")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("LN25");

                    b.Property<string>("Ln25i")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("LN25I");

                    b.Property<string>("Ln60")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("LN60");

                    b.Property<string>("Maint")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MAINT");

                    b.Property<string>("Mini")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MINI");

                    b.Property<string>("Ndcfi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("NDCFI");

                    b.Property<string>("Ndcgi1")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("NDCGI1");

                    b.Property<double?>("NdlGdge")
                        .HasColumnType("float")
                        .HasColumnName("NDL_GDGE");

                    b.Property<double?>("NdlLngth")
                        .HasColumnType("float")
                        .HasColumnName("NDL_LNGTH");

                    b.Property<string>("Obc")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("OBC");

                    b.Property<string>("Obc3")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("OBC3");

                    b.Property<string>("ObcExp")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("OBC_EXP");

                    b.Property<double?>("Obsdtec")
                        .HasColumnType("float")
                        .HasColumnName("OBSDTEC");

                    b.Property<string>("Outpcki")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("OUTPCKI");

                    b.Property<string>("Pd")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PD");

                    b.Property<string>("Plblr")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PLBLR");

                    b.Property<string>("Pndc")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("PNDC");

                    b.Property<string>("Ppi")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PPI");

                    b.Property<double?>("Ps")
                        .HasColumnType("float")
                        .HasColumnName("PS");

                    b.Property<double?>("PsEquiv")
                        .HasColumnType("float")
                        .HasColumnName("PS_EQUIV");

                    b.Property<string>("Repack")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("REPACK");

                    b.Property<string>("Repndc")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("REPNDC");

                    b.Property<double?>("Shipper")
                        .HasColumnType("float")
                        .HasColumnName("SHIPPER");

                    b.Property<double?>("ShlfPck")
                        .HasColumnType("float")
                        .HasColumnName("SHLF_PCK");

                    b.Property<string>("Stpk")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("STPK");

                    b.Property<double?>("SyrCpcty")
                        .HasColumnType("float")
                        .HasColumnName("SYR_CPCTY");

                    b.Property<string>("Top200")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("TOP200");

                    b.Property<string>("Top50gen")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("TOP50GEN");

                    b.Property<string>("Ud")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("UD");

                    b.Property<string>("Uu")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("UU");

                    b.HasKey("Ndc");

                    b.ToTable("RNDC14_NDC_MSTR", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rpemmoe2Mono", b =>
                {
                    b.Property<string>("Pemage")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PEMAGE");

                    b.Property<string>("Pemgndr")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PEMGNDR");

                    b.Property<double?>("Pemono")
                        .HasColumnType("float")
                        .HasColumnName("PEMONO");

                    b.Property<double?>("PemonoeSn")
                        .HasColumnType("float")
                        .HasColumnName("PEMONOE_SN");

                    b.Property<string>("Pemtxte")
                        .HasMaxLength(76)
                        .HasColumnType("nvarchar(76)")
                        .HasColumnName("PEMTXTE");

                    b.Property<string>("Pemtxtei")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PEMTXTEI");

                    b.ToTable("RPEMMOE2_MONO", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rpemogc0MonoGcnseqnoLink", b =>
                {
                    b.Property<double?>("GcnSeqno")
                        .HasColumnType("float")
                        .HasColumnName("GCN_SEQNO");

                    b.Property<double?>("Pemono")
                        .HasColumnType("float")
                        .HasColumnName("PEMONO");

                    b.ToTable("RPEMOGC0_MONO_GCNSEQNO_LINK", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rtmmid1TmMed", b =>
                {
                    b.Property<double?>("Medid")
                        .HasColumnType("float")
                        .HasColumnName("MEDID");

                    b.Property<string>("TmAltMedidDesc")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("TM_ALT_MEDID_DESC");

                    b.Property<double?>("TmInd")
                        .HasColumnType("float")
                        .HasColumnName("TM_IND");

                    b.Property<double?>("TmSourceId")
                        .HasColumnType("float")
                        .HasColumnName("TM_SOURCE_ID");

                    b.ToTable("RTMMID1_TM_MED", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Rtpbtransaction", b =>
                {
                    b.Property<int>("RtpbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RtpbId"));

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BenefitInvestigationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Failed")
                        .HasColumnType("bit");

                    b.Property<string>("JsonResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("RequestContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseTypeCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ServiceRequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RtpbId")
                        .HasName("PK__RTPBTran__49CA4B1034F6EFB6");

                    b.ToTable("RTPBTransactions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RuleTriggerAction", b =>
                {
                    b.Property<int>("RuleTriggerActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RuleTriggerActionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleTriggerActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ActionParameters")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("RuleTriggerConditionId")
                        .HasColumnType("int")
                        .HasColumnName("RuleTriggerConditionID");

                    b.HasKey("RuleTriggerActionId");

                    b.HasIndex("RuleTriggerConditionId");

                    b.ToTable("RuleTriggerActions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RuleTriggerCondition", b =>
                {
                    b.Property<int>("RuleTriggerConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RuleTriggerConditionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleTriggerConditionId"));

                    b.Property<string>("ConditionParameters")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("RequireCareCycle")
                        .HasColumnType("bit");

                    b.Property<string>("RuleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SrActivity")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SR_Activity");

                    b.Property<string>("SrProcessDate")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SR_ProcessDate");

                    b.Property<string>("SrResolution")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SR_Resolution");

                    b.Property<string>("SrStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_Status");

                    b.Property<string>("SrSubtype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_Subtype");

                    b.Property<string>("SrTask")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_Task");

                    b.Property<string>("SrTypeShortDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sr_TypeShortDesc");

                    b.Property<string>("TaskRunFrequency")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasComment("Example: {\"RunByWindowsTaskScheduler\":\"false\",\"Month\":\"May,June,July\",\"Date01,02,11,30\":\"\",\"Day\":\"Monday,tuesday,Friday,saturday\",\"Hour\":\"11,09,10\",\"Minute\":\"11,00,23\"}\r\nDetails: Month,Day should be full name(case insensitive). Date, Hour, Minute are in ## format. Hour are in 24 hour date format. When RunByWindowsTaskScheduler is true all other paratmeter values are ignored and Job will be executed as per the Windows Task scheduler timing. ");

                    b.HasKey("RuleTriggerConditionId");

                    b.HasIndex(new[] { "ProgramId", "RuleName", "SrTypeShortDesc", "SrResolution", "SrSubtype", "DrugName", "ProcessName", "SrActivity" }, "uniq_Condn")
                        .IsUnique()
                        .HasFilter("[RuleName] IS NOT NULL AND [Sr_TypeShortDesc] IS NOT NULL AND [SR_Resolution] IS NOT NULL AND [SR_Subtype] IS NOT NULL AND [DrugName] IS NOT NULL AND [ProcessName] IS NOT NULL AND [SR_Activity] IS NOT NULL");

                    b.ToTable("RuleTriggerConditions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RxAdminAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminStatus")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ComparisonOperator")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int?>("MinDays")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__RxAdminA__3214EC07D31BB96F");

                    b.ToTable("RxAdminAction", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RxAdminDose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__RxAdminD__3214EC07E2F75502");

                    b.HasIndex("DrugId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ProgramId");

                    b.ToTable("RxAdminDoses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RxAdminDosesRule", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AdminDose")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DaysRule")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ExpirationDoseInDays")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int");

                    b.HasIndex("ProgramId");

                    b.ToTable("RxAdminDosesRules");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SalesDataCustomerToVendor", b =>
                {
                    b.Property<int>("SalesDataCustomerToVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesData_CustomerToVendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesDataCustomerToVendorId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("system");

                    b.Property<int>("CustomerNumber")
                        .HasColumnType("int")
                        .HasColumnName("Customer_Number");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("SalesDataCustomerToVendorId");

                    b.ToTable("SalesData_CustomerToVendor", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SalesDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Address_ID");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Customer_Name");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Customer_Number");

                    b.Property<string>("InvoiceDate")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Invoice_Date");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Invoice_Number");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Item_Description");

                    b.Property<string>("ItemNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Item_Number");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SalesData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SamlauditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("PartnerIdP")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("partnerIdP");

                    b.Property<string>("RequestType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Requester")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Xmldocument")
                        .HasColumnType("xml")
                        .HasColumnName("XMLDocument");

                    b.HasKey("LogId");

                    b.ToTable("SAMLAuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SeasonalSourceRecord", b =>
                {
                    b.Property<string>("ClientPatientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mdeleted")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MDeleted");

                    b.Property<int>("MedeBvprocessingId")
                        .HasColumnType("int")
                        .HasColumnName("MedeBVProcessingId");

                    b.Property<int>("MedeBvprocessingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MedeBVProcessingTypeId");

                    b.Property<string>("MedeBvresponseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MedeBVResponseId");

                    b.Property<string>("MedeBvresponseSourceTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MedeBVResponseSourceTypeId");

                    b.Property<string>("MedeBvresponseTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MedeBVResponseTypeCode");

                    b.Property<DateTime>("NextScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SourceRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Srcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("SRCreated");

                    b.Property<int>("SrmedeBvprocessingId")
                        .HasColumnType("int")
                        .HasColumnName("SRMedeBVProcessingId");

                    b.Property<string>("SrmedeBvresponseTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SRMedeBVResponseTypeCode");

                    b.Property<DateTime>("Srmodified")
                        .HasColumnType("datetime2")
                        .HasColumnName("SRModified");

                    b.Property<string>("Srstatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SRStatus");

                    b.ToTable("Seasonal_SourceRecord", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SecureCommunication", b =>
                {
                    b.Property<int>("SecureCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Secure_CommunicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecureCommunicationId"));

                    b.Property<bool>("ActionTaken")
                        .HasColumnType("bit");

                    b.Property<string>("ActionTakenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Ccdeleted")
                        .HasColumnType("bit")
                        .HasColumnName("CCDeleted");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailAddressFrom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailAddressTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("InitalPortalCommunicationId")
                        .HasColumnType("int")
                        .HasColumnName("InitalPortalCommunicationID");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("MessgaeStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("PortalDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RecordSource")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Hub");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("SecureCommunicationId")
                        .HasName("PK_Portal_Communications");

                    b.ToTable("Secure_Communications", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SecureCommunicationDocument", b =>
                {
                    b.Property<int>("SecureCommunicationDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Secure_Communication_DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecureCommunicationDocumentId"));

                    b.Property<string>("Checksum")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("FileStorageId")
                        .HasColumnType("int")
                        .HasColumnName("FileStorageID");

                    b.Property<int>("SecureCommunicationId")
                        .HasColumnType("int")
                        .HasColumnName("Secure_CommunicationID");

                    b.Property<bool>("SigRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SigStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    b.HasKey("SecureCommunicationDocumentId")
                        .HasName("PK_Portal_Communication_Documents");

                    b.ToTable("Secure_Communication_Documents", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SecureMessagesAddress", b =>
                {
                    b.Property<int>("SecureMessagesAddresseesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecureMessagesAddresseesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecureMessagesAddresseesId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationID");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ApplicationTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("SecureMessagesAddresseesId");

                    b.ToTable("SecureMessagesAddresses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SentAlertHistory", b =>
                {
                    b.Property<int>("SentAlertHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SentAlertHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SentAlertHistoryId"));

                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AlertTypeID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("SentAlertHistoryId");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex(new[] { "PatientId" }, "IX_SentAlertHistory_PatientID");

                    b.HasIndex(new[] { "SentDate" }, "IX_SentAlertHistory_SentDate");

                    b.ToTable("SentAlertHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<bool?>("AutoGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("CareCycleCategory")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CareCycleId")
                        .HasColumnType("int")
                        .HasColumnName("CareCycleID");

                    b.Property<int?>("CaseJourneyId")
                        .HasColumnType("int")
                        .HasColumnName("CaseJourneyID");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ContactAddressID");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CustomDate1")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EntityAsContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<bool?>("InitialInfoComplete")
                        .HasColumnType("bit");

                    b.Property<bool?>("Iscmmsr")
                        .HasColumnType("bit")
                        .HasColumnName("ISCMMSR");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NurseAgencyAddressId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyAddressID");

                    b.Property<int?>("NurseAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("NurseAgencyID");

                    b.Property<int?>("ParentNdcid")
                        .HasColumnType("int")
                        .HasColumnName("ParentNDCID");

                    b.Property<int?>("ParentSrid")
                        .HasColumnType("int")
                        .HasColumnName("ParentSRID");

                    b.Property<int?>("PatientAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressID");

                    b.Property<Guid?>("PatientEnrollmentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    b.Property<string>("SelectedDrugNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SelectedDrugNDC");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("SrStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("O")
                        .HasColumnName("SR_Status");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<string>("SrdrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRDrugName");

                    b.Property<bool?>("SrholdStatus")
                        .HasColumnType("bit")
                        .HasColumnName("SRHoldStatus");

                    b.Property<bool?>("SrinProgress")
                        .HasColumnType("bit")
                        .HasColumnName("SRInProgress");

                    b.Property<string>("Srpriority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRPriority");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("StartedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TakenAt")
                        .HasColumnType("datetime");

                    b.Property<string>("TakenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ServiceRequestId")
                        .HasName("PK_Cases");

                    b.HasIndex("NurseAgencyId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex(new[] { "ContactId" }, "ContactID");

                    b.HasIndex(new[] { "ProgramId", "StartedAt" }, "IX_ServiceRequests_ByProgramIDStartedAt");

                    b.HasIndex(new[] { "PatientId" }, "PatientID");

                    b.HasIndex(new[] { "ProgramId" }, "ProgramID");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "ProgramID with include fields");

                    b.HasIndex(new[] { "Deleted" }, "SR with PatientID");

                    b.HasIndex(new[] { "SrStatus" }, "SR_Status");

                    b.HasIndex(new[] { "SrTypeListId" }, "SR_TypeListID");

                    b.ToTable("ServiceRequests", t =>
                        {
                            t.HasTrigger("tr_ServiceRequests_AfterInsert");

                            t.HasTrigger("tr_ServiceRequests_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ServiceRequestsAuditLog", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("RecordId");

                    b.ToTable("ServiceRequests_AuditLog", null, t =>
                        {
                            t.HasTrigger("TR_ServiceRequests_AuditLog_Permission");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SmsTemplate", b =>
                {
                    b.Property<int>("SmsTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SMS_Template_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmsTemplateId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Smscategory")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SMSCategory");

                    b.Property<string>("Smstemplate1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SMSTemplate");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListId");

                    b.Property<string>("SrTypeShortDesc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.HasKey("SmsTemplateId");

                    b.ToTable("SMS_Templates", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SoapauditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ipAddress");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("methodName");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serviceName");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<string>("XmlRequest")
                        .HasColumnType("xml")
                        .HasColumnName("xmlRequest");

                    b.Property<string>("XmlResponse")
                        .HasColumnType("xml")
                        .HasColumnName("xmlResponse");

                    b.HasKey("LogId");

                    b.ToTable("SOAPAuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SpecialtyPharmacy", b =>
                {
                    b.Property<int>("Spid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Spid"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Spcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPCode");

                    b.Property<string>("Spname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPName");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Spid");

                    b.ToTable("SpecialtyPharmacies");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Spinventory", b =>
                {
                    b.Property<int>("SpinventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SPInventoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpinventoryId"));

                    b.Property<string>("CreatdBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedFileName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("InventoryBeginDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("InventoryEndDate")
                        .HasColumnType("date");

                    b.Property<string>("ItemName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NDC");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("QtyAtBeginDate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("QtyAtEndDate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("SPNPI")
                        .IsFixedLength();

                    b.HasKey("SpinventoryId");

                    b.ToTable("SPInventory", null, t =>
                        {
                            t.HasTrigger("tr_SPInventoryInsert");

                            t.HasTrigger("tr_SPInventoryUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SpinventoryAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<DateOnly?>("InventoryBeginDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("InventoryEndDate")
                        .HasColumnType("date");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Ndc")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("NDC")
                        .IsFixedLength();

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("QtyAtBeginDate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("QtyAtEndDate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SpinventoryId")
                        .HasColumnType("int")
                        .HasColumnName("SPInventoryID");

                    b.HasKey("AuditId");

                    b.ToTable("SPInventoryAudit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SplitStringResult", b =>
                {
                    b.Property<string>("data")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SplitStringResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrActivity", b =>
                {
                    b.Property<int>("SrActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrActivityId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CallerType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CallerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CallerTypeID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DaysOnHand")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Ibobcall")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IBOBCall");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonForCall")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ReasonForCallId")
                        .HasColumnType("int")
                        .HasColumnName("ReasonForCallID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrActivityListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    b.Property<int?>("SrNoteId")
                        .HasColumnType("int")
                        .HasColumnName("SR_NoteID");

                    b.HasKey("SrActivityId");

                    b.HasIndex("SrActivityListId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_SR_Activities_1");

                    b.HasIndex(new[] { "ProgramId", "SrActivityListId", "Deleted" }, "SR_Activities_withCreated");

                    b.HasIndex(new[] { "ServiceRequestId" }, "ServiceRequestID");

                    b.ToTable("SR_Activities", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrActivityList", b =>
                {
                    b.Property<int>("SrActivityListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrActivityListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ActivityDesc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("Alert")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ParentListId")
                        .HasColumnType("int")
                        .HasColumnName("ParentListID");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("ProgramId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<bool?>("RequireCallLog")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("SrActivityListId");

                    b.HasIndex(new[] { "ActivityDesc", "ProgramId", "RecordType", "Active" }, "ActivityDesc_ProgramID_RecordType_Active_Includes");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "Active" }, "ProgramActivityDesc");

                    b.ToTable("SR_ActivityList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrAlternateCoveragePlan", b =>
                {
                    b.Property<int>("CoverageResearchId")
                        .HasColumnType("int")
                        .HasColumnName("CoverageResearchID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CoveragePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoveragePlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoveragePlanId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Deductible")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DrugCap")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("InsuranceCompany")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceParentCompany")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("OutOfPocket")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PlanType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool?>("Rxbenefits")
                        .HasColumnType("bit")
                        .HasColumnName("RXBenefits");

                    b.Property<int?>("Term")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CoverageResearchId")
                        .HasName("PK_CoveragePlanID");

                    b.ToTable("SR_AlternateCoveragePlans", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrAlternateCoverageResearch", b =>
                {
                    b.Property<int>("CoverageResearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoverageResearchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoverageResearchId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<decimal?>("AnnualGrossIncome")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool?>("AppliedStateFedProgram")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FamilySize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FoundDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("LegallyDisabled")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ResidenceState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("SearchDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("CoverageResearchId")
                        .HasName("PK_CoverageResearchID");

                    b.ToTable("SR_AlternateCoverageResearch", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrAssignment", b =>
                {
                    b.Property<int>("SrAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_AssignmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrAssignmentId"));

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrAssignmentId");

                    b.HasIndex(new[] { "ServiceRequestId", "ProgramId", "Deleted", "Rank" }, "<IX_SR_Assignments>");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_SR_Assignments_Program");

                    b.ToTable("SR_Assignments", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrBridgeEligibility", b =>
                {
                    b.Property<int>("SrBridgeEligibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_BridgeEligibilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrBridgeEligibilityId"));

                    b.Property<DateTime?>("AppealDenialDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DenialEnteredBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DenialReason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ExceptionApplied")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ExtEndDate")
                        .HasColumnType("date");

                    b.Property<string>("ExtStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExtStatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ExtStatusDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MedicalExpense")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("OveriddenBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OverrideBisrid")
                        .HasColumnType("int")
                        .HasColumnName("Override_BISRID");

                    b.Property<DateTime?>("OverrideDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("OverrideExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("Override_ExpirationDate");

                    b.Property<string>("OverrideNotes")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("Override_Notes");

                    b.Property<string>("OverrideReason")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Override_Reason");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("PreEligibilityDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrBridgeEligibilityId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("SR_BridgeEligibility", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrBridgeEligibilityAuditLog", b =>
                {
                    b.Property<int>("SrBridgeEligibilityAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_BridgeEligibility_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrBridgeEligibilityAuditLogId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ExceptionApplied")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MedicalExpense")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("PreEligibilityDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrBridgeEligibilityId")
                        .HasColumnType("int")
                        .HasColumnName("SR_BridgeEligibilityID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrBridgeEligibilityAuditLogId")
                        .HasName("PK__SR_Bridg__3F8620403AF9E1CF");

                    b.ToTable("SR_BridgeEligibility_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrBridgeExtension", b =>
                {
                    b.Property<int>("SrBridgeExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_BridgeExtensionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrBridgeExtensionId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly>("RequestedDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("StatusDate")
                        .HasColumnType("date");

                    b.HasKey("SrBridgeExtensionId");

                    b.HasIndex(new[] { "ServiceRequestId", "ProgramId", "Deleted" }, "IX_SR_BridgeExtensions");

                    b.ToTable("SR_BridgeExtensions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrBridgeExtensionsAuditLog", b =>
                {
                    b.Property<int>("SrBridgeExtensionAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_BridgeExtension_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrBridgeExtensionAuditLogId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly>("RequestedDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrBridgeExtensionId")
                        .HasColumnType("int")
                        .HasColumnName("SR_BridgeExtensionID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("StatusDate")
                        .HasColumnType("date");

                    b.HasKey("SrBridgeExtensionAuditLogId")
                        .HasName("PK__SR_Bridg__82A4DF2A3ECA72B3");

                    b.ToTable("SR_BridgeExtensions_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCallLog", b =>
                {
                    b.Property<int>("SrCallLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_CallLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCallLogId"));

                    b.Property<DateTime>("CallLogDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrActivityListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    b.Property<int?>("SrNoteId")
                        .HasColumnType("int")
                        .HasColumnName("SR_NoteID");

                    b.HasKey("SrCallLogId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("SrActivityListId");

                    b.ToTable("SR_CallLogs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCopayClaim", b =>
                {
                    b.Property<int>("SrCopayClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_CopayClaimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCopayClaimId"));

                    b.Property<DateTime?>("ApiDateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("API_DateCreated");

                    b.Property<DateTime?>("ApiDateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("API_DateModified");

                    b.Property<decimal?>("BenefitAmount")
                        .HasColumnType("money");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConfirmationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CopayCardNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DaysSupplied")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Dose")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("EobonFile")
                        .HasColumnType("bit")
                        .HasColumnName("EOBOnFile");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateOnly?>("PaidDate")
                        .HasColumnType("date");

                    b.Property<string>("PatientExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PracticeExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PrescriptionFillDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PrescriptionNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProductNDC");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReimbursementType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResponseAdjustedClaimNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_AdjustedClaimNumber");

                    b.Property<string>("ResponseApsindicator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_APSIndicator");

                    b.Property<string>("ResponseBasisofReimbursement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_BasisofReimbursement");

                    b.Property<string>("ResponseClaimNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ClaimNumber");

                    b.Property<decimal?>("ResponseCopayAmount")
                        .HasColumnType("money")
                        .HasColumnName("Response_CopayAmount");

                    b.Property<string>("ResponseDateWritten")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DateWritten");

                    b.Property<string>("ResponseDateofFill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DateofFill");

                    b.Property<string>("ResponseDawcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DAWCode");

                    b.Property<string>("ResponseDaysSupply")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DaysSupply");

                    b.Property<string>("ResponseDea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DEA");

                    b.Property<string>("ResponseDispensingFeePaid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DispensingFeePaid");

                    b.Property<string>("ResponseDrugDosageForm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DrugDosageForm");

                    b.Property<string>("ResponseDrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DrugName");

                    b.Property<string>("ResponseDrugStrength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_DrugStrength");

                    b.Property<string>("ResponseEobFlag")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_EOB_Flag");

                    b.Property<string>("ResponseImsid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_IMSID");

                    b.Property<string>("ResponseIqviatransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_IQVIATransactionID");

                    b.Property<string>("ResponseMailOrderIndicator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_MailOrderIndicator");

                    b.Property<string>("ResponseNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_NDC");

                    b.Property<string>("ResponseNewRefillCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_New_RefillCode");

                    b.Property<string>("ResponseNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_NPI");

                    b.Property<string>("ResponseNumberofBenefits")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_NumberofBenefits");

                    b.Property<string>("ResponseNumberofRefills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_NumberofRefills");

                    b.Property<string>("ResponseOrganizationNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_OrganizationNPI");

                    b.Property<string>("ResponseOtherCoverage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_OtherCoverage");

                    b.Property<string>("ResponsePaidQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PaidQuantity");

                    b.Property<string>("ResponsePdrp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PDRP");

                    b.Property<string>("ResponsePharmacyGroupCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PharmacyGroupCode");

                    b.Property<string>("ResponsePharmacyNabpnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PharmacyNABPNumber");

                    b.Property<string>("ResponsePharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PharmacyName");

                    b.Property<string>("ResponsePrescriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrescriberFirstName");

                    b.Property<string>("ResponseReceivedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ReceivedDate");

                    b.Property<string>("ResponseRxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RxNumber");

                    b.Property<string>("ResponseRxOriginCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RxOriginCode");

                    b.Property<string>("ResponseSubmissionMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_SubmissionMethod");

                    b.Property<string>("ResponseTraditionalCardSpend")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_TraditionalCardSpend");

                    b.Property<string>("ResponseUsualandCustomaryAmount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_UsualandCustomaryAmount");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("SubmittedCopay")
                        .HasColumnType("money");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrCopayClaimId")
                        .HasName("PK__SR_Copay__5ACABD1749862FC6");

                    b.ToTable("SR_CopayClaim", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCopayPayment", b =>
                {
                    b.Property<int>("SrCopayPaymentRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_CopayPaymentRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCopayPaymentRecordId"));

                    b.Property<decimal?>("AvailableBalance")
                        .HasColumnType("money");

                    b.Property<string>("Binnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BINNumber");

                    b.Property<decimal?>("CheckAmount")
                        .HasColumnType("money");

                    b.Property<string>("CopayCardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("EndDateofService")
                        .HasColumnType("date");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GroupID");

                    b.Property<decimal?>("InjectionGuidanceCost")
                        .HasColumnType("money");

                    b.Property<decimal?>("InjectionProcedureCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MedicationCost")
                        .HasColumnType("money");

                    b.Property<int>("ParentSrid")
                        .HasColumnType("int")
                        .HasColumnName("ParentSRID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<decimal?>("PatientResponsibility")
                        .HasColumnType("money");

                    b.Property<int?>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("PayeeID");

                    b.Property<string>("PayeeType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Pcnnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCNNumber");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<DateOnly?>("StartDateofService")
                        .HasColumnType("date");

                    b.Property<decimal?>("TotalDeduction")
                        .HasColumnType("money");

                    b.Property<string>("W9onFile")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("W9OnFile");

                    b.HasKey("SrCopayPaymentRecordId");

                    b.ToTable("SR_CopayPayments", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCopayPaymentEob", b =>
                {
                    b.Property<int>("SrCopayPaymentEobid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_CopayPaymentEOBID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCopayPaymentEobid"));

                    b.Property<string>("BillingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("ClaimTypeAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ClaimTypeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ClaimTypePaymentNumber")
                        .HasColumnType("int");

                    b.Property<string>("CopayCardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("DateOfService")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EfOverrideBisrid")
                        .HasColumnType("int")
                        .HasColumnName("EF_Override_BISRID");

                    b.Property<DateOnly?>("EfOverrideDate")
                        .HasColumnType("date")
                        .HasColumnName("EF_Override_Date");

                    b.Property<DateOnly?>("EfOverrideExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("EF_Override_ExpirationDate");

                    b.Property<string>("EfOverrideNotes")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("EF_Override_Notes");

                    b.Property<string>("EfOverrideReason")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EF_Override_Reason");

                    b.Property<string>("EoblineStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EOBLineStatus");

                    b.Property<DateOnly>("EobreceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("EOBReceivedDate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("OriginalBilledAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("PatientCopayAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("PatientDueAmount")
                        .HasColumnType("money");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("PayeeID");

                    b.Property<string>("PayeeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerMessage")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("PrimaryPlanPaidAmount")
                        .HasColumnType("money");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalApprovedAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalCopayRequestedAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalDueAmount")
                        .HasColumnType("money");

                    b.HasKey("SrCopayPaymentEobid");

                    b.ToTable("SR_CopayPaymentEOB", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCopayRecord", b =>
                {
                    b.Property<int>("SrCopayRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_Copay_Record_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCopayRecordId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApiPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("API_PatientID");

                    b.Property<string>("Binnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BINNumber");

                    b.Property<DateOnly?>("ClaimEligibilityDate")
                        .HasColumnType("date");

                    b.Property<string>("CopayCardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DeactivatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeactivatedReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EfOverrideBisrid")
                        .HasColumnType("int")
                        .HasColumnName("EF_Override_BISRID");

                    b.Property<DateOnly?>("EfOverrideDate")
                        .HasColumnType("date")
                        .HasColumnName("EF_Override_Date");

                    b.Property<DateOnly?>("EfOverrideExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("EF_Override_ExpirationDate");

                    b.Property<string>("EfOverrideNotes")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("EF_Override_Notes");

                    b.Property<string>("EfOverrideReason")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EF_Override_Reason");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsVendorCopayCard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicalBinnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MedicalBINNumber");

                    b.Property<string>("MedicalGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MedicalGroupID");

                    b.Property<string>("MedicalMemberNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicalPcnnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MedicalPCNNumber");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Pcnnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCNNumber");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalApproved")
                        .HasColumnType("money");

                    b.HasKey("SrCopayRecordId");

                    b.ToTable("SR_Copay_Records", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCopayRecordsAuditLog", b =>
                {
                    b.Property<int>("SrCopayRecordsAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_Copay_Records_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCopayRecordsAuditLogId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApiPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("API_PatientID");

                    b.Property<string>("Binnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BINNumber");

                    b.Property<string>("CopayCardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DeactivatedDate")
                        .HasColumnType("date");

                    b.Property<string>("DeactivatedReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EfOverrideBisrid")
                        .HasColumnType("int")
                        .HasColumnName("EF_Override_BISRID");

                    b.Property<DateOnly?>("EfOverrideDate")
                        .HasColumnType("date")
                        .HasColumnName("EF_Override_Date");

                    b.Property<DateOnly?>("EfOverrideExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("EF_Override_ExpirationDate");

                    b.Property<string>("EfOverrideNotes")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("EF_Override_Notes");

                    b.Property<string>("EfOverrideReason")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EF_Override_Reason");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsVendorCopayCard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Pcnnumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCNNumber");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrCopayRecordId")
                        .HasColumnType("int")
                        .HasColumnName("SR_Copay_Record_ID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalApproved")
                        .HasColumnType("money");

                    b.HasKey("SrCopayRecordsAuditLogId")
                        .HasName("PK__SR_Copay__06E9F87A2688D4CE");

                    b.ToTable("SR_Copay_Records_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCopayRecordsErrorLog", b =>
                {
                    b.Property<int>("SrCopayRecordsErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_Copay_Records_ErrorLog_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrCopayRecordsErrorLogId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Apiresponse")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APIResponse");

                    b.Property<string>("CardStatus")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CopayCardId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ErrorMessage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("SrCopayRecordsErrorLogId");

                    b.ToTable("SR_Copay_Records_ErrorLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrDate", b =>
                {
                    b.Property<int>("SrDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_DateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrDateId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<bool?>("Na")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("NA");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrDateId");

                    b.HasIndex("LookupDataListId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "ServiceRequestId" }, "IX_SR_Dates_ProgramID");

                    b.ToTable("SR_Dates", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrEEnrollment", b =>
                {
                    b.Property<int>("SrEEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_eEnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrEEnrollmentId"));

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ERxReferenceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("eRxReferenceNumber");

                    b.Property<string>("ERxStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("eRxStatus");

                    b.Property<int>("EnrollmentSrid")
                        .HasColumnType("int")
                        .HasColumnName("Enrollment_SRID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("TriageSrid")
                        .HasColumnType("int")
                        .HasColumnName("TriageSRID");

                    b.HasKey("SrEEnrollmentId");

                    b.HasIndex("EnrollmentSrid");

                    b.HasIndex("TriageSrid");

                    b.HasIndex(new[] { "PatientId", "ProgramId", "Deleted" }, "IX_SR_eEnrollments");

                    b.ToTable("SR_eEnrollments", null, t =>
                        {
                            t.HasTrigger("TR_SR_eEnrollments_Audit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrEEnrollmentsAudit", b =>
                {
                    b.Property<int>("SrEEnrollmentsAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_eEnrollments_AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrEEnrollmentsAuditId"));

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ERxReferenceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("eRxReferenceNumber");

                    b.Property<string>("ERxStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("eRxStatus");

                    b.Property<int>("EnrollmentSrid")
                        .HasColumnType("int")
                        .HasColumnName("Enrollment_SRID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrEEnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("SR_eEnrollmentID");

                    b.Property<int?>("TriageSrid")
                        .HasColumnType("int")
                        .HasColumnName("TriageSRID");

                    b.HasKey("SrEEnrollmentsAuditId");

                    b.ToTable("SR_eEnrollments_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrFaq", b =>
                {
                    b.Property<int>("SrFaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_FaqID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrFaqId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FaqListId")
                        .HasColumnType("int")
                        .HasColumnName("FaqListID");

                    b.Property<bool>("FaqSelected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrFaqId");

                    b.HasIndex("FaqListId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("SR_FAQs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrFeedbackTrackingAuditLog", b =>
                {
                    b.Property<string>("CallerStatisfaction")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CallerType")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateOfFeedback")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FeedbackResolutionDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IssueResolved")
                        .HasColumnType("bit");

                    b.Property<int>("IssueSubType")
                        .HasColumnType("int");

                    b.Property<int>("IssueType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrFeedbackTrackingAuditLogId")
                        .HasColumnType("int")
                        .HasColumnName("SR_FeedbackTracking_AuditLogID");

                    b.Property<int?>("SrFeedbackTrackingId")
                        .HasColumnType("int")
                        .HasColumnName("SR_FeedbackTrackingID");

                    b.Property<int?>("VoyagerId")
                        .HasColumnType("int")
                        .HasColumnName("VoyagerID");

                    b.ToTable("SR_FeedbackTracking_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrIncompleteReason", b =>
                {
                    b.Property<int>("SrIncompleteReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_IncompleteReasonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrIncompleteReasonId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrIncompleteReasonId");

                    b.HasIndex("LookupDataListId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("SR_IncompleteReasons", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataCptCode", b =>
                {
                    b.Property<int>("SrMedOffRampDataCptCodesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataCptCodesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataCptCodesId"));

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<string>("CptCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cptCode");

                    b.Property<string>("CptCodeDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrMedOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.HasKey("SrMedOffRampDataCptCodesId")
                        .HasName("Pk_SR_MedOffRampDataCptCodes_SR_MedOffRampDataCptCodesId");

                    b.HasIndex("SrOffRampId");

                    b.HasIndex(new[] { "SrMedOffRampDataId", "SrOffRampId", "Deleted", "ProgramId" }, "IX_NCI_SR_MedRDCC_OfframpId_ProgramID_OffRampDataID_Deleted");

                    b.ToTable("SR_MedOffRampDataCptCodes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataDiagnosis", b =>
                {
                    b.Property<int>("SrMedOffRampDataDiagnosesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataDiagnosesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataDiagnosesId"));

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiagnosisCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrMedOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.HasKey("SrMedOffRampDataDiagnosesId")
                        .HasName("Pk_SR_MedOffRampDataDiagnoses_SR_MedOffRampDataDiagnosesId");

                    b.HasIndex("SrOffRampId");

                    b.HasIndex(new[] { "SrMedOffRampDataId", "SrOffRampId", "Deleted", "ProgramId" }, "IX_NCI_SRMRDD_OFFRAMPID_PROGRAMID_DELETE");

                    b.ToTable("SR_MedOffRampDataDiagnoses", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicy", b =>
                {
                    b.Property<int>("SrMedOffRampDataPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataPolicyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataPolicyId"));

                    b.Property<string>("AccumulatorDetailsAfterOopisMetServicesCovered100Percent")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("AccumulatorDetailsAfterOOPIsMetServicesCovered100Percent");

                    b.Property<string>("AccumulatorDetailsDeductibleAppliesToOop")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("AccumulatorDetailsDeductibleAppliesToOOP");

                    b.Property<string>("AccumulatorDetailsDeductibleFamilyAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsDeductibleIndividualAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsDeductibleIndividualAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxFamilyAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxFamilyAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxIndividualAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxIndividualAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsdseductibleFamilyAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BenefitVerificationTransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("benefitVerificationTransactionDate");

                    b.Property<string>("BenefitVerificationTransactionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ConnectPayerPhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugRequirementsBuyBillPermitted")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPredeterminationAvailable")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPredeterminationRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPriorAuthorizationChannel")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DrugRequirementsPriorAuthorizationEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DrugRequirementsPriorAuthorizationEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugRequirementsPriorAuthorizationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPriorTherapyRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyAvailable")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsTherapyRestrictionNotes")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsisPriorAuthorizationOnFile")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementspriorAuthorizationRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("GovernmentPlanDetected")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("governmentPlanDetected");

                    b.Property<string>("GovernmentPolicyType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("governmentPolicyType");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedEPayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Med_ePayerID");

                    b.Property<string>("MedicalPolicy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsCoInsApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsCoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OfficeVisitDetailsCopayApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsPcpCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsSpecialistCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("PayerPhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PolicyHighLevelInfoConnectPayerOptionCode")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("PolicyHighLevelInfoEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PolicyHighLevelInfoEligibilityStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PolicyHighLevelInfoEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PolicyHighLevelInfoGroupName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoGroupNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualCallRef")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualGroupName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualGroupNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("PolicyHighLevelInfoManualMedicalInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyHighLevelInfoManualNetworkStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PolicyHighLevelInfoManualPayerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualPayerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualPayerType1")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualPlanName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualPlanType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoManualPlanTypeDetail3")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PolicyHighLevelInfoManualPlanTypeDetail4")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PolicyHighLevelInfoManualPlanTypeDetail5")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PolicyHighLevelInfoPayerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPayerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPayerType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPlanName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPlanType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyKeyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyMessageContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("policyMessageContent");

                    b.Property<string>("PolicyMessageId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("policyMessageId");

                    b.Property<string>("PolicyOutcomeKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PolicyStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolicyType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductStatusDetailsCoInsApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductStatusDetailsCopayApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsPcpCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsSpecialistCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailscoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("SrMedOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.Property<string>("VerifiedWith")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("SrMedOffRampDataPolicyId")
                        .HasName("Pk_SR_MedOffRampDataPolicyNEW_SR_MedOffRampDataPolicyId");

                    b.HasIndex("SrMedOffRampDataId");

                    b.HasIndex("SrOffRampId");

                    b.HasIndex(new[] { "Deleted", "SrOffRampId", "PolicyType", "ProgramId" }, "IX_NCI_SRMORDP_Deleted");

                    b.ToTable("SR_MedOffRampDataPolicy", null, t =>
                        {
                            t.HasTrigger("tr_SR_MedOffRampDataPolicy_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicyAuditLog", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PolicyHighLevelInfoEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PolicyHighLevelInfoEligibilityStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int?>("SrMedOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    b.Property<int?>("SrMedOffRampDataPolicyId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataPolicyId");

                    b.Property<int?>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.HasKey("RecordId");

                    b.ToTable("SR_MedOffRampDataPolicy_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicyCptCodesDetail", b =>
                {
                    b.Property<int>("SrMedOffRampDataPolicyCptCodesDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataPolicyCptCodesDetailsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataPolicyCptCodesDetailsId"));

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<string>("CptCodeDetailsCoInsApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailsCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CptCodeDetailsCopayApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailsPcpCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailsSpecialistCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CptCodeDetailscoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrMedOffRampDataPolicyId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataPolicyId");

                    b.HasKey("SrMedOffRampDataPolicyCptCodesDetailsId")
                        .HasName("Pk_SR_MedOffRampDataPolicyCptCodesDetails_SR_MedOffRampDataPolicyCptCodesDetailsId");

                    b.HasIndex(new[] { "SrMedOffRampDataPolicyId" }, "IX_NCI_SEMedORDPCCD_DataPolicyId");

                    b.ToTable("SR_MedOffRampDataPolicyCptCodesDetails", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicyResultClientSpecificItem", b =>
                {
                    b.Property<int>("SrMedOffRampDataPolicyResultClientSpecificItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataPolicyResultClientSpecificItemsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataPolicyResultClientSpecificItemsId"));

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrMedOffRampDataPolicyId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataPolicyId");

                    b.Property<string>("Type")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SrMedOffRampDataPolicyResultClientSpecificItemsId")
                        .HasName("Pk_SR_MedOffRampDataPolicyResultClientSpecificItems_SR_MedOffRampDataPolicyResultClientSpecificItemsId");

                    b.HasIndex("SrMedOffRampDataPolicyId");

                    b.ToTable("SR_MedOffRampDataPolicyResultClientSpecificItems", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataRequestPoliciesTmp", b =>
                {
                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientIsSubscriber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PayerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PriorAuthorizationEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PriorAuthorizationEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PriorAuthorizationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PriorAuthorizationOnFile")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PriorAuthorizationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrMedOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    b.Property<int>("SrMedOffRampDataRequestPoliciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataRequestPoliciesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataRequestPoliciesId"));

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.Property<DateTime?>("SubscriberDateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("SubscriberFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberGender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SubscriberLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberMemberId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberMiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberPrefix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberSuffix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.ToTable("SR_MedOffRampDataRequestPoliciesTmp", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataRequestPolicy", b =>
                {
                    b.Property<int>("SrMedOffRampDataRequestPoliciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataRequestPoliciesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataRequestPoliciesId"));

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ClientPayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientPayerID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientIsSubscriber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PayerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PriorAuthorizationEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PriorAuthorizationEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PriorAuthorizationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PriorAuthorizationOnFile")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PriorAuthorizationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrMedOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.Property<DateTime?>("SubscriberDateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("SubscriberFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberGender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SubscriberLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberMemberId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberMiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberPrefix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberSuffix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubscriberTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SrMedOffRampDataRequestPoliciesId")
                        .HasName("Pk_SR_MedOffRampDataRequestPolicies_SR_MedOffRampDataRequestPoliciesId");

                    b.HasIndex("SrMedOffRampDataId");

                    b.HasIndex("SrOffRampId");

                    b.HasIndex(new[] { "Deleted", "SrMedOffRampDataId", "SrOffRampId", "PolicyType" }, "IX_NCI_SRMedORDRP_Deleted_OfframpId_ProgramID_PolicyType_PayerName");

                    b.ToTable("SR_MedOffRampDataRequestPolicies", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDatum", b =>
                {
                    b.Property<int>("SrMedOffRampDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_MedOffRampDataId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrMedOffRampDataId"));

                    b.Property<string>("AccumulatorDetailsDeductibleFamilyAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsDeductibleIndividualAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsDeductibleIndividualAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxFamilyAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxFamilyAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxIndividualAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsOopMaxIndividualAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccumulatorDetailsdseductibleFamilyAmountMet")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("AlternateCoverageReferral")
                        .HasColumnType("bit");

                    b.Property<string>("CallingTransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CallingTransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CobSummaryAdminAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummaryDeductibleRemaining")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummaryOfficeVisitAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummaryProductAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CobSummarycoordinatedPlanBenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CobSummarymedicareSupplementLetter")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("CopayProgramReferral")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DataserviceRequested")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DateOfService")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugRequirementsBuyBillPermitted")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPredeterminationAvailable")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPredeterminationRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPriorAuthorizationChannel")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DrugRequirementsPriorAuthorizationEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DrugRequirementsPriorAuthorizationEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrugRequirementsPriorAuthorizationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsPriorTherapyRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyAvailable")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DrugRequirementsSpecialtyPharmacyRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsTherapyRestrictionNotes")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementsisPriorAuthorizationOnFile")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DrugRequirementspriorAuthorizationRequired")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EscalationReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExternalCaseId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalCaseId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalCaseId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalPatientId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalPatientId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalPatientId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalPracticeId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalPracticeId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalPracticeId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalProviderId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalProviderId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalProviderId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManualBvRequestId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ManualBvResponseId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MedEbvOffRampStatus")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("MedEbvResponseId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("MedEbvResponseStatus")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("MedEbvResponseTypeCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedEbvResponseTypeCodeFinal")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedEbvResponseTypeMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedicationDaysSupply")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicationJcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MedicationJCode");

                    b.Property<string>("MedicationManufactureName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicationNdc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MedicationNDC");

                    b.Property<string>("MedicationProductName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicationQuantity")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("NextScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NonDuplicationCoverage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficeVisitDetailsCoInsApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsCoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsCopayApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsPcpCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsSpecialistCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeVisitDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("OtherCoverageAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OtherCoverageEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherCoverageMemberId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("OtherCoverageMemberID");

                    b.Property<string>("OtherCoverageName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OtherCoverageResultBenefitVerificationTransactionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OtherCoverageResultGovernmentPlanDetected")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OtherCoverageResultGovernmentPolicyType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OtherCoverageResultMedicalPolicy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OtherCoverageResultPolicyMessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCoverageResultPolicyMessageId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("OtherCoverageResultbenefitVerificationTransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OutcomeKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OutcomeKeyDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PatientDob")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientMedicareId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientPrefix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PatientState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatientSubscriberId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientSuffix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PatientZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime?>("PolicyHighLevelInfoEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PolicyHighLevelInfoEligibilityStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PolicyHighLevelInfoEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PolicyHighLevelInfoGroupName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoGroupNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPayerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPayerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPayerType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPlanName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PolicyHighLevelInfoPlanType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeAddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PracticeCIty");

                    b.Property<string>("PracticeCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PracticeEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PracticeExternalOrganizationId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticeExternalOrganizationId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticeExternalOrganizationId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PracticeFaxDoNotFax")
                        .HasColumnType("bit");

                    b.Property<string>("PracticeFaxNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticeFaxType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticeFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeLegalName")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("PracticeMiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("PracticeNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PracticeOrganizationAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeOrganizationAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeOrganizationAddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeOrganizationCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PracticeOrganizationCIty");

                    b.Property<string>("PracticeOrganizationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PracticeOrganizationEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PracticeOrganizationLegalName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeOrganizationName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeOrganizationNpi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PracticeOrganizationNPI");

                    b.Property<string>("PracticeOrganizationState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PracticeOrganizationTaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticeOrganizationWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PracticeOrganizationZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PracticePhoneExtension")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticePhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticePhoneType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PracticePlaceOfService")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("PracticePracticeOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PracticePrefix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PracticeSuffix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PracticeWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PracticeZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ProductStatusDetailsCoInsApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsCopayApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsDeductibleApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsOopMaxApplies")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsPcpCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsSpecialistCopayAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailsStatus")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductStatusDetailscoInsuranceAmount")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderExternalPracticeId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderExternalPracticeId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderExternalPracticeId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderMiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderPracticeAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderPracticeAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderPracticeAddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderPracticeCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderPracticeEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderPracticeExternalOrganizationId1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeExternalOrganizationId2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeExternalOrganizationId3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeExternalOrganizationLegalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeExternalOrganizationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeExternalOrganizationNpi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProviderPracticeExternalOrganizationNPI");

                    b.Property<string>("ProviderPracticeExternalOrganizationTaxId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPracticeFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("ProviderPracticeId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderPracticeLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderPracticeLegalName")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("ProviderPracticeMiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderPracticeName")
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<string>("ProviderPracticeNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderPracticeOrganizationAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderPracticeOrganizationAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderPracticeOrganizationAddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderPracticeOrganizationCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProviderPracticeOrganizationCIty");

                    b.Property<string>("ProviderPracticeOrganizationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderPracticeOrganizationEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderPracticeOrganizationState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderPracticeOrganizationWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderPracticeOrganizationZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ProviderPracticePlaceOfService")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("ProviderPracticePracticeOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderPracticePrefix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderPracticeState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderPracticeSuffix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderPracticeTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderPracticeWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderPracticeZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ProviderPrefix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderSpecialty")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ProviderSuffix")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderTexId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProviderTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsApplicationName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RequestingPartyDetailsEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsFax")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsFirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsLastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsPhone")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsPhoneType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RequestingPartyDetailsUserName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ResponseDataElectronicBenefitVerificationReport")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ResponseDataelElectronicBenefitVerificationReportType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool?>("Result")
                        .HasColumnType("bit");

                    b.Property<string>("SecondaryCoordinateBenefits")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryCopayOopmax")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SecondaryCopayOOPMax");

                    b.Property<string>("SecondaryCoverPartBdeductible")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryOfficeVisitCopayApply")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryfollowMedicareguidelines")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.Property<string>("TransactionRequestId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TransactionResponseId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("SrMedOffRampDataId")
                        .HasName("Pk_SR_MedOffRampDataNew_SR_MedOffRampDataId");

                    b.HasIndex(new[] { "SrOffRampId" }, "UIDX_SR_MedOffRampDataNew_SR_OffRampId")
                        .IsUnique();

                    b.ToTable("SR_MedOffRampData", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMessage", b =>
                {
                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateOnly>("MessageDate")
                        .HasColumnType("date");

                    b.Property<bool>("MessageRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageSource")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrMessageId")
                        .HasColumnType("int")
                        .HasColumnName("SR_MessageID");

                    b.ToTable("SR_Messages", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMessageThread", b =>
                {
                    b.Property<int>("SrThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_ThreadID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrThreadId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("ThreadID");

                    b.HasKey("SrThreadId")
                        .HasName("PK_SR_Threads");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("ThreadId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "IX_SR_Threads_Programs");

                    b.HasIndex(new[] { "ProgramId", "ThreadId", "Deleted" }, "ProgramSRID");

                    b.ToTable("SR_MessageThreads", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNote", b =>
                {
                    b.Property<int>("SrNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_NoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrNoteId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("NoteAfterSrclosed")
                        .HasColumnType("bit")
                        .HasColumnName("NoteAfterSRClosed");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Unlocked")
                        .HasColumnType("datetime");

                    b.Property<string>("UnlockedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrNoteId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "ServiceRequestId" }, "SR_Notes_ProgramID");

                    b.ToTable("SR_Notes", null, t =>
                        {
                            t.HasTrigger("tr_update_sr_notes");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNoteHistory", b =>
                {
                    b.Property<int>("SrNoteHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_NoteHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrNoteHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("NoteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrNoteId")
                        .HasColumnType("int")
                        .HasColumnName("SR_NoteID");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("SrNoteHistoryId")
                        .HasName("PK_SR_NoteHistory_1");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("SrNoteId");

                    b.ToTable("SR_NoteHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNursingActivity", b =>
                {
                    b.Property<int>("SrNursingActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_NursingActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrNursingActivityId"));

                    b.Property<string>("AcceptedEducationVisit")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ActivityCompletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActivityDueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ActivityDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ActivityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ActivityID");

                    b.Property<string>("ActivityMode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("AdjustedLevo")
                        .HasColumnType("bit");

                    b.Property<string>("AnsweredDocumentedQuestions")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("AskedPatientCall")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("AutomatedFollowUpCreated")
                        .HasColumnType("bit");

                    b.Property<bool?>("BothersomeDyskinesia")
                        .HasColumnType("bit");

                    b.Property<int?>("CartridgesOnHand")
                        .HasColumnType("int");

                    b.Property<string>("CartrigesOrdered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CartrigesReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("CoMorbitidties")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Dose")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DrugAdministered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ExplainedOrders")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FrequencyInterval")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FrequencyMin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ImpairedRenalFunction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicationReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("MedicationRefill")
                        .HasColumnType("bit");

                    b.Property<string>("NeedlesReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("OfficeSubmitMaintenance")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("OptimalUse")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("PatExpressedFinancialConcern")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientKitReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PenPakOrdered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PenPakReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PredefinedComments")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RelatedTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SetExpectations")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SharpsReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("Somnolence")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("SuppliesRefill")
                        .HasColumnType("bit");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.Property<string>("SwabsReveived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TiganReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("TravelTimeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("SrNursingActivityId")
                        .HasName("PK__SR_Nursi__CB9F1DE643B7AE54");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "Status" }, "<SR_NursingActivity_SRIDPatientIDActivity>");

                    b.ToTable("SR_NursingActivity", null, t =>
                        {
                            t.HasTrigger("tr_update_sr_nursingactivity");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNursingActivityHistory", b =>
                {
                    b.Property<int>("SrNursingActivityHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_NursingActivity_HistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrNursingActivityHistoryId"));

                    b.Property<string>("AcceptedEducationVisit")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ActivityCompletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActivityDueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ActivityDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ActivityMode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("AdjustedLevo")
                        .HasColumnType("bit");

                    b.Property<string>("AnsweredDocumentedQuestions")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("AskedPatientCall")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("AutomatedFollowUpCreated")
                        .HasColumnType("bit");

                    b.Property<bool?>("BothersomeDyskinesia")
                        .HasColumnType("bit");

                    b.Property<int?>("CartridgesOnHand")
                        .HasColumnType("int");

                    b.Property<string>("CartrigesOrdered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CartrigesReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("CoMorbitidties")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Dose")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DrugAdministered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ExplainedOrders")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FrequencyInterval")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FrequencyMin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("HistoryCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("HistoryCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ImpairedRenalFunction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicationReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("MedicationRefill")
                        .HasColumnType("bit");

                    b.Property<string>("NeedlesReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("OfficeSubmitMaintenance")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("OptimalUse")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("PatExpressedFinancialConcern")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientKitReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PenPakOrdered")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PenPakReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RelatedTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SetExpectations")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SharpsReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool?>("Somnolence")
                        .HasColumnType("bit");

                    b.Property<int>("SrNursingActivityId")
                        .HasColumnType("int")
                        .HasColumnName("SR_NursingActivityID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("SuppliesRefill")
                        .HasColumnType("bit");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.Property<string>("SwabsReveived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TiganReceived")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("TravelTimeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("SrNursingActivityHistoryId")
                        .HasName("PK__SR_Nursi__2BADC3F747883F38");

                    b.ToTable("SR_NursingActivity_History", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOffRamp", b =>
                {
                    b.Property<int>("SrOffRampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrOffRampId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("JsondataOriginal")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JSONDataOriginal");

                    b.Property<string>("JsondataOut")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JSONDataOut");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("NextInjectionDate")
                        .HasColumnType("date");

                    b.Property<int?>("OfframpClientId")
                        .HasColumnType("int")
                        .HasColumnName("OfframpClientID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ResponseSentSuccessfully")
                        .HasColumnType("bit");

                    b.Property<string>("SentBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SrOffRampType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SR_OffRampType");

                    b.HasKey("SrOffRampId");

                    b.HasIndex(new[] { "NextInjectionDate", "SrOffRampType" }, "NextInjectionDate_SR_OffRampType_Includes");

                    b.HasIndex(new[] { "ProgramId", "ServiceRequestId" }, "ProgramID_ServiceRequestID");

                    b.HasIndex(new[] { "ServiceRequestId" }, "ServiceRequestID_Includes");

                    b.HasIndex(new[] { "ServiceRequestId", "SrOffRampType" }, "ServiceRequestID_SR_OffRampType_Includes");

                    b.ToTable("SR_OffRamp", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOffRampHistory", b =>
                {
                    b.Property<int>("SrOffRampHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampHistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrOffRampHistoryId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<string>("Jsonresponse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JSONResponse");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ResponseSentSuccessfully")
                        .HasColumnType("bit");

                    b.Property<string>("SentBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.HasKey("SrOffRampHistoryId");

                    b.HasIndex("SrOffRampId");

                    b.ToTable("SR_OffRampHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOrderDetail", b =>
                {
                    b.Property<int>("SrOrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_OrderDetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrOrderDetailsId"));

                    b.Property<DateTime?>("ActivationExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("NumberOfMonths")
                        .HasColumnType("smallint");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("OrderSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientDeviceID");

                    b.Property<int>("PatientRxDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("PatientRxDetailsID");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool?>("PaymentReceived")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrOrderDetailsId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("SR_OrderDetails", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOrganization", b =>
                {
                    b.Property<int>("SrOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_OrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrOrganizationId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("SrOrganizationId")
                        .HasName("PK_SR_Orgnizations");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "ServiceRequestId", "ProgramId", "Deleted" }, "IX_NCI_SR_Org");

                    b.HasIndex(new[] { "ServiceRequestId" }, "IX_SR_Organizations");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "SR_Org");

                    b.ToTable("SR_Organizations", null, t =>
                        {
                            t.HasTrigger("TR_SR_Organizations");

                            t.HasTrigger("TR_SR_Organizations_Insert");

                            t.HasTrigger("TR_SR_Organizations_Update");

                            t.HasTrigger("Tr_SR_Organizations_Audit_Insert");

                            t.HasTrigger("Tr_SR_Organizations_Audit_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOrganizationsAudit", b =>
                {
                    b.Property<int>("SrOrganizationAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_OrganizationAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrOrganizationAuditId"));

                    b.Property<string>("Action")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ActionUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("SrOrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OrganizationID");

                    b.HasKey("SrOrganizationAuditId")
                        .HasName("PK_SR_Orgnizations_Audit");

                    b.ToTable("SR_Organizations_Audit", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPap", b =>
                {
                    b.Property<int>("SrPapid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPapid"));

                    b.Property<string>("Apimessage")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("APIMessage");

                    b.Property<DateOnly?>("AppealApprovalDate")
                        .HasColumnType("date");

                    b.Property<bool?>("AppealApproved")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("AppealRequestDate")
                        .HasColumnType("date");

                    b.Property<bool?>("AppealRequested")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AttReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BvreferralId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BVReferralID");

                    b.Property<string>("ClientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<string>("Comments")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DenialReason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EligibilityStatusDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ExceptionApplied")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateOnly?>("HardshipApprovalDate")
                        .HasColumnType("date");

                    b.Property<bool?>("HardshipApproved")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("HardshipRequestDate")
                        .HasColumnType("date");

                    b.Property<bool?>("HardshipRequested")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MedicalExpense")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Papstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPStatus");

                    b.Property<string>("Paptype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPType");

                    b.Property<DateOnly?>("PostmarkDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<string>("SecondApprovalReason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateOnly?>("SecondEligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<string>("SecondPapstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondPAPStatus");

                    b.Property<string>("SecondStatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SecondStatusDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("SentDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("TempEligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<string>("TempPapstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TempPAPStatus");

                    b.Property<string>("TempReason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TempStatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TempStatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("SrPapid");

                    b.HasIndex(new[] { "ServiceRequestId", "ProgramId", "Papstatus", "Deleted" }, "ServiceRequestID_ProgramID_PAPStatus_Deleted");

                    b.ToTable("SR_PAP", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPapAuditLog", b =>
                {
                    b.Property<int>("SrPapAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PAP_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPapAuditLogId"));

                    b.Property<DateOnly?>("AppealApprovalDate")
                        .HasColumnType("date");

                    b.Property<bool?>("AppealApproved")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("AppealRequestDate")
                        .HasColumnType("date");

                    b.Property<bool?>("AppealRequested")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AttReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BvreferralId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BVReferralID");

                    b.Property<string>("ClientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<string>("Comments")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("EligibilityEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EligibilityStatusDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ExceptionApplied")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("HardshipApprovalDate")
                        .HasColumnType("date");

                    b.Property<bool?>("HardshipApproved")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("HardshipRequestDate")
                        .HasColumnType("date");

                    b.Property<bool?>("HardshipRequested")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MedicalExpense")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Papstatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPStatus");

                    b.Property<string>("Paptype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPType");

                    b.Property<DateOnly?>("PostmarkDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("SentDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrPapid")
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPID");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("SrPapAuditLogId")
                        .HasName("PK__SR_PAP_A__136D874855ADD80B");

                    b.ToTable("SR_PAP_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPapbyTypeMapping", b =>
                {
                    b.Property<int>("SrPapbyTypeMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPByTypeMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPapbyTypeMappingId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("AllowNa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("AllowNA");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EligibilityQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("EligibilityQuestionID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaptypeId")
                        .HasColumnType("int")
                        .HasColumnName("PAPTypeID");

                    b.Property<string>("ProgramFunction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<decimal>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("SrPapbyTypeMappingId")
                        .HasName("PK_SR_PAPEligibilityQuestionsMappings.");

                    b.HasIndex("EligibilityQuestionId");

                    b.HasIndex("PaptypeId");

                    b.ToTable("SR_PAPByTypeMapping", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPappayment", b =>
                {
                    b.Property<int>("SrPappaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPPaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPappaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("CheckWrittenTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PayToPatient")
                        .HasColumnType("bit");

                    b.Property<int?>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("PayeeID");

                    b.Property<string>("PayeeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PaymentForDate")
                        .HasColumnType("date");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SrPappaymentScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPPaymentScheduleID");

                    b.Property<int?>("SrPapscheduledPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPScheduledPaymentID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<bool?>("Void")
                        .HasColumnType("bit");

                    b.HasKey("SrPappaymentId")
                        .HasName("PK_PAPPayments");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SrPapscheduledPaymentId");

                    b.ToTable("SR_PAPPayments", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPappaymentSchedule", b =>
                {
                    b.Property<int>("SrPappaymentScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPPaymentScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPappaymentScheduleId"));

                    b.Property<DateOnly>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("CheckWrittenTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PayToPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("PayeeID");

                    b.Property<string>("PayeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("money");

                    b.Property<string>("PaymentFrequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date");

                    b.HasKey("SrPappaymentScheduleId")
                        .HasName("PK_PAPPaymentSchedules");

                    b.HasIndex("ProgramId");

                    b.HasIndex("Srid");

                    b.ToTable("SR_PAPPaymentSchedules", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPapscheduledPayment", b =>
                {
                    b.Property<int>("SrPapscheduledPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPScheduledPaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPapscheduledPaymentId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("money");

                    b.Property<bool?>("PaymentCancelled")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<bool?>("PaymentGenerated")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrPappaymentScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("SR_PAPPaymentScheduleID");

                    b.HasKey("SrPapscheduledPaymentId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SrPappaymentScheduleId");

                    b.ToTable("SR_PAPScheduledPayments", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPharmacyEPaDetail", b =>
                {
                    b.Property<int>("SrPharmacyEPaDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_Pharmacy_ePA_DetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPharmacyEPaDetailsId"));

                    b.Property<string>("CmtxePaid")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CMTXePAID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DeadlineForReply")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EPadisposition")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ePADisposition");

                    b.Property<string>("EPanotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ePANotes");

                    b.Property<string>("EPastatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ePAStatus");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Ndc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NDC");

                    b.Property<int?>("NumberOfRefills")
                        .HasColumnType("int");

                    b.Property<string>("PaauthorizationNumber")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PAAuthorizationNumber");

                    b.Property<DateOnly?>("PaeffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("PAEffectiveDate");

                    b.Property<DateOnly?>("PaexpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("PAExpirationDate");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PharmacyType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReferToHubReason")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SureScriptsCaseId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SureScriptsCaseID");

                    b.HasKey("SrPharmacyEPaDetailsId")
                        .HasName("PK_SR_ePA");

                    b.ToTable("SR_Pharmacy_ePA_Details", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPhysician", b =>
                {
                    b.Property<int>("SrPhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_PhysicianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrPhysicianId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PhysicianAddressId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianAddressID");

                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SrPhysicianType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_PhysicianType");

                    b.HasKey("SrPhysicianId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex(new[] { "ServiceRequestId", "ProgramId", "Deleted" }, "IX_SR_Physicians_SRID_Program_Deleted");

                    b.HasIndex(new[] { "ProgramId", "SrPhysicianType", "Deleted" }, "ix_SR_Physicians_ProgramID_SR_PhysicianType_Deleted_includes");

                    b.ToTable("SR_Physicians", null, t =>
                        {
                            t.HasTrigger("TR_SR_Physicians");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrReferral", b =>
                {
                    b.Property<int>("SrReferralsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_ReferralsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrReferralsId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FoundationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReferralReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrReferralsId");

                    b.ToTable("SR_Referrals", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrReminder", b =>
                {
                    b.Property<int>("SrReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_ReminderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrReminderId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrReminderId")
                        .HasName("PK_Reminder");

                    b.ToTable("SR_Reminder", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRequiredField", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReqField")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReqFieldName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReqType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("Srtype")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SRType");

                    b.HasKey("RecordId");

                    b.ToTable("SR_RequiredFields", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDataPolicy", b =>
                {
                    b.Property<int>("SrRxOffRampDataPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_RxOffRampDataPolicyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrRxOffRampDataPolicyId"));

                    b.Property<bool?>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<string>("AmountsLtcCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsLtcCopay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsMailOrderCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsMailOrderCopay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsRetailCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsRetailCopay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsSpecialtyCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AmountsSpecialtyCopay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CoverageSummaryCoveragePhaseMessage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_CoveragePhaseMessage");

                    b.Property<string>("CoverageSummaryMail90CopayOrCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_CopayOrCoinsurance");

                    b.Property<string>("CoverageSummaryMail90CoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_CoverageStatus");

                    b.Property<string>("CoverageSummaryMail90DeductibleRemainingAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_DeductibleRemainingAmount");

                    b.Property<string>("CoverageSummaryMail90OopRemainingAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_OopRemainingAmount");

                    b.Property<string>("CoverageSummaryMail90PharmacyType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_PharmacyType");

                    b.Property<string>("CoverageSummaryMail90TotalPatientCost")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_TotalPatientCost");

                    b.Property<string>("CoverageSummaryMail90Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Mail90_Type");

                    b.Property<string>("CoverageSummaryPlanDeductibleAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_PlanDeductibleAmount");

                    b.Property<string>("CoverageSummaryPlanDeductibleAmountMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_PlanDeductibleAmountMet");

                    b.Property<string>("CoverageSummaryPlanOopamount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_PlanOOPAmount");

                    b.Property<string>("CoverageSummaryPlanOopamountMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_PlanOOPAmountMet");

                    b.Property<string>("CoverageSummaryRetail30CopayOrCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_CopayOrCoinsurance");

                    b.Property<string>("CoverageSummaryRetail30CoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_CoverageStatus");

                    b.Property<string>("CoverageSummaryRetail30DeductibleRemainingAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_DeductibleRemainingAmount");

                    b.Property<string>("CoverageSummaryRetail30OopRemainingAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_OopRemainingAmount");

                    b.Property<string>("CoverageSummaryRetail30PharmacyType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_PharmacyType");

                    b.Property<string>("CoverageSummaryRetail30TotalPatientCost")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_TotalPatientCost");

                    b.Property<string>("CoverageSummaryRetail30Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail30_Type");

                    b.Property<string>("CoverageSummaryRetail90CopayOrCoinsurance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_CopayOrCoinsurance");

                    b.Property<string>("CoverageSummaryRetail90CoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_CoverageStatus");

                    b.Property<string>("CoverageSummaryRetail90DeductibleRemainingAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_DeductibleRemainingAmount");

                    b.Property<string>("CoverageSummaryRetail90OopRemainingAmount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_OopRemainingAmount");

                    b.Property<string>("CoverageSummaryRetail90PharmacyType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_PharmacyType");

                    b.Property<string>("CoverageSummaryRetail90TotalPatientCost")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_TotalPatientCost");

                    b.Property<string>("CoverageSummaryRetail90Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CoverageSummary_Retail90_Type");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InsuranceStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LtcCoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MailOrderCoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<string>("PbmPlanType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanBinLocationNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanCoverageLimitationsPlanFormularyStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanCoverageLimitationsPlanPriorAuthorizationStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanCoverageLimitationsStepTherapyStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanGroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanGroupNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanPbmId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanPbmName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanPcnNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PriorAuthorizationStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProductDaysSupply")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RetailCoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SpecialtyCoverageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.Property<int>("SrRxOffRampDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_RxOffRampDataId");

                    b.Property<string>("SubscriberCardHolderId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubscriberPbmUniqueMemberId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubscriberPersonCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubscriberRelationship")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SrRxOffRampDataPolicyId")
                        .HasName("Pk_SR_RxOffRampDataPolicy_SR_RxOffRampDataPolicyId");

                    b.HasIndex("SrOffRampId");

                    b.HasIndex("SrRxOffRampDataId");

                    b.ToTable("SR_RxOffRampDataPolicy", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDataPolicyCoverageLimitationMessage", b =>
                {
                    b.Property<int>("SrRxOffRampDataPolicyCoverageLimitationMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_RxOffRampDataPolicyCoverageLimitationMessageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrRxOffRampDataPolicyCoverageLimitationMessageId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("SrRxOffRampDataPolicyId")
                        .HasColumnType("int")
                        .HasColumnName("SR_RxOffRampDataPolicyId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SrRxOffRampDataPolicyCoverageLimitationMessageId")
                        .HasName("Pk_SR_RxOffRampDataPolicyCoverageMessage_SR_RxOffRampDataPolicyCoverageMessageId");

                    b.HasIndex("LookupDataListId");

                    b.HasIndex("SrRxOffRampDataPolicyId");

                    b.ToTable("SR_RxOffRampDataPolicyCoverageLimitationMessage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDatum", b =>
                {
                    b.Property<int>("SrRxOffRampDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_RxOffRampDataId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrRxOffRampDataId"));

                    b.Property<string>("ActionRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CaseId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DispositionCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("LocationActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("LocationId1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Location_Id");

                    b.Property<string>("LocationMainFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LocationMainPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LocationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LocationState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationTaxId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ManualBvId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("MbvPatientPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MBvPatientPhoneNumber");

                    b.Property<string>("MbvPatientPhoneNumberType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MBvPatientPhoneNumberType");

                    b.Property<DateTime?>("PatientDob")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("PatientMedicareId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("PatientSsn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PatientSSN");

                    b.Property<string>("PatientZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("PracticeActive")
                        .HasColumnType("bit");

                    b.Property<string>("PracticeAddress1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PracticeAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticeCity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticeId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("PracticeLegalName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticeLocationId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("PracticeMainFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PracticeMainPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticeNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("PracticeOrganizationDefaultZoneId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeOrganizationGroupExclusion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PracticeOrganizationOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeOrganizationOrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticeState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PracticeTaxId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticeZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("ProviderActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("ProviderFullNameNpi")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProviderPracticeProviderId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ProviderProviderId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ProviderTaxId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestOrganization")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RequestUserId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceDaysSupply")
                        .HasColumnType("int");

                    b.Property<string>("ServicePbmPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ServiceProductDefaultDays")
                        .HasColumnType("int");

                    b.Property<string>("ServiceProductDefaultQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceProductId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceProductMethod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceProductName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceProductNdc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ServiceProductNDC");

                    b.Property<bool?>("ServiceProductRequiresAdminCode")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceQuantity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SrOffRampId")
                        .HasColumnType("int")
                        .HasColumnName("SR_OffRampId");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserFirstName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UserLastName")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("UserPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserPhoneType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SrRxOffRampDataId")
                        .HasName("Pk_SR_RxOffRampData_SR_RxOffRampDataId");

                    b.HasIndex(new[] { "SrOffRampId" }, "UIDX_SR_RxOffRampData_SR_OffRampId")
                        .IsUnique();

                    b.ToTable("SR_RxOffRampData", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrSubType", b =>
                {
                    b.Property<int>("SrSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrSubTypeId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrSubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    b.HasKey("SrSubTypeId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("SrSubTypeListId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "SrSubTypeListId", "ServiceRequestId" }, "IX_SR_SubTypes_ProgramID_Deleted");

                    b.ToTable("SR_SubTypes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrSubTypeList", b =>
                {
                    b.Property<int>("SrSubTypeListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrSubTypeListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateOnly>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<string>("SrSubTypeShortDesc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_SubTypeShortDesc");

                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("SrSubTypeListId");

                    b.ToTable("SR_SubTypeList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrSubTypeSubTyleList", b =>
                {
                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SrSubTypeFullDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SR_SubTypeFullDesc");

                    b.Property<int?>("SrSubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SubTypeListID");

                    b.Property<int?>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<string>("SrTypeShortDesc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.ToTable((string)null);

                    b.ToView("SR_SubType_SubTyleList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTestClaim", b =>
                {
                    b.Property<int>("SrTestClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TestClaimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTestClaimId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InsuranceBin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Insurance_Bin");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Insurance_Name");

                    b.Property<string>("InsurancePcn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Insurance_PCN");

                    b.Property<int>("ItemDaysSupply")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemNdc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ItemNDC");

                    b.Property<string>("ItemNeworRefill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemNumberofRefills")
                        .HasColumnType("int");

                    b.Property<string>("ItemPlaceofService")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ItemQty")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("ItemUnitofMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientDiagCode10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientDiagCode9")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly>("PatientInsCardHolderDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientIns_CardHolderDOB");

                    b.Property<string>("PatientInsCardHolderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientIns_CardHolderID");

                    b.Property<string>("PatientInsEmployerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientIns_EmployerName");

                    b.Property<string>("PatientInsGroupNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientIns_GroupNumber");

                    b.Property<string>("PatientInsPersonCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientIns_PersonCode");

                    b.Property<string>("PatientInsRelationshipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PatientIns_RelationshipCode");

                    b.Property<int>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("ProviderID");

                    b.Property<string>("ProviderLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNpi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProviderNPI");

                    b.Property<decimal?>("ResponceCopayAmount")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("Responce_CopayAmount");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_Date");

                    b.Property<decimal?>("ResponseInsAmount")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("Response_InsAmount");

                    b.Property<string>("ResponseReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_Reason");

                    b.Property<string>("ResponseRxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RxNumber");

                    b.Property<string>("ResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_Status");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("datetime");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.HasKey("SrTestClaimId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Srid");

                    b.ToTable("SR_TestClaims", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTickle", b =>
                {
                    b.Property<int>("SrTickleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TickleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTickleId"));

                    b.Property<bool?>("AutoGenerated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateSnoozed")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("SnoozedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SnoozedDays")
                        .HasColumnType("int");

                    b.Property<int>("SrActivityListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    b.Property<string>("TickleAssignment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TickleComments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateOnly?>("TickleDueDate")
                        .HasColumnType("date");

                    b.Property<string>("TickleStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("O");

                    b.Property<DateTime?>("TickleStatusDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.HasKey("SrTickleId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("SrActivityListId");

                    b.HasIndex(new[] { "TickleStatus", "Deleted" }, "SR_Tickles_withStatusDeleted");

                    b.ToTable("SR_Tickles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTrainingLog", b =>
                {
                    b.Property<int>("SrTrainingLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TrainingLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTrainingLogId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LogType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SrVisitId")
                        .HasColumnType("int")
                        .HasColumnName("SR_VisitID");

                    b.HasKey("SrTrainingLogId");

                    b.ToTable("SR_TrainingLogs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTriage", b =>
                {
                    b.Property<int>("SrTriageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TriageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTriageId"));

                    b.Property<bool?>("Cancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonSelected")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RedirectedToSpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("RedirectedToSPDate");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("TriagePayerType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TriageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TriagedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TriagedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("SrTriageId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "ServiceRequestId" }, "IX_SR_Triages_ProgramID_Deleted");

                    b.HasIndex(new[] { "ServiceRequestId" }, "SRID");

                    b.ToTable("SR_Triages", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTriageField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FieldDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Required")
                        .HasColumnType("bit");

                    b.Property<string>("Srtype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRType");

                    b.HasKey("Id");

                    b.ToTable("SR_TriageFields", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeActivity", b =>
                {
                    b.Property<int>("SrTypeActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeActivityId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("mhu");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SrActivityListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.HasKey("SrTypeActivityId")
                        .HasName("PK_SR_TypeActivityList");

                    b.HasIndex("SrTypeListId");

                    b.HasIndex(new[] { "ProgramId", "Active", "Deleted" }, "ProgramID_Active_Deleted_Includes");

                    b.HasIndex(new[] { "SrActivityListId", "ProgramId", "Active" }, "SR_ActivityListID_ProgramID_Active_Includes");

                    b.ToTable("SR_TypeActivity", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeConfig", b =>
                {
                    b.Property<int>("SrTypeConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeConfigID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeConfigId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("SrTypeConfigId");

                    b.HasIndex("EntityId");

                    b.HasIndex("SrTypeListId");

                    b.ToTable("SR_TypeConfig", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeDynamicDataAuditLog", b =>
                {
                    b.Property<int>("SrTypeDynamicDataAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeDynamicData_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeDynamicDataAuditLogId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductApproved")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrTypeDynamicDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeDynamicDataID");

                    b.HasKey("SrTypeDynamicDataAuditLogId")
                        .HasName("PK__SR_TypeD__BEA3E2CE6307D329");

                    b.ToTable("SR_TypeDynamicData_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeDynamicDatum", b =>
                {
                    b.Property<int>("SrTypeDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductApproved")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrTypeDynamicDataId");

                    b.HasIndex(new[] { "DynamicDataListId" }, "IX_DynamicDataListID");

                    b.HasIndex(new[] { "ServiceRequestId", "Deleted" }, "IX_NCI_SR_TDD_SR_Del");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "ServiceRequestId" }, "ProgramSRID");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "DynamicDataListId", "Answer", "AnswerId", "ServiceRequestId" }, "SR_TypeDynamicData_IDX_Covering");

                    b.ToTable("SR_TypeDynamicData", null, t =>
                        {
                            t.HasTrigger("TR_SR_TypeDynamicData");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeGroupDynamicDataAuditLog", b =>
                {
                    b.Property<int>("SrTypeGroupDynamicDataAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeGroupDynamicData_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeGroupDynamicDataAuditLogId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataGroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DataGroupID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrTypeGroupDynamicDataId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeGroupDynamicDataID");

                    b.HasKey("SrTypeGroupDynamicDataAuditLogId")
                        .HasName("PK__SR_TypeG__236CD62621227550");

                    b.ToTable("SR_TypeGroupDynamicData_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeGroupDynamicDatum", b =>
                {
                    b.Property<int>("SrTypeGroupDynamicDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeGroupDynamicDataID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeGroupDynamicDataId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataGroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DataGroupID");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.HasKey("SrTypeGroupDynamicDataId")
                        .HasName("PK__SR_TypeG__90B3E200EB5A2C2F");

                    b.HasIndex("DynamicDataListId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("SR_TypeGroupDynamicData", null, t =>
                        {
                            t.HasTrigger("Tr_SR_TypeGroupDynamicData_AuditLog_Insert");

                            t.HasTrigger("Tr_SR_TypeGroupDynamicData_AuditLog_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeList", b =>
                {
                    b.Property<int>("SrTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeListID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("AllowAutoCreateOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("AllowSrtypeChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("AllowSRTypeChange");

                    b.Property<bool?>("CanSelectMultipleSubTypes")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("CreateFromCopyOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("EnablePatientContactOfSr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("EnablePatientContactOfSR");

                    b.Property<bool?>("HideBaabannerSrtype")
                        .HasColumnType("bit")
                        .HasColumnName("HideBAABannerSRType");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("NotAllowSelect")
                        .HasColumnType("bit");

                    b.Property<short>("ProgramId")
                        .HasColumnType("smallint")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("RequireCarecycleOpenToSave")
                        .HasColumnType("bit");

                    b.Property<string>("RequireDrug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RequirePatientConsentDrug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RequireProviderBaa")
                        .HasColumnType("bit")
                        .HasColumnName("RequireProviderBAA");

                    b.Property<bool?>("RequireSrorganization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("RequireSROrganization");

                    b.Property<bool?>("RequireSrpatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("RequireSRPatient");

                    b.Property<bool?>("RequireSrphysician")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("RequireSRPhysician");

                    b.Property<bool?>("ShowFaqs")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowTriage")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SrTypeFullDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeFullDesc");

                    b.Property<string>("SrTypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.Property<bool?>("TriageWithoutBi")
                        .HasColumnType("bit")
                        .HasColumnName("TriageWithoutBI");

                    b.Property<bool?>("TriageWithoutDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("TriagewithoutRule")
                        .HasColumnType("bit");

                    b.HasKey("SrTypeListId")
                        .HasName("PK_SR_TypeList_1");

                    b.HasIndex(new[] { "ProgramId", "SrTypeShortDesc", "Active", "Deleted" }, "IX_SR_TypeList_ProgramID_ShortDesc_Active_Deleted");

                    b.ToTable("SR_TypeList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeListByDrug", b =>
                {
                    b.Property<int>("SrTypeListByDrug1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_TypeList_ByDrug");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrTypeListByDrug1"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotInDrug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SrTypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.HasKey("SrTypeListByDrug1");

                    b.ToTable("SR_TypeList_ByDrug", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrVisit", b =>
                {
                    b.Property<int>("SrVisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_VisitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrVisitId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeclineReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("Feedback")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int")
                        .HasColumnName("OrgID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ReassignVisitId")
                        .HasColumnType("int")
                        .HasColumnName("ReassignVisitID");

                    b.Property<string>("Resolution")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ResolutionComment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("StatusBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TrainingNote")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TrainingType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VisitStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SrVisitId")
                        .HasName("PK_ServiceRequest_Visits");

                    b.HasIndex("ContactId");

                    b.HasIndex("OrgId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "<SR_Visits_SRIDContactIDStatus>");

                    b.ToTable("SR_Visits", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SractivityEmailTemplateList", b =>
                {
                    b.Property<int>("SractivityEmailTemplagteListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SRActivity_EmailTemplagte_ListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SractivityEmailTemplagteListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailFrom")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailFromDisplayName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrActivityListId")
                        .HasColumnType("int")
                        .HasColumnName("SR_ActivityListID");

                    b.Property<string>("SrTypeShortDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SractivityEmailTemplagteListId");

                    b.ToTable("SRActivity_EmailTemplate_List", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrautoStatusLog", b =>
                {
                    b.Property<int>("SrautoStatusLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SRAutoStatusLog_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrautoStatusLogId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Errors")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.HasKey("SrautoStatusLogId");

                    b.ToTable("SRAutoStatusLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrdocumentTypeEmailTemplateList", b =>
                {
                    b.Property<int>("SrdocumentTypeEmailTemplateListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SRDocumentType_EmailTemplate_ListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrdocumentTypeEmailTemplateListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DocumentTypeLookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentType_LookupDataListID");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailFrom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailFromDisplayName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrdocumentTypeEmailTemplateListId");

                    b.ToTable("SRDocumentType_EmailTemplate_List", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrhubStatus", b =>
                {
                    b.Property<int>("SrhubStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SRHubStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrhubStatusId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SrhubStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("SRHubStatusListID");

                    b.Property<int>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SrhubStatusId");

                    b.HasIndex("SrhubStatusListId");

                    b.ToTable("SRHubStatus", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrhubStatusList", b =>
                {
                    b.Property<int>("SrhubStatusListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SRHubStatusListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrhubStatusListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusDetailCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDetailDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SrhubStatusListId");

                    b.ToTable("SRHubStatusList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrhubStatusSrtypeList", b =>
                {
                    b.Property<int>("SrhubStatusSrtypeListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SRHubStatus_SRType_List_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrhubStatusSrtypeListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("SrhubStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("SRHubStatusListID");

                    b.Property<string>("SrtypeShortDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SRTypeShortDesc");

                    b.HasKey("SrhubStatusSrtypeListId")
                        .HasName("PK_ProgramSRHubStatusList");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SrhubStatusListId");

                    b.ToTable("SRHubStatus_SRType_List", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StagingDispense", b =>
                {
                    b.Property<string>("CardAmountUsed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CfcareCenterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CFCareCenterName");

                    b.Property<string>("CopayCardId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CopayCardID");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DaySupply")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DiagnosisCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DispenseOrderNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Duplicate")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FillNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NDC");

                    b.Property<string>("PatientCopay")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientOutofPocket")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientYearofBirth")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PBMName");

                    b.Property<string>("ProgramName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProviderZIP");

                    b.Property<string>("Qty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("QTY");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("RefillRemainng")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SccfcareCenterId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SCCFCareCenterID");

                    b.Property<string>("ScpatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SCPatientID");

                    b.Property<string>("ScproviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SCProviderID");

                    b.Property<string>("ShipDate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpcfcareCenterId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPCFCareCenterID");

                    b.Property<string>("Spid")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPNPI");

                    b.Property<string>("SppatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPPatientID");

                    b.Property<string>("SpproviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPProviderID");

                    b.Property<int>("StagingDispenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StagingDispenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StagingDispenseId"));

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.ToTable("Staging_Dispenses", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.State", b =>
                {
                    b.Property<int>("Idusstate")
                        .HasColumnType("int")
                        .HasColumnName("idusstate");

                    b.Property<string>("Usstatename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usstatename");

                    b.HasKey("Idusstate")
                        .HasName("PK__state__38D74042678A2F1F");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.State1", b =>
                {
                    b.Property<string>("StateCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("state_code")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(22)
                        .IsUnicode(false)
                        .HasColumnType("varchar(22)")
                        .HasColumnName("state");

                    b.HasKey("StateCode")
                        .HasName("PK__states__86729A0252D92AFC");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StateCounty", b =>
                {
                    b.Property<int>("StateCountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateCountyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateCountyId"));

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("StateCountyId");

                    b.ToTable("StateCounties");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StateList", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastUpdated")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("StateId");

                    b.ToTable("StateList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StatesList", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdated")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("StateId")
                        .HasName("PK_State");

                    b.HasIndex("CountryId");

                    b.ToTable("StatesList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StmspatientMedicationProfile", b =>
                {
                    b.Property<int>("PatientMedicationProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientMedicationProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientMedicationProfileId"));

                    b.Property<string>("Cdrids")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("CDRIDs");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicationIds")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("MedicationIDs");

                    b.Property<string>("Medications")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<DateTime>("ModifideDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("PatientMedicationProfileId");

                    b.HasIndex("PatientId");

                    b.ToTable("STMSPatientMedicationProfile", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SubscriptionHistory", b =>
                {
                    b.Property<int>("SubscriptionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionHistoryId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionHistoryId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyAnswer", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyAnswerId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("AnswerNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("NA");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SurveyElementDataPointId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyElement_DataPointID");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("SurveyHistoryId");

                    b.ToTable("SurveyAnswers", t =>
                        {
                            t.HasTrigger("tr_update_surveyanswers");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyAnswerAuditLog", b =>
                {
                    b.Property<int>("SurveyAnswerAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswer_AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyAnswerAuditLogId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("AnswerNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LogCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("LogCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Na")
                        .HasColumnType("bit")
                        .HasColumnName("NA");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswerID");

                    b.Property<int?>("SurveyElementDataPointId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyElement_DataPointID");

                    b.Property<int?>("SurveyHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    b.HasKey("SurveyAnswerAuditLogId");

                    b.ToTable("SurveyAnswer_AuditLog", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyAnswersMutliSelect", b =>
                {
                    b.Property<int>("SurveyAnswersMultiSelectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswersMultiSelectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyAnswersMultiSelectId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyAnswerID");

                    b.Property<int?>("SurveyLookUpDataListId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyLookUpDataListID");

                    b.HasKey("SurveyAnswersMultiSelectId");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyLookUpDataListId");

                    b.ToTable("SurveyAnswersMutliSelect", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyCategory", b =>
                {
                    b.Property<int>("SurveyCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyCategoryID");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("Bold")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Font")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlaceHolder1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlaceHolder2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlaceHolder3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.Property<string>("SurveyCategoryDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SurveyCategoryType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SurveyMasterId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterID");

                    b.Property<string>("ValidateClass")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SurveyCategoryId");

                    b.HasIndex("SurveyMasterId");

                    b.ToTable("SurveyCategories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyDataPointDictionary", b =>
                {
                    b.Property<int>("DataPointDictionaryId")
                        .HasColumnType("int")
                        .HasColumnName("DataPointDictionaryID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataPointClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataPointName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("FieldLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldMask")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookupFieldName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DataPointDictionaryId");

                    b.ToTable("SurveyDataPointDictionary", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyElement", b =>
                {
                    b.Property<int>("SurveyElementId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyElementID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.Property<string>("Style")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SurveyCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyCategoryID");

                    b.Property<int?>("SurveyElementDictionaryId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyElementDictionaryID");

                    b.Property<string>("ValidateClass")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ValidateMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SurveyElementId");

                    b.HasIndex("SurveyCategoryId");

                    b.ToTable("SurveyElements");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyElementDataPoint", b =>
                {
                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("AllowNa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("AllowNA");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DataPointDictionaryId")
                        .HasColumnType("int")
                        .HasColumnName("DataPointDictionaryID");

                    b.Property<string>("FieldCode")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("GroupRules")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LabelText")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MutipleNoteLabelText")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NoteLabelText")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostRules")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegularExpression")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("RequiredField")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowMutlipleNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("ShowNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("Style")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SurveyElementDataPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyElement_DataPointID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyElementDataPointId"));

                    b.Property<int?>("SurveyElementsId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyElementsID");

                    b.Property<string>("SurveyTypes")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TemplateTagName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TriggerRules")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ValidateClass")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ValidateMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.ToTable("SurveyElement_DataPoints", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyHistory", b =>
                {
                    b.Property<int>("SurveyHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyHistoryId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SurveyMasterId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterID");

                    b.HasKey("SurveyHistoryId");

                    b.HasIndex("SurveyMasterId");

                    b.HasIndex(new[] { "ProgramId", "ServiceRequestId", "PatientId" }, "ServiceRequest");

                    b.ToTable("SurveyHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyLookupDataList", b =>
                {
                    b.Property<int>("SurveyLookupDataListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyLookupDataListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyLookupDataListId"));

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GroupRules")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ListValue")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OptionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("ShowNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("TriggerRules")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("SurveyLookupDataListId");

                    b.ToTable("SurveyLookupDataList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyMaster", b =>
                {
                    b.Property<int>("SurveyMasterId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasNurseLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasProviderLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("ReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double?>("SortOrder")
                        .HasColumnType("float");

                    b.Property<string>("SurveyDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SurveyType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SurveyMasterId");

                    b.ToTable("SurveyMaster", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyMasterByDrug", b =>
                {
                    b.Property<int>("SurveyMasterByDrugId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterByDrugID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotInDrug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("SurveyMasterId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterID");

                    b.HasKey("SurveyMasterByDrugId");

                    b.ToTable("SurveyMasterByDrug", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyMasterBySrtype", b =>
                {
                    b.Property<int>("SurveyMasterBySrtypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterBySRTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyMasterBySrtypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Drug")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SrTypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SR_TypeShortDesc");

                    b.Property<int>("SurveyMasterId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyMasterID");

                    b.HasKey("SurveyMasterBySrtypeId");

                    b.ToTable("SurveyMasterBySRType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SynagisPatient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PatientID");

                    b.Property<string>("BirthWeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cldp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CLDP");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<string>("Doses")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("FirstDoseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ga")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GA");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InfantFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InfantGender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InfantLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InfantMiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastDoseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientInsuranceCarrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskFactors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Toc")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("TOC")
                        .IsFixedLength();

                    b.HasKey("PatientId");

                    b.ToTable("Synagis_Patients", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TalendFlowCatcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Context")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("context");

                    b.Property<int?>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<string>("FatherPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("father_pid");

                    b.Property<string>("Job")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job");

                    b.Property<string>("JobRepositoryId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_repository_id");

                    b.Property<string>("JobVersion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_version");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("Moment")
                        .HasColumnType("datetime")
                        .HasColumnName("moment");

                    b.Property<string>("Origin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("origin");

                    b.Property<string>("Pid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pid");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("project");

                    b.Property<int?>("Reference")
                        .HasColumnType("int")
                        .HasColumnName("reference");

                    b.Property<string>("RootPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("root_pid");

                    b.Property<long?>("SystemPid")
                        .HasColumnType("bigint")
                        .HasColumnName("system_pid");

                    b.Property<string>("Thresholds")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thresholds");

                    b.HasKey("Id")
                        .HasName("PK__talendFl__3214EC27637F7924");

                    b.ToTable("talendFlowCatcher", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TalendLogCatcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<string>("Context")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("context");

                    b.Property<string>("FatherPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("father_pid");

                    b.Property<string>("Job")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("Moment")
                        .HasColumnType("datetime")
                        .HasColumnName("moment");

                    b.Property<string>("Origin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("origin");

                    b.Property<string>("Pid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pid");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("project");

                    b.Property<string>("RootPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("root_pid");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__talendLo__3214EC27C32D5AA0");

                    b.ToTable("talendLogCatcher", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TalendStatCatcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Context")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("context");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration");

                    b.Property<string>("FatherPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("father_pid");

                    b.Property<string>("Job")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job");

                    b.Property<string>("JobRepositoryId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_repository_id");

                    b.Property<string>("JobVersion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_version");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message");

                    b.Property<string>("MessageType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message_type");

                    b.Property<DateTime?>("Moment")
                        .HasColumnType("datetime")
                        .HasColumnName("moment");

                    b.Property<string>("Origin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("origin");

                    b.Property<string>("Pid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pid");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("project");

                    b.Property<string>("RootPid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("root_pid");

                    b.Property<long?>("SystemPid")
                        .HasColumnType("bigint")
                        .HasColumnName("system_pid");

                    b.HasKey("Id")
                        .HasName("PK__talendSt__3214EC274AAFB5A1");

                    b.ToTable("talendStatCatcher", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Tamtracker", b =>
                {
                    b.Property<int>("TamtrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAMTrackerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TamtrackerId"));

                    b.Property<string>("AppealResult")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("BiNdcRecordId")
                        .HasColumnType("int")
                        .HasColumnName("BI_NDC_RecordID");

                    b.Property<DateOnly?>("BicompleteDate")
                        .HasColumnType("date")
                        .HasColumnName("BICompleteDate");

                    b.Property<string>("Bistatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BIStatus");

                    b.Property<DateOnly?>("BridgeShipDate")
                        .HasColumnType("date");

                    b.Property<string>("BridgeStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    b.Property<DateOnly?>("CompleteEnrollmentDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstAttemptParesults")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FirstAttemptPAResults");

                    b.Property<DateOnly?>("FirstPaidShipDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MissingInfo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NoStartReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Ovprequested")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OVPRequested");

                    b.Property<DateOnly?>("OvpshipDate")
                        .HasColumnType("date")
                        .HasColumnName("OVPShipDate");

                    b.Property<string>("PaFeRequired")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PA_FE_Required");

                    b.Property<DateOnly?>("PapshipDate")
                        .HasColumnType("date")
                        .HasColumnName("PAPShipDate");

                    b.Property<DateOnly?>("PasentMddate")
                        .HasColumnType("date")
                        .HasColumnName("PASentMDDate");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusID");

                    b.Property<string>("PayorName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Payortype")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ReasonForCasePending")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReasonNotAppealing")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReasonforDenial")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RecordType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ReferralDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Sp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SP");

                    b.Property<string>("Tamcomments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TAMComments");

                    b.Property<string>("TamreviewComplete")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TAMReviewComplete");

                    b.Property<bool?>("Urgent")
                        .HasColumnType("bit");

                    b.HasKey("TamtrackerId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex(new[] { "ProgramId", "Deleted" }, "ProgramDeleted");

                    b.HasIndex(new[] { "ProgramId", "PatientId" }, "ProgramIDSRID");

                    b.ToTable("TAMTracker", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TamtrackerColor", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ColorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("ColorId");

                    b.ToTable("TAMTrackerColor", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TamtrackerColumn", b =>
                {
                    b.Property<int>("TamtrackerColumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAMTrackerColumeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TamtrackerColumeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("ColorID");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ColumnTitle")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Display")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFreeze")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("TamtrackerColumeId")
                        .HasName("PK_TAMTrackerColors");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "Active" }, "ProgramIDDefault");

                    b.ToTable("TAMTrackerColumns", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TamtrackerOption", b =>
                {
                    b.Property<int>("TamtrackerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAMTrackerOptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TamtrackerOptionId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataLIstID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("TamtrackerId")
                        .HasColumnType("int")
                        .HasColumnName("TAMTrackerID");

                    b.HasKey("TamtrackerOptionId");

                    b.HasIndex(new[] { "ProgramId", "TamtrackerId", "Deleted" }, "ProgramID_TAMTrackerID");

                    b.ToTable("TAMTracker_Options", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TamtrackerSort", b =>
                {
                    b.Property<int>("TamtrackerSortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAMTrackerSortID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TamtrackerSortId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit");

                    b.Property<string>("SortName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.HasKey("TamtrackerSortId");

                    b.ToTable("TAMTrackerSorts", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TempPatientJourney", b =>
                {
                    b.Property<string>("Bicompleted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BICompleted");

                    b.Property<string>("BicompletedColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BICompletedColor");

                    b.Property<string>("Call24hourPostInitiation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_24HourPostInitiation");

                    b.Property<string>("Call24hourPostInitiationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_24HourPostInitiationColor");

                    b.Property<string>("Call2weekpostinitiationeducation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_2weekpostinitiationeducation");

                    b.Property<string>("Call2weekpostinitiationeducationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Call_2weekpostinitiationeducationColor");

                    b.Property<string>("CareCycleState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CarecycleId")
                        .HasColumnType("int")
                        .HasColumnName("CarecycleID");

                    b.Property<string>("CoCnurseCurrent")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CoCNurse_Current");

                    b.Property<string>("CoCnurseInit")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CoCNurse_Init");

                    b.Property<string>("CurrentMaintenanceSmnreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentMaintenanceSMNReceived");

                    b.Property<string>("CurrentPacompletedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPACompletedDate");

                    b.Property<string>("CurrentPacompletedDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPACompletedDateColor");

                    b.Property<string>("CurrentPastartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrentPAStartDate");

                    b.Property<string>("DaysSinceLastFill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstWecomeCallAttempt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstWecomeCallAttemptColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialPriorAuthorization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialPriorAuthorizationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialShipDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitialShipDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitiationVisit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InitiationVisitColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastShipDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaintenancePriorAuthorization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaintenancePriorAuthorizationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaintenanceSmnreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaintenanceSMNReceived");

                    b.Property<string>("MaintenanceSmnreceivedColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaintenanceSMNReceivedColor");

                    b.Property<string>("MonthlyFollowUp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NurseAssignmentDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NurseAssignmentDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pafreceived")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAFReceived");

                    b.Property<string>("PafreceivedColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAFReceivedColor");

                    b.Property<string>("PatCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientInit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientName")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.Property<string>("PatientStatus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhysicianName")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<string>("PostInitiationFollowUpVisit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreInitiationEducationVisit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SmnreferralReceivedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SMNReferralReceivedDate");

                    b.Property<string>("SmnreferralReceivedDateColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SMNReferralReceivedDateColor");

                    b.Property<string>("SpecialtyPharmacy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StartSmntype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("StartSMNType");

                    b.Property<string>("Territory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Visit1weekPostinitiation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("visit_1weekPostinitiation");

                    b.Property<string>("Visit1weekPostinitiationColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("visit_1weekPostinitiationColor");

                    b.Property<string>("WelcomeCallCompleted")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("temp_PatientJourney", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TempPayerCleanup", b =>
                {
                    b.Property<string>("Action")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Active")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Created")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Deleted")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("F17")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdated")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MedEPayerId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Med_ePayerID");

                    b.Property<string>("MedPapayerId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MedPAPayerID");

                    b.Property<string>("ParentPayerId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ParentPayerID");

                    b.Property<string>("PayerId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("payerId");

                    b.Property<string>("PayerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Winner")
                        .HasColumnType("float");

                    b.ToTable("TempPayerCleanup", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ToolTip", b =>
                {
                    b.Property<string>("ToolTipKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ToolTip_Key");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ControlType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TookTipContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TookTip_Content");

                    b.HasKey("ToolTipKey");

                    b.ToTable("ToolTips");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TracleerRemsInPatientPharmacy", b =>
                {
                    b.Property<string>("InpatientPharmacyCertificationDate")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("InpatientPharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("InpatientPharmacyID");

                    b.Property<string>("PharmacyHin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyHIN");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PharmacyNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PharmacyNPI");

                    b.Property<string>("PharmacyOtherIdentifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RepEmail")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RepFax")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RepName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RepPhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ShipToAddress")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ShipToCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipToFaxNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ShipToPhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ShipToState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShipToZip")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.ToTable("Tracleer_REMS_InPatientPharmacy", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TracleerRemsPatient", b =>
                {
                    b.Property<string>("CurrentOrganizationAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrentOrganizationPhone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationPhone1Ext")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationPhone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationPhone2Ext")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentOrganizationState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("CurrentOrganizationZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CurrentOrganizationZIP");

                    b.Property<string>("FemalePatientCategory")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Fnrpsubtype")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FNRPSubtype");

                    b.Property<string>("LastShipDate")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAlternatePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAlternatePhoneExt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientDob")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientEmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PatientGuardian")
                        .HasMaxLength(101)
                        .IsUnicode(false)
                        .HasColumnType("varchar(101)");

                    b.Property<string>("PatientGuardianrelationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientPhoneExt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientState")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PatientZip1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PatientZip2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PrescriberId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriberID");

                    b.Property<string>("RemsenrollmentDate")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("REMSEnrollmentDate");

                    b.ToTable("Tracleer_REMS_Patient", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TracleerRemsPrescriber", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredMethodOfContact")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescriberAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberCertificationDate")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PrescriberCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberDea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrescriberDEA");

                    b.Property<string>("PrescriberDesignation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrescriberFax1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberFax2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PrescriberId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriberID");

                    b.Property<string>("PrescriberLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberMiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberNpi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PrescriberNPI");

                    b.Property<string>("PrescriberPhone1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescriberPhone1Ext")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberPhone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrescriberPhone2Ext")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PrescriberZip1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrescriberZip2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToTable("Tracleer_REMS_Prescriber", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TracleerRemsUniquePrescriber", b =>
                {
                    b.Property<int?>("PrescriberId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriberID");

                    b.ToTable("Tracleer_REMS_Unique_Prescribers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TriageRecord", b =>
                {
                    b.Property<int>("TriageRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TriageRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TriageRecordId"));

                    b.Property<DateOnly?>("AcknowledgementDate")
                        .HasColumnType("date");

                    b.Property<string>("AcknowledgementStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApirxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("APIRxNumber");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RejectedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrTriageId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TriageID");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TriageData")
                        .HasColumnType("xml");

                    b.Property<Guid?>("TriageGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Triage_GUID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("TriageStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TriageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TriagedTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TriageRecordId");

                    b.HasIndex(new[] { "SrTriageId", "ProgramId", "Deleted" }, "IX_SR_TriageID");

                    b.ToTable("TriageRecords");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TriggerEmailLog", b =>
                {
                    b.Property<int>("TriggerEmailLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Trigger_Email_LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TriggerEmailLogId"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailFrom")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("EmailNotSent")
                        .HasColumnType("bit");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TriggerEmailLogId");

                    b.ToTable("Trigger_Email_Logs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TriggerEmailTemplateList", b =>
                {
                    b.Property<int>("TriggerEmailTemplagteListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Trigger_EmailTemplagte_ListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TriggerEmailTemplagteListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EmailFrom")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("StoredProcName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TriggerEmailTemplagteListId");

                    b.ToTable("Trigger_EmailTemplate_List", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.USWM_GetProgramIDResult", b =>
                {
                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.ToTable("USWM_GetProgramIDResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserAccessFunctionList", b =>
                {
                    b.Property<int>("AccessFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccessFunctionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessFunctionId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("AccessFunctionId")
                        .HasName("PK_AccessFunctionList");

                    b.HasIndex("ProgramId");

                    b.ToTable("UserAccessFunctionList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserActiveSession", b =>
                {
                    b.Property<int>("UserActiveSessionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserActiveSessionsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserActiveSessionsId"));

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("UserLoginHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("UserLoginHistoryID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserActiveSessionsId")
                        .HasName("PK__UserActi__415EDFCC432E69C6");

                    b.ToTable("UserActiveSessions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserEmailSubscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EmailTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EmailTypeID");

                    b.Property<bool?>("IsPhysician")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTreatingFacility")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationAddressID");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId");

                    b.ToTable("UserEmailSubscriptions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("UserGroupId");

                    b.ToTable("UserGroup", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserGroupOfframpClientRelationship", b =>
                {
                    b.Property<int>("UserGroupOffRampClientRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroup_OffRampClient_Relationship_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupOffRampClientRelationshipId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("OffRampClientId")
                        .HasColumnType("int")
                        .HasColumnName("OffRampClientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.HasKey("UserGroupOffRampClientRelationshipId");

                    b.ToTable("UserGroup_OfframpClient_Relationship", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserGroupPayerRelationship", b =>
                {
                    b.Property<int>("UserGroupPayerRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroup_Payer_RelationshipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupPayerRelationshipId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("PayerId")
                        .HasColumnType("int")
                        .HasColumnName("PayerID");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.HasKey("UserGroupPayerRelationshipId");

                    b.ToTable("UserGroup_Payer_Relationship", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("mhu");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ResetFlag")
                        .HasColumnType("int");

                    b.Property<string>("TempPassword")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Urltext")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("urltext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("UserHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserInformation", b =>
                {
                    b.Property<int>("UserInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserInformationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInformationId"));

                    b.Property<int?>("AccountTypeLookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeLookupDataListID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RptExtract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("UserInformationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInformation", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserLoginHistory", b =>
                {
                    b.Property<int>("UserLoginHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserLoginHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLoginHistoryId"));

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HostName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<DateTime>("LoginDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime?>("LogoutDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserInformationId")
                        .HasColumnType("int")
                        .HasColumnName("UserInformationID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserLoginHistoryId");

                    b.ToTable("UserLoginHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserPasswordHistory", b =>
                {
                    b.Property<int>("UserPasswordHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserPasswordHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPasswordHistoryId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPasswordHistoryId")
                        .HasName("PKPasswordHistory");

                    b.ToTable("UserPasswordHistory", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserProgram", b =>
                {
                    b.Property<int>("UserprogramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserprogramID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserprogramId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserInformationId")
                        .HasColumnType("int")
                        .HasColumnName("UserInformationID");

                    b.Property<string>("UserSkill")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("UserprogramId");

                    b.HasIndex("UserInformationId");

                    b.HasIndex(new[] { "ProgramId", "Deleted", "Role" }, "IX_NCI_UPS_ProgramID_Role_Deleted");

                    b.ToTable("UserPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserProgramSetting", b =>
                {
                    b.Property<int>("UserSettingId")
                        .HasColumnType("int")
                        .HasColumnName("UserSettingID");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AccessFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("AccessFunctionID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserProgramId")
                        .HasColumnType("int")
                        .HasColumnName("UserProgramID");

                    b.HasKey("UserSettingId");

                    b.HasIndex("AccessFunctionId");

                    b.HasIndex(new[] { "UserProgramId" }, "IX_UserProgramSettings_Program");

                    b.ToTable("UserProgramSettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserRoleDefault", b =>
                {
                    b.Property<int>("UserRoleDefaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleDefaultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleDefaultId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DefaultAccess")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int")
                        .HasColumnName("FunctionID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleDefaultId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleDefaults");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserRoleList", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("ProgramId");

                    b.ToTable("UserRoleList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserUserGroupRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserUserGroupRelation", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UswmZipterrEducatorStage", b =>
                {
                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("Educator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProgramId")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ProgramID")
                        .IsFixedLength();

                    b.Property<string>("Territory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("USWM_Zipterr_Educator_Stage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationDefinition", b =>
                {
                    b.Property<int>("ValidationDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ValidationDefinitionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidationDefinitionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegularExpression")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte>("ValidationTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ValidationTypeID");

                    b.HasKey("ValidationDefinitionId");

                    b.HasIndex("ValidationTypeId");

                    b.ToTable("ValidationDefinition", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationField", b =>
                {
                    b.Property<int>("ValidationFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ValidationFieldID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidationFieldId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ValidationFieldId");

                    b.ToTable("ValidationField", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationFieldDefinitionMapping", b =>
                {
                    b.Property<int>("ValidationFieldDefinitionMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ValidationFieldDefinitionMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidationFieldDefinitionMappingId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DisplayMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ValidationDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("ValidationDefinitionID");

                    b.Property<int>("ValidationFieldId")
                        .HasColumnType("int")
                        .HasColumnName("ValidationFieldID");

                    b.HasKey("ValidationFieldDefinitionMappingId");

                    b.HasIndex("ValidationDefinitionId");

                    b.HasIndex("ValidationFieldId");

                    b.ToTable("ValidationFieldDefinitionMapping", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationType", b =>
                {
                    b.Property<byte>("ValidationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("ValidationTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ValidationTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ValidationTypeId");

                    b.ToTable("ValidationType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalID");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Npi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<int?>("ParentVendorId")
                        .HasColumnType("int")
                        .HasColumnName("ParentVendorID");

                    b.Property<string>("PharmacyNcpdpid")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PharmacyNCPDPID");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("UU");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<string>("VendorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("00000");

                    b.HasKey("VendorId")
                        .HasName("PK_Vendors_1");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorApiconfiguration", b =>
                {
                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apikey")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("APIKey");

                    b.Property<string>("Apipassword")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("APIPassword");

                    b.Property<string>("Apisecret")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("APISecret");

                    b.Property<string>("Apiurl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("APIUrl");

                    b.Property<string>("ApiuserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("APIUserName");

                    b.Property<string>("AuthToken")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AuthTokenUri")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AuthTokenURI");

                    b.Property<string>("AuthenticationMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ResourceId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ResourceID");

                    b.Property<string>("TriggerRule")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("VendorApiconfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Vendor_APIConfigID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorApiconfigId"));

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.ToTable("Vendor_APIConfiguration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorApimethodConfiguration", b =>
                {
                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apimethod")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("APIMethod");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Httpmethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HTTPMethod");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("SrsubTypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SRSubTypeListID");

                    b.Property<int?>("SrtypeListId")
                        .HasColumnType("int")
                        .HasColumnName("SRTypeListID");

                    b.Property<string>("TriggerRule")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("VendorApimethodConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Vendor_APIMethodConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorApimethodConfigurationId"));

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.ToTable("Vendor_APIMethodConfiguration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorCopayNpi", b =>
                {
                    b.Property<int>("VendorCopayNpiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Vendor_CopayNPI_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorCopayNpiId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Npi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPI");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("VendorCopayNpiId")
                        .HasName("PK_Vendor_NPIs");

                    b.ToTable("Vendor_CopayNPIs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorDfattribute", b =>
                {
                    b.Property<int>("VendorFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorFolderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorFolderId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalParameters")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("AlertEmailTo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("FileByDrugType")
                        .HasColumnType("bit");

                    b.Property<string>("FileHeader")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("FileMask")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Format")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("HighQualityTiff")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCmdLineSftp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isCmdLineSFTP");

                    b.Property<bool>("IsCopyAfterSftpget")
                        .HasColumnType("bit")
                        .HasColumnName("isCopyAfterSFTPGet");

                    b.Property<bool>("IsInboundSftp")
                        .HasColumnType("bit")
                        .HasColumnName("isInboundSFTP");

                    b.Property<bool?>("IsOldFormat")
                        .HasColumnType("bit")
                        .HasColumnName("isOldFormat");

                    b.Property<bool?>("IsOutboundS3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isOutboundS3");

                    b.Property<bool>("IsOutboundSftp")
                        .HasColumnType("bit")
                        .HasColumnName("isOutboundSFTP");

                    b.Property<bool>("IsResponseRequired")
                        .HasColumnType("bit")
                        .HasColumnName("isResponseRequired");

                    b.Property<bool>("IsTiffrequired")
                        .HasColumnType("bit")
                        .HasColumnName("isTIFFRequired");

                    b.Property<int?>("NoOfHeaderLines")
                        .HasColumnType("int");

                    b.Property<string>("OutboundFolder")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PdftoTiffExt")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasDefaultValue("tiff")
                        .HasColumnName("PDFtoTiffExt");

                    b.Property<bool?>("ProcessAcknowledgement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("processAcknowledgement");

                    b.Property<string>("ProcessName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("S3AccessKey")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("S3_AccessKey");

                    b.Property<string>("S3Bucket")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("S3_Bucket");

                    b.Property<string>("SftpCopyFolder")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SFTP_CopyFolder");

                    b.Property<string>("SftpHost")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTP_Host");

                    b.Property<string>("SftpInboundFolder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTP_InboundFolder");

                    b.Property<string>("SftpOutboundFolder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTP_OutboundFolder");

                    b.Property<string>("SftpPassword")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SFTP_Password");

                    b.Property<string>("SftpPort")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SFTP_Port");

                    b.Property<string>("SftpSshkeyFileName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTP_SSHKeyFileName");

                    b.Property<string>("SftpUserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SFTP_UserName");

                    b.Property<string>("SftpcmdLine")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SFTPCmdLine");

                    b.Property<string>("SftpscriptText")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("SFTPScriptText");

                    b.Property<string>("SpvendorCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPVendorCode");

                    b.Property<string>("SuccessEmailTo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.Property<string>("VendorNameInFile")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ZeroByteFile")
                        .HasColumnType("bit");

                    b.HasKey("VendorFolderId");

                    b.ToTable("Vendor_DFAttributes", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorFaxList", b =>
                {
                    b.Property<int>("VendorFaxListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Vendor_FaxListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorFaxListId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("VendorFaxListId");

                    b.ToTable("Vendor_FaxList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorPhone", b =>
                {
                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pkid"));

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int?>("ProgramVendorId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramVendorID");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.Property<int?>("VendorIdDev")
                        .HasColumnType("int")
                        .HasColumnName("VendorID_Dev");

                    b.Property<string>("VendorName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Pkid");

                    b.ToTable("_VendorPhone", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VendorSmtpconfiguration", b =>
                {
                    b.Property<int>("VendorSmtpconfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorSMTPConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorSmtpconfigurationId"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailSectionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FromEmailAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SearchString")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VendorSmtpconfigurationId")
                        .HasName("PK__Vendor_S__695FBBB7388165D1");

                    b.ToTable("Vendor_SMTPConfiguration", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.View1", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Expr1")
                        .HasColumnType("int");

                    b.Property<bool>("Expr2")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Expr3")
                        .HasColumnType("datetime");

                    b.Property<string>("Expr4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Expr5")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusListID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ProgramPatientStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramPatientStatusListID");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusDetailCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusDetailDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("View_1", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAllerganExtractFilter", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable((string)null);

                    b.ToView("vw_Allergan_Extract_Filter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Applications", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetMembershipUser", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MobileAlias")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("MobilePin")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("MobilePIN");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("PasswordFormat")
                        .HasColumnType("int");

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_MembershipUsers", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetProfile", b =>
                {
                    b.Property<int?>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Profiles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetRole", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoweredRoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_Roles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetUsersInRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_UsersInRoles", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetWebPartStatePath", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoweredPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_WebPartState_Paths", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetWebPartStateShared", b =>
                {
                    b.Property<int?>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_WebPartState_Shared", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwAspnetWebPartStateUser", b =>
                {
                    b.Property<int?>("DataSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_aspnet_WebPartState_User", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedContact", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedContacts", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedContactsV2", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedContacts_V2", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedContactsV3", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedContacts_V3", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedPatient", b =>
                {
                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedPatients", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedPatientsV1", b =>
                {
                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedPatients_V1", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedPatientsV2", b =>
                {
                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedPatients_V2", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedPatientsV3", b =>
                {
                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedPatients_V3", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedPatientsV4", b =>
                {
                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("OtherConsentExpDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedPatients_V4", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinConsentedPatientsV6", b =>
                {
                    b.Property<DateOnly?>("BioMarinAuthorizationPafexpDate")
                        .HasColumnType("date")
                        .HasColumnName("BioMarinAuthorizationPAFExpDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<int?>("Deident")
                        .HasColumnType("int")
                        .HasColumnName("deident");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdated");

                    b.Property<DateOnly?>("LegacyLegalReleaseExpDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("OtherConsentExpDate")
                        .HasColumnType("date");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("ProviderAuthorizationExpDate")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinConsentedPatients_V6", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinSrlistExcludeNonConsented", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastupdated");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinSRListExcludeNonConsented", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinSrlistExcludeNonConsentedV2", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastupdated");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinSRListExcludeNonConsented_V2", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwBioMarinSrlistExcludeNonConsentedV3", b =>
                {
                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime")
                        .HasColumnName("lastupdated");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable((string)null);

                    b.ToView("vw_BioMarinSRListExcludeNonConsented_V3", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwDfNovartisPatientConsent", b =>
                {
                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.ToTable((string)null);

                    b.ToView("vw_DF_Novartis_Patient_Consent", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwDispense", b =>
                {
                    b.Property<string>("AlteraId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlteraID");

                    b.Property<string>("BinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CoPayAssistanceApplied")
                        .HasColumnType("bit");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CopayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CopayCardAmountUsed")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CopayCardId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CopayCardID");

                    b.Property<decimal?>("CopayPaid")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceSerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Diagnosis2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DispendsesFromSpid")
                        .HasColumnType("int")
                        .HasColumnName("Dispendses_fromSPID");

                    b.Property<int>("DispenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DispenseID");

                    b.Property<string>("DoseType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExternalPatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalPatientID");

                    b.Property<string>("ExternalSpname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExternalSPName");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FemalePatientCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FillNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fnrptype")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FNRPType");

                    b.Property<string>("Frpcounseled")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPCounseled");

                    b.Property<string>("FrppatientPregnant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPPatientPregnant");

                    b.Property<string>("FrppregnancyTest")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FRPPregnancyTest");

                    b.Property<DateOnly?>("FulfillmentDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("LastReceivedRxdate")
                        .HasColumnType("date")
                        .HasColumnName("LastReceivedRXDate");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lftperformed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LFTPerformed");

                    b.Property<string>("MajorMedicalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("MaterialsSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedGuideProvided")
                        .HasColumnType("bit");

                    b.Property<string>("MonthlyCounseled")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ndc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NDC");

                    b.Property<bool?>("NeedlesShipped")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("NumberOfFillWritten")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderTransactionNum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.Property<DateOnly?>("PaapprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("PAApprovalDate");

                    b.Property<string>("Pacode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PACode");

                    b.Property<DateOnly?>("PaexpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("PAExpirationDate");

                    b.Property<bool?>("Parequired")
                        .HasColumnType("bit")
                        .HasColumnName("PARequired");

                    b.Property<string>("PastatusCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAStatusCode");

                    b.Property<string>("PatientAdr1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientAdr2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("PatientConsent")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("PatientConsentDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PatientCopay")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<DateOnly?>("PatientDob")
                        .HasColumnType("date")
                        .HasColumnName("PatientDOB");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<decimal?>("PatientPayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PatientPhone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("PatientPhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_PhysicianID");

                    b.Property<string>("PatientState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("PatientYearofBirth")
                        .HasColumnType("int");

                    b.Property<string>("PatientZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pbmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PBMName");

                    b.Property<string>("Pcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PCN");

                    b.Property<bool?>("PenPakShipped")
                        .HasColumnType("bit");

                    b.Property<int?>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.Property<string>("PrescriberNotifiedLft")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PrescriberNotifiedLFT");

                    b.Property<string>("PrescriberNotifiedPreg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrescriberNotifiedType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryClaimType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryCoverageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductLot")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("ProviderAddress1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderNpi")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ProviderNPI");

                    b.Property<string>("ProviderPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderSpecialty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProviderState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ProviderZip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProviderZIP");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReferralDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("RefillRemaining")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<DateOnly?>("RxExpDate")
                        .HasColumnType("date");

                    b.Property<string>("RxLabelInfo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RxNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("RxWrittenDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RxfilledOrCancellationDate")
                        .HasColumnType("date")
                        .HasColumnName("RXFilledOrCancellationDate");

                    b.Property<string>("ScCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SC_CFCenterID");

                    b.Property<string>("ScCfcenterName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SC_CFCenterName");

                    b.Property<string>("SecondaryPayerBinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerGroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondaryPayerPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondaryPayerPCN");

                    b.Property<string>("SecondaryPayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("SharpsContainerShipped")
                        .HasColumnType("bit");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ShipQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ShipTo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipZipcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShipZIPCode");

                    b.Property<DateOnly>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("SourceID");

                    b.Property<string>("SpCfcenterId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_CFCenterID");

                    b.Property<string>("SpProviderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SP_ProviderID");

                    b.Property<int?>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("Spnpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPNPI");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TerritoryID");

                    b.Property<string>("TertiaryPayerBinNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerGroupNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TertiaryPayerPcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TertiaryPayerPCN");

                    b.Property<string>("TertiaryPayerType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransferPharmacyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vw_Dispenses", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwFedexMailTrackInterfacer", b =>
                {
                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerReference")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<decimal>("DeclaredValue")
                        .HasColumnType("money");

                    b.Property<bool>("DeletedFlg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveryDateDt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryInstruction")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("DimHeight")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<decimal>("DimLenth")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<decimal>("DimWidth")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("EmailFlag")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityReferenceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EntityReferenceID");

                    b.Property<long>("FedexMailTrackInterfacerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FedexMailTrackInterfacerID");

                    b.Property<decimal>("GrossCharges")
                        .HasColumnType("money");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("MailDateDt")
                        .HasColumnType("datetime");

                    b.Property<long>("MailingId")
                        .HasColumnType("bigint")
                        .HasColumnName("MailingID");

                    b.Property<string>("MailingNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MasterTrackingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("NetCharges")
                        .HasColumnType("money");

                    b.Property<decimal>("NoofPackages")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<decimal>("PackageWeight")
                        .HasColumnType("decimal(8, 0)");

                    b.Property<decimal>("PackageWeightType")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<decimal>("PaymentType")
                        .HasColumnType("decimal(1, 0)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecipientAddress1")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("RecipientAddress2")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("RecipientCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecipientCompany")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("RecipientCountry")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("RecipientPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RecipientState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("SenderAddress1")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("SenderAddress2")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("SenderCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderCompany")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("SenderContactName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("SenderCountry")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("SenderPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SenderState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShipmentStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("ShippingCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SignatureReleaseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("SignatureRequiredFlag")
                        .HasColumnType("int");

                    b.Property<string>("SmartPostTrackingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("money");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UpdatedByID");

                    b.Property<DateTime>("UpdatedDt")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("vw_FedexMailTrackInterfacer", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwGetPatientRecentAddress", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.ToTable((string)null);

                    b.ToView("vw_GetPatientRecentAddress", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwGetPatientRecentAddressV1", b =>
                {
                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("MdmprogramId")
                        .HasColumnType("int")
                        .HasColumnName("MDMProgramID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ZIP");

                    b.ToTable((string)null);

                    b.ToView("vw_GetPatientRecentAddress_v1", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwGetPatientRecentLanguage", b =>
                {
                    b.Property<string>("Answer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<bool>("DynamicDatalistActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DynamicDatalistCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("DynamicDatalistCreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("DynamicDatalistDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("FieldCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldValidationMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LookUpDataListFunctionName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MinValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RegularExpression")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Required")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Srtype")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SRType");

                    b.ToTable((string)null);

                    b.ToView("vw_GetPatientRecentLanguage", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwGetPatientRecentPhone", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Home")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.ToTable((string)null);

                    b.ToView("vw_GetPatientRecentPhone", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwJjpfCtFilter", b =>
                {
                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.ToTable((string)null);

                    b.ToView("vw_JJPF_CT_Filter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwJjpfOrgFilter", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    b.ToTable((string)null);

                    b.ToView("vw_JJPF_Org_Filter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwJjpfPatFilter", b =>
                {
                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.ToTable((string)null);

                    b.ToView("vw_JJPF_Pat_Filter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwJjpfPhyFilter", b =>
                {
                    b.Property<int>("PhysicianId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicianID");

                    b.ToTable((string)null);

                    b.ToView("vw_JJPF_Phy_Filter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwJjpfSrFilter", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.ToTable((string)null);

                    b.ToView("vw_JJPF_SR_Filter", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwPatientDataV1", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AptSuite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Paptype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPType");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RelationshipToPatient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientData_v1", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwPatientDataV2", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AptSuite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Paptype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPType");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredPhone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("PreferredPhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RelationshipToPatient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientData_v2", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwPatientDatum", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AptSuite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("middleName");

                    b.Property<string>("Paptype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAPType");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientData", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwPatientEligibilityTransaction", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<int>("PatientEligilibityTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientEligilibity_TransactionID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PatientInsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("PatientInsuranceID");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RawRequest")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RawResponce")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RequestBasisOfCostDetermn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_BasisOfCostDetermn");

                    b.Property<string>("RequestBinNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_BinNumber");

                    b.Property<string>("RequestCardholderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CardholderFirstName");

                    b.Property<string>("RequestCardholderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CardholderLastName");

                    b.Property<string>("RequestCertificationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CertificationID");

                    b.Property<string>("RequestCmsPartDdefinedQualifiedFacility")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CmsPartDDefinedQualifiedFacility");

                    b.Property<string>("RequestCompCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_CompCode");

                    b.Property<DateTime?>("RequestDatePresWritten")
                        .HasColumnType("datetime")
                        .HasColumnName("Request_DatePresWritten");

                    b.Property<int?>("RequestDaysSupply")
                        .HasColumnType("int")
                        .HasColumnName("Request_DaysSupply");

                    b.Property<string>("RequestDispenseAsWritten")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_DispenseAsWritten");

                    b.Property<decimal?>("RequestDispensingFeeSub")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_DispensingFeeSub");

                    b.Property<string>("RequestEligibilityClarificationCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_EligibilityClarificationCode");

                    b.Property<string>("RequestEmployerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_EmployerId");

                    b.Property<int?>("RequestFillNumber")
                        .HasColumnType("int")
                        .HasColumnName("Request_FillNumber");

                    b.Property<decimal?>("RequestGrossAmountDue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_GrossAmountDue");

                    b.Property<string>("RequestGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_GroupID");

                    b.Property<string>("RequestHomePlan")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_HomePlan");

                    b.Property<decimal?>("RequestIngredientCostSub")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_IngredientCostSub");

                    b.Property<string>("RequestMedicaidIdNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_MedicaidIdNumber");

                    b.Property<string>("RequestMedicaidIndicator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_MedicaidIndicator");

                    b.Property<string>("RequestMedigapId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_MedigapId");

                    b.Property<string>("RequestNumOfRefillsAuthorized")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_NumOfRefillsAuthorized");

                    b.Property<decimal?>("RequestOtherAmountClaimedSubmitted")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_OtherAmountClaimedSubmitted");

                    b.Property<string>("RequestOtherAmountClaimedSubmittedQualifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherAmountClaimedSubmittedQualifier");

                    b.Property<string>("RequestOtherAmtClaimedSubCnt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherAmtClaimedSubCnt");

                    b.Property<string>("RequestOtherPayerCoverageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherPayerCoverageType");

                    b.Property<string>("RequestOtherPaymentsCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_OtherPaymentsCount");

                    b.Property<string>("RequestPatientCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientCity");

                    b.Property<int?>("RequestPatientGenderCode")
                        .HasColumnType("int")
                        .HasColumnName("Request_PatientGenderCode");

                    b.Property<string>("RequestPatientIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientIdQual");

                    b.Property<string>("RequestPatientPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientPhoneNo");

                    b.Property<string>("RequestPatientRelationshipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientRelationshipCode");

                    b.Property<string>("RequestPatientState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientState");

                    b.Property<string>("RequestPatientStreet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientStreet");

                    b.Property<string>("RequestPatientZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PatientZipCode");

                    b.Property<string>("RequestPbmcardHolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PBMCardHolderID");

                    b.Property<string>("RequestPersonCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PersonCode");

                    b.Property<string>("RequestPlaceOfService")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PlaceOfService");

                    b.Property<string>("RequestPresOriginCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PresOriginCode");

                    b.Property<string>("RequestPrescriberCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberCity");

                    b.Property<string>("RequestPrescriberFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberFirstName");

                    b.Property<string>("RequestPrescriberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberId");

                    b.Property<string>("RequestPrescriberIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberIdQual");

                    b.Property<string>("RequestPrescriberLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberLastName");

                    b.Property<string>("RequestPrescriberPhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberPhoneNumber");

                    b.Property<string>("RequestPrescriberState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberState");

                    b.Property<string>("RequestPrescriberStreet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberStreet");

                    b.Property<string>("RequestPrescriberZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriberZipCode");

                    b.Property<string>("RequestPrescriptionRefNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriptionRefNum");

                    b.Property<string>("RequestPrescriptionRefNumQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrescriptionRefNumQual");

                    b.Property<string>("RequestPrimaryCareProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrimaryCareProviderId");

                    b.Property<string>("RequestPrimaryCareProviderIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrimaryCareProviderIdQual");

                    b.Property<string>("RequestPrimaryCareProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_PrimaryCareProviderLastName");

                    b.Property<string>("RequestProcessorControlNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProcessorControlNumber");

                    b.Property<string>("RequestProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProductId");

                    b.Property<string>("RequestProductIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProductIdQual");

                    b.Property<string>("RequestProviderAcceptAssignmentIndicator")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProviderAcceptAssignmentIndicator");

                    b.Property<string>("RequestProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProviderId");

                    b.Property<string>("RequestProviderIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ProviderIdQual");

                    b.Property<int?>("RequestQtyDispensed")
                        .HasColumnType("int")
                        .HasColumnName("Request_QtyDispensed");

                    b.Property<int?>("RequestQtyIntendedDisp")
                        .HasColumnType("int")
                        .HasColumnName("Request_QtyIntendedDisp");

                    b.Property<string>("RequestReleaseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ReleaseNumber");

                    b.Property<DateTime?>("RequestServiceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Request_ServiceDate");

                    b.Property<string>("RequestServiceProviderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ServiceProviderId");

                    b.Property<string>("RequestServiceProviderIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_ServiceProviderIdQual");

                    b.Property<string>("RequestSplPackageInd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_SplPackageInd");

                    b.Property<string>("RequestSubClarifiCodeCnt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_SubClarifiCodeCnt");

                    b.Property<string>("RequestSubClarificatoinCodes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_SubClarificatoinCodes");

                    b.Property<string>("RequestTransactionCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_TransactionCode");

                    b.Property<string>("RequestTransactionCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_TransactionCount");

                    b.Property<string>("RequestUnitOfMeasure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_UnitOfMeasure");

                    b.Property<decimal?>("RequestUsualCustomaryCharge")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Request_UsualCustomaryCharge");

                    b.Property<string>("ResponseAdditionalMessageInfo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Response_AdditionalMessageInfo");

                    b.Property<string>("ResponseApprovedMsgCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ApprovedMsgCode");

                    b.Property<string>("ResponseApprovedMsgCodeCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ApprovedMsgCodeCount");

                    b.Property<string>("ResponseAuthorizationNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_AuthorizationNo");

                    b.Property<string>("ResponseBenefitId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_BenefitID");

                    b.Property<string>("ResponseBin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_BIN");

                    b.Property<string>("ResponseCardholderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_CardholderID");

                    b.Property<string>("ResponseCmsLowIncomeCostSharingLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_CmsLowIncomeCostSharingLevel");

                    b.Property<decimal?>("ResponseCoPayAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Response_CoPayAmount");

                    b.Property<bool?>("ResponseCoPayAmountSpecified")
                        .HasColumnType("bit")
                        .HasColumnName("Response_CoPayAmountSpecified");

                    b.Property<string>("ResponseContractId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_ContractId");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_Date");

                    b.Property<DateTime?>("ResponseEffectiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_EffectiveDate");

                    b.Property<string>("ResponseFormularyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_FormularyId");

                    b.Property<string>("ResponseGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_GroupID");

                    b.Property<string>("ResponseHeaderResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_HeaderResponseStatus");

                    b.Property<string>("ResponseHlpDskPhoneNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_HlpDskPhoneNo");

                    b.Property<string>("ResponseHlpDskPhoneQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_HlpDskPhoneQual");

                    b.Property<string>("ResponseInsuranceGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_InsuranceGroupID");

                    b.Property<string>("ResponseInsurancePlanId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_InsurancePlanID");

                    b.Property<string>("ResponseMedicarePartDcoverageCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_MedicarePartDCoverageCode");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_Message");

                    b.Property<string>("ResponseNetworkReimburseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_NetworkReimburseId");

                    b.Property<string>("ResponsePayerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PayerId");

                    b.Property<string>("ResponsePayerIdQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PayerIdQual");

                    b.Property<string>("ResponsePcn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PCN");

                    b.Property<string>("ResponsePersonCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PersonCode");

                    b.Property<string>("ResponsePrefProductCopayIncentive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductCopayIncentive");

                    b.Property<string>("ResponsePrefProductCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductCount");

                    b.Property<string>("ResponsePrefProductDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductDesc");

                    b.Property<string>("ResponsePrefProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductId");

                    b.Property<string>("ResponsePrefProductIdQualifier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductIdQualifier");

                    b.Property<string>("ResponsePrefProductIncentive")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrefProductIncentive");

                    b.Property<string>("ResponsePrescriptionRefNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrescriptionRefNum");

                    b.Property<string>("ResponsePrescriptionRefNumQual")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PrescriptionRefNumQual");

                    b.Property<string>("ResponsePricingMessage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_PricingMessage");

                    b.Property<string>("ResponseRejectCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RejectCode");

                    b.Property<string>("ResponseRejectCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RejectCount");

                    b.Property<string>("ResponseRejectFldOccuranceInd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_RejectFldOccuranceInd");

                    b.Property<string>("ResponseStatusMessage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Response_StatusMessage");

                    b.Property<DateTime?>("ResponseTerminationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Response_TerminationDate");

                    b.Property<string>("ResponseTranResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_TranResponseStatus");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Response_Type");

                    b.Property<string>("ResponseTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Response_TypeDesc");

                    b.Property<int?>("Srid")
                        .HasColumnType("int")
                        .HasColumnName("SRID");

                    b.Property<string>("TransactionInsuranceCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Transaction_InsuranceCode");

                    b.Property<string>("TransactionInsuranceName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Transaction_InsuranceName");

                    b.Property<string>("TransactionPatientDob")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientDOB");

                    b.Property<string>("TransactionPatientFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientFirstName");

                    b.Property<string>("TransactionPatientLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientLastName");

                    b.Property<string>("TransactionPatientMemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_PatientMemberID");

                    b.Property<string>("TransactionProviderFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_ProviderFirstName");

                    b.Property<string>("TransactionProviderLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_ProviderLastName");

                    b.Property<string>("TransactionProviderNpi")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Transaction_ProviderNPI");

                    b.Property<int?>("WebServicesRequestType")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientEligibilityTransactions", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwPatientHeigthWeight", b =>
                {
                    b.Property<string>("Height")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("programId");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<string>("Weight")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientHeigthWeight", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwPatientStatusNonHub", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("GlobalPatientId")
                        .HasColumnType("int")
                        .HasColumnName("GlobalPatientID");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientStatusListId")
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusListID");

                    b.Property<int>("PatientStatusNonHubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientStatusNonHubID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("Spid")
                        .HasColumnType("int")
                        .HasColumnName("SPID");

                    b.Property<string>("SppatientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SPPatientID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TransactionID");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientStatusNonHub", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwTriageRecord", b =>
                {
                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("RejectedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    b.Property<int>("SrTriageId")
                        .HasColumnType("int")
                        .HasColumnName("SR_TriageID");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TriageRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TriageRecordID");

                    b.Property<string>("TriageStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TriageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TriagedTo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("vw_TriageRecords", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwUser", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserInformationId")
                        .HasColumnType("int")
                        .HasColumnName("UserInformationID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable((string)null);

                    b.ToView("vw_Users", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.VwWorkflowEmail", b =>
                {
                    b.Property<string>("Bcclist")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BCCList");

                    b.Property<string>("BodyText")
                        .HasColumnType("text");

                    b.Property<string>("Cclist")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CCList");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LookupDisplay")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("LookupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupID");

                    b.Property<bool>("LookupItemActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LookupItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupItemID");

                    b.Property<string>("LookupItemTag")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LookupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Paptype")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<short?>("Sequence")
                        .HasColumnType("smallint");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WorkflowLookupsIsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("WorkflowProgramEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowProgramEmailType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("vw_WorkflowEmail", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteList", b =>
                {
                    b.Property<int>("WhiteListTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WhiteListTableID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhiteListTableId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Value1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Value_1");

                    b.Property<string>("Value2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Value_2");

                    b.Property<string>("Value3")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Value_3");

                    b.Property<string>("Value4")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Value_4");

                    b.Property<string>("Value5")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Value_5");

                    b.Property<string>("WhiteListType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WhiteListTableId");

                    b.ToTable("WhiteList", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteListChannelType", b =>
                {
                    b.Property<int>("WhiteListChannelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WhiteListChannelTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhiteListChannelTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WhiteListChannelTypeId");

                    b.ToTable("WhiteListChannelType", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteListEntity", b =>
                {
                    b.Property<int>("WhiteListEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WhiteListEntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhiteListEntityId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sequence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("WhiteListEntityId");

                    b.ToTable("WhiteListEntity", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteListEntitySetting", b =>
                {
                    b.Property<int>("WhiteListEntitySettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WhiteListEntitySettingsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhiteListEntitySettingsId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("WhiteListChannelTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WhiteListChannelTypeID");

                    b.Property<int>("WhiteListEntityId")
                        .HasColumnType("int")
                        .HasColumnName("WhiteListEntityID");

                    b.Property<int>("WhiteListItemId")
                        .HasColumnType("int")
                        .HasColumnName("WhiteListItemID");

                    b.HasKey("WhiteListEntitySettingsId");

                    b.HasIndex("WhiteListChannelTypeId");

                    b.HasIndex("WhiteListEntityId");

                    b.ToTable("WhiteListEntitySettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Workflow", b =>
                {
                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowID")
                        .HasComment("The primary key");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID")
                        .HasComment("The workflow product id where the lookup name is WORKFLOW_PRODUCTS");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID")
                        .HasComment("The program id");

                    b.HasKey("WorkflowId")
                        .HasName("Pk_Workflow_WorkflowID");

                    b.HasIndex("ProductId");

                    b.ToTable("Workflow", null, t =>
                        {
                            t.HasComment("The workflow master table");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowField", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FieldID")
                        .HasComment("The primary key");

                    b.Property<Guid>("DataType")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The field data type where the lookup name is DATA_TYPES");

                    b.Property<Guid?>("Interpretation")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The field interpretation where the lookup name is INTERPRETATION");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Active flag");

                    b.Property<short?>("MaxLength")
                        .HasColumnType("smallint")
                        .HasComment("The maximum length");

                    b.Property<short?>("MinLength")
                        .HasColumnType("smallint")
                        .HasComment("The minimum length");

                    b.Property<string>("MinValue")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasComment("The field name");

                    b.HasKey("FieldId")
                        .HasName("Pk_Questions_QuestionID");

                    b.HasIndex("DataType");

                    b.HasIndex("Interpretation");

                    b.ToTable("WorkflowFields", t =>
                        {
                            t.HasComment("Workflow field configuration");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowLookup", b =>
                {
                    b.Property<Guid>("LookupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupID")
                        .HasComment("The primary key");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("The lookup description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Active flag");

                    b.Property<string>("LookupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasComment("The lookup name");

                    b.HasKey("LookupId")
                        .HasName("Pk_Lookups_LookupID");

                    b.ToTable("WorkflowLookups", t =>
                        {
                            t.HasComment("Lookups");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowLookupItem", b =>
                {
                    b.Property<Guid>("LookupItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupItemID")
                        .HasComment("The primary key");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Active flag");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LookupDataListId")
                        .HasColumnType("int")
                        .HasColumnName("LookupDataListID");

                    b.Property<string>("LookupDisplay")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("The lookup display value");

                    b.Property<Guid>("LookupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupID")
                        .HasComment("The parent lookup id");

                    b.Property<string>("LookupItemTag")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LookupValue")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("The lookup value");

                    b.Property<short?>("Sequence")
                        .HasColumnType("smallint")
                        .HasComment("The lookup display sequence");

                    b.HasKey("LookupItemId")
                        .HasName("Pk_LookupItems_LookupItemID");

                    b.HasIndex("LookupId");

                    b.ToTable("WorkflowLookupItems", t =>
                        {
                            t.HasComment("Lookup items");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowPaptypeConfig", b =>
                {
                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("DefaultPaptypeItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DefaultPAPTypeItemID");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<bool?>("LatUpdatedby")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaptypeItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PAPTypeItemID");

                    b.Property<Guid>("WorkFlowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkFlowID");

                    b.Property<Guid>("WorkflowPaptypeConfigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowPAPTypeConfigID");

                    b.ToTable("WorkflowPAPTypeConfig", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowPdf", b =>
                {
                    b.Property<Guid>("Pdfid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PDFID");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ListType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PdftemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PDFTemplateName");

                    b.Property<Guid>("ProgramFieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgramFieldID");

                    b.HasKey("Pdfid");

                    b.HasIndex("ProgramFieldId");

                    b.ToTable("WorkflowPDFs", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowPdftagging", b =>
                {
                    b.Property<Guid>("PdftaggingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PDFTaggingID");

                    b.Property<string>("ConfigurationTag")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("DataType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("Pdfid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PDFID");

                    b.Property<string>("PdftagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PDFTagName");

                    b.Property<Guid>("ReferencedControlId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReferencedControlID");

                    b.HasKey("PdftaggingId");

                    b.HasIndex("DataType");

                    b.HasIndex("Pdfid");

                    b.ToTable("WorkflowPDFTaggings", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramConfig", b =>
                {
                    b.Property<Guid>("WorkflowProgramConfigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowProgramConfigID")
                        .HasComment("The primary key");

                    b.Property<string>("AttestationType")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("ConectDrugName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("ConsentSource")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())")
                        .HasComment("The created timestamp");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Csstext")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CSSText")
                        .HasComment("The css to be used for custom css");

                    b.Property<string>("Domain")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasComment("The domain for a vanity url");

                    b.Property<int?>("InvitationExpirationHours")
                        .HasColumnType("int")
                        .HasComment("The number of hours for which an invitation must expire");

                    b.Property<string>("InvitationExpirationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Active flag");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("LogoManufacturer")
                        .HasColumnType("varbinary(max)")
                        .HasComment("The manufacturer lo");

                    b.Property<byte[]>("LogoProgram")
                        .HasColumnType("varbinary(max)")
                        .HasComment("The program / franchise or drug lo");

                    b.Property<string>("Subdomain")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasComment("The subdomain for a vanity url");

                    b.Property<string>("SupportEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime")
                        .HasComment("The updated timestamp");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowID")
                        .HasComment("The parent workflow for a program and product");

                    b.HasKey("WorkflowProgramConfigId")
                        .HasName("Pk_WorkflowProgramConfiguration_WorkflowProgramConfigurationID");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowProgramConfig", null, t =>
                        {
                            t.HasComment("Program configuration");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramEmail", b =>
                {
                    b.Property<Guid>("WorkflowProgramEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bcclist")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BCCList");

                    b.Property<string>("BodyText")
                        .HasColumnType("text");

                    b.Property<string>("Cclist")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CCList");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowProgramEmailType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkflowProgramEmailId");

                    b.ToTable("WorkflowProgramEmail", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramField", b =>
                {
                    b.Property<Guid>("ProgramFieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgramFieldID")
                        .HasComment("The primary key");

                    b.Property<Guid?>("ConditionalProgramFieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Indicates that the question can only be displayed based on the ConditionalValue from the given program field id.");

                    b.Property<Guid?>("ConditionalResponseOption")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The conditional value of a response option to be used for display when the ConditionalProgramFieldId is specified");

                    b.Property<Guid?>("ConditionalSrsubType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConditionalSRSubType")
                        .HasComment("The service request sub type to use for conditional display where the lookup name is SR_SUB_TYPES");

                    b.Property<string>("ConditionalValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("The conditional value of a response text to be used for display when the ConditionalProgramFieldId is specified");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CssClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DynamicDataListId")
                        .HasColumnType("int")
                        .HasColumnName("DynamicDataListID");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FieldID")
                        .HasComment("The field id");

                    b.Property<string>("FieldLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasComment("The field display label");

                    b.Property<string>("FieldName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasComment("The field name of the the field to present data for");

                    b.Property<string>("FieldPlaceHolder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("The text to display in the input place holder attribute");

                    b.Property<string>("FieldTag")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Active flag");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit")
                        .HasComment("Read only flag");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasComment("Required flag");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ProgramWorkflowStep")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The program workflow step in for which the field is to be displayed where the lookup name is WORKFLOW_STEPS");

                    b.Property<string>("RequiredFieldMessage")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ResponseOptionKey")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The lookup to be used to populate a list of options for the field");

                    b.Property<byte>("Sequence")
                        .HasColumnType("tinyint")
                        .HasComment("The field display sequence");

                    b.Property<string>("TableName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasComment("The table name of the table to present data for");

                    b.Property<string>("WhereClause")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowID");

                    b.HasKey("ProgramFieldId")
                        .HasName("Pk_ProgramQuestions_ProgramQuestionID");

                    b.HasIndex("ConditionalProgramFieldId");

                    b.HasIndex("ConditionalResponseOption");

                    b.HasIndex("ConditionalSrsubType");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProgramWorkflowStep");

                    b.HasIndex("ResponseOptionKey");

                    b.ToTable("WorkflowProgramFields", t =>
                        {
                            t.HasComment("Field configuration specific to a given program");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramInvitationConfig", b =>
                {
                    b.Property<Guid>("WorkflowProgramInvitationConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SupportContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkflowProgramInvitationConfigId")
                        .HasName("Pk_WorkflowProgramInvitationConfig_WorkflowProgramInvitationConfigId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowProgramInvitationConfig", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowResponse", b =>
                {
                    b.Property<Guid>("WorkflowResponseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowResponseID")
                        .HasComment("The primary key");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationID")
                        .HasComment("The application id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ProgramFieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgramFieldID")
                        .HasComment("The parent program field id");

                    b.Property<Guid?>("ResponseOption")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The selected lookup item used in the response");

                    b.Property<string>("ResponseText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The user input");

                    b.HasKey("WorkflowResponseId")
                        .HasName("Pk_WorkflowAnswers_WorkflowAnswerID");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ProgramFieldId");

                    b.HasIndex("ResponseOption");

                    b.ToTable("WorkflowResponses", t =>
                        {
                            t.HasComment("The user supplied values to workflow fields");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowStep", b =>
                {
                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowStepID")
                        .HasComment("The primary key");

                    b.Property<string>("ButtonText")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeadingText")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("IconCss")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Active flag");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte?>("Sequence")
                        .HasColumnType("tinyint")
                        .HasComment("The workflow step sequence for display");

                    b.Property<string>("StepText")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowID")
                        .HasComment("The parent workflow for a program and product");

                    b.Property<Guid?>("WorkflowStep1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowStep")
                        .HasComment("The workflow step where the lookup name is WORKFLOW_STEPS");

                    b.Property<Guid?>("WorkflowTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkflowStepId")
                        .HasName("Pk_Workflow_ProgramWorkflowID");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowStep1");

                    b.HasIndex("WorkflowTypeId");

                    b.ToTable("WorkflowSteps", t =>
                        {
                            t.HasComment("The workflow steps for a workflow");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowStepContent", b =>
                {
                    b.Property<Guid>("WorkflowStepContentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowStepContentID")
                        .HasComment("The primary key");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ProgramWorkflowStep")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The program workflow step in for which the content is to be displayed where the lookup name is WORKFLOW_STEPS");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The html markup to display");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkflowID")
                        .HasComment("The parent workflow for a program and product");

                    b.HasKey("WorkflowStepContentId")
                        .HasName("Pk_WorkflowContent_WorkflowContentID");

                    b.HasIndex("ProgramWorkflowStep");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowStepContent", null, t =>
                        {
                            t.HasComment("Stores displayable content for workflow steps by content key where the lookup name is WORKFLOW_CONTENT");
                        });
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowStepProgramField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ProgramFieldId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgramFieldID");

                    b.Property<Guid>("ProgramWorkFlowStepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgramWorkFlowStepID");

                    b.HasKey("Id");

                    b.HasIndex("ProgramFieldId");

                    b.HasIndex("ProgramWorkFlowStepId");

                    b.ToTable("WorkflowStepProgramFields");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ZUsplusGeoFull", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("County")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CountyFips")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CountyFIPS");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("Dst")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DST");

                    b.Property<string>("Latitude")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Msacode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("MSACode");

                    b.Property<string>("Pancode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("PANCode");

                    b.Property<string>("PlaceFips")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PlaceFIPS");

                    b.Property<string>("Sequence")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StateFips")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("StateFIPS");

                    b.Property<int?>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ZIPCode");

                    b.Property<string>("Ziptype")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ZIPType");

                    b.HasKey("Id");

                    b.ToTable("zUsplusGeoFull", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ZUszcGeoFull", b =>
                {
                    b.Property<string>("AreaCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("County")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CountyFips")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CountyFIPS");

                    b.Property<string>("Dst")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DST");

                    b.Property<string>("Latitude")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Msacode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("MSACode");

                    b.Property<string>("PlaceFips")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PlaceFIPS");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StateFips")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("StateFIPS");

                    b.Property<int?>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ZIPCode");

                    b.Property<string>("Ziptype")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ZIPType");

                    b.ToTable("zUszcGeoFull", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ZipCode", b =>
                {
                    b.Property<string>("ZipCode1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZipCode");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("ZipCode1", "County", "City", "State");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ZipToCaseManager", b =>
                {
                    b.Property<int>("ZipToCaseManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Zip_ToCaseManagerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZipToCaseManagerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Lastupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastupdatedby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ZIPCode");

                    b.HasKey("ZipToCaseManagerId");

                    b.ToTable("Zip_ToCaseManager", (string)null);
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ZipToCaseManagerStage", b =>
                {
                    b.Property<string>("Cmname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CMName");

                    b.Property<string>("Cmusername")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CMUsername");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TerritoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Zip_ToCaseManager_Stage", (string)null);
                });

            modelBuilder.Entity("AspnetUsersInRole", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Us__RoleI__3943762B");

                    b.HasOne("Ef8PowerTools.Data.Models.AspnetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Us__UserI__384F51F2");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Address", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PayerDetail", "PayerDetail")
                        .WithMany("Addresses")
                        .HasForeignKey("PayerDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_PayerDetails");

                    b.Navigation("PayerDetail");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ApiresponseMessage", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MessageModule", "MessageModule")
                        .WithMany("ApiresponseMessages")
                        .HasForeignKey("MessageModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_MessageModule_MessageModuleId");

                    b.Navigation("MessageModule");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetMembership", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetApplication", "Application")
                        .WithMany("AspnetMemberships")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Me__Appli__10416098");

                    b.HasOne("Ef8PowerTools.Data.Models.AspnetUser", "User")
                        .WithOne("AspnetMembership")
                        .HasForeignKey("Ef8PowerTools.Data.Models.AspnetMembership", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Me__UserI__113584D1");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPath", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetApplication", "Application")
                        .WithMany("AspnetPaths")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Pa__Appli__4979DDF4");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPersonalizationAllUser", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetPath", "Path")
                        .WithOne("AspnetPersonalizationAllUser")
                        .HasForeignKey("Ef8PowerTools.Data.Models.AspnetPersonalizationAllUser", "PathId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Pe__PathI__511AFFBC");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPersonalizationPerUser", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetPath", "Path")
                        .WithMany("AspnetPersonalizationPerUsers")
                        .HasForeignKey("PathId")
                        .HasConstraintName("FK__aspnet_Pe__PathI__56D3D912");

                    b.HasOne("Ef8PowerTools.Data.Models.AspnetUser", "User")
                        .WithMany("AspnetPersonalizationPerUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__aspnet_Pe__UserI__57C7FD4B");

                    b.Navigation("Path");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetProfile", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetUser", "User")
                        .WithOne("AspnetProfile")
                        .HasForeignKey("Ef8PowerTools.Data.Models.AspnetProfile", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Pr__UserI__2724C5F0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetRole", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetApplication", "Application")
                        .WithMany("AspnetRoles")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Ro__Appli__3296789C");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetUser", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetApplication", "Application")
                        .WithMany("AspnetUsers")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK__aspnet_Us__Appli__7C3A67EB");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.BenefitHistoryFieldList", "BenefitHistoryFieldList")
                        .WithMany("BenefitHistories")
                        .HasForeignKey("BenefitHistoryFieldListId")
                        .IsRequired()
                        .HasConstraintName("FK_BenefitHistory_BenefitHistoryFieldList1");

                    b.HasOne("Ef8PowerTools.Data.Models.BenefitInvestigation", "BenefitInvestigation")
                        .WithMany("BenefitHistories")
                        .HasForeignKey("BenefitInvestigationId")
                        .HasConstraintName("FK_BenefitHistory_BenefitInvestigation");

                    b.HasOne("Ef8PowerTools.Data.Models.PatientInsurance", "PatientInsurance")
                        .WithMany("BenefitHistories")
                        .HasForeignKey("PatientInsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_BenefitHistory_PatientInsurance1");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("BenefitHistories")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_BenefitHistory_ServiceRequests");

                    b.Navigation("BenefitHistoryFieldList");

                    b.Navigation("BenefitInvestigation");

                    b.Navigation("PatientInsurance");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigation", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PatientInsurance", "PatientInsurance")
                        .WithMany("BenefitInvestigations")
                        .HasForeignKey("PatientInsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_BenefitInvestigation_PatientInsurance");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("BenefitInvestigations")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_BenefitInvestigation_ServiceRequests");

                    b.Navigation("PatientInsurance");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigationEBv", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("BenefitInvestigationEBvs")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_BenefitInvestigation_eBV_ServiceRequests");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCyclePhysician", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.CareCycle", "CareCycle")
                        .WithMany("CareCyclePhysicians")
                        .HasForeignKey("CareCycleId")
                        .IsRequired()
                        .HasConstraintName("FK_CareCyclePhysician_CareCycles");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("CareCyclePhysicians")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_CareCyclePhysician_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("CareCyclePhysicians")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_CareCyclePhysician_Physicians");

                    b.Navigation("CareCycle");

                    b.Navigation("Patient");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseRecordTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.CaseRecord", "CaseRecord")
                        .WithMany("CaseRecordTransactions")
                        .HasForeignKey("CaseRecordId")
                        .IsRequired()
                        .HasConstraintName("DF_CaseRecordTransaction_CaseRecordID_FK_N");

                    b.Navigation("CaseRecord");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CfIssueSubType", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.CfIssueType", "CfIssueType")
                        .WithMany("CfIssueSubTypes")
                        .HasForeignKey("CfIssueTypeId")
                        .HasConstraintName("FK_CFIssueSubType_CFIssueType");

                    b.Navigation("CfIssueType");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectFedexAddressVerification", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ConnectFedexApirequest", "ConnectFedexApirequest")
                        .WithMany("ConnectFedexAddressVerifications")
                        .HasForeignKey("ConnectFedexApirequestId")
                        .IsRequired()
                        .HasConstraintName("FK_FedexAddressVerifications_ConnectFedexAPIRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.Mailing", "Mailing")
                        .WithMany("ConnectFedexAddressVerifications")
                        .HasForeignKey("MailingId")
                        .IsRequired()
                        .HasConstraintName("FK_FedexAddressVerifications_Mailings");

                    b.Navigation("ConnectFedexApirequest");

                    b.Navigation("Mailing");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectModularDocTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Document", "Document")
                        .WithMany("ConnectModularDocTransactions")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK__ConnectMo__Docum__417FEF88");

                    b.HasOne("Ef8PowerTools.Data.Models.EBvModularTransaction", "EbvModularTransaction")
                        .WithMany("ConnectModularDocTransactions")
                        .HasForeignKey("EbvModularTransactionId")
                        .HasConstraintName("FK__ConnectMo__EBvMo__408BCB4F");

                    b.Navigation("Document");

                    b.Navigation("EbvModularTransaction");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectPayerMap", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.OfframpClient", "OfframpClient")
                        .WithMany("ConnectPayerMaps")
                        .HasForeignKey("OfframpClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ConnectPayerMap_OfframpClients");

                    b.Navigation("OfframpClient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Contact", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("Contacts")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_Contacts_Programs");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("ContactAddresses")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactAddresses_Contacts");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("ContactDynamicData")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactDynamicData_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("ContactDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactDynamicData_DynamicDataList");

                    b.Navigation("Contact");

                    b.Navigation("DynamicDataList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactNote", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("ContactNotes")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactNotes_Contacts");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactOrganization", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("ContactOrganizations")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactOrganizations_Organizations");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactPhoneNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("ContactPhoneNumbers")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactPhoneNumbers_Contacts");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactPhysician", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("ContactPhysicians")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactPhysicians_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("ContactPhysicians")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactPhysicians_Physicians");

                    b.Navigation("Contact");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CoveredCounty", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Conatct")
                        .WithMany("CoveredCounties")
                        .HasForeignKey("ConatctId")
                        .HasConstraintName("FK_CoveredCounties_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Org")
                        .WithMany("CoveredCounties")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_CoveredCounties_Organizations");

                    b.Navigation("Conatct");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DashboardPanelProgram", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DashboardPanelList", "DashboardPanelList")
                        .WithMany("DashboardPanelPrograms")
                        .HasForeignKey("DashboardPanelListId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardPanelPrograms_DashboardPanelList");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("DashboardPanelPrograms")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardPanelPrograms_Programs");

                    b.Navigation("DashboardPanelList");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DashboardPanelUserSetting", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DashboardPanelList", "DashboardPanelList")
                        .WithMany("DashboardPanelUserSettings")
                        .HasForeignKey("DashboardPanelListId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardPanelUserSettings_DashboardPanelList");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("DashboardPanelUserSettings")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_DashboardPanelUserSettings_Programs");

                    b.Navigation("DashboardPanelList");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DataConfiguration", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DataDictionary", "DataDictionary")
                        .WithMany("DataConfigurations")
                        .HasForeignKey("DataDictionaryId")
                        .IsRequired()
                        .HasConstraintName("FK_DataConfiguration_DataDictionary1");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("DataConfigurations")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_DataConfiguration_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.SrTypeList", "SrTypeList")
                        .WithMany("DataConfigurations")
                        .HasForeignKey("SrTypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_DataConfiguration_SR_TypeList");

                    b.Navigation("DataDictionary");

                    b.Navigation("Program");

                    b.Navigation("SrTypeList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentAttachmentsDocType", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Document", "Document")
                        .WithMany("DocumentAttachmentsDocTypes")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentAttachments_DocTypes_Documents");

                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("DocumentAttachmentsDocTypes")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentAttachments_DocTypes_LookupDataList");

                    b.Navigation("Document");

                    b.Navigation("LookupDataList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentField", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentsDocType", "DocumentDocType")
                        .WithMany("DocumentFields")
                        .HasForeignKey("DocumentDocTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_Fields_Documents_DocTypes");

                    b.HasOne("Ef8PowerTools.Data.Models.DocumentFieldList", "DocumentFieldList")
                        .WithMany("DocumentFields")
                        .HasForeignKey("DocumentFieldListId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_Fields_DocumentFieldList");

                    b.Navigation("DocumentDocType");

                    b.Navigation("DocumentFieldList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentFieldList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentList", "DocumentList")
                        .WithMany("DocumentFieldLists")
                        .HasForeignKey("DocumentListId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentFieldList_DocumentList");

                    b.Navigation("DocumentList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentListLetter", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentList", "DocumentList")
                        .WithOne("DocumentListLetter")
                        .HasForeignKey("Ef8PowerTools.Data.Models.DocumentListLetter", "DocumentListId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentListID_DocumentList");

                    b.Navigation("DocumentList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsDocType", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Document", "Document")
                        .WithMany("DocumentsDocTypes")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_DocTypes_Documents");

                    b.HasOne("Ef8PowerTools.Data.Models.DocumentList", "DocumentList")
                        .WithMany("DocumentsDocTypes")
                        .HasForeignKey("DocumentListId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_DocTypes_DocumentList");

                    b.Navigation("Document");

                    b.Navigation("DocumentList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsFaxQueue", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("DocumentsFaxQueues")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_FaxQueues_Programs");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsFqUser", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentsFaxQueue", "DocumentsFaxQueue")
                        .WithMany("DocumentsFqUsers")
                        .HasForeignKey("DocumentsFaxQueueId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_FQ_Users_Documents_FaxQueues");

                    b.Navigation("DocumentsFaxQueue");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsInboundFaxis", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentsFaxQueue", "DocumentsFaxQueue")
                        .WithMany("DocumentsInboundFaxes")
                        .HasForeignKey("DocumentsFaxQueueId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_InboundFaxes_Documents_FaxQueues");

                    b.Navigation("DocumentsFaxQueue");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsSrType", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentList", "DocumentList")
                        .WithMany("DocumentsSrTypes")
                        .HasForeignKey("DocumentListId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_SrTypes_DocumentList");

                    b.Navigation("DocumentList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsTherapyDrug", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentList", "DocumentList")
                        .WithMany("DocumentsTherapyDrugs")
                        .HasForeignKey("DocumentListId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_TherapyDrugs_DocumentList");

                    b.Navigation("DocumentList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DuplicateNpitracking", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("DuplicateNpitrackings")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_Physcians_PhysicianID");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DuplicatePatientQueue", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MdmpatientSearchResult", "PatientSearchResult")
                        .WithMany("DuplicatePatientQueues")
                        .HasForeignKey("PatientSearchResultId")
                        .HasConstraintName("fk_DuplicatePatientQueue_MDMPatientSearchResultId");

                    b.Navigation("PatientSearchResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DynamicDataByLookupDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("DynamicDataByLookupData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_DynamicDataByLookupData_DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("DynamicDataByLookupData")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_DynamicDataByLookupData_LookupDataList");

                    b.Navigation("DynamicDataList");

                    b.Navigation("LookupDataList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvAgeLimit", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvCoverageFactor", "EBvCoverageFactors")
                        .WithMany("EBvAgeLimits")
                        .HasForeignKey("EBvCoverageFactorsId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvAgeLimit_eBvCoverageFactors");

                    b.Navigation("EBvCoverageFactors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCopayFactor", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvInsuranceFormularyCoverage", "EBvInsuranceFormularyCoverage")
                        .WithMany("EBvCopayFactors")
                        .HasForeignKey("EBvInsuranceFormularyCoverageId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvCopayFactor_eBvInsuranceFormularyCoverage");

                    b.Navigation("EBvInsuranceFormularyCoverage");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageBenefitDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.BenefitInvestigationEBv", "BenefitInvestigationEBv")
                        .WithMany("EBvCoverageBenefitDetails")
                        .HasForeignKey("BenefitInvestigationEBvId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvCoverageBenefitDetails_BenefitInvestigation_eBV");

                    b.Navigation("BenefitInvestigationEBv");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageBenefitTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvMasterTransaction", "EBvMasterTransaction")
                        .WithMany("EBvCoverageBenefitTransactions")
                        .HasForeignKey("EBvMasterTransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvCoverageBenefitTransactions_eBvMasterTransactions");

                    b.Navigation("EBvMasterTransaction");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageFactor", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvInsuranceFormularyCoverage", "EBvInsuranceFormularyCoverage")
                        .WithOne("EBvCoverageFactor")
                        .HasForeignKey("Ef8PowerTools.Data.Models.EBvCoverageFactor", "EBvInsuranceFormularyCoverageId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvCoverageFactors_eBvInsuranceFormularyCoverage");

                    b.Navigation("EBvInsuranceFormularyCoverage");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvDrugCoverageAlert", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvDrugPharmacyCoverage", "EBvDrugPharmacyCoverage")
                        .WithMany("EBvDrugCoverageAlerts")
                        .HasForeignKey("EBvDrugPharmacyCoverageId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvDrugCoverageAlert_eBvDrugPharmacyCoverage");

                    b.Navigation("EBvDrugPharmacyCoverage");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvDrugPharmacyCoverage", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvMedicationBenefitDetail", "EBvMedicationBenefitDetails")
                        .WithMany("EBvDrugPharmacyCoverages")
                        .HasForeignKey("EBvMedicationBenefitDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvDrugPharmacyCoverage_eBvMedicationBenefitDetails");

                    b.Navigation("EBvMedicationBenefitDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvInsuranceFormularyCoverage", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvCoverageBenefitDetail", "EBvCoverageBenefitDetails")
                        .WithOne("EBvInsuranceFormularyCoverage")
                        .HasForeignKey("Ef8PowerTools.Data.Models.EBvInsuranceFormularyCoverage", "EBvCoverageBenefitDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvInsuranceFormularyCoverage_eBvCoverageBenefitDetails");

                    b.Navigation("EBvCoverageBenefitDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMasterTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("EBvMasterTransactions")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvMasterTransactions_ServiceRequests");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMedicationBenefitDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.BenefitInvestigationEBv", "BenefitInvestigationEBv")
                        .WithMany("EBvMedicationBenefitDetails")
                        .HasForeignKey("BenefitInvestigationEBvId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvMedicationBenefitDetails_BenefitInvestigation_eBV");

                    b.HasOne("Ef8PowerTools.Data.Models.EBvCoverageBenefitDetail", "EBvCoverageBenefitDetails")
                        .WithMany("EBvMedicationBenefitDetails")
                        .HasForeignKey("EBvCoverageBenefitDetailsId")
                        .HasConstraintName("FK_eBvMedicationBenefitDetails_eBvCoverageBenefitDetails");

                    b.Navigation("BenefitInvestigationEBv");

                    b.Navigation("EBvCoverageBenefitDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMedicationBenefitTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvMasterTransaction", "EBvMasterTransaction")
                        .WithMany("EBvMedicationBenefitTransactions")
                        .HasForeignKey("EBvMasterTransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvMedicationBenefitTransactions_eBvMasterTransactions");

                    b.Navigation("EBvMasterTransaction");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvQuantityLimit", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvCoverageFactor", "EBvCoverageFactors")
                        .WithMany("EBvQuantityLimits")
                        .HasForeignKey("EBvCoverageFactorsId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvQuantityLimit_eBvCoverageFactors");

                    b.Navigation("EBvCoverageFactors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvResourceLink", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvCoverageFactor", "EBvCoverageFactors")
                        .WithMany("EBvResourceLinks")
                        .HasForeignKey("EBvCoverageFactorsId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvResourceLink_eBvCoverageFactors");

                    b.Navigation("EBvCoverageFactors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvStepDrug", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EBvCoverageFactor", "EBvCoverageFactors")
                        .WithMany("EBvStepDrugs")
                        .HasForeignKey("EBvCoverageFactorsId")
                        .IsRequired()
                        .HasConstraintName("FK_eBvStepDrug_eBvCoverageFactors");

                    b.Navigation("EBvCoverageFactors");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EServicesConfigList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalFunctionList", "PortalFunctionList")
                        .WithMany("EServicesConfigLists")
                        .HasForeignKey("PortalFunctionListId")
                        .IsRequired()
                        .HasConstraintName("FK_eServicesConfigList_PortalFunctionList");

                    b.Navigation("PortalFunctionList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EServicesProgramConfig", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EServicesConfigList", "EServicesConfigList")
                        .WithMany("EServicesProgramConfigs")
                        .HasForeignKey("EServicesConfigListId")
                        .IsRequired()
                        .HasConstraintName("FK_eServicesProgramConfig_eServicesConfigList");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("EServicesProgramConfigs")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_eServicesProgramConfig_Programs");

                    b.Navigation("EServicesConfigList");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EntityMergeDetailsLog", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EntityMergeLog", "EntityMergeLog")
                        .WithMany("EntityMergeDetailsLogs")
                        .HasForeignKey("EntityMergeLogId")
                        .IsRequired()
                        .HasConstraintName("FK__EntityMer__Entit__547131BD");

                    b.Navigation("EntityMergeLog");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpapApplication", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EpapInvitation", "Invitation")
                        .WithMany("EpapApplications")
                        .HasForeignKey("InvitationId")
                        .IsRequired()
                        .HasConstraintName("FK_EPapApplications_Invitations");

                    b.Navigation("Invitation");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaqSrtype", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Faqlist", "FaqList")
                        .WithMany()
                        .HasForeignKey("FaqListId")
                        .IsRequired()
                        .HasConstraintName("FK_FAQ_SRType_FAQList");

                    b.Navigation("FaqList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FaxLogSummary", "FldFls")
                        .WithMany("FaxLogDetails")
                        .HasForeignKey("FldFlsId")
                        .IsRequired()
                        .HasConstraintName("FLD_FLS_FK");

                    b.Navigation("FldFls");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogException", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FaxLogDetail", "FleFld")
                        .WithMany("FaxLogExceptions")
                        .HasForeignKey("FleFldId")
                        .HasConstraintName("FK_FAX_LOG_EXCEPTIONS_FAX_LOG_DETAILS");

                    b.HasOne("Ef8PowerTools.Data.Models.FaxLogSummary", "FleFls")
                        .WithMany("FaxLogExceptions")
                        .HasForeignKey("FleFlsId")
                        .HasConstraintName("FLE_FLS_FK");

                    b.Navigation("FleFld");

                    b.Navigation("FleFls");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PayerDetail", "PayerDetail")
                        .WithMany("FaxNumbers")
                        .HasForeignKey("PayerDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_FaxNumbers_PayerDetails");

                    b.Navigation("PayerDetail");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FeedbackConfiguration", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.UserGroup", "ManagementUserGroup")
                        .WithMany("FeedbackConfigurations")
                        .HasForeignKey("ManagementUserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Configuration_UserGroup_ManagementUserGroupID");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("FeedbackConfigurations")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Configuration_Programs_ProgramID");

                    b.HasOne("Ef8PowerTools.Data.Models.SrActivityList", "SrActivityList")
                        .WithMany("FeedbackConfigurations")
                        .HasForeignKey("SrActivityListId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Configuration_SR_ActivityList_SR_ActivityListID");

                    b.HasOne("Ef8PowerTools.Data.Models.SrTypeList", "SrTypeList")
                        .WithMany("FeedbackConfigurations")
                        .HasForeignKey("SrTypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Configuration_SR_TypeList_SR_TypeListID");

                    b.Navigation("ManagementUserGroup");

                    b.Navigation("Program");

                    b.Navigation("SrActivityList");

                    b.Navigation("SrTypeList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplicationPatientSite", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FundEnrollmentApplication", "FundEnrollmentApplication")
                        .WithMany("FundEnrollmentApplicationPatientSites")
                        .HasForeignKey("FundEnrollmentApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.FundEnrollmentApplicationPatientSite_dbo.FundEnrollmentApplications_FundEnrollmentApplicationID");

                    b.Navigation("FundEnrollmentApplication");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FundEnrollmentApplication", "FundEnrollmentApplication")
                        .WithMany("FundReopenSubscriptionDetails")
                        .HasForeignKey("FundEnrollmentApplicationId")
                        .HasConstraintName("FK_FundReopenSubscriptionDetails_FundEnrollmentApplications");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("FundReopenSubscriptionDetails")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_FundReopenSubscriptionDetails_ServiceRequests");

                    b.Navigation("FundEnrollmentApplication");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionMedication", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FundReopenSubscriptionDetail", "Subscription")
                        .WithMany("FundReopenSubscriptionMedications")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_FundReopenSubscriptionMedications_FundReopenSubscriptionDetails");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionSubscriber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FundReopenSubscriptionDetail", "Subscription")
                        .WithMany("FundReopenSubscriptionSubscribers")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_FundReopenSubscriptionSubscribers_FundReopenSubscriptionDetails");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.GrantUsePolicyException", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "ExtensionReason")
                        .WithMany("GrantUsePolicyExceptionExtensionReasons")
                        .HasForeignKey("ExtensionReasonId")
                        .IsRequired()
                        .HasConstraintName("GrantUsePolicyException_ExtensionReasonId_LookUpDataList_LookUpDataListId");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("GrantUsePolicyExceptions")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("GrantUsePolicyException_ServiceRequests_ServiceRequestId");

                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "Status")
                        .WithMany("GrantUsePolicyExceptionStatuses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("GrantUsePolicyException_StatusId_LookUpDataList_LookUpDataListId");

                    b.Navigation("ExtensionReason");

                    b.Navigation("ServiceRequest");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Insurance", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Payer", "Payer")
                        .WithMany("Insurances")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("FK_Insurances_Payers");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Insurance", "Insurance")
                        .WithMany("InsuranceAddresses")
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_InsuranceAddresses_Insurances");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("InsuranceDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_InsuranceDynamicData_DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.Insurance", "Insurance")
                        .WithMany("InsuranceDynamicData")
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_InsuranceDynamicData_Patients");

                    b.Navigation("DynamicDataList");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsuranceNote", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Insurance", "Insurance")
                        .WithMany("InsuranceNotes")
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_InsuranceNotes_Insurances");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.InsurancePhoneNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Insurance", "Insurance")
                        .WithMany("InsurancePhoneNumbers")
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_InsurancePhoneNumbers_Insurances");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailErrorLog", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrEmailNotification", "EmailNotification")
                        .WithMany("LtrEmailErrorLogs")
                        .HasForeignKey("EmailNotificationId")
                        .IsRequired();

                    b.Navigation("EmailNotification");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailNotification", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrNotificationItem", "NotificationItem")
                        .WithMany("LtrEmailNotifications")
                        .HasForeignKey("NotificationItemId")
                        .IsRequired();

                    b.Navigation("NotificationItem");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrEmailNotification", "EmailNotification")
                        .WithMany("LtrEmailTransactions")
                        .HasForeignKey("EmailNotificationId")
                        .IsRequired();

                    b.Navigation("EmailNotification");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxErrorLog", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrFaxNotification", "FaxNotification")
                        .WithMany("LtrFaxErrorLogs")
                        .HasForeignKey("FaxNotificationId")
                        .IsRequired();

                    b.Navigation("FaxNotification");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxNotification", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrNotificationItem", "NotificationItem")
                        .WithMany("LtrFaxNotifications")
                        .HasForeignKey("NotificationItemId")
                        .IsRequired();

                    b.Navigation("NotificationItem");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrFaxNotification", "FaxNotification")
                        .WithMany("LtrFaxTransactions")
                        .HasForeignKey("FaxNotificationId");

                    b.Navigation("FaxNotification");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrLookupListItem", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrLookupList", "List")
                        .WithMany("LtrLookupListItems")
                        .HasForeignKey("ListId")
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrMailNotification", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrNotificationItem", "NotificationItem")
                        .WithMany("LtrMailNotifications")
                        .HasForeignKey("NotificationItemId")
                        .IsRequired();

                    b.Navigation("NotificationItem");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrMailTransaction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrMailNotification", "MailNotification")
                        .WithOne("LtrMailTransaction")
                        .HasForeignKey("Ef8PowerTools.Data.Models.LtrMailTransaction", "MailNotificationId")
                        .IsRequired();

                    b.Navigation("MailNotification");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationItem", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DocumentList", "DocumentList")
                        .WithMany("LtrNotificationItems")
                        .HasForeignKey("DocumentListId")
                        .IsRequired();

                    b.HasOne("Ef8PowerTools.Data.Models.TriggerEmailTemplateList", "EmailTemplate")
                        .WithMany("LtrNotificationItems")
                        .HasForeignKey("EmailTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_LTR_NotificationItems_Trigger_Email_TemplateList_EmailTemplateID");

                    b.HasOne("Ef8PowerTools.Data.Models.LtrNotificationMaster", "Notification")
                        .WithMany("LtrNotificationItems")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.Navigation("DocumentList");

                    b.Navigation("EmailTemplate");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrProcessLog", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LtrNotificationMaster", "Notification")
                        .WithMany("LtrProcessLogs")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.HasOne("Ef8PowerTools.Data.Models.LtrNotificationItem", "NotificationItem")
                        .WithMany("LtrProcessLogs")
                        .HasForeignKey("NotificationItemId")
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("NotificationItem");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Mailing", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ContactAddress", "ContactAddress")
                        .WithMany("Mailings")
                        .HasForeignKey("ContactAddressId")
                        .HasConstraintName("FK_SH_Shipments_ContactAddresses");

                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("Mailings")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_SH_Shipments_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.Entity", "Entity")
                        .WithMany("Mailings")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_SH_Shipments_Entity");

                    b.HasOne("Ef8PowerTools.Data.Models.PatientAddress", "PatientAddress")
                        .WithMany("Mailings")
                        .HasForeignKey("PatientAddressId")
                        .HasConstraintName("FK_SH_Shipments_PatientAddresses");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("Mailings")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_SH_Shipments_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.PhysicianAddress", "PhysicianAddress")
                        .WithMany("Mailings")
                        .HasForeignKey("PhysicianAddressId")
                        .HasConstraintName("FK_SH_Shipments_PhysicianAddresses");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("Mailings")
                        .HasForeignKey("PhysicianId")
                        .HasConstraintName("FK_SH_Shipments_Physicians");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("Mailings")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SH_Shipments_ServiceRequests");

                    b.Navigation("Contact");

                    b.Navigation("ContactAddress");

                    b.Navigation("Entity");

                    b.Navigation("Patient");

                    b.Navigation("PatientAddress");

                    b.Navigation("Physician");

                    b.Navigation("PhysicianAddress");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MailingDocument", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Document", "Document")
                        .WithMany("MailingDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_SH_ShipmentDocuments_Documents");

                    b.HasOne("Ef8PowerTools.Data.Models.Mailing", "Mailing")
                        .WithMany("MailingDocuments")
                        .HasForeignKey("MailingId")
                        .IsRequired()
                        .HasConstraintName("FK_SH_ShipmentDocuments_SH_Shipments");

                    b.Navigation("Document");

                    b.Navigation("Mailing");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmpatientProcessResult", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MdmpatientSearchResult", "PatientSearchResult")
                        .WithMany("MdmpatientProcessResults")
                        .HasForeignKey("PatientSearchResultId")
                        .HasConstraintName("fk_MDMPatientProcessResult_PatientSearchResultId");

                    b.Navigation("PatientSearchResult");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpCobblurbAdditionalRule", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MedeBvofframpCobblurbRule", "MedeBvofframpCobblurbRules")
                        .WithMany("MedeBvofframpCobblurbAdditionalRules")
                        .HasForeignKey("MedeBvofframpCobblurbRulesId")
                        .IsRequired()
                        .HasConstraintName("FK_MedeBVOfframpCOBBlurbAdditionalRules_MedeBVOfframpCOBBlurbRules");

                    b.Navigation("MedeBvofframpCobblurbRules");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedvantxInventoryUpdate", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.TriageRecord", "TriageRecord")
                        .WithMany("MedvantxInventoryUpdates")
                        .HasForeignKey("TriageRecordId")
                        .HasConstraintName("FK__MedvantxI__Triag__689E4EE9");

                    b.Navigation("TriageRecord");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedvantxLot", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MedvantxInventoryUpdate", "MedvantxInventoryUpdate")
                        .WithMany("MedvantxLots")
                        .HasForeignKey("MedvantxInventoryUpdateId")
                        .HasConstraintName("FK__MedvantxL__Medva__6C6EDFCD");

                    b.Navigation("MedvantxInventoryUpdate");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Message", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("Messages")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Messages_Organizations");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("Messages")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Messages_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Provider")
                        .WithMany("Messages")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Messages_Physicians");

                    b.HasOne("Ef8PowerTools.Data.Models.MessageThread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Threads");

                    b.Navigation("Organization");

                    b.Navigation("Patient");

                    b.Navigation("Provider");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageThread", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MessageType", "MessageType")
                        .WithMany("MessageThreads")
                        .HasForeignKey("MessageTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Threads_MessageTypes");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageThreadReader", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MessageThread", "Thread")
                        .WithMany("MessageThreadReaders")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MessageThreadReaders_MessageThreads");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileDrugSurveyElement", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MobileSurveyElement", "MobileSurveyElement")
                        .WithMany("MobileDrugSurveyElements")
                        .HasForeignKey("MobileSurveyElementId")
                        .IsRequired()
                        .HasConstraintName("FK_MobileDrugSurveyElements_MobileSurveyElements");

                    b.Navigation("MobileSurveyElement");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobilePatientSurveyAnswer", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MobileDrugSurveyElement", "MobileDrugSurveyElement")
                        .WithMany("MobilePatientSurveyAnswers")
                        .HasForeignKey("MobileDrugSurveyElementId")
                        .IsRequired()
                        .HasConstraintName("FK_MobilePatientSurveyAnswers_MobileDrugSurveyElements");

                    b.HasOne("Ef8PowerTools.Data.Models.MobilePatientSurveyAnswerMaster", "MobilePatientSurveyAnswerMaster")
                        .WithMany("MobilePatientSurveyAnswers")
                        .HasForeignKey("MobilePatientSurveyAnswerMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_MobilePatientSurveyAnswers_MobilePatientSurveyAnswerMaster");

                    b.HasOne("Ef8PowerTools.Data.Models.MobileSurveySubElement", "MobileSurveySubElement")
                        .WithMany("MobilePatientSurveyAnswers")
                        .HasForeignKey("MobileSurveySubElementId")
                        .IsRequired()
                        .HasConstraintName("FK_MobilePatientSurveyAnswers_MobileSurveyAnswers");

                    b.Navigation("MobileDrugSurveyElement");

                    b.Navigation("MobilePatientSurveyAnswerMaster");

                    b.Navigation("MobileSurveySubElement");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobilePatientSurveyAnswerMaster", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MobileMasterSurvey", "MobileMasterSurvey")
                        .WithMany("MobilePatientSurveyAnswerMasters")
                        .HasForeignKey("MobileMasterSurveyId")
                        .HasConstraintName("FK_MobilePatientSurveyAnswerMaster_MobileMasterSurveys");

                    b.Navigation("MobileMasterSurvey");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileRefillOrderItem", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MobileRefillOrder", "MobileRefillOrder")
                        .WithMany("MobileRefillOrderItems")
                        .HasForeignKey("MobileRefillOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_MobileRefillOrderItems_MobileRefillOrders");

                    b.Navigation("MobileRefillOrder");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileSurveySubElement", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.MobileSurveyElement", "MobileSurveyElement")
                        .WithMany("MobileSurveySubElements")
                        .HasForeignKey("MobileSurveyElementId")
                        .IsRequired()
                        .HasConstraintName("FK_MobileSurveyAnswers_MobileSurveyElements");

                    b.Navigation("MobileSurveyElement");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyAccreditation", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgencyAccreditationList", "NaAccreditationList")
                        .WithMany("NurseAgencyAccreditations")
                        .HasForeignKey("NaAccreditationListId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyAccreditations_NurseAgencyAccreditationList");

                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgency", "NurseAgency")
                        .WithMany("NurseAgencyAccreditations")
                        .HasForeignKey("NurseAgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyAccreditations_NurseAgencies");

                    b.Navigation("NaAccreditationList");

                    b.Navigation("NurseAgency");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgency", "NurseAgency")
                        .WithMany("NurseAgencyAddresses")
                        .HasForeignKey("NurseAgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyAddresses_NurseAgencies");

                    b.Navigation("NurseAgency");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyCertification", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgencyCertificationList", "NaCertificationList")
                        .WithMany("NurseAgencyCertifications")
                        .HasForeignKey("NaCertificationListId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyCertifications_NurseAgencyCertificationList");

                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgency", "NurseAgency")
                        .WithMany("NurseAgencyCertifications")
                        .HasForeignKey("NurseAgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyCertifications_NurseAgencies");

                    b.Navigation("NaCertificationList");

                    b.Navigation("NurseAgency");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyCoveredCounty", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgency", "NurseAgency")
                        .WithMany("NurseAgencyCoveredCounties")
                        .HasForeignKey("NurseAgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyCoveredCounties_NurseAgencies");

                    b.Navigation("NurseAgency");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyNurse", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgency", "NurseAgency")
                        .WithMany("NurseAgencyNurses")
                        .HasForeignKey("NurseAgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_NurseAgencyNurses_NurseAgencies");

                    b.Navigation("NurseAgency");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OfframpCustomConnectInfo", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.OfframpClient", "OfframpClient")
                        .WithMany("OfframpCustomConnectInfos")
                        .HasForeignKey("OfframpClientId")
                        .IsRequired()
                        .HasConstraintName("FK_OfframpCustomConnectInfo_OfframpClients");

                    b.Navigation("OfframpClient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OfframpExternalHubInfo", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.OfframpClient", "OfframpClient")
                        .WithMany("OfframpExternalHubInfos")
                        .HasForeignKey("OfframpClientId")
                        .IsRequired()
                        .HasConstraintName("FK_OfframpExternalHubInfo_OfframpClients");

                    b.Navigation("OfframpClient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OnsitePharmacy", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Vendor", "Vendor")
                        .WithMany("OnsitePharmacies")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_OnsitePharmacies_Vendors");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Organization", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Mdmprogram")
                        .WithMany("Organizations")
                        .HasForeignKey("MdmprogramId")
                        .IsRequired()
                        .HasConstraintName("FK_Organizations_Programs");

                    b.Navigation("Mdmprogram");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Mdmprogram")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("MdmprogramId")
                        .HasConstraintName("FK_OrganizationAddresses_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrgnizationAddresses_Orgnizations");

                    b.Navigation("Mdmprogram");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("OrganizationDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationDynamicData_DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationDynamicData")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationDynamicData_Organizations");

                    b.Navigation("DynamicDataList");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationNote", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationNotes")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationNotes_Organizations");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationNpi", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.OrganizationAddress", "OrganizationAddress")
                        .WithMany("OrganizationNpis")
                        .HasForeignKey("OrganizationAddressId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationNPIs_OrganizationAddresses");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationNpis")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationNPIs_Organizations");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("OrganizationNpis")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationNPIs_Programs");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationAddress");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationPhoneNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationPhoneNumbers")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationPhoneNumbers_Organizations");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("OrganizationPhoneNumbers")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationPhoneNumbers_Programs");

                    b.Navigation("Organization");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationProgram", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Orgnization")
                        .WithMany("OrganizationPrograms")
                        .HasForeignKey("OrgnizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrgnizationPrograms_Orgnizations");

                    b.Navigation("Orgnization");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationTaxId", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.OrganizationAddress", "OrganizationAddress")
                        .WithMany("OrganizationTaxIds")
                        .HasForeignKey("OrganizationAddressId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationTaxIDs_OrganizationAddresses");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationTaxIds")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationTaxIDs_Organizations");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("OrganizationTaxIds")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationTaxIDs_Programs");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationAddress");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanApplicationTokenRole", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PanApplication", "Application")
                        .WithMany("PanApplicationTokenRoleApplications")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_PAN_ApplicationTokenRoles_ApplicationID");

                    b.HasOne("Ef8PowerTools.Data.Models.PanApplication", "Client")
                        .WithMany("PanApplicationTokenRoleClients")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_PAN_ApplicationTokenRoles_ClientID");

                    b.HasOne("Ef8PowerTools.Data.Models.PanApplicationRole", "Role")
                        .WithMany("PanApplicationTokenRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_PAN_ApplicationTokenRoles_RoleID");

                    b.Navigation("Application");

                    b.Navigation("Client");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanDisenrollmentReversal", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "Status")
                        .WithMany("PanDisenrollmentReversals")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PAN_DisenrollmentReversal_StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanDisenrollmentReversalTemp", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "Status")
                        .WithMany("PanDisenrollmentReversalTemps")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PAN_DisenrollmentReversal_StatusId_temp");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Mdmprogram")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("MdmprogramId")
                        .HasConstraintName("FK_PatientAddresses_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAddresses_Patients");

                    b.Navigation("Mdmprogram");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientContact", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("PatientContacts")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientContacts")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientContact_Patients");

                    b.Navigation("Contact");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDevice", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientDevices")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDevices_Patients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDiagnosis", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DiagnosisList", "DiagnosisList")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("DiagnosisListId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnosis_DiagnosisList");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnosis_Patients");

                    b.Navigation("DiagnosisList");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("PatientDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_EntityDynamicData_DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientDynamicData")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDynamicData_Patients");

                    b.Navigation("DynamicDataList");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientInsurance", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Insurance", "MedicalInsurance")
                        .WithMany("PatientInsuranceMedicalInsurances")
                        .HasForeignKey("MedicalInsuranceId")
                        .HasConstraintName("FK_PatientInsurance_Insurances");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientInsurances")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientInsurance_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.Insurance", "PharmacyInsurance")
                        .WithMany("PatientInsurancePharmacyInsurances")
                        .HasForeignKey("PharmacyInsuranceId")
                        .HasConstraintName("FK_PatientInsurance_Insurances2");

                    b.Navigation("MedicalInsurance");

                    b.Navigation("Patient");

                    b.Navigation("PharmacyInsurance");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientNote", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientNotes")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientNotes_Patients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPhoneNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientPhoneNumbers")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPhoneNumbers_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("PatientPhoneNumbers")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPhoneNumbers_Programs");

                    b.Navigation("Patient");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPhysician", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientPhysicians")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPhysicians_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PatientPhysicians")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPhysicians_Physicians");

                    b.Navigation("Patient");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientPrescription", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Prescription", "Prescription")
                        .WithMany("PatientPrescriptions")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__PatientPr__Presc__53C8BCF5");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSite", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientSites")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSite_dbo.Patients.PatientID");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientSnoozedAlert", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("PatientSnoozedAlerts")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientSnoozedAlerts_Organizations");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientSnoozedAlerts")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientSnoozedAlerts_Patients");

                    b.Navigation("Organization");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatus", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("PatientStatuses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientStatus_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.PatientStatusList", "PatientStatusList")
                        .WithMany("PatientStatuses")
                        .HasForeignKey("PatientStatusListId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientStatus_PatientStatusList");

                    b.Navigation("Patient");

                    b.Navigation("PatientStatusList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatusNonHub", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PatientStatusList", "PatientStatusList")
                        .WithMany("PatientStatusNonHubs")
                        .HasForeignKey("PatientStatusListId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientStatusNonHub_PatientStatusList");

                    b.Navigation("PatientStatusList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatusProgramList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PatientStatusList", "PatientStatusList")
                        .WithMany("PatientStatusProgramLists")
                        .HasForeignKey("PatientStatusListId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramPatientStatusList_PatientStatusList");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("PatientStatusProgramLists")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramPatientStatusList_Programs");

                    b.Navigation("PatientStatusList");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Payer", "Payer")
                        .WithMany("PayerAddresses")
                        .HasForeignKey("PayerId")
                        .HasConstraintName("FK_PayerAddresses_Payers");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerAdminTicket", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.BenefitInvestigation", "BenefitInvestigation")
                        .WithMany("PayerAdminTickets")
                        .HasForeignKey("BenefitInvestigationId")
                        .HasConstraintName("FK_PayerAdminTicket_PayerAdminTicket");

                    b.HasOne("Ef8PowerTools.Data.Models.PatientInsurance", "PatientInsurance")
                        .WithMany("PayerAdminTickets")
                        .HasForeignKey("PatientInsuranceId")
                        .HasConstraintName("FK_PayerAdminTicket_PatientInsurance");

                    b.Navigation("BenefitInvestigation");

                    b.Navigation("PatientInsurance");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayersPayerCategory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("PayersPayerCategories")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_Payer_PayerCategories_LookupDataListID");

                    b.Navigation("LookupDataList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhoneNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PayerDetail", "PayerDetail")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PayerDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumbers_PayerDetails");

                    b.Navigation("PayerDetail");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Physician", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Mdmprogram")
                        .WithMany("Physicians")
                        .HasForeignKey("MdmprogramId")
                        .IsRequired()
                        .HasConstraintName("FK_Physicians_Programs");

                    b.Navigation("Mdmprogram");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianAddresses")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianAddresses_Physicians");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianClinicalTrial", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Provider")
                        .WithMany("PhysicianClinicalTrials")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianClinicalTrials_Physicians");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("PhysicianDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianDynamicData_DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianDynamicData")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianDynamicData_Physicians");

                    b.Navigation("DynamicDataList");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianNote", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianNotes")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianNotes_Physicians");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianOrganization", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("PhysicianOrganizations")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianOrganizations_Orgnizations");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianOrganizations")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianOrganizations_Physicians");

                    b.Navigation("Organization");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianPhoneNumber", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianPhoneNumbers")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianPhoneNumbers_Physicians");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("PhysicianPhoneNumbers")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianPhoneNumbers_Programs");

                    b.Navigation("Physician");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianSignature", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianSignatures")
                        .HasForeignKey("PhysicianId")
                        .HasConstraintName("FK__Physician__Physi__6FE5D8B6");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianSpecialty", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("PhysicianSpecialties")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianSpecialties_LookupDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianSpecialties")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianSpecialties_Physicians");

                    b.Navigation("LookupDataList");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianStateLicense", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysicianStateLicenses")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysicianStateLicenses_Physicians");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysiciansDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("PhysiciansDetails")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_PhysiciansDetail_Physicians");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalFunction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalFunctionList", "PortalFunctionList")
                        .WithMany("PortalFunctions")
                        .HasForeignKey("PortalFunctionListId")
                        .IsRequired()
                        .HasConstraintName("FK_PortalFunctions_PortalFunctionList");

                    b.HasOne("Ef8PowerTools.Data.Models.ProgramPortalType", "ProgramPortalType")
                        .WithMany("PortalFunctions")
                        .HasForeignKey("ProgramPortalTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PortalFunctions_ProgramPortalType");

                    b.Navigation("PortalFunctionList");

                    b.Navigation("ProgramPortalType");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRosterAreaMapping", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalRoster", "PortalRoster")
                        .WithMany("PortalRosterAreaMappings")
                        .HasForeignKey("PortalRosterId")
                        .IsRequired()
                        .HasConstraintName("FK__Portal_Ro__Porta__36D37FD9");

                    b.Navigation("PortalRoster");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRosterRelation", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalRoster", "FrmPortalRoster")
                        .WithMany("PortalRosterRelations")
                        .HasForeignKey("FrmPortalRosterId")
                        .IsRequired()
                        .HasConstraintName("FK__Portal_Ro__FRM_P__3D807D68");

                    b.Navigation("FrmPortalRoster");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationAddrEntityMapping", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalStagingRegistrationAddress", "RegistrationRecordAddress")
                        .WithMany("PortalStagingRegistrationAddrEntityMappings")
                        .HasForeignKey("RegistrationRecordAddressId")
                        .IsRequired()
                        .HasConstraintName("FK__Portal_St__Regis__5E01903C");

                    b.HasOne("Ef8PowerTools.Data.Models.PortalStagingRegistrationEntity", "RegistrationRecordEntity")
                        .WithMany("PortalStagingRegistrationAddrEntityMappings")
                        .HasForeignKey("RegistrationRecordEntityId")
                        .IsRequired()
                        .HasConstraintName("FK__Portal_St__Regis__5EF5B475");

                    b.Navigation("RegistrationRecordAddress");

                    b.Navigation("RegistrationRecordEntity");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationAddress", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalStagingRegistration", "RegistrationRecord")
                        .WithMany("PortalStagingRegistrationAddresses")
                        .HasForeignKey("RegistrationRecordId")
                        .HasConstraintName("FK_RegistrationRecordId_PortalStaging");

                    b.Navigation("RegistrationRecord");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationEntity", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalStagingRegistration", "RegistrationRecord")
                        .WithMany("PortalStagingRegistrationEntities")
                        .HasForeignKey("RegistrationRecordId")
                        .IsRequired()
                        .HasConstraintName("FK__Portal_St__Regis__7CBB2186");

                    b.Navigation("RegistrationRecord");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingTblFile", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalStagingHcpSr", "PortalStagingHcpSrrequest")
                        .WithMany("PortalStagingTblFiles")
                        .HasForeignKey("PortalStagingHcpSrrequestId")
                        .HasConstraintName("FK_Table_1_Tabl");

                    b.Navigation("PortalStagingHcpSrrequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PrescriptionEligibility", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionEligibilities")
                        .HasForeignKey("PrescriptionId")
                        .HasConstraintName("FK__Prescript__Presc__4491665D");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PrescriptionPharmacy", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionPharmacies")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__Prescript__Presc__4B3376F4");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PrescriptionProvider", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionProviders")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__Prescript__Presc__4F0407D8");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProductRequestedOrderDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ProductRequestedOrder", "ProductRequestedOrder")
                        .WithMany("ProductRequestedOrderDetails")
                        .HasForeignKey("ProductRequestedOrderId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductRe__Produ__60620756");

                    b.Navigation("ProductRequestedOrder");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramPortalType", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.PortalType", "PortalType")
                        .WithMany("ProgramPortalTypes")
                        .HasForeignKey("PortalTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramPortalType_PortalType1");

                    b.Navigation("PortalType");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramUrl", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("ProgramUrls")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramURLs_ProgramID");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramVendor", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("ProgramVendors")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramTriageVendors_Programs");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RemindersChild", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Reminder", "Reminder")
                        .WithMany("RemindersChildren")
                        .HasForeignKey("ReminderId")
                        .IsRequired()
                        .HasConstraintName("FK_ChildReminder_Reminders");

                    b.Navigation("Reminder");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportActivityHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ReportProgram", "ReportProgram")
                        .WithMany("ReportActivityHistories")
                        .HasForeignKey("ReportProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportActivityHistory_ReportPrograms");

                    b.Navigation("ReportProgram");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportParameter", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ReportList", "ReportList")
                        .WithMany("ReportParameters")
                        .HasForeignKey("ReportListId")
                        .HasConstraintName("FK_ReportParameters_ReportList");

                    b.Navigation("ReportList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportProgram", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("ReportPrograms")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportPrograms_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.ReportList", "ReportList")
                        .WithMany("ReportPrograms")
                        .HasForeignKey("ReportListId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportPrograms_ReportList");

                    b.Navigation("Program");

                    b.Navigation("ReportList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RuleTriggerAction", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.RuleTriggerCondition", "RuleTriggerCondition")
                        .WithMany("RuleTriggerActions")
                        .HasForeignKey("RuleTriggerConditionId")
                        .IsRequired()
                        .HasConstraintName("FK_RuleTriggerConditionID");

                    b.Navigation("RuleTriggerCondition");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RxAdminDose", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Drug", "Drug")
                        .WithMany("RxAdminDoses")
                        .HasForeignKey("DrugId")
                        .IsRequired()
                        .HasConstraintName("FK_RxAdminDoses_DrugId");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("RxAdminDoses")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_RxAdminDoses_OrganizationId");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("RxAdminDoses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_RxAdminDoses_PatientId");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("RxAdminDoses")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_RxAdminDoses_PhysicianId");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("RxAdminDoses")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_RxAdminDoses_ProgramId");

                    b.Navigation("Drug");

                    b.Navigation("Organization");

                    b.Navigation("Patient");

                    b.Navigation("Physician");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RxAdminDosesRule", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK__RxAdminDo__Progr__2F65D18D");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SentAlertHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AlertType", "AlertType")
                        .WithMany("SentAlertHistories")
                        .HasForeignKey("AlertTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SentAlertHistory_AlertTypes");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("SentAlertHistories")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_SentAlertHistory_Patients");

                    b.Navigation("AlertType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ServiceRequest", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_Cases_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.NurseAgency", "NurseAgency")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("NurseAgencyId")
                        .HasConstraintName("FK_Cases_NurseAgencies");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Cases_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_Cases_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.SrActivityList", "Resolution")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ResolutionId")
                        .HasConstraintName("FK_ServiceRequests_SR_ActivityList");

                    b.HasOne("Ef8PowerTools.Data.Models.SrTypeList", "SrTypeList")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("SrTypeListId")
                        .HasConstraintName("FK_ServiceRequests_SR_TypeList");

                    b.Navigation("Contact");

                    b.Navigation("NurseAgency");

                    b.Navigation("Patient");

                    b.Navigation("Program");

                    b.Navigation("Resolution");

                    b.Navigation("SrTypeList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrActivity", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrActivities")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Activities_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.SrActivityList", "SrActivityList")
                        .WithMany("SrActivities")
                        .HasForeignKey("SrActivityListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Activities_SR_ActivityList");

                    b.Navigation("ServiceRequest");

                    b.Navigation("SrActivityList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrAlternateCoveragePlan", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrAlternateCoverageResearch", "CoverageResearch")
                        .WithOne("SrAlternateCoveragePlan")
                        .HasForeignKey("Ef8PowerTools.Data.Models.SrAlternateCoveragePlan", "CoverageResearchId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_AlternateCoveragePlans_CoverageResearchID");

                    b.Navigation("CoverageResearch");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrAssignment", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrAssignments")
                        .HasForeignKey("ServiceRequestId")
                        .HasConstraintName("FK_SR_Assignments_ServiceRequests");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrBridgeEligibility", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrBridgeEligibilities")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_BridgeEligibility_ServiceRequests");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrCallLog", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrCallLogs")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_CallLogs_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.SrActivityList", "SrActivityList")
                        .WithMany("SrCallLogs")
                        .HasForeignKey("SrActivityListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_CallLogs_SR_ActivityList");

                    b.Navigation("ServiceRequest");

                    b.Navigation("SrActivityList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrDate", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("SrDates")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Dates_LookupDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrDates")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Dates_ServiceRequests");

                    b.Navigation("LookupDataList");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrEEnrollment", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "EnrollmentSr")
                        .WithMany("SrEEnrollmentEnrollmentSrs")
                        .HasForeignKey("EnrollmentSrid")
                        .IsRequired()
                        .HasConstraintName("FK_SR_eEnrollments_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("SrEEnrollments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_eEnrollments_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "TriageSr")
                        .WithMany("SrEEnrollmentTriageSrs")
                        .HasForeignKey("TriageSrid")
                        .HasConstraintName("FK_SR_eEnrollments_ServiceRequests1");

                    b.Navigation("EnrollmentSr");

                    b.Navigation("Patient");

                    b.Navigation("TriageSr");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrFaq", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Faqlist", "FaqList")
                        .WithMany("SrFaqs")
                        .HasForeignKey("FaqListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_FAQs_FaqListID");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrFaqs")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_FAQs_ServiceRequestID");

                    b.Navigation("FaqList");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrIncompleteReason", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("SrIncompleteReasons")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_IncompleteReasons_LookupDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrIncompleteReasons")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_IncompleteReasons_ServiceRequests");

                    b.Navigation("LookupDataList");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataCptCode", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrMedOffRampDatum", "SrMedOffRampData")
                        .WithMany("SrMedOffRampDataCptCodes")
                        .HasForeignKey("SrMedOffRampDataId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataCptCodes_SR_MEDOffRampData");

                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithMany("SrMedOffRampDataCptCodes")
                        .HasForeignKey("SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataCptCodes_SR_OffRamp");

                    b.Navigation("SrMedOffRampData");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataDiagnosis", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrMedOffRampDatum", "SrMedOffRampData")
                        .WithMany("SrMedOffRampDataDiagnoses")
                        .HasForeignKey("SrMedOffRampDataId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataDiagnoses_SR_MEDOffRampData");

                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithMany("SrMedOffRampDataDiagnoses")
                        .HasForeignKey("SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataDiagnoses_SR_OffRamp");

                    b.Navigation("SrMedOffRampData");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicy", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrMedOffRampDatum", "SrMedOffRampData")
                        .WithMany("SrMedOffRampDataPolicies")
                        .HasForeignKey("SrMedOffRampDataId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MEDOffRampDataPolicyNEW_SR_MEDOffRampData");

                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithMany("SrMedOffRampDataPolicies")
                        .HasForeignKey("SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MEDOffRampDataPolicyNEW_SR_OffRamp");

                    b.Navigation("SrMedOffRampData");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicyCptCodesDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicy", "SrMedOffRampDataPolicy")
                        .WithMany("SrMedOffRampDataPolicyCptCodesDetails")
                        .HasForeignKey("SrMedOffRampDataPolicyId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataPolicyCptCodesDetails_SR_MedOffRampDataPolicy");

                    b.Navigation("SrMedOffRampDataPolicy");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicyResultClientSpecificItem", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicy", "SrMedOffRampDataPolicy")
                        .WithMany("SrMedOffRampDataPolicyResultClientSpecificItems")
                        .HasForeignKey("SrMedOffRampDataPolicyId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataPolicyResultClientSpecificItems_SR_MedOffRampDataPolicy");

                    b.Navigation("SrMedOffRampDataPolicy");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataRequestPolicy", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrMedOffRampDatum", "SrMedOffRampData")
                        .WithMany("SrMedOffRampDataRequestPolicies")
                        .HasForeignKey("SrMedOffRampDataId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataRequestPolicies_SR_MEDOffRampData");

                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithMany("SrMedOffRampDataRequestPolicies")
                        .HasForeignKey("SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataRequestPolicies_SR_OffRamp");

                    b.Navigation("SrMedOffRampData");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithOne("SrMedOffRampDatum")
                        .HasForeignKey("Ef8PowerTools.Data.Models.SrMedOffRampDatum", "SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_MedOffRampDataNew_SR_OffRamp");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMessageThread", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrMessageThreads")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Threads_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.MessageThread", "Thread")
                        .WithMany("SrMessageThreads")
                        .HasForeignKey("ThreadId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Threads_Threads");

                    b.Navigation("ServiceRequest");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNote", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrNotes")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Notes_ServiceRequests");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNoteHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrNoteHistories")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_NoteHistory_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.SrNote", "SrNote")
                        .WithMany("SrNoteHistories")
                        .HasForeignKey("SrNoteId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_NoteHistory_SR_Notes");

                    b.Navigation("ServiceRequest");

                    b.Navigation("SrNote");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOffRampHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithMany("SrOffRampHistories")
                        .HasForeignKey("SrOffRampId")
                        .HasConstraintName("FK_SR_OffRampHistory_SR_OffRamp");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOrderDetail", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("SrOrderDetails")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK__SR_OrderD__Progr__05905EA9");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrOrderDetails")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK__SR_OrderD__Servi__068482E2");

                    b.Navigation("Program");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOrganization", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Organization")
                        .WithMany("SrOrganizations")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Oragnizations_Organizations");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrOrganizations")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Orgnizations_ServiceRequests");

                    b.Navigation("Organization");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPap", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrPaps")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAP_ServiceRequests");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPapbyTypeMapping", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "EligibilityQuestion")
                        .WithMany("SrPapbyTypeMappings")
                        .HasForeignKey("EligibilityQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPEligibilityQuestionsMappings._DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "Paptype")
                        .WithMany("SrPapbyTypeMappings")
                        .HasForeignKey("PaptypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPEligibilityQuestionsMappings._LookupDataList");

                    b.Navigation("EligibilityQuestion");

                    b.Navigation("Paptype");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPappayment", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("SrPappayments")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPPayments_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.SrPapscheduledPayment", "SrPapscheduledPayment")
                        .WithMany("SrPappayments")
                        .HasForeignKey("SrPapscheduledPaymentId")
                        .HasConstraintName("FK_SR_PAPPayments_SR_PAPScheduledPayments");

                    b.Navigation("Program");

                    b.Navigation("SrPapscheduledPayment");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPappaymentSchedule", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("SrPappaymentSchedules")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPPaymentSchedules_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "Sr")
                        .WithMany("SrPappaymentSchedules")
                        .HasForeignKey("Srid")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPPaymentSchedules_ServiceRequests");

                    b.Navigation("Program");

                    b.Navigation("Sr");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPapscheduledPayment", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("SrPapscheduledPayments")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPScheduledPayments_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.SrPappaymentSchedule", "SrPappaymentSchedule")
                        .WithMany("SrPapscheduledPayments")
                        .HasForeignKey("SrPappaymentScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_PAPScheduledPayments_SR_PAPPaymentSchedules");

                    b.Navigation("Program");

                    b.Navigation("SrPappaymentSchedule");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPhysician", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Physician")
                        .WithMany("SrPhysicians")
                        .HasForeignKey("PhysicianId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Physicians_Physicians");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrPhysicians")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Physicians_ServiceRequests");

                    b.Navigation("Physician");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDataPolicy", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithMany("SrRxOffRampDataPolicies")
                        .HasForeignKey("SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_RXOffRampDataPolicy_SR_OffRamp");

                    b.HasOne("Ef8PowerTools.Data.Models.SrRxOffRampDatum", "SrRxOffRampData")
                        .WithMany("SrRxOffRampDataPolicies")
                        .HasForeignKey("SrRxOffRampDataId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_RXOffRampDataPolicy_SR_RXOffRampData");

                    b.Navigation("SrOffRamp");

                    b.Navigation("SrRxOffRampData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDataPolicyCoverageLimitationMessage", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.LookupDataList", "LookupDataList")
                        .WithMany("SrRxOffRampDataPolicyCoverageLimitationMessages")
                        .HasForeignKey("LookupDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_RxOffRampDatapolicyCoverageLimitationMessage_LookupDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.SrRxOffRampDataPolicy", "SrRxOffRampDataPolicy")
                        .WithMany("SrRxOffRampDataPolicyCoverageLimitationMessages")
                        .HasForeignKey("SrRxOffRampDataPolicyId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_RxOffRampDatapolicyCoverageLimitationMessage_SR_RxOffRampDataPolicy");

                    b.Navigation("LookupDataList");

                    b.Navigation("SrRxOffRampDataPolicy");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrOffRamp", "SrOffRamp")
                        .WithOne("SrRxOffRampDatum")
                        .HasForeignKey("Ef8PowerTools.Data.Models.SrRxOffRampDatum", "SrOffRampId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_RXOffRampData_SR_OffRamp");

                    b.Navigation("SrOffRamp");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrSubType", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrSubTypes")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_SubTypes_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.SrSubTypeList", "SrSubTypeList")
                        .WithMany("SrSubTypes")
                        .HasForeignKey("SrSubTypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_SubTypes_SR_SubTypeList");

                    b.Navigation("ServiceRequest");

                    b.Navigation("SrSubTypeList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTestClaim", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("SrTestClaims")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TestClaims_Patients");

                    b.HasOne("Ef8PowerTools.Data.Models.PatientInsurance", "PatientInsurance")
                        .WithMany("SrTestClaims")
                        .HasForeignKey("PatientInsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TestClaims_PatientInsurance");

                    b.HasOne("Ef8PowerTools.Data.Models.Physician", "Provider")
                        .WithMany("SrTestClaims")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TestClaims_Physicians");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "Sr")
                        .WithMany("SrTestClaims")
                        .HasForeignKey("Srid")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TestClaims_ServiceRequests");

                    b.Navigation("Patient");

                    b.Navigation("PatientInsurance");

                    b.Navigation("Provider");

                    b.Navigation("Sr");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTickle", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrTickles")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Tickles_ServiceRequests");

                    b.HasOne("Ef8PowerTools.Data.Models.SrActivityList", "SrActivityList")
                        .WithMany("SrTickles")
                        .HasForeignKey("SrActivityListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Tickles_SR_ActivityList");

                    b.Navigation("ServiceRequest");

                    b.Navigation("SrActivityList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTriage", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("SrTriages")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Triages_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrTriages")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_Triages_ServiceRequests");

                    b.Navigation("Program");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeActivity", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrActivityList", "SrActivityList")
                        .WithMany("SrTypeActivities")
                        .HasForeignKey("SrActivityListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TypeActivity_SR_ActivityList");

                    b.HasOne("Ef8PowerTools.Data.Models.SrTypeList", "SrTypeList")
                        .WithMany("SrTypeActivities")
                        .HasForeignKey("SrTypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TypeActivity_SR_TypeList");

                    b.Navigation("SrActivityList");

                    b.Navigation("SrTypeList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeConfig", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Entity", "Entity")
                        .WithMany("SrTypeConfigs")
                        .HasForeignKey("EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Entity_ID_SRTypeConfig_EntityID");

                    b.HasOne("Ef8PowerTools.Data.Models.SrTypeList", "SrTypeList")
                        .WithMany("SrTypeConfigs")
                        .HasForeignKey("SrTypeListId")
                        .IsRequired()
                        .HasConstraintName("FK_SRTypeConfig_SR_TypeListID");

                    b.Navigation("Entity");

                    b.Navigation("SrTypeList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("SrTypeDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TypeDynamicData_DynamicDataList1");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrTypeDynamicData")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TypeDynamicData_ServiceRequests1");

                    b.Navigation("DynamicDataList");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeGroupDynamicDatum", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.DynamicDataList", "DynamicDataList")
                        .WithMany("SrTypeGroupDynamicData")
                        .HasForeignKey("DynamicDataListId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TypeGroupDynamicData_DynamicDataList");

                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("SrTypeGroupDynamicData")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_SR_TypeGroupDynamicData_ServiceRequests");

                    b.Navigation("DynamicDataList");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrVisit", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Contact", "Contact")
                        .WithMany("SrVisits")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_SR_Visits_Contacts");

                    b.HasOne("Ef8PowerTools.Data.Models.Organization", "Org")
                        .WithMany("SrVisits")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_SR_Visits_Organizations");

                    b.Navigation("Contact");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrhubStatus", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SrhubStatusList", "SrhubStatusList")
                        .WithMany("SrhubStatuses")
                        .HasForeignKey("SrhubStatusListId")
                        .IsRequired()
                        .HasConstraintName("FK_SRHubStatus_SRHubStatusList");

                    b.Navigation("SrhubStatusList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrhubStatusSrtypeList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("SrhubStatusSrtypeLists")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramSRHubStatusList_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.SrhubStatusList", "SrhubStatusList")
                        .WithMany("SrhubStatusSrtypeLists")
                        .HasForeignKey("SrhubStatusListId")
                        .IsRequired()
                        .HasConstraintName("FK_ProgramSRHubStatusList_SRHubStatusList");

                    b.Navigation("Program");

                    b.Navigation("SrhubStatusList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StatesList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.CountriesList", "Country")
                        .WithMany("StatesLists")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_StatesList_CountriesList");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.StmspatientMedicationProfile", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Patient", "Patient")
                        .WithMany("StmspatientMedicationProfiles")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_STMSPatientMedicationProfile_Patients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SubscriptionHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.FundReopenSubscriptionDetail", "Subscription")
                        .WithMany("SubscriptionHistories")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("FK_SubscriptionHistory_FundReopenSubscriptionDetails");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyAnswer", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SurveyHistory", "SurveyHistory")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyHistoryId")
                        .HasConstraintName("FK_SurveyAnswers_SurveyHistory");

                    b.Navigation("SurveyHistory");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyAnswersMutliSelect", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SurveyAnswer", "SurveyAnswer")
                        .WithMany("SurveyAnswersMutliSelects")
                        .HasForeignKey("SurveyAnswerId")
                        .HasConstraintName("FK_SurveyAnswersMutliSelect_SurveyAnswers");

                    b.HasOne("Ef8PowerTools.Data.Models.SurveyLookupDataList", "SurveyLookUpDataList")
                        .WithMany("SurveyAnswersMutliSelects")
                        .HasForeignKey("SurveyLookUpDataListId")
                        .HasConstraintName("FK_SurveyAnswersMutliSelect_SurveyLookupDataList");

                    b.Navigation("SurveyAnswer");

                    b.Navigation("SurveyLookUpDataList");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyCategory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SurveyMaster", "SurveyMaster")
                        .WithMany("SurveyCategories")
                        .HasForeignKey("SurveyMasterId")
                        .HasConstraintName("FK_SurveyCategories_SurveyMaster");

                    b.Navigation("SurveyMaster");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyElement", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SurveyCategory", "SurveyCategory")
                        .WithMany("SurveyElements")
                        .HasForeignKey("SurveyCategoryId")
                        .HasConstraintName("FK_SurveyElements_SurveyCategories");

                    b.Navigation("SurveyCategory");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyHistory", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.SurveyMaster", "SurveyMaster")
                        .WithMany("SurveyHistories")
                        .HasForeignKey("SurveyMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_SurveyHistory_SurveyMaster");

                    b.Navigation("SurveyMaster");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Tamtracker", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("Tamtrackers")
                        .HasForeignKey("ServiceRequestId")
                        .IsRequired()
                        .HasConstraintName("FK_TAMTracker_SR");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserAccessFunctionList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("UserAccessFunctionLists")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_UserAccessFunctionList_Programs");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserInformation", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.AspnetUser", "User")
                        .WithMany("UserInformations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserInformation_aspnet_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserProgram", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("UserPrograms")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPrograms_Programs1");

                    b.HasOne("Ef8PowerTools.Data.Models.UserInformation", "UserInformation")
                        .WithMany("UserPrograms")
                        .HasForeignKey("UserInformationId")
                        .HasConstraintName("FK_UserPrograms_UserInformation1");

                    b.Navigation("Program");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserProgramSetting", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.UserAccessFunctionList", "AccessFunction")
                        .WithMany("UserProgramSettings")
                        .HasForeignKey("AccessFunctionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProgramSettings_UserAccessFunctionList");

                    b.HasOne("Ef8PowerTools.Data.Models.UserProgram", "UserProgram")
                        .WithMany("UserProgramSettings")
                        .HasForeignKey("UserProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProgramSettings_UserPrograms");

                    b.Navigation("AccessFunction");

                    b.Navigation("UserProgram");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserRoleDefault", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.UserAccessFunctionList", "Function")
                        .WithMany("UserRoleDefaults")
                        .HasForeignKey("FunctionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleDefaults_UserAccessFunctionList");

                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("UserRoleDefaults")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleDefaults_Programs");

                    b.HasOne("Ef8PowerTools.Data.Models.UserRoleList", "UserRole")
                        .WithMany("UserRoleDefaults")
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleDefaults_UserRoleList");

                    b.Navigation("Function");

                    b.Navigation("Program");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserRoleList", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Program", "Program")
                        .WithMany("UserRoleLists")
                        .HasForeignKey("ProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleList_Programs");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationDefinition", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ValidationType", "ValidationType")
                        .WithMany("ValidationDefinitions")
                        .HasForeignKey("ValidationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationDefinition_ValidationType");

                    b.Navigation("ValidationType");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationFieldDefinitionMapping", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.ValidationDefinition", "ValidationDefinition")
                        .WithMany("ValidationFieldDefinitionMappings")
                        .HasForeignKey("ValidationDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationFieldDefinitionMapping_ValidationDefinition");

                    b.HasOne("Ef8PowerTools.Data.Models.ValidationField", "ValidationField")
                        .WithMany("ValidationFieldDefinitionMappings")
                        .HasForeignKey("ValidationFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_ValidationFieldDefinitionMapping_ValidationField");

                    b.Navigation("ValidationDefinition");

                    b.Navigation("ValidationField");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteListEntitySetting", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WhiteListChannelType", "WhiteListChannelType")
                        .WithMany("WhiteListEntitySettings")
                        .HasForeignKey("WhiteListChannelTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_WhiteListChannelType");

                    b.HasOne("Ef8PowerTools.Data.Models.WhiteListEntity", "WhiteListEntity")
                        .WithMany("WhiteListEntitySettings")
                        .HasForeignKey("WhiteListEntityId")
                        .IsRequired()
                        .HasConstraintName("FK_WhiteListEntity");

                    b.Navigation("WhiteListChannelType");

                    b.Navigation("WhiteListEntity");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Workflow", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "Product")
                        .WithMany("Workflows")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Workflow_LookupItems_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowField", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "DataTypeNavigation")
                        .WithMany("WorkflowFieldDataTypeNavigations")
                        .HasForeignKey("DataType")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowFields_WorkflowLookupItems_DataTypes");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "InterpretationNavigation")
                        .WithMany("WorkflowFieldInterpretationNavigations")
                        .HasForeignKey("Interpretation");

                    b.Navigation("DataTypeNavigation");

                    b.Navigation("InterpretationNavigation");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowLookupItem", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookup", "Lookup")
                        .WithMany("WorkflowLookupItems")
                        .HasForeignKey("LookupId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowLookupItems_WorkflowLookups");

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowPdf", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowProgramField", "ProgramField")
                        .WithMany("WorkflowPdfs")
                        .HasForeignKey("ProgramFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowPDFs_WorkflowProgramFields");

                    b.Navigation("ProgramField");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowPdftagging", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "DataTypeNavigation")
                        .WithMany("WorkflowPdftaggings")
                        .HasForeignKey("DataType")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowPDFTaggings_WorkflowLookupItems");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowPdf", "Pdf")
                        .WithMany("WorkflowPdftaggings")
                        .HasForeignKey("Pdfid")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowPDFTaggings_WorkflowPDFs");

                    b.Navigation("DataTypeNavigation");

                    b.Navigation("Pdf");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramConfig", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Workflow", "Workflow")
                        .WithMany("WorkflowProgramConfigs")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowProgramConfig_Workflow");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramField", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowProgramField", "ConditionalProgramField")
                        .WithMany("InverseConditionalProgramField")
                        .HasForeignKey("ConditionalProgramFieldId")
                        .HasConstraintName("FK_WorkflowProgramFields_ConditionalField");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "ConditionalResponseOptionNavigation")
                        .WithMany("WorkflowProgramFieldConditionalResponseOptionNavigations")
                        .HasForeignKey("ConditionalResponseOption")
                        .HasConstraintName("FK_WorkflowProgramFields_LookupItems_ResponseOption");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "ConditionalSrsubTypeNavigation")
                        .WithMany("WorkflowProgramFieldConditionalSrsubTypeNavigations")
                        .HasForeignKey("ConditionalSrsubType")
                        .HasConstraintName("FK_WorkflowProgramFields_WorkflowLookupItems_ConditionalValue");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowField", "Field")
                        .WithMany("WorkflowProgramFields")
                        .HasForeignKey("FieldId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowProgramFields_Fields");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "ProgramWorkflowStepNavigation")
                        .WithMany("WorkflowProgramFieldProgramWorkflowStepNavigations")
                        .HasForeignKey("ProgramWorkflowStep")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowProgramFields_LookupItems_ProgramWorkflowStep");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookup", "ResponseOptionKeyNavigation")
                        .WithMany("WorkflowProgramFields")
                        .HasForeignKey("ResponseOptionKey")
                        .HasConstraintName("FK_WorkflowProgramFields_WorkflowLookup_ResponseOptionKey");

                    b.Navigation("ConditionalProgramField");

                    b.Navigation("ConditionalResponseOptionNavigation");

                    b.Navigation("ConditionalSrsubTypeNavigation");

                    b.Navigation("Field");

                    b.Navigation("ProgramWorkflowStepNavigation");

                    b.Navigation("ResponseOptionKeyNavigation");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramInvitationConfig", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Workflow", "Workflow")
                        .WithMany("WorkflowProgramInvitationConfigs")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowProgramInvitationConfig_Workflow");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowResponse", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.EpapApplication", "Application")
                        .WithMany("WorkflowResponses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowResponses_Applications");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowProgramField", "ProgramField")
                        .WithMany("WorkflowResponses")
                        .HasForeignKey("ProgramFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowResponses_WorkflowProgramFields");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "ResponseOptionNavigation")
                        .WithMany("WorkflowResponses")
                        .HasForeignKey("ResponseOption")
                        .HasConstraintName("FL_WorkflowResponses_WorkflowLookupItems_ResponseOption");

                    b.Navigation("Application");

                    b.Navigation("ProgramField");

                    b.Navigation("ResponseOptionNavigation");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowStep", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.Workflow", "Workflow")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowSteps_Workflow");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "WorkflowStep1Navigation")
                        .WithMany("WorkflowStepWorkflowStep1Navigations")
                        .HasForeignKey("WorkflowStep1")
                        .HasConstraintName("FK_Workflow_LookupItems");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "WorkflowType")
                        .WithMany("WorkflowStepWorkflowTypes")
                        .HasForeignKey("WorkflowTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_WorkflowTypeId");

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowStep1Navigation");

                    b.Navigation("WorkflowType");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowStepContent", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "ProgramWorkflowStepNavigation")
                        .WithMany("WorkflowStepContents")
                        .HasForeignKey("ProgramWorkflowStep")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepContent_LookupItems_WorkflowStep");

                    b.HasOne("Ef8PowerTools.Data.Models.Workflow", "Workflow")
                        .WithMany("WorkflowStepContents")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepContent_Workflow");

                    b.Navigation("ProgramWorkflowStepNavigation");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowStepProgramField", b =>
                {
                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowProgramField", "ProgramField")
                        .WithMany("WorkflowStepProgramFields")
                        .HasForeignKey("ProgramFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepProgramFields_WorkflowProgramFields");

                    b.HasOne("Ef8PowerTools.Data.Models.WorkflowLookupItem", "ProgramWorkFlowStep")
                        .WithMany("WorkflowStepProgramFields")
                        .HasForeignKey("ProgramWorkFlowStepId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowStepProgramFields_WorkflowLookupItems");

                    b.Navigation("ProgramField");

                    b.Navigation("ProgramWorkFlowStep");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AlertType", b =>
                {
                    b.Navigation("SentAlertHistories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetApplication", b =>
                {
                    b.Navigation("AspnetMemberships");

                    b.Navigation("AspnetPaths");

                    b.Navigation("AspnetRoles");

                    b.Navigation("AspnetUsers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetPath", b =>
                {
                    b.Navigation("AspnetPersonalizationAllUser");

                    b.Navigation("AspnetPersonalizationPerUsers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.AspnetUser", b =>
                {
                    b.Navigation("AspnetMembership");

                    b.Navigation("AspnetPersonalizationPerUsers");

                    b.Navigation("AspnetProfile");

                    b.Navigation("UserInformations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitHistoryFieldList", b =>
                {
                    b.Navigation("BenefitHistories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigation", b =>
                {
                    b.Navigation("BenefitHistories");

                    b.Navigation("PayerAdminTickets");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.BenefitInvestigationEBv", b =>
                {
                    b.Navigation("EBvCoverageBenefitDetails");

                    b.Navigation("EBvMedicationBenefitDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CareCycle", b =>
                {
                    b.Navigation("CareCyclePhysicians");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CaseRecord", b =>
                {
                    b.Navigation("CaseRecordTransactions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CfIssueType", b =>
                {
                    b.Navigation("CfIssueSubTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ConnectFedexApirequest", b =>
                {
                    b.Navigation("ConnectFedexAddressVerifications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Contact", b =>
                {
                    b.Navigation("ContactAddresses");

                    b.Navigation("ContactDynamicData");

                    b.Navigation("ContactNotes");

                    b.Navigation("ContactPhoneNumbers");

                    b.Navigation("ContactPhysicians");

                    b.Navigation("CoveredCounties");

                    b.Navigation("Mailings");

                    b.Navigation("PatientContacts");

                    b.Navigation("ServiceRequests");

                    b.Navigation("SrVisits");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ContactAddress", b =>
                {
                    b.Navigation("Mailings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.CountriesList", b =>
                {
                    b.Navigation("StatesLists");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DashboardPanelList", b =>
                {
                    b.Navigation("DashboardPanelPrograms");

                    b.Navigation("DashboardPanelUserSettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DataDictionary", b =>
                {
                    b.Navigation("DataConfigurations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DiagnosisList", b =>
                {
                    b.Navigation("PatientDiagnoses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Document", b =>
                {
                    b.Navigation("ConnectModularDocTransactions");

                    b.Navigation("DocumentAttachmentsDocTypes");

                    b.Navigation("DocumentsDocTypes");

                    b.Navigation("MailingDocuments");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentFieldList", b =>
                {
                    b.Navigation("DocumentFields");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentList", b =>
                {
                    b.Navigation("DocumentFieldLists");

                    b.Navigation("DocumentListLetter");

                    b.Navigation("DocumentsDocTypes");

                    b.Navigation("DocumentsSrTypes");

                    b.Navigation("DocumentsTherapyDrugs");

                    b.Navigation("LtrNotificationItems");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsDocType", b =>
                {
                    b.Navigation("DocumentFields");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DocumentsFaxQueue", b =>
                {
                    b.Navigation("DocumentsFqUsers");

                    b.Navigation("DocumentsInboundFaxes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Drug", b =>
                {
                    b.Navigation("RxAdminDoses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.DynamicDataList", b =>
                {
                    b.Navigation("ContactDynamicData");

                    b.Navigation("DynamicDataByLookupData");

                    b.Navigation("InsuranceDynamicData");

                    b.Navigation("OrganizationDynamicData");

                    b.Navigation("PatientDynamicData");

                    b.Navigation("PhysicianDynamicData");

                    b.Navigation("SrPapbyTypeMappings");

                    b.Navigation("SrTypeDynamicData");

                    b.Navigation("SrTypeGroupDynamicData");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageBenefitDetail", b =>
                {
                    b.Navigation("EBvInsuranceFormularyCoverage");

                    b.Navigation("EBvMedicationBenefitDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvCoverageFactor", b =>
                {
                    b.Navigation("EBvAgeLimits");

                    b.Navigation("EBvQuantityLimits");

                    b.Navigation("EBvResourceLinks");

                    b.Navigation("EBvStepDrugs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvDrugPharmacyCoverage", b =>
                {
                    b.Navigation("EBvDrugCoverageAlerts");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvInsuranceFormularyCoverage", b =>
                {
                    b.Navigation("EBvCopayFactors");

                    b.Navigation("EBvCoverageFactor");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMasterTransaction", b =>
                {
                    b.Navigation("EBvCoverageBenefitTransactions");

                    b.Navigation("EBvMedicationBenefitTransactions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvMedicationBenefitDetail", b =>
                {
                    b.Navigation("EBvDrugPharmacyCoverages");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EBvModularTransaction", b =>
                {
                    b.Navigation("ConnectModularDocTransactions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EServicesConfigList", b =>
                {
                    b.Navigation("EServicesProgramConfigs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Entity", b =>
                {
                    b.Navigation("Mailings");

                    b.Navigation("SrTypeConfigs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EntityMergeLog", b =>
                {
                    b.Navigation("EntityMergeDetailsLogs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpapApplication", b =>
                {
                    b.Navigation("WorkflowResponses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.EpapInvitation", b =>
                {
                    b.Navigation("EpapApplications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Faqlist", b =>
                {
                    b.Navigation("SrFaqs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogDetail", b =>
                {
                    b.Navigation("FaxLogExceptions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FaxLogSummary", b =>
                {
                    b.Navigation("FaxLogDetails");

                    b.Navigation("FaxLogExceptions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundEnrollmentApplication", b =>
                {
                    b.Navigation("FundEnrollmentApplicationPatientSites");

                    b.Navigation("FundReopenSubscriptionDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.FundReopenSubscriptionDetail", b =>
                {
                    b.Navigation("FundReopenSubscriptionMedications");

                    b.Navigation("FundReopenSubscriptionSubscribers");

                    b.Navigation("SubscriptionHistories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Insurance", b =>
                {
                    b.Navigation("InsuranceAddresses");

                    b.Navigation("InsuranceDynamicData");

                    b.Navigation("InsuranceNotes");

                    b.Navigation("InsurancePhoneNumbers");

                    b.Navigation("PatientInsuranceMedicalInsurances");

                    b.Navigation("PatientInsurancePharmacyInsurances");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LookupDataList", b =>
                {
                    b.Navigation("DocumentAttachmentsDocTypes");

                    b.Navigation("DynamicDataByLookupData");

                    b.Navigation("GrantUsePolicyExceptionExtensionReasons");

                    b.Navigation("GrantUsePolicyExceptionStatuses");

                    b.Navigation("PanDisenrollmentReversalTemps");

                    b.Navigation("PanDisenrollmentReversals");

                    b.Navigation("PayersPayerCategories");

                    b.Navigation("PhysicianSpecialties");

                    b.Navigation("SrDates");

                    b.Navigation("SrIncompleteReasons");

                    b.Navigation("SrPapbyTypeMappings");

                    b.Navigation("SrRxOffRampDataPolicyCoverageLimitationMessages");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrEmailNotification", b =>
                {
                    b.Navigation("LtrEmailErrorLogs");

                    b.Navigation("LtrEmailTransactions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrFaxNotification", b =>
                {
                    b.Navigation("LtrFaxErrorLogs");

                    b.Navigation("LtrFaxTransactions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrLookupList", b =>
                {
                    b.Navigation("LtrLookupListItems");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrMailNotification", b =>
                {
                    b.Navigation("LtrMailTransaction");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationItem", b =>
                {
                    b.Navigation("LtrEmailNotifications");

                    b.Navigation("LtrFaxNotifications");

                    b.Navigation("LtrMailNotifications");

                    b.Navigation("LtrProcessLogs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.LtrNotificationMaster", b =>
                {
                    b.Navigation("LtrNotificationItems");

                    b.Navigation("LtrProcessLogs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Mailing", b =>
                {
                    b.Navigation("ConnectFedexAddressVerifications");

                    b.Navigation("MailingDocuments");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MdmpatientSearchResult", b =>
                {
                    b.Navigation("DuplicatePatientQueues");

                    b.Navigation("MdmpatientProcessResults");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedeBvofframpCobblurbRule", b =>
                {
                    b.Navigation("MedeBvofframpCobblurbAdditionalRules");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MedvantxInventoryUpdate", b =>
                {
                    b.Navigation("MedvantxLots");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageModule", b =>
                {
                    b.Navigation("ApiresponseMessages");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageThread", b =>
                {
                    b.Navigation("MessageThreadReaders");

                    b.Navigation("Messages");

                    b.Navigation("SrMessageThreads");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MessageType", b =>
                {
                    b.Navigation("MessageThreads");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileDrugSurveyElement", b =>
                {
                    b.Navigation("MobilePatientSurveyAnswers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileMasterSurvey", b =>
                {
                    b.Navigation("MobilePatientSurveyAnswerMasters");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobilePatientSurveyAnswerMaster", b =>
                {
                    b.Navigation("MobilePatientSurveyAnswers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileRefillOrder", b =>
                {
                    b.Navigation("MobileRefillOrderItems");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileSurveyElement", b =>
                {
                    b.Navigation("MobileDrugSurveyElements");

                    b.Navigation("MobileSurveySubElements");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.MobileSurveySubElement", b =>
                {
                    b.Navigation("MobilePatientSurveyAnswers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgency", b =>
                {
                    b.Navigation("NurseAgencyAccreditations");

                    b.Navigation("NurseAgencyAddresses");

                    b.Navigation("NurseAgencyCertifications");

                    b.Navigation("NurseAgencyCoveredCounties");

                    b.Navigation("NurseAgencyNurses");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyAccreditationList", b =>
                {
                    b.Navigation("NurseAgencyAccreditations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.NurseAgencyCertificationList", b =>
                {
                    b.Navigation("NurseAgencyCertifications");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OfframpClient", b =>
                {
                    b.Navigation("ConnectPayerMaps");

                    b.Navigation("OfframpCustomConnectInfos");

                    b.Navigation("OfframpExternalHubInfos");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Organization", b =>
                {
                    b.Navigation("ContactOrganizations");

                    b.Navigation("CoveredCounties");

                    b.Navigation("Messages");

                    b.Navigation("OrganizationAddresses");

                    b.Navigation("OrganizationDynamicData");

                    b.Navigation("OrganizationNotes");

                    b.Navigation("OrganizationNpis");

                    b.Navigation("OrganizationPhoneNumbers");

                    b.Navigation("OrganizationPrograms");

                    b.Navigation("OrganizationTaxIds");

                    b.Navigation("PatientSnoozedAlerts");

                    b.Navigation("PhysicianOrganizations");

                    b.Navigation("RxAdminDoses");

                    b.Navigation("SrOrganizations");

                    b.Navigation("SrVisits");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.OrganizationAddress", b =>
                {
                    b.Navigation("OrganizationNpis");

                    b.Navigation("OrganizationTaxIds");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanApplication", b =>
                {
                    b.Navigation("PanApplicationTokenRoleApplications");

                    b.Navigation("PanApplicationTokenRoleClients");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PanApplicationRole", b =>
                {
                    b.Navigation("PanApplicationTokenRoles");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Patient", b =>
                {
                    b.Navigation("CareCyclePhysicians");

                    b.Navigation("Mailings");

                    b.Navigation("Messages");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientContacts");

                    b.Navigation("PatientDevices");

                    b.Navigation("PatientDiagnoses");

                    b.Navigation("PatientDynamicData");

                    b.Navigation("PatientInsurances");

                    b.Navigation("PatientNotes");

                    b.Navigation("PatientPhoneNumbers");

                    b.Navigation("PatientPhysicians");

                    b.Navigation("PatientSites");

                    b.Navigation("PatientSnoozedAlerts");

                    b.Navigation("PatientStatuses");

                    b.Navigation("RxAdminDoses");

                    b.Navigation("SentAlertHistories");

                    b.Navigation("ServiceRequests");

                    b.Navigation("SrEEnrollments");

                    b.Navigation("SrTestClaims");

                    b.Navigation("StmspatientMedicationProfiles");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientAddress", b =>
                {
                    b.Navigation("Mailings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientInsurance", b =>
                {
                    b.Navigation("BenefitHistories");

                    b.Navigation("BenefitInvestigations");

                    b.Navigation("PayerAdminTickets");

                    b.Navigation("SrTestClaims");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PatientStatusList", b =>
                {
                    b.Navigation("PatientStatusNonHubs");

                    b.Navigation("PatientStatusProgramLists");

                    b.Navigation("PatientStatuses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Payer", b =>
                {
                    b.Navigation("Insurances");

                    b.Navigation("PayerAddresses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PayerDetail", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("FaxNumbers");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Physician", b =>
                {
                    b.Navigation("CareCyclePhysicians");

                    b.Navigation("ContactPhysicians");

                    b.Navigation("DuplicateNpitrackings");

                    b.Navigation("Mailings");

                    b.Navigation("Messages");

                    b.Navigation("PatientPhysicians");

                    b.Navigation("PhysicianAddresses");

                    b.Navigation("PhysicianClinicalTrials");

                    b.Navigation("PhysicianDynamicData");

                    b.Navigation("PhysicianNotes");

                    b.Navigation("PhysicianOrganizations");

                    b.Navigation("PhysicianPhoneNumbers");

                    b.Navigation("PhysicianSignatures");

                    b.Navigation("PhysicianSpecialties");

                    b.Navigation("PhysicianStateLicenses");

                    b.Navigation("PhysiciansDetails");

                    b.Navigation("RxAdminDoses");

                    b.Navigation("SrPhysicians");

                    b.Navigation("SrTestClaims");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PhysicianAddress", b =>
                {
                    b.Navigation("Mailings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalFunctionList", b =>
                {
                    b.Navigation("EServicesConfigLists");

                    b.Navigation("PortalFunctions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalRoster", b =>
                {
                    b.Navigation("PortalRosterAreaMappings");

                    b.Navigation("PortalRosterRelations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingHcpSr", b =>
                {
                    b.Navigation("PortalStagingTblFiles");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistration", b =>
                {
                    b.Navigation("PortalStagingRegistrationAddresses");

                    b.Navigation("PortalStagingRegistrationEntities");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationAddress", b =>
                {
                    b.Navigation("PortalStagingRegistrationAddrEntityMappings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalStagingRegistrationEntity", b =>
                {
                    b.Navigation("PortalStagingRegistrationAddrEntityMappings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.PortalType", b =>
                {
                    b.Navigation("ProgramPortalTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Prescription", b =>
                {
                    b.Navigation("PatientPrescriptions");

                    b.Navigation("PrescriptionEligibilities");

                    b.Navigation("PrescriptionPharmacies");

                    b.Navigation("PrescriptionProviders");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProductRequestedOrder", b =>
                {
                    b.Navigation("ProductRequestedOrderDetails");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Program", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("DashboardPanelPrograms");

                    b.Navigation("DashboardPanelUserSettings");

                    b.Navigation("DataConfigurations");

                    b.Navigation("DocumentsFaxQueues");

                    b.Navigation("EServicesProgramConfigs");

                    b.Navigation("FeedbackConfigurations");

                    b.Navigation("OrganizationAddresses");

                    b.Navigation("OrganizationNpis");

                    b.Navigation("OrganizationPhoneNumbers");

                    b.Navigation("OrganizationTaxIds");

                    b.Navigation("Organizations");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientPhoneNumbers");

                    b.Navigation("PatientStatusProgramLists");

                    b.Navigation("PhysicianPhoneNumbers");

                    b.Navigation("Physicians");

                    b.Navigation("ProgramUrls");

                    b.Navigation("ProgramVendors");

                    b.Navigation("ReportPrograms");

                    b.Navigation("RxAdminDoses");

                    b.Navigation("ServiceRequests");

                    b.Navigation("SrOrderDetails");

                    b.Navigation("SrPappaymentSchedules");

                    b.Navigation("SrPappayments");

                    b.Navigation("SrPapscheduledPayments");

                    b.Navigation("SrTriages");

                    b.Navigation("SrhubStatusSrtypeLists");

                    b.Navigation("UserAccessFunctionLists");

                    b.Navigation("UserPrograms");

                    b.Navigation("UserRoleDefaults");

                    b.Navigation("UserRoleLists");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ProgramPortalType", b =>
                {
                    b.Navigation("PortalFunctions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Reminder", b =>
                {
                    b.Navigation("RemindersChildren");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportList", b =>
                {
                    b.Navigation("ReportParameters");

                    b.Navigation("ReportPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ReportProgram", b =>
                {
                    b.Navigation("ReportActivityHistories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.RuleTriggerCondition", b =>
                {
                    b.Navigation("RuleTriggerActions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ServiceRequest", b =>
                {
                    b.Navigation("BenefitHistories");

                    b.Navigation("BenefitInvestigationEBvs");

                    b.Navigation("BenefitInvestigations");

                    b.Navigation("EBvMasterTransactions");

                    b.Navigation("FundReopenSubscriptionDetails");

                    b.Navigation("GrantUsePolicyExceptions");

                    b.Navigation("Mailings");

                    b.Navigation("SrActivities");

                    b.Navigation("SrAssignments");

                    b.Navigation("SrBridgeEligibilities");

                    b.Navigation("SrCallLogs");

                    b.Navigation("SrDates");

                    b.Navigation("SrEEnrollmentEnrollmentSrs");

                    b.Navigation("SrEEnrollmentTriageSrs");

                    b.Navigation("SrFaqs");

                    b.Navigation("SrIncompleteReasons");

                    b.Navigation("SrMessageThreads");

                    b.Navigation("SrNoteHistories");

                    b.Navigation("SrNotes");

                    b.Navigation("SrOrderDetails");

                    b.Navigation("SrOrganizations");

                    b.Navigation("SrPappaymentSchedules");

                    b.Navigation("SrPaps");

                    b.Navigation("SrPhysicians");

                    b.Navigation("SrSubTypes");

                    b.Navigation("SrTestClaims");

                    b.Navigation("SrTickles");

                    b.Navigation("SrTriages");

                    b.Navigation("SrTypeDynamicData");

                    b.Navigation("SrTypeGroupDynamicData");

                    b.Navigation("Tamtrackers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrActivityList", b =>
                {
                    b.Navigation("FeedbackConfigurations");

                    b.Navigation("ServiceRequests");

                    b.Navigation("SrActivities");

                    b.Navigation("SrCallLogs");

                    b.Navigation("SrTickles");

                    b.Navigation("SrTypeActivities");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrAlternateCoverageResearch", b =>
                {
                    b.Navigation("SrAlternateCoveragePlan");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDataPolicy", b =>
                {
                    b.Navigation("SrMedOffRampDataPolicyCptCodesDetails");

                    b.Navigation("SrMedOffRampDataPolicyResultClientSpecificItems");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrMedOffRampDatum", b =>
                {
                    b.Navigation("SrMedOffRampDataCptCodes");

                    b.Navigation("SrMedOffRampDataDiagnoses");

                    b.Navigation("SrMedOffRampDataPolicies");

                    b.Navigation("SrMedOffRampDataRequestPolicies");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrNote", b =>
                {
                    b.Navigation("SrNoteHistories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrOffRamp", b =>
                {
                    b.Navigation("SrMedOffRampDataCptCodes");

                    b.Navigation("SrMedOffRampDataDiagnoses");

                    b.Navigation("SrMedOffRampDataPolicies");

                    b.Navigation("SrMedOffRampDataRequestPolicies");

                    b.Navigation("SrMedOffRampDatum");

                    b.Navigation("SrOffRampHistories");

                    b.Navigation("SrRxOffRampDataPolicies");

                    b.Navigation("SrRxOffRampDatum");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPappaymentSchedule", b =>
                {
                    b.Navigation("SrPapscheduledPayments");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrPapscheduledPayment", b =>
                {
                    b.Navigation("SrPappayments");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDataPolicy", b =>
                {
                    b.Navigation("SrRxOffRampDataPolicyCoverageLimitationMessages");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrRxOffRampDatum", b =>
                {
                    b.Navigation("SrRxOffRampDataPolicies");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrSubTypeList", b =>
                {
                    b.Navigation("SrSubTypes");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrTypeList", b =>
                {
                    b.Navigation("DataConfigurations");

                    b.Navigation("FeedbackConfigurations");

                    b.Navigation("ServiceRequests");

                    b.Navigation("SrTypeActivities");

                    b.Navigation("SrTypeConfigs");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SrhubStatusList", b =>
                {
                    b.Navigation("SrhubStatusSrtypeLists");

                    b.Navigation("SrhubStatuses");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyAnswer", b =>
                {
                    b.Navigation("SurveyAnswersMutliSelects");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyCategory", b =>
                {
                    b.Navigation("SurveyElements");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyHistory", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyLookupDataList", b =>
                {
                    b.Navigation("SurveyAnswersMutliSelects");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.SurveyMaster", b =>
                {
                    b.Navigation("SurveyCategories");

                    b.Navigation("SurveyHistories");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TriageRecord", b =>
                {
                    b.Navigation("MedvantxInventoryUpdates");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.TriggerEmailTemplateList", b =>
                {
                    b.Navigation("LtrNotificationItems");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserAccessFunctionList", b =>
                {
                    b.Navigation("UserProgramSettings");

                    b.Navigation("UserRoleDefaults");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserGroup", b =>
                {
                    b.Navigation("FeedbackConfigurations");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserInformation", b =>
                {
                    b.Navigation("UserPrograms");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserProgram", b =>
                {
                    b.Navigation("UserProgramSettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.UserRoleList", b =>
                {
                    b.Navigation("UserRoleDefaults");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationDefinition", b =>
                {
                    b.Navigation("ValidationFieldDefinitionMappings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationField", b =>
                {
                    b.Navigation("ValidationFieldDefinitionMappings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.ValidationType", b =>
                {
                    b.Navigation("ValidationDefinitions");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Vendor", b =>
                {
                    b.Navigation("OnsitePharmacies");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteListChannelType", b =>
                {
                    b.Navigation("WhiteListEntitySettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WhiteListEntity", b =>
                {
                    b.Navigation("WhiteListEntitySettings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.Workflow", b =>
                {
                    b.Navigation("WorkflowProgramConfigs");

                    b.Navigation("WorkflowProgramInvitationConfigs");

                    b.Navigation("WorkflowStepContents");

                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowField", b =>
                {
                    b.Navigation("WorkflowProgramFields");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowLookup", b =>
                {
                    b.Navigation("WorkflowLookupItems");

                    b.Navigation("WorkflowProgramFields");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowLookupItem", b =>
                {
                    b.Navigation("WorkflowFieldDataTypeNavigations");

                    b.Navigation("WorkflowFieldInterpretationNavigations");

                    b.Navigation("WorkflowPdftaggings");

                    b.Navigation("WorkflowProgramFieldConditionalResponseOptionNavigations");

                    b.Navigation("WorkflowProgramFieldConditionalSrsubTypeNavigations");

                    b.Navigation("WorkflowProgramFieldProgramWorkflowStepNavigations");

                    b.Navigation("WorkflowResponses");

                    b.Navigation("WorkflowStepContents");

                    b.Navigation("WorkflowStepProgramFields");

                    b.Navigation("WorkflowStepWorkflowStep1Navigations");

                    b.Navigation("WorkflowStepWorkflowTypes");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowPdf", b =>
                {
                    b.Navigation("WorkflowPdftaggings");
                });

            modelBuilder.Entity("Ef8PowerTools.Data.Models.WorkflowProgramField", b =>
                {
                    b.Navigation("InverseConditionalProgramField");

                    b.Navigation("WorkflowPdfs");

                    b.Navigation("WorkflowResponses");

                    b.Navigation("WorkflowStepProgramFields");
                });
#pragma warning restore 612, 618
        }
    }
}
