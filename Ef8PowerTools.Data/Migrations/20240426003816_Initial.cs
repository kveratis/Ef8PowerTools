using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Ef8PowerTools.Data.Migrations
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "_Aaa",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    carecycleid = table.Column<int>(type: "int", nullable: true),
                    StatusType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StatusDesc = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Started = table.Column<DateTime>(type: "datetime", nullable: true),
                    Ended = table.Column<DateTime>(type: "datetime", nullable: true),
                    TimeSpend = table.Column<double>(type: "float", nullable: true),
                    Med_ePayerID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ThreadID = table.Column<int>(type: "int", nullable: true),
                    MessageID = table.Column<int>(type: "int", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "_VendorPhone",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    VendorID = table.Column<int>(type: "int", nullable: true),
                    ProgramVendorID = table.Column<int>(type: "int", nullable: true),
                    VendorName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    VendorID_Dev = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__VendorPhone", x => x.pkid);
                });

            migrationBuilder.CreateTable(
                name: "A_Message",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    src = table.Column<int>(type: "int", nullable: true),
                    threadid = table.Column<int>(type: "int", nullable: true),
                    messageid = table.Column<int>(type: "int", nullable: true),
                    messageid2 = table.Column<int>(type: "int", nullable: true),
                    Source = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    SendTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SenderFirstName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SenderLastName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    Message_Text = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_A_Message", x => x.pkid);
                });

            migrationBuilder.CreateTable(
                name: "AAO_SR_Patients",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    UserName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "AAOSummary",
                columns: table => new
                {
                    AAOSummaryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    CoverageStatus = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CoverageType = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    LISLevel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LISCheckDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientAge = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PatientPhase = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AAOSummary", x => x.AAOSummaryID);
                });

            migrationBuilder.CreateTable(
                name: "AlertTypes",
                columns: table => new
                {
                    AlertTypeID = table.Column<int>(type: "int", nullable: false),
                    AlertTypeName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AlertTypes", x => x.AlertTypeID);
                });

            migrationBuilder.CreateTable(
                name: "AndrogelININLog",
                columns: table => new
                {
                    AndrogelININLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InteractionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Data = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    InteractionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Processed = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LogStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Pending"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AndrogelININLog", x => x.AndrogelININLogID);
                });

            migrationBuilder.CreateTable(
                name: "AnnualGrossIncomeConfiguration",
                columns: table => new
                {
                    AnnualGrossIncomeConfigurationId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    LowerIncomeRangeAmount = table.Column<int>(type: "int", nullable: true),
                    UpperIncomeRangeAmount = table.Column<int>(type: "int", nullable: true),
                    LowerAmount = table.Column<int>(type: "int", nullable: true),
                    UpperAmount = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Updated = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__AnnualGr__13F92CDC2F888D49", x => x.AnnualGrossIncomeConfigurationId);
                });

            migrationBuilder.CreateTable(
                name: "aspnet_Applications",
                columns: table => new
                {
                    ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    ApplicationName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    LoweredApplicationName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_A__C93A4C986FD49106", x => x.ApplicationId)
                        .Annotation("SqlServer:Clustered", false);
                });

            migrationBuilder.CreateTable(
                name: "aspnet_MembershipUsers_AuditLog",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false),
                    ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ChangeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OldValue = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NewValue = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_aspnet_MembershipUsers_AuditLog", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "aspnet_SchemaVersions",
                columns: table => new
                {
                    Feature = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    CompatibleSchemaVersion = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    IsCurrentVersion = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_S__5A1E6BC101F34141", x => new { x.Feature, x.CompatibleSchemaVersion });
                });

            migrationBuilder.CreateTable(
                name: "aspnet_WebEvent_Events",
                columns: table => new
                {
                    EventId = table.Column<string>(type: "char(32)", unicode: false, fixedLength: true, maxLength: 32, nullable: false),
                    EventTimeUtc = table.Column<DateTime>(type: "datetime", nullable: false),
                    EventTime = table.Column<DateTime>(type: "datetime", nullable: false),
                    EventType = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    EventSequence = table.Column<decimal>(type: "decimal(19,0)", nullable: false),
                    EventOccurrence = table.Column<decimal>(type: "decimal(19,0)", nullable: false),
                    EventCode = table.Column<int>(type: "int", nullable: false),
                    EventDetailCode = table.Column<int>(type: "int", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: true),
                    ApplicationPath = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ApplicationVirtualPath = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    MachineName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    RequestUrl = table.Column<string>(type: "nvarchar(1024)", maxLength: 1024, nullable: true),
                    ExceptionType = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Details = table.Column<string>(type: "ntext", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_W__7944C81067FE6514", x => x.EventId);
                });

            migrationBuilder.CreateTable(
                name: "AuditLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SourceApplication = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ActionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ActionDetails = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CreatedDate = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    IpAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuditLog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AutoCallingBVProcessConfiguration",
                columns: table => new
                {
                    AutoCallingBVProcessConfigurationID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRTypeShortDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SRResolution = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    IsBICreateAllowed = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__AutoCall__75589DB98253BA96", x => x.AutoCallingBVProcessConfigurationID);
                });

            migrationBuilder.CreateTable(
                name: "AutoDialer",
                columns: table => new
                {
                    AutoDialerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    TransferPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PrimarySecondaryFlag = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    PayerPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AssignmentGroup = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TransactionResponseId = table.Column<string>(type: "varchar(38)", unicode: false, maxLength: 38, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AutoDialer", x => x.AutoDialerID);
                });

            migrationBuilder.CreateTable(
                name: "BenefitHistory_eBV",
                columns: table => new
                {
                    BenefitHistory_eBV_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldList_eBV_ID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldValue = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BenefitHistory_ImportLog_eBV",
                columns: table => new
                {
                    BenefitHistory_ImportLog_eBV_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: true),
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldListID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldValue = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NA = table.Column<bool>(type: "bit", nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitHistory_ImportLog_eBV", x => x.BenefitHistory_ImportLog_eBV_ID);
                });

            migrationBuilder.CreateTable(
                name: "BenefitHistoryFieldList",
                columns: table => new
                {
                    BenefitHistoryFieldListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<short>(type: "smallint", nullable: false),
                    FieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FieldDataType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LookUpDataListFunctionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FieldLength = table.Column<short>(type: "smallint", nullable: true),
                    MinValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    AllowNA = table.Column<bool>(type: "bit", nullable: false),
                    Required = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TemplateTagName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FieldDisplay = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ByTypeOnly = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Script = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitHistoryFieldList", x => x.BenefitHistoryFieldListID);
                });

            migrationBuilder.CreateTable(
                name: "BenefitHistoryFieldList_eBV",
                columns: table => new
                {
                    BenefitHistoryFieldList_eBV_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<short>(type: "smallint", nullable: false),
                    FieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FieldDataType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LookUpDataListFunctionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FieldLength = table.Column<short>(type: "smallint", nullable: true),
                    MinValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    AllowNA = table.Column<bool>(type: "bit", nullable: false),
                    Required = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TemplateTagName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FieldDisplay = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ByTypeOnly = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Script = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BenefitHistoryFieldMappingList_eBV",
                columns: table => new
                {
                    BenefitHistoryFieldMappingList_eBV_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    eBvFieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    BIFieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitHistoryFieldMappingList_eBV", x => x.BenefitHistoryFieldMappingList_eBV_ID);
                });

            migrationBuilder.CreateTable(
                name: "BenefitInvestigation_Realtime",
                columns: table => new
                {
                    BenefitInvestigation_Realtime_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    BI_ID = table.Column<int>(type: "int", nullable: true),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BenefitInvestigationWorkDone = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BenefitInvestigationTypeFields",
                columns: table => new
                {
                    BenefitInvestigationTypeFieldsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<short>(type: "smallint", nullable: false),
                    BenefitInvestigationType = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    BenefitHistoryFieldListID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Required = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AllowNA = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    FieldDisplay = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitInvestigationTypeFields", x => x.BenefitInvestigationTypeFieldsID);
                });

            migrationBuilder.CreateTable(
                name: "BI_NDC_History",
                columns: table => new
                {
                    BI_NDC_History_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: true),
                    BenefitHistoryFieldListID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldValue = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NA = table.Column<bool>(type: "bit", nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BI_NDC_History", x => x.BI_NDC_History_ID);
                });

            migrationBuilder.CreateTable(
                name: "BI_NDC_History_ImportLog_eBV",
                columns: table => new
                {
                    BI_NDC_ImportLog_eBV_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: false),
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: false),
                    BI_NDC_History_ID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldListID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldValue = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NA = table.Column<bool>(type: "bit", nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BI_NDC_History_ImportLog_eBV", x => x.BI_NDC_ImportLog_eBV_ID);
                });

            migrationBuilder.CreateTable(
                name: "BI_NDC_Records",
                columns: table => new
                {
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    BIType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OriginalID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BI_NDC_Records", x => x.BI_NDC_RecordID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_EntityToTerr_Stage",
                columns: table => new
                {
                    EntityToTerrID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Program = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EntityType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EntityID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EntityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Biomarin_EntityToTerr_Stage", x => x.EntityToTerrID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_PatientDailyDiagnosis",
                columns: table => new
                {
                    PatientDailyDiagnosisID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ARUPAccessionNumber = table.Column<long>(type: "bigint", nullable: true),
                    CollectionDate = table.Column<DateOnly>(type: "date", nullable: true),
                    CollectionTime = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    OrderDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ResultVerificationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TestResult = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianInstitutionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianInstitutionCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianInstitutionState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PhysicianInstitutionPostalCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    EnhancedReportPDF = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UBCPatientID = table.Column<int>(type: "int", nullable: true),
                    UBCPatientStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StatusDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Biomarin_PatientDailyDiagnosis", x => x.PatientDailyDiagnosisID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_PatientDailyDiagnosis_AuditLog",
                columns: table => new
                {
                    PatientDailyDiagnosis_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientDailyDiagnosisID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ARUPAccessionNumber = table.Column<long>(type: "bigint", nullable: true),
                    CollectionDate = table.Column<DateOnly>(type: "date", nullable: true),
                    CollectionTime = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    OrderDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ResultVerificationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TestResult = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianInstitutionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianInstitutionCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianInstitutionState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PhysicianInstitutionPostalCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    EnhancedReportPDF = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UBCPatientID = table.Column<int>(type: "int", nullable: true),
                    UBCPatientStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StatusDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__PatientD__3AC9B073FB3628C7", x => x.PatientDailyDiagnosis_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_PatientREMS",
                columns: table => new
                {
                    PatientREMSID = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: false),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientBirthDate = table.Column<DateOnly>(type: "date", nullable: false),
                    PatientREMSStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    REMSStatusDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false),
                    PatientState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    PatientZip = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PDRFileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Biomarin_PatientREMS", x => x.PatientREMSID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_PrescriberREMS",
                columns: table => new
                {
                    PrescriberREMSID = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: false),
                    PrescriberNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    PrescriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PrescriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PrescriberREMSStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    REMSStatusDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PrescriberCity = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false),
                    PrescriberState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    PrescriberZip = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PRDRFileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Biomarin_PrescriberREMS", x => x.PrescriberREMSID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_Roster_Stage",
                columns: table => new
                {
                    Roster_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Program = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RegionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DistrictID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TerritoryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EMAIL = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    First = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Last = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Gender = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserLevel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Assignment_Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Moblie = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EffectiveDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmployeeID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Biomarin_Roster_Stage", x => x.Roster_ID);
                });

            migrationBuilder.CreateTable(
                name: "Biomarin_ZipToTerr_Stage",
                columns: table => new
                {
                    ZipTerrStageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Program = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DistrictCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RegionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Biomarin_ZipToTerr_Stage", x => x.ZipTerrStageID);
                });

            migrationBuilder.CreateTable(
                name: "BiomarinConsentedPatients",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    LegacyLegalReleaseExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ProviderAuthorizationExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    BioMarinAuthorizationPAFExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    created = table.Column<DateTime>(type: "datetime", nullable: true),
                    lastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    OtherConsentExpDate = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BiomarinConsentedPatients_1", x => x.PatientID);
                });

            migrationBuilder.CreateTable(
                name: "CareCycleOrganizations",
                columns: table => new
                {
                    CareCycleOrganizationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CareCycleID = table.Column<int>(type: "int", nullable: false),
                    PatientOrganizationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    Relationship = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CareCycleOrganizationID", x => x.CareCycleOrganizationID);
                });

            migrationBuilder.CreateTable(
                name: "CareCycles",
                columns: table => new
                {
                    CareCycleID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Source = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CareCycleTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareCycleStartDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    CareCycleStartedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CareCycleEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CareCycleEndedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareCycleStatus = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    CareCycleState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LegacyID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLocationID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianLocationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationLocationID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Custom1_FieldLabel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Custom1_FieldValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientHubStatus = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientSPStatus = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientOtherStatusType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientOtherStatusValue = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientHubStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientSPStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugStartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientHasGenericperCC = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CareCycles", x => x.CareCycleID);
                });

            migrationBuilder.CreateTable(
                name: "CareCycles_Audit",
                columns: table => new
                {
                    CareCycles_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Source = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareCycleTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareCycleStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CareCycleStartedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareCycleEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CareCycleEndedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareCycleStatus = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    CareCycleState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LegacyID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLocationID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianLocationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationLocationID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Custom1_FieldLabel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Custom1_FieldValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientHubStatus = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientSPStatus = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientOtherStatusType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientOtherStatusValue = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientHubStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientSPStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created_log = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Change_Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CareCycleSchedule",
                columns: table => new
                {
                    CareCycleScheduleID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    IsRepeat = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Sch_RepeatType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sch_Interval = table.Column<int>(type: "int", nullable: true),
                    Sch_RepeatSubType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Sch_MonthOption = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sch_WeekDayOption = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Sch_RepeatEnd = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sch_EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Sch_EndOccurrence = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    Comment = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Summary = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FirstScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NextScheduleDate = table.Column<DateOnly>(type: "date", nullable: true),
                    SRType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRSubType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ReasonForScheduleChange = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CareCycleSchedule", x => x.CareCycleScheduleID);
                });

            migrationBuilder.CreateTable(
                name: "CareCycleSchedule_Audit",
                columns: table => new
                {
                    CareCycleSchedule_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CareCycleScheduleID = table.Column<int>(type: "int", nullable: true),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    IsRepeat = table.Column<bool>(type: "bit", nullable: true),
                    Sch_RepeatType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sch_Interval = table.Column<int>(type: "int", nullable: true),
                    Sch_RepeatSubType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Sch_MonthOption = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sch_WeekDayOption = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Sch_RepeatEnd = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sch_EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Sch_EndOccurrence = table.Column<int>(type: "int", nullable: true),
                    Comment = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Summary = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FirstScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NextScheduleDate = table.Column<DateOnly>(type: "date", nullable: true),
                    SRType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRSubType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ReasonForScheduleChange = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: true),
                    Created_log = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Change_Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CareMetX_Dir_Sales_wProf_IDs",
                columns: table => new
                {
                    Drug_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SP_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SP_Patient_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Patient_Year_of_Birth = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SP_Provider_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Order_Nbr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Trans_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Referred_By = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_First_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_Last_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_Addr1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_Addr2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Ship_Date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Qty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Days_Sup = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fill_Nbr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Refills_Remain = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Med_Plan_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBM_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Patient_Copay = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Bank_Insur_Nbr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Grp_Nbr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Proc_Ctrl_Nbr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Trans_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Diag_Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Terr_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Provider_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PROF_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPINUM = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FIRST_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MIDDLE_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LAST_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_LOCATION_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_ADDRESS1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_ADDRESS2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_CITY = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_STATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_ZIP5 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CaseEnrollment",
                columns: table => new
                {
                    CaseEnrollmentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CaseRecordID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    EnrollmentID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PatientEnrollmentGuid = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CaseEnrollment", x => x.CaseEnrollmentId);
                });

            migrationBuilder.CreateTable(
                name: "CaseJourneyByDrug",
                columns: table => new
                {
                    CaseJourneyByDrugID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DrugID = table.Column<int>(type: "int", nullable: true),
                    MileStoneID = table.Column<int>(type: "int", nullable: false),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    TransactionCode = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HappyPath = table.Column<bool>(type: "bit", nullable: false),
                    SortOrder = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("DF_CaseJourneyByDrug_CaseJourneyByDrugID_PK_N", x => x.CaseJourneyByDrugID);
                });

            migrationBuilder.CreateTable(
                name: "CaseJourneyCloserRulesSetting",
                columns: table => new
                {
                    CaseJourneyCloserRuleSettingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ServiceRequestResolution = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CaseJourneyState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__CaseJour__3B17BC73AC29B4FB", x => x.CaseJourneyCloserRuleSettingId);
                });

            migrationBuilder.CreateTable(
                name: "CaseManager_ByRegion",
                columns: table => new
                {
                    CaseManagerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    CaseManagerFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CaseManagerLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaseManagerMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Region = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CaseManager_ByRegion", x => x.CaseManagerID);
                });

            migrationBuilder.CreateTable(
                name: "CaseRecord",
                columns: table => new
                {
                    CaseRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CaseDrugName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    CaseSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    CaseClosed = table.Column<bool>(type: "bit", nullable: false),
                    CaseStartTrigger = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CaseIntakeID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    LocationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CaseClosureReason = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__CaseRecord_CaseRecordID_N", x => x.CaseRecordID);
                });

            migrationBuilder.CreateTable(
                name: "Cayston_ProcessActivityMapping",
                columns: table => new
                {
                    Activity = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    processdate = table.Column<string>(name: "process date", type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Cayston_Staging_Patient_Referral",
                columns: table => new
                {
                    PatientReferralID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ProviderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    isNewProvider = table.Column<bool>(type: "bit", nullable: true),
                    ProviderName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderPhone = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderAddress1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderCity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderZip = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrimaryInsuranceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryInsuranceName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryInsurancePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryInsuranceCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CFCareCenterID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    isNewCFCareCenter = table.Column<bool>(type: "bit", nullable: true),
                    CFCareCenterName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CFCareCenterPhone = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CFCareCenterAddress1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CFCareCenterAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CFCareCenterCity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CFCareCenterState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CFCareCenterZip = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PAFDocument = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    IPAddress = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ICD9Code = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    RecordStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordStatusReason = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DuplicatePatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatingSPID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatingSP = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cayston_Staging_Patient_Referral", x => x.PatientReferralID);
                });

            migrationBuilder.CreateTable(
                name: "CF_IssueType",
                columns: table => new
                {
                    CF_IssueTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_TypeList = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    IssueTypeShortDesc = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    IssueTypeFullDesc = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__CF_Issue__2756E855FDFB3D0E", x => x.CF_IssueTypeID);
                });

            migrationBuilder.CreateTable(
                name: "CheckInsuranceResult",
                columns: table => new
                {
                    PatientId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ClaimsViewAuditLog",
                columns: table => new
                {
                    ViewLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ClaimID = table.Column<int>(type: "int", nullable: false),
                    ViewSource = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClaimsViewAuditLog1", x => x.ViewLogID);
                });

            migrationBuilder.CreateTable(
                name: "CMMStatusMailService",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RequestID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EmailId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Subject = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    EmailBody = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    SendFlag = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdateBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CmmStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CmmOutcome = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CMMStatusMailService", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Coherus_Employees_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleInitial = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BusinessUnit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmployeeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address_Line_1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address_Line_2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ZIP_Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Role = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ManagerId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Department_Number = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active_Start_Date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active_End_Date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Is_Active = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Coherus_Employees", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Coherus_Group_Assignment_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EMPLOYEE_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GROUP_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_TERRITORY = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PRIMARY_REPRESENTATIVE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REP_ALIGNMENT_ALLOCATION_PERCENT = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REP_ALIGNMENT_ACTIVE_START_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REP_ALIGNMENT_ACTIVE_END_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REP_ALIGNMENT_ACTIVE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Coherus_Group_Geo_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GROUP_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SALES_TEAM_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SALES_TEAM_ACTIVE_START_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SALES_TEAM_ACTIVE_END_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REGION_OR_COUNTY = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STATE_OR_PROVINCE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ZIP_ALIGNMT_ACTIVE_START_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ZIP_ALIGNMT_ACTIVE_END_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IS_ACTIVE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Coherus_Groups_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GROUP_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GROUP_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GROUP_LEVEL = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GROUP_TYPE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PARENT_GROUP_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BUSINESS_UNIT_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BUSINESS_UNIT_ACTIVE_START_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BUSINESS_UNIT_ACTIVE_END_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SALES_TEAM_NAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TERR_ACTIVE_START_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TERR_ACTIVE_END_DATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Coherus_Groups_Stage", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Coherus_Roster_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepMiddleInitial = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Country = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RepLogin = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Company = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field4 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field5 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field6 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field7 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field8 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field9 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field10 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignmentStart = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignmentEnd = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AreaCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AreaName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AlignmentCodeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Coherus_Roster_Stage", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Coherus_ZipTerr_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GROUP_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Coherus_ZipTerr_Stage", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Communications",
                columns: table => new
                {
                    CommunicationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Portal_UserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommunicationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Category = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Author = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Details = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusComments = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Communications", x => x.CommunicationID);
                });

            migrationBuilder.CreateTable(
                name: "ConnectFedexAPIErrorLogs",
                columns: table => new
                {
                    ConnectFedexAPIErrorLogID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ApplicationName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ScreenName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, defaultValue: ""),
                    ErrorMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: ""),
                    ExceptionMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: ""),
                    ErrorLogIDKeysReturn = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: ""),
                    UpdatedByIDKey = table.Column<long>(type: "bigint", nullable: false),
                    UpdatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConnectFedexAPIErrorLog", x => x.ConnectFedexAPIErrorLogID);
                });

            migrationBuilder.CreateTable(
                name: "ConnectFedexAPIRequests",
                columns: table => new
                {
                    ConnectFedexAPIRequestID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, defaultValue: ""),
                    ServiceURL = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false, defaultValue: ""),
                    Parameters = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: ""),
                    CreatedDt = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedByID = table.Column<long>(type: "bigint", nullable: false),
                    UpdatedDt = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "(getdate())"),
                    UpdatedID = table.Column<long>(type: "bigint", nullable: false),
                    SourceIPAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, defaultValue: ""),
                    SourceHostName = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: "")
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_ConnectFedexAPIRequest_ConnectFedexAPIRequestIDKey", x => x.ConnectFedexAPIRequestID);
                });

            migrationBuilder.CreateTable(
                name: "ConnectiveRxAPILog",
                columns: table => new
                {
                    ConnectiveRxAPILogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    APIRequest = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    APIResponse = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Message = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    APIType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConnectiveRxAPILog", x => x.ConnectiveRxAPILogID);
                });

            migrationBuilder.CreateTable(
                name: "ContactAddresses_Audit",
                columns: table => new
                {
                    ContactAddresses_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactAddressID = table.Column<int>(type: "int", nullable: false),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FedexAddressVerifiedFlg = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ContactLicenses",
                columns: table => new
                {
                    ContactLicenseID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LicenseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactLicenses", x => x.ContactLicenseID);
                });

            migrationBuilder.CreateTable(
                name: "ContactPhoneNumbers_Audit",
                columns: table => new
                {
                    ContactPhoneNumbers_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactPhoneNumberID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    OKtoLeaveMsg = table.Column<bool>(type: "bit", nullable: true),
                    PreferredTime = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ContactPhysicians_Audit",
                columns: table => new
                {
                    ContactPhysicians_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactPhysicianID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Delegate = table.Column<bool>(type: "bit", nullable: true),
                    DelegateDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Doneby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_Log = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby_Log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactPhysicians_Audit", x => x.ContactPhysicians_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "ContactPrograms",
                columns: table => new
                {
                    ContactProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SharedRecordProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactPrograms", x => x.ContactProgramID);
                });

            migrationBuilder.CreateTable(
                name: "Contacts_Audit",
                columns: table => new
                {
                    Contacts_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Prefix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ContactType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MasterContactID = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    EmailUpdated = table.Column<bool>(type: "bit", nullable: true),
                    ContactCategory = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Copay_Adjudication_DenialReasons",
                columns: table => new
                {
                    Copay_Adjudication_DenialReason_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Copay_Adjudication_ID = table.Column<int>(type: "int", nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Copay_Adjudication_DenialReasons", x => x.Copay_Adjudication_DenialReason_ID);
                });

            migrationBuilder.CreateTable(
                name: "Copay_Adjudications",
                columns: table => new
                {
                    Copay_Adjudication_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    AdjudicationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SP_NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SP_UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DOB = table.Column<DateOnly>(type: "date", nullable: false),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Qty = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    DateofService = table.Column<DateOnly>(type: "date", nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CopayAmt = table.Column<decimal>(type: "money", nullable: false),
                    AdjudicationResult = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AckNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    UserIP = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Reversed = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ClaimType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    ProcessorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DateProcessed = table.Column<DateTime>(type: "datetime", nullable: true),
                    PaymentMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ThirdPartyPaymentMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SiteOfService = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PrescriberNpi = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentClaimId = table.Column<int>(type: "int", nullable: true),
                    ReasonRejectCode = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    TaxId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayorAmount = table.Column<decimal>(type: "money", nullable: true),
                    OutOfPocket = table.Column<decimal>(type: "money", nullable: true),
                    IsTrialCard = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Copay_Adjudications", x => x.Copay_Adjudication_ID);
                });

            migrationBuilder.CreateTable(
                name: "Copay_Invoices",
                columns: table => new
                {
                    Copay_Invoice_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    SPID = table.Column<int>(type: "int", nullable: false),
                    InvoiceNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Amount = table.Column<decimal>(type: "money", nullable: false),
                    InvoiceDate = table.Column<DateOnly>(type: "date", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Copay_Invoices", x => x.Copay_Invoice_ID);
                });

            migrationBuilder.CreateTable(
                name: "Copay_PSKWRedemption",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Rxnum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DateOfFill = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DateWritten = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaySupply = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DAW = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NewRefillCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NumberOfRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherCoverageCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DateProcessed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NABP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhmName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhmAdd1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhmAdd2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhmCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhmState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhmZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyFN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyMI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyLN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhySuffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyProfDesg = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Spec1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Spec2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyAdd1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyAdd2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubmissionMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Quantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientBenefit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCopayBeforeBenefitApplied = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientOOP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyTransactionFee = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Linenumber = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Copay_PSKWRedemption", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "CornerStone_CFS_Shipments",
                columns: table => new
                {
                    recordid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    HubSRFID = table.Column<string>(name: "Hub SRFID", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    PatientID = table.Column<string>(name: "Patient ID", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    DrID = table.Column<string>(name: "Dr ID", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    deano = table.Column<string>(name: "dea no", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    npiid = table.Column<string>(name: "npi id", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    lname = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    fname = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    city = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    statecd = table.Column<string>(name: "state cd", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    zip = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    ShipDate = table.Column<string>(name: "Ship Date", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    dispndc = table.Column<string>(name: "disp ndc", type: "nvarchar(255)", maxLength: 255, nullable: true),
                    descr = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    dispenseqty = table.Column<double>(name: "dispense qty", type: "float", nullable: true),
                    dispdayssupply = table.Column<double>(name: "disp days supply", type: "float", nullable: true),
                    PertzyeCopayCardAmt = table.Column<decimal>(name: "Pertzye Copay Card Amt", type: "money", nullable: true),
                    patientpaypaid = table.Column<decimal>(name: "patient pay paid", type: "money", nullable: true),
                    DXCode = table.Column<string>(name: "DX Code", type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CountriesList",
                columns: table => new
                {
                    CountryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Name = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.CountryID);
                });

            migrationBuilder.CreateTable(
                name: "CountryList",
                columns: table => new
                {
                    CountryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Country = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    CountryCallingCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CRUSH_FILE_LOG",
                columns: table => new
                {
                    SFTP_LOG_ID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LOG_ROW_NUM = table.Column<long>(type: "bigint", nullable: true),
                    LogDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    SFTPUserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SFTPUserIP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FileName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FileSizeBytes = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SFTPOperation = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SFTP_LOG", x => x.SFTP_LOG_ID);
                });

            migrationBuilder.CreateTable(
                name: "CRUSHFTP_LOG",
                columns: table => new
                {
                    LOG_ROW_NUM = table.Column<long>(type: "bigint", nullable: false),
                    LOG_MILLIS = table.Column<long>(type: "bigint", nullable: true),
                    LOG_TAG = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LOG_DATA = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRUSHFTP_LOG", x => x.LOG_ROW_NUM);
                });

            migrationBuilder.CreateTable(
                name: "customer",
                columns: table => new
                {
                    idcustomer = table.Column<int>(type: "int", nullable: true),
                    customername = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    idusstate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CustomerState",
                columns: table => new
                {
                    idState = table.Column<int>(type: "int", nullable: true),
                    LabelState = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DailyStatusChanges",
                columns: table => new
                {
                    DailyStatusChangeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ACNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SPPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    SPName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberAddressLine1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberAddressLine2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PrescriberZIP = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    CertificationNumber = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PrescriberNPI = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PrescriberChange = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FRPCategoryChange = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    FNRPType = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ChangeDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PersonContacted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TitleofPersonContacted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DateofContact = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DailyStatusChanges", x => x.DailyStatusChangeID);
                });

            migrationBuilder.CreateTable(
                name: "DashboardPanelList",
                columns: table => new
                {
                    DashboardPanelListID = table.Column<int>(type: "int", nullable: false),
                    Panel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    PanelType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Table")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DashboardPanelList", x => x.DashboardPanelListID);
                });

            migrationBuilder.CreateTable(
                name: "DATABASECHANGELOG",
                columns: table => new
                {
                    ID = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    AUTHOR = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    FILENAME = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    DATEEXECUTED = table.Column<DateTime>(type: "datetime2(3)", precision: 3, nullable: false),
                    ORDEREXECUTED = table.Column<int>(type: "int", nullable: false),
                    EXECTYPE = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    MD5SUM = table.Column<string>(type: "nvarchar(35)", maxLength: 35, nullable: true),
                    DESCRIPTION = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    COMMENTS = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    TAG = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    LIQUIBASE = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CONTEXTS = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    LABELS = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    DEPLOYMENT_ID = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DATABASECHANGELOGLOCK",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false),
                    LOCKED = table.Column<bool>(type: "bit", nullable: false),
                    LOCKGRANTED = table.Column<DateTime>(type: "datetime2(3)", precision: 3, nullable: true),
                    LOCKEDBY = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATABASECHANGELOGLOCK", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DATABASECHANGESTATUS",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordCount = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Success = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATABASECHANGESTATUS", x => x.pkid);
                });

            migrationBuilder.CreateTable(
                name: "DATABASECHANGESTRELEASEBRANCH",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DBName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PathName = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FolderName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ReleaseDate = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ConnectVersion = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    LiquibaseVersion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DATABASECHANGESTRELEASEBRANCH", x => x.pkid);
                });

            migrationBuilder.CreateTable(
                name: "DataDictionary",
                columns: table => new
                {
                    DataDictionaryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FieldStorageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DataArea = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DataName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TableName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(6,2)", nullable: true),
                    ReferralField = table.Column<bool>(type: "bit", nullable: true),
                    RequiredforSRCreation = table.Column<bool>(type: "bit", nullable: true),
                    RequiredforSRClose = table.Column<bool>(type: "bit", nullable: true),
                    Tooltip = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EnableHideCheckBox = table.Column<bool>(type: "bit", nullable: true),
                    FlagToDisplay = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Table_1", x => x.DataDictionaryID);
                });

            migrationBuilder.CreateTable(
                name: "Date_WorkDay",
                columns: table => new
                {
                    Date = table.Column<DateOnly>(type: "date", nullable: false),
                    WorkDay = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Date_Wor__77387D06695412AE", x => x.Date);
                });

            migrationBuilder.CreateTable(
                name: "Demo_SRAccountAddresses",
                columns: table => new
                {
                    AccountID = table.Column<int>(type: "int", nullable: false),
                    AccountAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DemoAccountID", x => x.AccountID);
                });

            migrationBuilder.CreateTable(
                name: "DF_AutomaticTaskLog",
                columns: table => new
                {
                    DF_AutomaticTaskLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    RuleTriggerConditionID = table.Column<int>(type: "int", nullable: true),
                    RuleName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Comment = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DF_AutomaticTaskRecords",
                columns: table => new
                {
                    DF_AutomaticTaskRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TransactionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RuleTriggerConditionID = table.Column<int>(type: "int", nullable: true),
                    RuleTriggerActionID = table.Column<int>(type: "int", nullable: true),
                    RecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Job_rootPid = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_AutomaticTaskRecords", x => x.DF_AutomaticTaskRecordID);
                });

            migrationBuilder.CreateTable(
                name: "DF_CDC",
                columns: table => new
                {
                    DF_CDCID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ProcessName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    KeyValStr = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    KeyValInt = table.Column<int>(type: "int", nullable: true),
                    CheckSumVal = table.Column<string>(type: "varchar(128)", unicode: false, maxLength: 128, nullable: true),
                    Optout = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Table_DF_CDC", x => x.DF_CDCID);
                });

            migrationBuilder.CreateTable(
                name: "DF_CustomSchedule",
                columns: table => new
                {
                    DF_CustomScheduleID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DF_JobID = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CustomParam1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CustomParam2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DF_DataExtractMaxEntityID",
                columns: table => new
                {
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: true),
                    ContactAddressID = table.Column<int>(type: "int", nullable: true),
                    PatientAddressID = table.Column<int>(type: "int", nullable: true),
                    InsuranceID = table.Column<int>(type: "int", nullable: true),
                    SurveyAnswerID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DF_EbvTracking",
                columns: table => new
                {
                    TrackingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ClientPatientId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientSSN = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    MedicareId = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true),
                    Product = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    CptCode1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CptCode2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CptCode3 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CptCode4 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CptCode5 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrimaryDiagnosis = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SecondaryDiagnosis = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TertiaryDiagnosis = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    POS = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderTitle = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ProviderTaxId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PracticeName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PracticeAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PracticeAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PracticeCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PracticeState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PracticeZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PracticeNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PracticeFaxnumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PracticeContactFName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PracticeContactLName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NoFaxingFlag = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    MFG = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy1MemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy1PayerId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy1PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Policy1PatientSubscriber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy1SubscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy1SubscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy1SubscriberDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy1SubscriberGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy1SubscriberMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy1PriorAuthOnFile = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy1PriorAuthNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy1PriorAuthtype = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy1PriorAuthEffDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy1PriorAuthEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy1PriorAuthmisc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2MemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2PayerId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy2PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Policy2PatientSubscriber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy2SubscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2SubscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2SubscriberDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy2SubscriberGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy2SubscriberMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2PriorAuthonFile = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy2PriorAuthNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2PriorAuthType = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy2PriorAuthEffDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy2PriorAuthEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy2PriorAuthMisc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy2McSuppPlanLetter = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy3MemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy3PayerId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy3PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Policy3PatientSubscriber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy3SubscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy3SubscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy3SubscriberDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy3SubscriberGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy3SubscriberMemberid = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy3PriorAuthOnFile = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy3PriorAuthNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Policy3PriorAuthType = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Policy3PriorAuthEffDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy3PriorAuthEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Policy3PriorAuthMisc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InternalReference = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    CopayCardProgram = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    AltCoverageReferral = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    NextScheduledDate = table.Column<DateOnly>(type: "date", nullable: true),
                    DateOfService = table.Column<DateOnly>(type: "date", nullable: true),
                    SiteOfficeFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ResponseMessage = table.Column<string>(type: "text", nullable: true),
                    ResponseId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResponseStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Processed = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Updated = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_DF_EbvTracking", x => x.TrackingId);
                });

            migrationBuilder.CreateTable(
                name: "DF_EmailLog",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EmailTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EventType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordID = table.Column<int>(type: "int", nullable: true),
                    EmailBody = table.Column<string>(type: "text", nullable: true),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EmailStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Job_root_pid = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_EmailLog", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_Fields",
                columns: table => new
                {
                    DF_FieldID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DF_FileID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    FieldOrder = table.Column<int>(type: "int", nullable: true),
                    FieldName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    KeyType = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    DataType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxLength = table.Column<int>(type: "int", nullable: true),
                    Required = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true, defaultValueSql: "((0))"),
                    Mask = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExtracxtFieldID", x => x.DF_FieldID);
                });

            migrationBuilder.CreateTable(
                name: "DF_Files",
                columns: table => new
                {
                    DF_FileID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DF_JobID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FileMask = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Separator = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileOrder = table.Column<int>(type: "int", nullable: true),
                    Header = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    StoredProc = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Query = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HeaderValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SPJsonParameters = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DBNameForFileData = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExtracxtFileID", x => x.DF_FileID);
                });

            migrationBuilder.CreateTable(
                name: "DF_InboundFileErrors",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ErrorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ErrorText = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RowNumber = table.Column<int>(type: "int", nullable: true),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RecordContent = table.Column<string>(type: "text", nullable: true),
                    InputRow = table.Column<string>(type: "text", nullable: true),
                    ShowOnRpt = table.Column<bool>(type: "bit", nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: true),
                    ResolvedResolution = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ResolvedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResolvedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RawInputRow = table.Column<string>(type: "text", nullable: true),
                    ErrorCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "1 – Not processed/not loaded")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_InboundFileErrors", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_InboundFileLog",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NumberOfRecords = table.Column<int>(type: "int", nullable: true),
                    Response = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    ResponseFileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Job_root_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Partner = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MaxLastUpdated = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InboundFileLog", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_InboundRecordDetails",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    RowNumber = table.Column<int>(type: "int", nullable: false),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    RecordContent = table.Column<string>(type: "text", nullable: true),
                    RawInputRow = table.Column<string>(type: "text", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SPID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    RecordID2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RecordID3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Processed = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_InboundRecordDetails", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_JobAlerts",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    job_root_pid = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Partner = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Message = table.Column<string>(type: "text", nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RecordID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DF_JobExes",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Partner = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExeName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExePath = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    JobType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastRunBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastRunDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_JobExes", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_Jobs",
                columns: table => new
                {
                    DF_JobID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    JobName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    JobType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Incremental = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ZipFileMask = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Zip = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    SuccessEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FailureEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ControlFile = table.Column<bool>(type: "bit", nullable: true),
                    ControlFileMask = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ControlHeaderValue = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ControlLayout = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    EncryptFiles = table.Column<bool>(type: "bit", nullable: true),
                    PGPRecipientName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__DF_Extra__683EC43128BDF3FF", x => x.DF_JobID);
                });

            migrationBuilder.CreateTable(
                name: "DF_OutboundFileErrors",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ErrorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ErrorText = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_OutboundFileErrors", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_OutboundFileLog",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RunID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NumberOfRecords = table.Column<int>(type: "int", nullable: true),
                    Response = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Job_root_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Partner = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WDDatafeedFileLog", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_OutboundRecordDetails",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    RecordContent = table.Column<string>(type: "text", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_OutboundRecordDetails", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_OutboundRecordTracking",
                columns: table => new
                {
                    DF_OutBoundRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Partner = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TransactionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SecondaryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    LastSent = table.Column<DateTime>(type: "datetime", nullable: true),
                    ResponseStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResponseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordAccepted = table.Column<bool>(type: "bit", nullable: true),
                    RecordContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_OutBoundRecords", x => x.DF_OutBoundRecordID);
                });

            migrationBuilder.CreateTable(
                name: "DF_RecurringProcessErrors",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ErrorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ErrorText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RowNumber = table.Column<int>(type: "int", nullable: true),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RecordContent = table.Column<string>(type: "text", nullable: true),
                    InputRow = table.Column<string>(type: "text", nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_RecurringProcessErrors", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_RecurringProcessLog",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RecordID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NumberOfRecords = table.Column<int>(type: "int", nullable: true),
                    Response = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    ResponseFileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Job_root_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Partner = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MaxLastUpdated = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RecurringProcessLog", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DF_SFTP",
                columns: table => new
                {
                    DF_SFTPID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DF_JobID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    VendorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    VendorType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsOutboundSFTP = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Login = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Host = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Port = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileMask = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RemoteFolder = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LocalFolder = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SuccessEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FailureEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IsCmdLineSFTP = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    SFTPCmdLine = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SFTPScriptText = table.Column<string>(type: "varchar(4000)", unicode: false, maxLength: 4000, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SFTP_Password = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SFTP_SSHKeyFileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_SFTP", x => x.DF_SFTPID);
                });

            migrationBuilder.CreateTable(
                name: "DF_TalendContext",
                columns: table => new
                {
                    ContextID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    JobName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Environment = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConfigID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VarName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Value = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Context", x => x.ContextID);
                });

            migrationBuilder.CreateTable(
                name: "DF_Vermedica_EBVTracking",
                columns: table => new
                {
                    TrackingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    clientPatientId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    patientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    patientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    patientDOB = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    patientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    patientSSN = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    patientZip = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    medicareId = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: true),
                    product = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    cptCode1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    cptCode2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    cptCode3 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    cptCode4 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    cptCode5 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    primaryDiagnosis = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    secondaryDiagnosis = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    tertiaryDiagnosis = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    pos = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    providerFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    providerLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    providerTitle = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    providerNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    providerState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    providerTaxId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    practiceName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    practiceAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    practiceAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    practiceCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    practiceState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    practiceZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    practiceNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    practiceFaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    practiceContactFName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    practiceContactLName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    noFaxingFlag = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    mfg = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy1policyMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy1policyPayerId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy1policyPayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    policy1policyPatientSubscriber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy1subscriberfirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy1subscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy1subscriberDOB = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy1subscriberGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    policy1subscriberMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy2policyMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy2policyPayerId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy2policyPayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    policy2policyPatientSubscriber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy2subscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy2subscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy2subscriberDOB = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy2subscriberGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    policy2subscriberMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy2mcSuppPlanLetter = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    policy3policyMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy3policyPayerId = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Policy3policyPayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    policy3policyPatientSubscriber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy3subscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy3subscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    policy3subscriberDOB = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    policy3subscriberGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    policy3subscriberMemberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    internalReference = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    copayCardProgram = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    altCoverageReferral = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    nextScheduledDate = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    dateOfService = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    siteOfficeFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ResponseMessage = table.Column<string>(type: "text", nullable: true),
                    ResponseID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResponseStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Processed = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_Vermedica_EBVTracking", x => x.TrackingID);
                });

            migrationBuilder.CreateTable(
                name: "DF_ZipRstTracking",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ZipFileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    RstFileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ZipContent = table.Column<string>(type: "text", nullable: true),
                    RosterContent = table.Column<string>(type: "text", nullable: true),
                    StageWarnings = table.Column<string>(type: "text", nullable: true),
                    LoadErrors = table.Column<string>(type: "text", nullable: true),
                    LoadedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LoadedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DF_DF_ZipRstTracking", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "DiagnosisList",
                columns: table => new
                {
                    DiagnosisListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ICDCodeType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ICDCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ICDDescription = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiagnosisList", x => x.DiagnosisListID);
                });

            migrationBuilder.CreateTable(
                name: "DiagnosisListPrograms",
                columns: table => new
                {
                    DiagnosisListProgramsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DiagnosisListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugID = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiagnosisListPrograms", x => x.DiagnosisListProgramsID);
                });

            migrationBuilder.CreateTable(
                name: "DirectFaxAssignment",
                columns: table => new
                {
                    DirectFaxID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    InboundFaxID = table.Column<int>(type: "int", nullable: false),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    PageRange = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FaxToNumberID = table.Column<int>(type: "int", nullable: false),
                    FaxTo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    NumberOfCWCForms = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    isPatientDOBMissing = table.Column<bool>(type: "bit", nullable: true),
                    isParentFullNameMissing = table.Column<bool>(type: "bit", nullable: true),
                    isParentEmailOrAddressMissing = table.Column<bool>(type: "bit", nullable: true),
                    isPediatricianZIPMissing = table.Column<bool>(type: "bit", nullable: true),
                    PatientDOBMissingComment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    ParentFullNameMissingComment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    ParentEmailOrAddressMissingComment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    PediatricianZIPMissingComment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    OtherComments = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Template = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    isMarkedAsReviewed = table.Column<bool>(type: "bit", nullable: true),
                    isFaxSend = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DirectFaxAssignment", x => x.DirectFaxID);
                });

            migrationBuilder.CreateTable(
                name: "Directories_Organizations",
                columns: table => new
                {
                    NCPDPID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StoreNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AddressLinel = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AddressLine2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StateProvince = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PostalCode = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    CountryCode = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    StandardizedAddressLine1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StandardizedAddressLine2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StandardizedCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StandardizedStateProvince = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    StandardizedPostal = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true),
                    PrimaryTelephone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ElectronicMail = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AlternatePhoneNumbers = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ActiveStartTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActiveEndTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    ServiceLevel = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: true),
                    PartnerAccount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastModifiedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CrossStreet = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordChange = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OldServiceLevel = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    Version = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    DirectorySpecialtyName = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    ReplaceNCPDPID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StateLicenseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UPIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilitylD = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicareNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicaidNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DEANumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MutuallyDefined = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DirectAddress = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ParentOrganizationlD = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Latitude = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Longitude = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Precise = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    UseCase = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentOrganizationName = table.Column<string>(type: "nvarchar(225)", maxLength: 225, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DispenseOrderTypes",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    OrderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrderTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayOrder = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DispenseQtyConversion",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SPID = table.Column<int>(type: "int", nullable: false),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MultiplicationFactor = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Dispenses",
                columns: table => new
                {
                    DispenseID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Dispendses_fromSPID = table.Column<int>(type: "int", nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: true),
                    SPNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientCopay = table.Column<decimal>(type: "numeric(8,2)", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    OrderTransactionNum = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OrderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    FillNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillRemaining = table.Column<decimal>(type: "decimal(8,0)", nullable: true),
                    ShippedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ShipZIPCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ShipCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RxExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    UnitOfMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MajorMedicalName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayAmount = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PatientPayAmount = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardAmountUsed = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    MedGuideProvided = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientYearofBirth = table.Column<int>(type: "int", nullable: true),
                    SP_ProviderID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderAddress1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ProviderZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SC_CFCenterID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SP_CFCenterID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SC_CFCenterName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    NumberOfFillWritten = table.Column<int>(type: "int", nullable: true),
                    FulfillmentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    OrderDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ShipQuantity = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Patient_PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ExternalSPName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SourceID = table.Column<int>(type: "int", nullable: true),
                    Diagnosis = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CoPayAssistanceApplied = table.Column<bool>(type: "bit", nullable: true),
                    CopayPaid = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PenPakShipped = table.Column<bool>(type: "bit", nullable: true),
                    NeedlesShipped = table.Column<bool>(type: "bit", nullable: true),
                    SharpsContainerShipped = table.Column<bool>(type: "bit", nullable: true),
                    LastReceivedRXDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientConsent = table.Column<bool>(type: "bit", nullable: true),
                    PatientConsentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientAdr1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAdr2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientPhone = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    Diagnosis2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProviderSpecialty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PARequired = table.Column<bool>(type: "bit", nullable: true),
                    PACode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PrimaryCoverageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryClaimType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaterialsSent = table.Column<bool>(type: "bit", nullable: true),
                    ProductLot = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TransferPharmacyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Notes = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RxWrittenDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ProviderPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    RXFilledOrCancellationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    RxLabelInfo = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PayerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerBinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerGroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerBinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerGroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AlteraID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAApprovalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    DeviceSerialNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    PAStatusCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DispenseData = table.Column<string>(type: "xml", nullable: true),
                    TerritoryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DoseType = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ReferralDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FemalePatientCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRPCounseled = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MonthlyCounseled = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRPPregnancyTest = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRPPatientPregnant = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LFTPerformed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberNotifiedLFT = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberNotifiedType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FNRPType = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PrescriberNotifiedPreg = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    First_Ship_Date = table.Column<DateOnly>(type: "date", nullable: true),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    Miligrams = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PharmaCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TransactionSequence = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReasonForChange = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SPReadyToShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ScheduledShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    WarehouseName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RestatementFlag = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ReferralNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Diagnosis3 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProviderDEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PharmacyDEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PharmacyNCPDP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    InsurancePlanName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CustomField1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField4 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField5 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAge = table.Column<int>(type: "int", nullable: true),
                    CreatedFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    UpdatedFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SecondaryPlanName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReferralSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipToAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipToAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipToCountry = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipToPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Product_Form = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Frequency = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Primary_Benefit_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Primary_Plan_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Primary_Copay_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Primary_Deductible = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Primary_Max_Oop = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Primary_Lifetime_Max = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Benefit_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Plan_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Copay_Amount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Copay_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Deductible = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Max_Oop = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_Lifetime_Max = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_PA_Required = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Secondary_PA_Expiration_Date = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dispenses", x => x.DispenseID);
                });

            migrationBuilder.CreateTable(
                name: "Dispenses_fromSP",
                columns: table => new
                {
                    Dispense_fromSPID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SPID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SPNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientCopay = table.Column<decimal>(type: "numeric(8,2)", nullable: true),
                    PaitentOOP = table.Column<decimal>(type: "numeric(8,2)", nullable: true),
                    PatientOKLeavePhoneMsg = table.Column<bool>(type: "bit", nullable: true),
                    PatientWeight = table.Column<decimal>(type: "numeric(8,2)", nullable: true),
                    ICDCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SPPrescriberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ReferredBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReferredDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianSuffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrderTransactionNum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    OrderDate = table.Column<DateOnly>(type: "date", nullable: false),
                    FillNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillRemaining = table.Column<decimal>(type: "decimal(8,0)", nullable: true),
                    ShippedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    UnitOfMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MajorMedicalName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxOOP = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    PlanMax = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    LifeTimeMax = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Restatement = table.Column<bool>(type: "bit", nullable: true),
                    MedGuideProvided = table.Column<bool>(type: "bit", nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCNNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Dispenses_History",
                columns: table => new
                {
                    Dispenses_HistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DispenseID = table.Column<int>(type: "int", nullable: false),
                    Dispendses_fromSPID = table.Column<int>(type: "int", nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: true),
                    SPNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientCopay = table.Column<decimal>(type: "numeric(8,2)", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    OrderTransactionNum = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OrderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    FillNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillRemaining = table.Column<decimal>(type: "decimal(8,0)", nullable: true),
                    ShippedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ShipZIPCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ShipCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RxExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    UnitOfMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MajorMedicalName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayAmount = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PatientPayAmount = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardAmountUsed = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    MedGuideProvided = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientYearofBirth = table.Column<int>(type: "int", nullable: true),
                    SP_ProviderID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ProviderZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SC_CFCenterID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SP_CFCenterID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SC_CFCenterName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    NumberOfFillWritten = table.Column<int>(type: "int", nullable: true),
                    FulfillmentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    OrderDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ShipQuantity = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Patient_PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ExternalSPName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SourceID = table.Column<int>(type: "int", nullable: true),
                    Diagnosis = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CoPayAssistanceApplied = table.Column<bool>(type: "bit", nullable: true),
                    CopayPaid = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PenPakShipped = table.Column<bool>(type: "bit", nullable: true),
                    NeedlesShipped = table.Column<bool>(type: "bit", nullable: true),
                    SharpsContainerShipped = table.Column<bool>(type: "bit", nullable: true),
                    LastReceivedRXDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientConsent = table.Column<bool>(type: "bit", nullable: true),
                    PatientConsentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientAdr1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAdr2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientPhone = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    Diagnosis2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProviderSpecialty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PARequired = table.Column<bool>(type: "bit", nullable: true),
                    PACode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PrimaryCoverageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryClaimType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaterialsSent = table.Column<bool>(type: "bit", nullable: true),
                    ProductLot = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TransferPharmacyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Notes = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RxWrittenDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ProviderPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    RXFilledOrCancellationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    RxLabelInfo = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PayerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerBinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPayerGroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerBinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TertiaryPayerGroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AlteraID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAApprovalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    DeviceSerialNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    PAStatusCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DispenseData = table.Column<string>(type: "xml", nullable: true),
                    TerritoryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DoseType = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    CustomField1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField4 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CustomField5 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Diagnosis3 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacilityAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FemalePatientCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    First_Ship_Date = table.Column<DateOnly>(type: "date", nullable: true),
                    FNRPType = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    FRPCounseled = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRPPatientPregnant = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRPPregnancyTest = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsurancePlanName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LFTPerformed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Miligrams = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    MonthlyCounseled = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAge = table.Column<int>(type: "int", nullable: true),
                    PharmaCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyDEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PharmacyNCPDP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PrescriberNotifiedLFT = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberNotifiedPreg = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberNotifiedType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderDEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ReasonForChange = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ReferralDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReferralNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    RestatementFlag = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ScheduledShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    SPReadyToShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TransactionSequence = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    WarehouseName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(10,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dispenses_History", x => x.Dispenses_HistoryID);
                });

            migrationBuilder.CreateTable(
                name: "Dispenses_Log",
                columns: table => new
                {
                    DispenseLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DispenseID = table.Column<int>(type: "int", nullable: false),
                    Dispendses_fromSPID = table.Column<int>(type: "int", nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: true),
                    SPNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientCopay = table.Column<decimal>(type: "numeric(8,2)", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    OrderTransactionNum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    FillNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillRemaining = table.Column<decimal>(type: "decimal(8,0)", nullable: true),
                    ShippedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ShipZIPCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ShipCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RxExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(10,2)", nullable: false),
                    UnitOfMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MajorMedicalName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayAmount = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PatientPayAmount = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardAmountUsed = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    MedGuideProvided = table.Column<bool>(type: "bit", nullable: true),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientYearofBirth = table.Column<int>(type: "int", nullable: true),
                    SP_ProviderID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ProviderZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SC_CFCenterID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SP_CFCenterID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SC_CFCenterName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BinNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    NumberOfFillWritten = table.Column<int>(type: "int", nullable: true),
                    FulfillmentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    OrderDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ShipQuantity = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DispensesLog", x => x.DispenseLogID);
                });

            migrationBuilder.CreateTable(
                name: "Dispenses_Walgreens",
                columns: table => new
                {
                    RowID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ReportDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SPNPI = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    SPDEA = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    HIPPAAuthObtained = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Height = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Weight = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrimaryICD = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SecondaryICD = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProductName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    Status = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SubStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReferralReceiptDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    InitialShipDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastShipDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ShipDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DaysSupplied = table.Column<int>(type: "int", nullable: true),
                    Qty = table.Column<int>(type: "int", nullable: true),
                    ExhaustDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RefillNum = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    NewOrRefill = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    RefillsRemaining = table.Column<int>(type: "int", nullable: true),
                    StLicNum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianDEA = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianNPI = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianState = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    PhysicianZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PtOOP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TotalShipments = table.Column<int>(type: "int", nullable: true),
                    PresciptionNum = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OrderNum = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    TransactionType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    LotNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PlanType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PrimaryInsName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryBeneType = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PrimaryInsBIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryInsPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryInsName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BilltoFirstName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BilltoLastName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BilltoAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BilltoCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BilltoState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BilltoZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LineNumber = table.Column<int>(type: "int", nullable: true),
                    Rejected = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Document_Field_MultiAnswers",
                columns: table => new
                {
                    Document_Field_MultiAnswerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Document_FieldsID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Document_Field_MultiAnswers", x => x.Document_Field_MultiAnswerID);
                });

            migrationBuilder.CreateTable(
                name: "Document_OutboundFaxes",
                columns: table => new
                {
                    Document_OutboundFaxID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    FaxTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FaxStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Pending"),
                    StatusReason = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FaxJobID = table.Column<int>(type: "int", nullable: true),
                    FaxJobXDN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Document_OutboundFaxes", x => x.Document_OutboundFaxID);
                });

            migrationBuilder.CreateTable(
                name: "DocumentList",
                columns: table => new
                {
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    FileType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsCoverPage = table.Column<bool>(type: "bit", nullable: true),
                    CoverPageRequired = table.Column<bool>(type: "bit", nullable: true),
                    NumberofPages = table.Column<int>(type: "int", nullable: true),
                    DocumentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TemplateLocation = table.Column<byte[]>(type: "varbinary(500)", maxLength: 500, nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    GroupName2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NotificationTemplate = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    VersionNumber = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentList_Temp", x => x.DocumentListID);
                });

            migrationBuilder.CreateTable(
                name: "DocumentManagement",
                columns: table => new
                {
                    DocumentManagementID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Documents_InboundFaxID = table.Column<int>(type: "int", nullable: false),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: true),
                    GroupName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PageNumbers = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MissingPageNumbers = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DocumentMappings",
                columns: table => new
                {
                    DocumentMappingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SRType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRResolution = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    FundType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    EntityType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Documents",
                columns: table => new
                {
                    DocumentID = table.Column<int>(type: "int", nullable: false, comment: "unique identifier for each document record")
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    EntityID = table.Column<int>(type: "int", nullable: false),
                    EntityName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FileStorageID = table.Column<int>(type: "int", nullable: true),
                    FileName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TotalPages = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValueSql: "(getdate())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SigRequired = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    FormComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_Temp", x => x.DocumentID);
                });

            migrationBuilder.CreateTable(
                name: "Documents_eHIPAAInvites",
                columns: table => new
                {
                    Documents_eHIPAAInvitesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TemplateID = table.Column<int>(type: "int", nullable: false),
                    InvitateID = table.Column<int>(type: "int", nullable: true),
                    PAFID = table.Column<int>(type: "int", nullable: true),
                    Status_Invite = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Invite_SRID = table.Column<int>(type: "int", nullable: true),
                    Email = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    NumberofPages = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Invite_Sent = table.Column<DateTime>(type: "datetime", nullable: true),
                    PAF_Completed = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: true),
                    DocumentStorageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentID = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: true),
                    ReasonDeleted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignmentInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    PageRange = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Lastupdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    lastupdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentData = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_eHIPAAInvites", x => x.Documents_eHIPAAInvitesID);
                });

            migrationBuilder.CreateTable(
                name: "Documents_Entity",
                columns: table => new
                {
                    DocumentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    EntityID = table.Column<int>(type: "int", nullable: false),
                    EntityName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FileStorageID = table.Column<int>(type: "int", nullable: true),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TotalPages = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SigRequired = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_Provider", x => x.DocumentID);
                });

            migrationBuilder.CreateTable(
                name: "Documents_MoveAudits",
                columns: table => new
                {
                    Document_MoveAudit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    MoveFromEntityID = table.Column<int>(type: "int", nullable: false),
                    MoveToEntityID = table.Column<int>(type: "int", nullable: false),
                    ReasonMoved = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_MoveAudits", x => x.Document_MoveAudit_ID);
                });

            migrationBuilder.CreateTable(
                name: "Documents_OCR_Coordinates",
                columns: table => new
                {
                    Documents_OCR_CoordinatesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DocumentFormCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BoundingBox_Height = table.Column<double>(type: "float", nullable: true),
                    BoundingBox_Top = table.Column<double>(type: "float", nullable: true),
                    BoundingBox_Left = table.Column<double>(type: "float", nullable: true),
                    BoundingBox_Width = table.Column<double>(type: "float", nullable: true),
                    FieldKeyName = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ExtractType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    EntityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EntityFieldName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Document__A7918205C7851CC9", x => x.Documents_OCR_CoordinatesID);
                });

            migrationBuilder.CreateTable(
                name: "Documents_OCR_DynamicData",
                columns: table => new
                {
                    Documents_OCR_DynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Documents_OCR_CoordinatesID = table.Column<int>(type: "int", nullable: false),
                    InboundFaxID = table.Column<int>(type: "int", nullable: false),
                    FieldKey = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    FieldValue = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsSelected = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Document__39CAE9F91F458EE6", x => x.Documents_OCR_DynamicDataID);
                });

            migrationBuilder.CreateTable(
                name: "Documents_OutboundAttachments",
                columns: table => new
                {
                    Documents_OutboundAttachments_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    OutboundAcctachment_DocumentID = table.Column<int>(type: "int", nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Reviewed = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReviewedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_OutboundAttachments", x => x.Documents_OutboundAttachments_ID);
                });

            migrationBuilder.CreateTable(
                name: "DocumentTemplates",
                columns: table => new
                {
                    DocumentTemplatesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentListID = table.Column<int>(type: "int", nullable: true),
                    Template = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    CheckSum = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentTemplates", x => x.DocumentTemplatesID);
                });

            migrationBuilder.CreateTable(
                name: "Drug",
                columns: table => new
                {
                    DrugID = table.Column<int>(type: "int", nullable: false),
                    DrugBrandName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugGenericName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugLabelName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Manufacturer = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DrugDescription = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DrugNDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    JCode1 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    JCode2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Drug_DrugID", x => x.DrugID);
                });

            migrationBuilder.CreateTable(
                name: "DrugCPTCode",
                columns: table => new
                {
                    DrugCPTCodeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CPTcode = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CPTCodeDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DrugCPTCodePrograms",
                columns: table => new
                {
                    DrugCPTCodeProgramsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DrugCPTCodeID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DrugDetail",
                columns: table => new
                {
                    DrugDetailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DrugID = table.Column<int>(type: "int", nullable: false),
                    DrugDescription = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DrugNDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrugDetail_DrugDetailID", x => x.DrugDetailID);
                });

            migrationBuilder.CreateTable(
                name: "DrugResources",
                columns: table => new
                {
                    DrugResourceID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ResourceName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ResourceType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    URL = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrugResources", x => x.DrugResourceID);
                });

            migrationBuilder.CreateTable(
                name: "DrugServiceLevel",
                columns: table => new
                {
                    DrugServiceLevelID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugLookupID = table.Column<int>(type: "int", nullable: true),
                    ServiceLevel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriageGroup = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrugServiceLevel", x => x.DrugServiceLevelID);
                });

            migrationBuilder.CreateTable(
                name: "Dup",
                columns: table => new
                {
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CSZ = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DynamicDataList",
                columns: table => new
                {
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DataType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LookUpDataListFunctionName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Category = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldLength = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MinValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegularExpression = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "mhu"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Required = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CssClass = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FieldCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldValidationMessage = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Script = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    TemplateTagName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    DescriptionCode = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DisableKeyElement = table.Column<bool>(type: "bit", nullable: true),
                    ShowCreateSR = table.Column<bool>(type: "bit", nullable: true),
                    RowSize = table.Column<int>(type: "int", nullable: true),
                    AdditionalInfo = table.Column<string>(type: "varchar(800)", unicode: false, maxLength: 800, nullable: true),
                    AutoPopulate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AllowNA = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DynamicData", x => x.DynamicDataListID);
                });

            migrationBuilder.CreateTable(
                name: "EagleForceAPILog",
                columns: table => new
                {
                    EagleForceAPI_LogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    APIRequest = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    APIResponse = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Message = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EagleForceAPILog", x => x.EagleForceAPI_LogID);
                });

            migrationBuilder.CreateTable(
                name: "EBVMedicalResponseTypeCode",
                columns: table => new
                {
                    EBVMedicalResponseTypeCodeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ResponseTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PlanTypes = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NumberOfPayers = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EligibilityStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CompletionStatus = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    IsOfframpResponseCode = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__EBVMedic__124355B4B97AA110", x => x.EBVMedicalResponseTypeCodeId);
                });

            migrationBuilder.CreateTable(
                name: "eBvMockResponses",
                columns: table => new
                {
                    eBvMockResponseID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DrugNDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    PayerName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PayerID = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PharmacyNCPDPID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CoverageRequest = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CoverageResponse = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PatientBenefitRequest = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PatientBenefitResponse = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvMockResponses", x => x.eBvMockResponseID);
                });

            migrationBuilder.CreateTable(
                name: "eBvModularTransaction",
                columns: table => new
                {
                    eBvModularTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TransactionID = table.Column<string>(type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PrimaryInsuranceID = table.Column<int>(type: "int", nullable: true),
                    DrugNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    ClientApplicationName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PhysicianNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ExternalAccountID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EBVType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RxCoverageJsonData = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RxEBVControlNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EligibityDrugName = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__eBvModul__B109E3829FC48482", x => x.eBvModularTransactionID);
                });

            migrationBuilder.CreateTable(
                name: "eConsent",
                columns: table => new
                {
                    eConsentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientPrimaryInsurance = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSecondaryInsurance = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverHomePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverMobilePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    StagingStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Pending"),
                    RequestIP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Reason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessingInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    FinalTemplate = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    PrescriberSignature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PrescriberSignatureDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    AssignmentInProgress = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eConsentID", x => x.eConsentID);
                });

            migrationBuilder.CreateTable(
                name: "eHipaaApiPrograms",
                columns: table => new
                {
                    eHipaaProgramId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    eHipaaID = table.Column<int>(type: "int", nullable: false),
                    ApiClientId = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ApiClientKey = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    TemplateId = table.Column<int>(type: "int", nullable: true),
                    ConsentDrug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eHipaaApiPrograms", x => x.eHipaaProgramId);
                });

            migrationBuilder.CreateTable(
                name: "eHipaaPatientInvites",
                columns: table => new
                {
                    eHipaaPatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    InviteId = table.Column<int>(type: "int", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eHipaaPatientInvites", x => x.eHipaaPatId);
                });

            migrationBuilder.CreateTable(
                name: "EmailHistory",
                columns: table => new
                {
                    EmailHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmailMessageStub = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ToEmailAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EmailType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CareMetxRecordID = table.Column<int>(type: "int", nullable: true),
                    CareMetxRecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Text = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailHistories", x => x.EmailHistoryID);
                });

            migrationBuilder.CreateTable(
                name: "EmailSubscriptionTypes",
                columns: table => new
                {
                    EmailTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmailType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    IsMandatory = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false, defaultValue: 1000)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailSubscriptionTypes", x => x.EmailTypeID);
                });

            migrationBuilder.CreateTable(
                name: "EmailTemplates",
                columns: table => new
                {
                    EmailTemplateID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntityType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HasPortalAccount = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    EmailBody = table.Column<string>(type: "text", nullable: true),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EmailFrom = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Enrollment",
                columns: table => new
                {
                    EnrollmentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientPreferredLanguage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientOtherLanguage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientHomePhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientMobileNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientZIP = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientOkToLeaveMsgMobile = table.Column<bool>(type: "bit", nullable: true),
                    PatientOkToLeaveMsgHome = table.Column<bool>(type: "bit", nullable: true),
                    InsuranceID = table.Column<int>(type: "int", nullable: true),
                    HasPatientInsurance = table.Column<bool>(type: "bit", nullable: true),
                    MedicarePartB = table.Column<bool>(type: "bit", nullable: true),
                    MedicarePartD = table.Column<bool>(type: "bit", nullable: true),
                    MedicareAdvantage = table.Column<bool>(type: "bit", nullable: true),
                    Medicaid = table.Column<bool>(type: "bit", nullable: true),
                    VAMilitary = table.Column<bool>(name: "VA/Military", type: "bit", nullable: true),
                    CommercialPrivateInsurance = table.Column<bool>(name: "Commercial/PrivateInsurance", type: "bit", nullable: true),
                    Other = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryPlanName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrimaryCardHolderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SecondaryPlanName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecondaryCardHolderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryGroupNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    SecondaryPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PharmacyPlanName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyCardHolderId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RxGroupNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    RxBIN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    RxPCN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PharmacyPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OtherPlanName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherCardHolderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherGroupNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    OtherPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianNpi = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PhysicianTaxID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianStateLicenseNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PhysicianLicenseState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PhysicianOrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianOrganizationNpi = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianOrganizationTaxID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianCity = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PhysicianState = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianFaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OfficeContactFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OfficeContactLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OfficeContactPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    TreatmentStartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    DiagnosisCodes = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OtherDiagnosisCodes = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AdministrationInformation = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FacilityID = table.Column<int>(type: "int", nullable: true),
                    FacilityNpi = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FacilityName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FacilityCity = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacilityTaxID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacilityOfficeContactFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityOfficeContactLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityOfficeContactPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientAttestationID = table.Column<int>(type: "int", nullable: true),
                    PatientAttestationType = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ElectronicAttestationPatientEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ElectronicAttestationPatientPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    IsCertified = table.Column<bool>(type: "bit", nullable: true),
                    TypedSignature = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SignatureDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    MedicalBeneficiaryID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OtherInsurance = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    CaremetxRecordID = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    CaremetxRecordType = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientAddressID = table.Column<int>(type: "int", nullable: true),
                    AdministrationInformationFormData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    InsuranceCardData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    ManualAttestationFileData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    InsuranceCardName = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    EnrollmentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AdministrationInformationFormName = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    ManualAttestationFileName = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    PatientCopayCardID = table.Column<string>(type: "varchar(12)", unicode: false, maxLength: 12, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PreferredMethodOfPayment = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    AdditionalDocumentsData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    AdditionalDocumentsName = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    FacilityZIP = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientPreviouslyEnrolled = table.Column<bool>(type: "bit", nullable: true),
                    HasASCVSorHeFH = table.Column<bool>(type: "bit", nullable: true),
                    ContactPatientForEnrollmentIssues = table.Column<bool>(type: "bit", nullable: true),
                    OrganizationEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianPTAN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianDEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhysicianEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OfficeContactFax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OfficeContactEMail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrimaryEmployer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrimarySubscriberRelationshipToCardholder = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecondaryEmployer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecondarySubscriberRelationshipToCardholder = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecondaryIsMedicalSupplementPlan = table.Column<bool>(type: "bit", nullable: true),
                    SecondaryMedicalSupplementPlanLetter = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClinicalContraindications = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClinicalVisualAcuityLeftEye = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClinicalVisualAcuityRightEye = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HasCaregiver = table.Column<bool>(type: "bit", nullable: true),
                    CaregiverFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverEmail = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CaregiverHomePhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CaregiverMobilePhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CaregiverRelationship = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CaregiverIsLegallyAuthorizedRep = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryPatientIsPrimaryCardholder = table.Column<bool>(type: "bit", nullable: true),
                    PrimarySubscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimarySubscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimarySubscriberDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    SecondaryPatientIsPrimaryCardholder = table.Column<bool>(type: "bit", nullable: true),
                    SecondarySubscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondarySubscriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondarySubscriberDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalCPTCode1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalBillingPreference = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ClinicalisSampleProductAdministered = table.Column<bool>(type: "bit", nullable: true),
                    ClinicalDateProductNeeded = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalAnyKnownDrugAllergies = table.Column<bool>(type: "bit", nullable: true),
                    ClinicalAllergies = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PrescriptionDrugDescription = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PrescriptionQuantity = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    PrescriptionQuantityUnitOfMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriptionDaysSupply = table.Column<int>(type: "int", nullable: true),
                    PrescriptionNumberOfRefills = table.Column<int>(type: "int", nullable: true),
                    PrescriptionEffectiveDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PrescriptionAllowSubstitutions = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionDirectionForUse = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PrescriptionAdditionalNotes = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PrescriptionTypedSignature = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PrescriptionTypedSignatureDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalCPTCode2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalCPTCode3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalCPTCode4 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalCPTCode5 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalHasStartedTreatment = table.Column<bool>(type: "bit", nullable: true),
                    Signatures = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DiagnosisCodesSecondary = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DiagnosisCodesTertiary = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugID = table.Column<int>(type: "int", nullable: true),
                    PlaceOfService = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientEnrollmentGuid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PatientLast4SSN = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    MedicaidPending = table.Column<bool>(type: "bit", nullable: true),
                    PolicyHolderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPreferredPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicalPreviousTreatmentStartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalPreviousTreatmentEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalPreviousTreatmentDose = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicalPreviousTreatment = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalPreviousTreatmentFrequency = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicalOptIn = table.Column<bool>(type: "bit", nullable: true),
                    ClinicalPreviousTreatmentStartDate1 = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalPreviousTreatmentEndDate1 = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalPreviousTreatmentDose1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicalPreviousTreatment1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalPreviousTreatmentFrequency1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicalPreviousTreatmentStartDate2 = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalPreviousTreatmentEndDate2 = table.Column<DateOnly>(type: "date", nullable: true),
                    ClinicalPreviousTreatmentDose2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicalPreviousTreatment2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClinicalPreviousTreatmentFrequency2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriptionHeight = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriptionWeight = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriptionBSA = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Prescription15mg = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Prescription20mg = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriptionFixedDoseTablet = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriptionTabletsPerCycle = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriptionSIG = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    IsCertified2 = table.Column<bool>(type: "bit", nullable: true),
                    SecondaryPolicyHolderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryPolicyHolderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherPolicyHolderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriptionSIG1 = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    PrescriptionNumberOfRefills1 = table.Column<int>(type: "int", nullable: true),
                    PrescriptionInitialDose = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PrescriptionSecondDose = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PharmacyOtherValue = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    IsCertified3 = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionPhysicianSignatureType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriptionSigningAttestation = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosisDescription = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    TreatingSiteContactName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    HasASCVD = table.Column<bool>(type: "bit", nullable: true),
                    HasHeFH = table.Column<bool>(type: "bit", nullable: true),
                    HasClinicalOther = table.Column<bool>(type: "bit", nullable: true),
                    ClinicalASCVDText = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ClinicalHeFHText = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ClinicalOtherText = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Enrollment_EnrollmentID", x => x.EnrollmentID);
                });

            migrationBuilder.CreateTable(
                name: "Enrollment_DupSearchLogs",
                columns: table => new
                {
                    LogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Entity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LogType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LogSource = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RowsReturned = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Entity",
                columns: table => new
                {
                    EntityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntityCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EntityDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Created = table.Column<DateOnly>(type: "date", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Entity", x => x.EntityID);
                });

            migrationBuilder.CreateTable(
                name: "Entity_IDs",
                columns: table => new
                {
                    Entity_IDs_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Start = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    End = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Current = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Entity_IDs", x => x.Entity_IDs_ID);
                });

            migrationBuilder.CreateTable(
                name: "EntityDupeSearchRequests",
                columns: table => new
                {
                    EntityDupeSearchRequestID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntityName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ActionType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ServiceURL = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    InputParameters = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Source = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SourceIPAddress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SourceHostName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UpdatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "EntityMergeLog",
                columns: table => new
                {
                    EntityMergeLogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    EntityIDOld = table.Column<int>(type: "int", nullable: false),
                    EntityIDNew = table.Column<int>(type: "int", nullable: false),
                    MergeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IsUnMerged = table.Column<bool>(type: "bit", nullable: false),
                    OriginalData = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__EntityMe__91D0FE9AF9B8CE93", x => x.EntityMergeLogId);
                });

            migrationBuilder.CreateTable(
                name: "ePAFEmailLinkAudit",
                columns: table => new
                {
                    EMailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    Token = table.Column<string>(type: "xml", nullable: false),
                    ExpiredAt = table.Column<DateTime>(type: "datetime", nullable: false),
                    isSubmitted = table.Column<bool>(type: "bit", nullable: false),
                    Submitted = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IPAddress = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ePAFEmailLinkAudit", x => x.EMailID);
                });

            migrationBuilder.CreateTable(
                name: "EPAP_ApplicationLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachineName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Logged = table.Column<DateTime>(type: "datetime", nullable: false),
                    Level = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ServerName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Port = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Https = table.Column<bool>(type: "bit", nullable: true),
                    ServerAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    RemoteAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Logger = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Callsite = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LineNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Exception = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Log", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EPAP_Invitations",
                columns: table => new
                {
                    InvitationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    PublicID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The public invitation id"),
                    ProgramID = table.Column<int>(type: "int", nullable: false, comment: "The program id"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false, comment: "The service request id"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())", comment: "The created timestamp"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, comment: "The user that generated the invitation"),
                    Expiration = table.Column<DateTime>(type: "datetime", nullable: false, comment: "The invitation expiration timestamp"),
                    Email = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true, comment: "The email address for which the invitation was sent"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true, comment: "Active flag"),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false, comment: "Deleted flag for backend soft deletes"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true, comment: "The last updated timestamp"),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, comment: "The user that last performed an update to the invitation"),
                    Status = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OnBehalfOf = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_ePAP_Invites_InvitationID", x => x.InvitationID);
                },
                comment: "The ePAP invitation");

            migrationBuilder.CreateTable(
                name: "EpsilonCallLog",
                columns: table => new
                {
                    EpsilonCallLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    CallDate = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CallType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    SRSubTypeTrigger = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ActivityTypeTrigger = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ScreenName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Failed = table.Column<bool>(type: "bit", nullable: false),
                    LogMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    RequestXML = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ResponseXML = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EpsilonCallLog", x => x.EpsilonCallLogID);
                });

            migrationBuilder.CreateTable(
                name: "EReferrals",
                columns: table => new
                {
                    EReferralID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReferralDate = table.Column<DateOnly>(type: "date", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    ProviderName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Status = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    RxProduct = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EReferrals", x => x.EReferralID);
                });

            migrationBuilder.CreateTable(
                name: "eServiceAPILog",
                columns: table => new
                {
                    eServiceAPILog_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PolicyID = table.Column<int>(type: "int", nullable: true),
                    APIName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RequestJSON = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ResponseJSON = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eServiceAPILog", x => x.eServiceAPILog_ID);
                });

            migrationBuilder.CreateTable(
                name: "EventsQueue",
                columns: table => new
                {
                    EventID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EventDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    EventType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EventSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EventDescription = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SourceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SourceID = table.Column<int>(type: "int", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Comment = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EventsQueue", x => x.EventID);
                });

            migrationBuilder.CreateTable(
                name: "ExperianAPILog",
                columns: table => new
                {
                    ExperianAPILog_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SendSSNToVendor = table.Column<bool>(type: "bit", nullable: true),
                    Success = table.Column<bool>(type: "bit", nullable: true),
                    EstimatedHouseholdIncome = table.Column<decimal>(type: "decimal(10,2)", nullable: true),
                    EstimatedHouseholdSize = table.Column<int>(type: "int", nullable: true),
                    FplPercentage = table.Column<double>(type: "float", nullable: true),
                    Errors = table.Column<string>(type: "xml", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PortalType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EncryptedSSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Type = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SappCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExperianAPILog", x => x.ExperianAPILog_ID);
                });

            migrationBuilder.CreateTable(
                name: "FAQList",
                columns: table => new
                {
                    FaqListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Question = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Answer = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<double>(type: "float", nullable: false, defaultValue: 1.0),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FAQList", x => x.FaqListID);
                });

            migrationBuilder.CreateTable(
                name: "FAX_INBOUND_REPORT",
                columns: table => new
                {
                    UAN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ALIAS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GROUPNAME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    JOBNO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CREF = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BILLCODE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STARTDATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STARTTIME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    COMPLETEDATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    COMPLETETIME = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STATUS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TO = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DNIS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ANI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SUBJECT = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FAXPARTIAL = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RETRIES = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAGES = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Matched = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "FAX_LOG_SUMMARY",
                columns: table => new
                {
                    FLS_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FLS_RECORDS_PROCESSED = table.Column<int>(type: "int", nullable: true),
                    FLS_TOTAL_RECORDS = table.Column<int>(type: "int", nullable: true),
                    FLS_JOB_TYPE = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FLS_STATUS = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FLS_START_DATE = table.Column<DateTime>(type: "datetime", nullable: true),
                    FLS_END_DATE = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__FAX_LOG___1FBBDC350CBAE877", x => x.FLS_ID);
                });

            migrationBuilder.CreateTable(
                name: "FAX_Sample_Report",
                columns: table => new
                {
                    UAN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ALIAS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GROUPNAME = table.Column<string>(name: "GROUP NAME", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    JOBNO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CREF = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BILLCODE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STARTDATE = table.Column<string>(name: "START DATE", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STARTTIME = table.Column<string>(name: "START TIME", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    COMPLETEDATE = table.Column<string>(name: "COMPLETE DATE", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    COMPLETETIME = table.Column<string>(name: "COMPLETE TIME", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    STATUS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TO = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DNIS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ANI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SUBJECT = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FAXPARTIAL = table.Column<string>(name: "FAX PARTIAL", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RETRIES = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAGES = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "FederalPovertyLeveList",
                columns: table => new
                {
                    FederalPovertyLevelList_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StateName = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    HouseholdSize = table.Column<int>(type: "int", nullable: true),
                    Threshold = table.Column<decimal>(type: "money", nullable: true),
                    AdditionalFrom = table.Column<int>(type: "int", nullable: true),
                    AdditionalAmount = table.Column<decimal>(type: "money", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    LastUpdatedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PovertyLevelYear = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EffectiveDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PublishDate = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FederalPovertyLeveList", x => x.FederalPovertyLevelList_ID);
                });

            migrationBuilder.CreateTable(
                name: "FedExMailTrackInterfacer",
                columns: table => new
                {
                    FedexMailTrackInterfacerID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RecipientCompany = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    RecipientAddress1 = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    RecipientAddress2 = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    RecipientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    RecipientState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false, defaultValue: ""),
                    RecipientCountry = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false, defaultValue: ""),
                    RecipientPostalCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false, defaultValue: ""),
                    MailingID = table.Column<long>(type: "bigint", nullable: false),
                    MailDateDt = table.Column<DateTime>(type: "datetime", nullable: true),
                    InvoiceNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false, defaultValue: ""),
                    MailingNumber = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false, defaultValue: ""),
                    ServiceType = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false, defaultValue: ""),
                    PackageType = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false, defaultValue: ""),
                    PackageWeight = table.Column<decimal>(type: "decimal(8,0)", nullable: false),
                    PackageWeightType = table.Column<decimal>(type: "decimal(3,0)", nullable: false),
                    NoofPackages = table.Column<decimal>(type: "decimal(3,0)", nullable: false),
                    DimHeight = table.Column<decimal>(type: "decimal(3,0)", nullable: false),
                    DimWidth = table.Column<decimal>(type: "decimal(3,0)", nullable: false),
                    DimLenth = table.Column<decimal>(type: "decimal(3,0)", nullable: false),
                    PaymentType = table.Column<decimal>(type: "decimal(1,0)", nullable: false),
                    CustomerReference = table.Column<string>(type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: true, defaultValue: ""),
                    DeliveryInstruction = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false, defaultValue: ""),
                    DeclaredValue = table.Column<decimal>(type: "money", nullable: false),
                    SignatureRequiredFlag = table.Column<int>(type: "int", nullable: false),
                    SignatureReleaseNumber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false, defaultValue: ""),
                    GrossCharges = table.Column<decimal>(type: "money", nullable: false),
                    NetCharges = table.Column<decimal>(type: "money", nullable: false),
                    TotalCharges = table.Column<decimal>(type: "money", nullable: false),
                    DeliveryDateDt = table.Column<DateTime>(type: "datetime", nullable: true),
                    MasterTrackingNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false, defaultValue: ""),
                    SmartPostTrackingNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false, defaultValue: ""),
                    TrackingNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false, defaultValue: ""),
                    ShipmentStatus = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false, defaultValue: ""),
                    ShippingCompany = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, defaultValue: ""),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true, defaultValue: ""),
                    EmailFlag = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    EntityReferenceID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    EntityID = table.Column<int>(type: "int", nullable: false),
                    SenderCompany = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    SenderContactName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    SenderAddress1 = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    SenderAddress2 = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: false, defaultValue: ""),
                    SenderCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    SenderState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false, defaultValue: ""),
                    SenderCountry = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false, defaultValue: ""),
                    SenderPostalCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false, defaultValue: ""),
                    SenderPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    DeletedFlg = table.Column<bool>(type: "bit", nullable: false),
                    CreatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedByID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    UpdatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    UpdatedByID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FedExMailTrackInterfacer", x => x.FedexMailTrackInterfacerID);
                });

            migrationBuilder.CreateTable(
                name: "FieldPortalConfig",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    ManufactureName = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    ConfigName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ConfigValue = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    Createdby = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    Lastupdated = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__FieldPor__3214EC0703D0A495", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplicationInsurances",
                columns: table => new
                {
                    FundEnrollmentApplicationInsuranceID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    InsuranceTypeID = table.Column<int>(type: "int", nullable: true),
                    InsuranceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsuranceCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerType = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PolicyIDNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PayerID = table.Column<int>(type: "int", nullable: true),
                    PayerTypeID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundEnrollmentApplicationInsurances", x => x.FundEnrollmentApplicationInsuranceID);
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplicationInsurances_Audit",
                columns: table => new
                {
                    FundEnrollmentApplicationInsuranceAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FundEnrollmentApplicationInsuranceID = table.Column<int>(type: "int", nullable: true),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    InsuranceTypeID = table.Column<int>(type: "int", nullable: true),
                    InsuranceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsuranceCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerType = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PolicyIDNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PayerID = table.Column<int>(type: "int", nullable: true),
                    PayerTypeID = table.Column<int>(type: "int", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundEnrollmentApplicationInsurances_Audit", x => x.FundEnrollmentApplicationInsuranceAuditID);
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplicationMedications",
                columns: table => new
                {
                    FundEnrollmentApplicationMedicationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundEnrollmentApplicationMedications", x => x.FundEnrollmentApplicationMedicationID);
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplicationMedications_Audit",
                columns: table => new
                {
                    FundEnrollmentApplicationMedicationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FundEnrollmentApplicationMedicationID = table.Column<int>(type: "int", nullable: true),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundEnrollmentApplicationMedications_Audit", x => x.FundEnrollmentApplicationMedicationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplications",
                columns: table => new
                {
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ApplicantCareMetxRecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ApplicantCareMetxRecordID = table.Column<int>(type: "int", nullable: true),
                    EnrollmentType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CreateSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdateSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubmitDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubmitSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    FundId = table.Column<int>(type: "int", nullable: true),
                    FundName = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PrimaryInsuranceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    hasInsurance = table.Column<bool>(type: "bit", nullable: true),
                    hasMedicare = table.Column<bool>(type: "bit", nullable: true),
                    hasCommercialInsurance = table.Column<bool>(type: "bit", nullable: true),
                    isUSResident = table.Column<bool>(type: "bit", nullable: true),
                    GrossHouseholdIncome = table.Column<decimal>(type: "money", nullable: true),
                    HouseholdSize = table.Column<int>(type: "int", nullable: true),
                    ApplyingFor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSSNLastFourDigits = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientContactName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientContactRelationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientEmploymentStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPreferredLanguage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UnemploymentBenefits = table.Column<bool>(type: "bit", nullable: true),
                    TaxReturnRequired = table.Column<bool>(type: "bit", nullable: true),
                    ClaimedAsDependant = table.Column<bool>(type: "bit", nullable: true),
                    PatientReceiveTreatmentAt = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    AssistanceFromOtherFoundation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HowHear = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianSpecialty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianStateLicenseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FacilityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FacilityAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FacilityZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacilityPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FacilityFax = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    PatientPreferredCommunicationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianPreferredCommunicationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientIsEmployed = table.Column<bool>(type: "bit", nullable: true),
                    LastSectionViewed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    ApproveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ApproveComments = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PrescreenPassed = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    PrescreenDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    PrescreenComments = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PhysicianSpecialtyID = table.Column<int>(type: "int", nullable: true),
                    PatientContactEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    isAuthorizedContactOpted = table.Column<bool>(type: "bit", nullable: true),
                    isNoEmailProvidedOpted = table.Column<bool>(type: "bit", nullable: true),
                    PrescreenDenialCode = table.Column<int>(type: "int", nullable: true),
                    PrescreenDenialMessage = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ApplicationState = table.Column<int>(type: "int", nullable: true),
                    InsuranceDefinitions = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientAttestationReceived = table.Column<bool>(type: "bit", nullable: true),
                    PatientGrantID = table.Column<int>(type: "int", nullable: true),
                    isNoSSNOpted = table.Column<bool>(type: "bit", nullable: true),
                    CallerType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CallerFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerMiddleName = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CallerLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerPhoneNumber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    RepLastSectionViewed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttestationSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerAttestation = table.Column<bool>(type: "bit", nullable: true),
                    OptOutOrganization = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    CopyFundApplicationId = table.Column<int>(type: "int", nullable: true),
                    PhysicianNotifyOptOut = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    ContactNotifyOptOut = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    SubscriptionId = table.Column<int>(type: "int", nullable: true),
                    FundReopenSubscriptionOptedOut = table.Column<bool>(type: "bit", nullable: true),
                    FundReopenSubscriptionOptedOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FundCriteriaId = table.Column<int>(type: "int", nullable: true),
                    ExceptionServiceRequestId = table.Column<int>(type: "int", nullable: true),
                    HasDifferentShippingAddress = table.Column<bool>(type: "bit", nullable: true),
                    ShippingFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ShippingZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FirstNameOnCard = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, defaultValueSql: "(NULL)"),
                    LastNameOnCard = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, defaultValueSql: "(NULL)"),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundEnrollmentApplications", x => x.FundEnrollmentApplicationID);
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplications_Audit",
                columns: table => new
                {
                    FundEnrollmentApplicationID_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ApplicantCareMetxRecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ApplicantCareMetxRecordID = table.Column<int>(type: "int", nullable: true),
                    EnrollmentType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CreateSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdateSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubmitDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubmitSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    FundId = table.Column<int>(type: "int", nullable: true),
                    FundName = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PrimaryInsuranceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    hasInsurance = table.Column<bool>(type: "bit", nullable: true),
                    hasMedicare = table.Column<bool>(type: "bit", nullable: true),
                    hasCommercialInsurance = table.Column<bool>(type: "bit", nullable: true),
                    isUSResident = table.Column<bool>(type: "bit", nullable: true),
                    GrossHouseholdIncome = table.Column<decimal>(type: "money", nullable: true),
                    HouseholdSize = table.Column<int>(type: "int", nullable: true),
                    ApplyingFor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSSNLastFourDigits = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientContactName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientContactRelationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientEmploymentStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPreferredLanguage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UnemploymentBenefits = table.Column<bool>(type: "bit", nullable: true),
                    TaxReturnRequired = table.Column<bool>(type: "bit", nullable: true),
                    ClaimedAsDependant = table.Column<bool>(type: "bit", nullable: true),
                    PatientReceiveTreatmentAt = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    AssistanceFromOtherFoundation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HowHear = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianSpecialty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianStateLicenseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FacilityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FacilityAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FacilityState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FacilityZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FacilityPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FacilityFax = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    PatientPreferredCommunicationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhysicianPreferredCommunicationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientIsEmployed = table.Column<bool>(type: "bit", nullable: true),
                    LastSectionViewed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    ApproveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ApproveComments = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PrescreenPassed = table.Column<bool>(type: "bit", nullable: true),
                    PrescreenDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescreenComments = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PhysicianSpecialtyID = table.Column<int>(type: "int", nullable: true),
                    PatientContactEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianPhone = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    isAuthorizedContactOpted = table.Column<bool>(type: "bit", nullable: true),
                    isNoEmailProvidedOpted = table.Column<bool>(type: "bit", nullable: true),
                    PrescreenDenialCode = table.Column<int>(type: "int", nullable: true),
                    PrescreenDenialMessage = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ApplicationState = table.Column<int>(type: "int", nullable: true),
                    InsuranceDefinitions = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientAttestationReceived = table.Column<bool>(type: "bit", nullable: true),
                    PatientGrantID = table.Column<int>(type: "int", nullable: true),
                    isNoSSNOpted = table.Column<bool>(type: "bit", nullable: true),
                    CallerType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CallerFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerMiddleName = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    CallerLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerPhoneNumber = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    RepLastSectionViewed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttestationSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerAttestation = table.Column<bool>(type: "bit", nullable: true),
                    OptOutOrganization = table.Column<bool>(type: "bit", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CopyFundApplicationId = table.Column<int>(type: "int", nullable: true),
                    PhysicianNotifyOptOut = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    ContactNotifyOptOut = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    SubscriptionId = table.Column<int>(type: "int", nullable: true),
                    FundReopenSubscriptionOptedOut = table.Column<bool>(type: "bit", nullable: true),
                    FundReopenSubscriptionOptedOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FundCriteriaId = table.Column<int>(type: "int", nullable: true),
                    ExceptionServiceRequestId = table.Column<int>(type: "int", nullable: true),
                    ShippingFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShippingState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ShippingZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    HasDifferentShippingAddress = table.Column<bool>(type: "bit", nullable: true),
                    FirstNameOnCard = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, defaultValueSql: "(NULL)"),
                    LastNameOnCard = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, defaultValueSql: "(NULL)"),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplications_Extension",
                columns: table => new
                {
                    FundEnrollmentApplicationExtensionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    PatientGrantId = table.Column<int>(type: "int", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupId = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RxBin = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    PCN = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    EligibilityStartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TotalAmount = table.Column<decimal>(type: "money", nullable: true),
                    PatientAttestationID = table.Column<int>(type: "int", nullable: true),
                    AttestationIsReceived = table.Column<bool>(type: "bit", nullable: true),
                    AttestationStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttestationExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundEnrollmentApplications_Extension_FundEnrollmentApplicationExtensionId", x => x.FundEnrollmentApplicationExtensionId);
                });

            migrationBuilder.CreateTable(
                name: "GetAgeInYearDayResult",
                columns: table => new
                {
                    Years = table.Column<int>(type: "int", nullable: true),
                    Days = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_MedImmuneSPP_V2Result",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_MedImmuneSPPResult",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_PathwayOpsumitResult",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_PathwayTracleerResult",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_PathwayUptravi_testsudhaResult",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_PathwayUptravi_V2Result",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_PathwayUptraviResult",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetExtendedTriageRecord_PathwayVentavisResult",
                columns: table => new
                {
                    FieldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetMedicalHistoryResult",
                columns: table => new
                {
                    surveyelementsid = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    Hypertension = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Hyperlipidemia = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CVD = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    HGB_A1C = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    HGB_A1CDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    HEIGHT = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    HEIGHTDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    WEIGHT = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    WEIGHTDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BP_SYSTOLIC = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BP_SYSTOLICDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BP_DIASTOLIC = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BP_DIASTOLICDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LDL = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LDLDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    HDLC = table.Column<string>(name: "HDL-C", type: "nvarchar(max)", nullable: true),
                    HDLCDate = table.Column<string>(name: "HDL-CDate", type: "nvarchar(max)", nullable: true),
                    TRIGLYC = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    TRIGLYCDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    AST = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ASTDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ALT = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ALTDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CREAT_SER = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CREAT_SERDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UMCR = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UMCRDate = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetSRManagementResult_ishitaTestResult",
                columns: table => new
                {
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    SRDrugName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PrimaryPayer = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecondaryPayer = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: false),
                    ProviderName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SR_TypeFullDesc = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SR_Status = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StartedAt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserGroup = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    NextInjectionDate = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GetWorkHours_TableResult",
                columns: table => new
                {
                    ret_hours = table.Column<int>(type: "int", nullable: true),
                    ret_mins = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "GlobalConfigurations",
                columns: table => new
                {
                    GlobalConfigurationId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Key = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Description = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    RawValue = table.Column<decimal>(type: "decimal(14,3)", nullable: true),
                    TextData = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BinaryData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__GlobalCo__443F5BA29E63C53A", x => x.GlobalConfigurationId);
                });

            migrationBuilder.CreateTable(
                name: "GrantUsePolicyException_Audit",
                columns: table => new
                {
                    GrantUsePolicyExceptionAuditId = table.Column<Guid>(type: "uniqueidentifier", nullable: true, defaultValueSql: "(newid())"),
                    AuditDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    AuditType = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    GrantUsePolicyExceptionId = table.Column<int>(type: "int", nullable: false),
                    ExtensionReasonId = table.Column<int>(type: "int", nullable: false),
                    PatientGrantId = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: false),
                    ReasonStartDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ReasonEndDate = table.Column<DateOnly>(type: "date", nullable: false),
                    UserComments = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: false),
                    SupervisorNeeded = table.Column<bool>(type: "bit", nullable: false),
                    SupervisorComments = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: false),
                    PANDecision = table.Column<bool>(type: "bit", nullable: true),
                    PANRequestedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ExceptionStartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ExceptionEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "HCP_Portal_PatientCaregiver",
                columns: table => new
                {
                    CaregiverID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CaregiverFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaregiverPhoneNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Relationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HCP_Portal_PatientCaregiver", x => x.CaregiverID);
                });

            migrationBuilder.CreateTable(
                name: "HCP_Portal_SRType_Mapping",
                columns: table => new
                {
                    HCPPortalSRTypeMappingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    SR_SubTypeListIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    HCP_SRType_Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HCP_Portal_SRType_Mapping_1", x => x.HCPPortalSRTypeMappingID);
                });

            migrationBuilder.CreateTable(
                name: "HCPPortalNLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Application = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Logged = table.Column<DateTime>(type: "datetime", nullable: false),
                    Level = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Logger = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Callsite = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Exception = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HCPPortalLog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HCPServicesAPICallLogs",
                columns: table => new
                {
                    LogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ErrorMessage = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RequestMethod = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RequestURL = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RequestPayload = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RequestCreated = table.Column<DateTime>(type: "datetime", nullable: true),
                    ResponseStatusCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Response = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseCreated = table.Column<DateTime>(type: "datetime", nullable: true),
                    RequestedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HCPServicesAPICallLogs", x => x.LogId);
                });

            migrationBuilder.CreateTable(
                name: "IMAGES",
                columns: table => new
                {
                    imgid = table.Column<double>(type: "float", nullable: false),
                    imgfilenm = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    IMAGE = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    DRUG_NAME = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IMAGES", x => x.imgid);
                });

            migrationBuilder.CreateTable(
                name: "Import_Providers",
                columns: table => new
                {
                    ProviderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    First = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Last = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Degree = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Address1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    City = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    State = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddressName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddressType = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DEA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AcctAddress1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AcctAddress2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AcctCity = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AcctState = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AcctZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CleanedPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CleanedExt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Import_Providers", x => x.ProviderID);
                });

            migrationBuilder.CreateTable(
                name: "IncomeAttestation",
                columns: table => new
                {
                    IncomeAttestationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    IsReceived = table.Column<bool>(type: "bit", nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Optout = table.Column<bool>(type: "bit", nullable: true),
                    OptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncomeAttestation", x => x.IncomeAttestationID);
                });

            migrationBuilder.CreateTable(
                name: "IncomeAttestationAudit",
                columns: table => new
                {
                    IncomeAttestationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    IsReceived = table.Column<bool>(type: "bit", nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Optout = table.Column<bool>(type: "bit", nullable: true),
                    OptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    IncomeAttestationID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncomeAttestationAudit", x => x.IncomeAttestationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "ININIncomeLog",
                columns: table => new
                {
                    ININIncomeLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InteractionId = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: true),
                    Data = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    InteractionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentUserResponse = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Processed = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LogStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ININIncomeLog", x => x.ININIncomeLogID);
                });

            migrationBuilder.CreateTable(
                name: "ININLog",
                columns: table => new
                {
                    ININLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InteractionId = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: true),
                    Data = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    InteractionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Processed = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LogStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ININLog1", x => x.ININLogID);
                });

            migrationBuilder.CreateTable(
                name: "Insurance_Eligibility_LookUpList",
                columns: table => new
                {
                    Insurance_Eligibility_LookUpListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Insurance_Eligibility_Name = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Insurance_Eligibility_Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Insurance_Eligibility_LookUpList", x => x.Insurance_Eligibility_LookUpListID);
                });

            migrationBuilder.CreateTable(
                name: "InsuranceEligibilityCodes",
                columns: table => new
                {
                    PayerId = table.Column<string>(name: "Payer Id", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Payername = table.Column<string>(name: "Payer name", type: "varchar(max)", unicode: false, nullable: true),
                    EnrollmentRequired = table.Column<string>(name: "Enrollment Required", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "InsurancePrograms",
                columns: table => new
                {
                    InsuranceProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InsuranceID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SharedRecordProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InsurancePrograms", x => x.InsuranceProgramID);
                });

            migrationBuilder.CreateTable(
                name: "InvalidPatientEmailCleanUp",
                columns: table => new
                {
                    InvalidEmailRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DOB = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SSNLastFourDigits = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OriginalRecordCreatedOn = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Insertdate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    InsertedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Log4Net_Error",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Date = table.Column<DateTime>(type: "datetime", nullable: false),
                    Thread = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    Level = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Logger = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    Message = table.Column<string>(type: "varchar(4000)", unicode: false, maxLength: 4000, nullable: false),
                    Exception = table.Column<string>(type: "varchar(4000)", unicode: false, maxLength: 4000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_log4net_error", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Lookup_PA",
                columns: table => new
                {
                    PA118 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    sort = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Appeal118 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    F4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    PA119 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    F6 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Appeal119 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "LookupDataList",
                columns: table => new
                {
                    LookupDataListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    FunctionName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    ListValue = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Category = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    OptionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Symbol = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    ScientificName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PortalVisibility = table.Column<bool>(type: "bit", nullable: true),
                    AlwaysActive = table.Column<bool>(type: "bit", nullable: true),
                    AdditionalField = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_Types = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SR_SubTypes = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SR_Resolutions = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    IsCarecycle = table.Column<bool>(type: "bit", nullable: true),
                    TriggerRules = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    FieldValidations = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GenericDrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OffRampClientDaysOfYear = table.Column<int>(type: "int", nullable: true),
                    TemplateTagName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TemplateName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LookupDataList", x => x.LookupDataListID);
                });

            migrationBuilder.CreateTable(
                name: "LookupInfinitusPayerID",
                columns: table => new
                {
                    PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    InfinitusPayerID = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "LookupLists",
                columns: table => new
                {
                    LookupListId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    CareMetxProgramtId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LookupLists", x => x.LookupListId)
                        .Annotation("SqlServer:Clustered", false);
                });

            migrationBuilder.CreateTable(
                name: "LTR_EmailNotification_Audit",
                columns: table => new
                {
                    EmailNotificationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmailNotificationID = table.Column<int>(type: "int", nullable: false),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EventType = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    EmailTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EmailBody = table.Column<string>(type: "text", nullable: true),
                    ExternalMailID = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    EmailStatusID = table.Column<int>(type: "int", nullable: true),
                    Sent = table.Column<bool>(type: "bit", nullable: true),
                    SentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Delivered = table.Column<bool>(type: "bit", nullable: true),
                    DeliveredDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Read = table.Column<bool>(type: "bit", nullable: true),
                    ReadDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Attempts = table.Column<int>(type: "int", nullable: true),
                    Comments = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_EmailNotification_Audit", x => x.EmailNotificationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "LTR_ErrorLogs",
                columns: table => new
                {
                    ErrorLogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ErrorSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ErrorLevel = table.Column<int>(type: "int", nullable: false),
                    ErrorContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ErrorMessage = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ErrorException = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_ErrorLogs", x => x.ErrorLogId);
                });

            migrationBuilder.CreateTable(
                name: "LTR_FaxNotification_Audit",
                columns: table => new
                {
                    FaxNotificationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaxNotificationID = table.Column<int>(type: "int", nullable: false),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EventType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    FaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    DeliveredDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FaxStatusID = table.Column<int>(type: "int", nullable: true),
                    Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FaxJobID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FaxJobXDN = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Sent = table.Column<bool>(type: "bit", nullable: true),
                    Delivered = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_FaxNotification_Audit", x => x.FaxNotificationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "LTR_LookupList",
                columns: table => new
                {
                    ListId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ListCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ListDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_LookupList", x => x.ListId);
                });

            migrationBuilder.CreateTable(
                name: "LTR_MailNotification_Audit",
                columns: table => new
                {
                    MailNotificationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MailNotificationID = table.Column<int>(type: "int", nullable: false),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EventType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MailAddress = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MailStatusID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_MailNotification_Audit", x => x.MailNotificationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "LTR_NotificationItems_Audit",
                columns: table => new
                {
                    NotificationItemAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    NotificationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    EmailTemplateID = table.Column<int>(type: "int", nullable: false),
                    EntityTypeID = table.Column<int>(type: "int", nullable: true),
                    EntityID = table.Column<int>(type: "int", nullable: true),
                    RecipientTypeID = table.Column<int>(type: "int", nullable: true),
                    RecipientID = table.Column<int>(type: "int", nullable: true),
                    JSONData = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PMCTypeID = table.Column<int>(type: "int", nullable: false),
                    PMC = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    OptedOut = table.Column<bool>(type: "bit", nullable: true),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: true),
                    NotificationContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ReSend = table.Column<bool>(type: "bit", nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessStatusID = table.Column<int>(type: "int", nullable: true),
                    ParentNotificationItemID = table.Column<int>(type: "int", nullable: true),
                    TransmissionStatusID = table.Column<int>(type: "int", nullable: true),
                    Message = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    IsException = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Read = table.Column<bool>(type: "bit", nullable: true),
                    Source = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_NotificationItems_Audit", x => x.NotificationItemAuditID);
                });

            migrationBuilder.CreateTable(
                name: "LTR_NotificationMaster",
                columns: table => new
                {
                    NotificationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ApplicationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    MasterStatusID = table.Column<int>(type: "int", nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Message = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_NotificationMaster", x => x.NotificationID);
                });

            migrationBuilder.CreateTable(
                name: "LTR_NotificationMaster_Audit",
                columns: table => new
                {
                    NotificationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ApplicationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    MasterStatusID = table.Column<int>(type: "int", nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Message = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_NotificationMaster_Audit", x => x.NotificationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "MailingWebServiceRequests",
                columns: table => new
                {
                    MailingWebServiceRequestID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, defaultValue: ""),
                    ServiceURL = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false, defaultValue: ""),
                    Parameters = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: ""),
                    SourceIPAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, defaultValue: ""),
                    SourceHostName = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false, defaultValue: ""),
                    CreatedDt = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedByID = table.Column<long>(type: "bigint", nullable: false),
                    UpdatedDt = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "(getdate())"),
                    UpdatedID = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MailTrackingErrors",
                columns: table => new
                {
                    MailTrackingErrorID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ErrorTrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ErrorDetails = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ErrorCount = table.Column<int>(type: "int", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedDt = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UpdatedDt = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MailTrackingErrors", x => x.MailTrackingErrorID);
                });

            migrationBuilder.CreateTable(
                name: "MailTrackings",
                columns: table => new
                {
                    MailTrackingID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MailingID = table.Column<long>(type: "bigint", nullable: false),
                    InquiryNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ShipperNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ReferenceNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    TransactionReference = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    CandidateBookmark = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ShipmentAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    BillToName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ServiceCenter = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ShipmentService = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ShipmentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    ShipmentWeight = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    PackageWeight = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    PickupDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    CurrentStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, defaultValue: ""),
                    DeliveredStatus = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, defaultValue: ""),
                    DeliveredDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    DeliveredTime = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false, defaultValue: ""),
                    DeliveredDateTime = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    DeliveredAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    Amount = table.Column<decimal>(type: "money", nullable: false),
                    ResponseStatus = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, defaultValue: ""),
                    DeletedFlg = table.Column<bool>(type: "bit", nullable: false),
                    CreatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    UpdatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    UpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MDM_Location",
                columns: table => new
                {
                    LocationID = table.Column<decimal>(type: "numeric(10,0)", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MDM_Organization",
                columns: table => new
                {
                    EntityID = table.Column<decimal>(type: "numeric(10,0)", nullable: false),
                    OrganizationID = table.Column<decimal>(type: "numeric(10,0)", nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    LocationID = table.Column<decimal>(type: "numeric(10,0)", nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MDM_Provider",
                columns: table => new
                {
                    ProviderID = table.Column<decimal>(type: "numeric(10,0)", nullable: false),
                    Prof_ID = table.Column<decimal>(type: "numeric(10,0)", nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Degree = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryLocationID = table.Column<decimal>(type: "numeric(10,0)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MDM_SalesAlignment",
                columns: table => new
                {
                    SALE_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TERR_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "DFProduct"),
                    ProgramID = table.Column<int>(type: "int", nullable: true, defaultValue: 112)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MDMPatientSearchResult",
                columns: table => new
                {
                    MDMPatientSearchResultId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    LastName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DOB = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Gender = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    City = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    State = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    MatchType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Source = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ExecutionDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    DupCheckOnly = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MDMPatientSearchResult_MDMPatientSearchResultId", x => x.MDMPatientSearchResultId);
                });

            migrationBuilder.CreateTable(
                name: "MedeBVOfframpClientResponseTypeCodes",
                columns: table => new
                {
                    MedeBVOfframpClientResponseTypeCodeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MedeBVOfframpResponseTypeCodeListID = table.Column<int>(type: "int", nullable: false),
                    OfframpClientID = table.Column<int>(type: "int", nullable: false),
                    Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedeBVOfframpClientResponseTypeCodes", x => x.MedeBVOfframpClientResponseTypeCodeID);
                });

            migrationBuilder.CreateTable(
                name: "MedeBVOfframpCOBBlurbRules",
                columns: table => new
                {
                    MedeBVOfframpCOBBlurbRulesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayerCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PayerType = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    SecEligibilityStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecCoordinates = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BlurbMessage = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AdditionalRule = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedeBVOfframpCOBBlurbRules", x => x.MedeBVOfframpCOBBlurbRulesID);
                });

            migrationBuilder.CreateTable(
                name: "MedeBVOfframpErrorList",
                columns: table => new
                {
                    MedeBVOfframpErrorListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MedeBVPolicyMessageID = table.Column<int>(type: "int", nullable: false),
                    MedeBVPolicyMessageContent = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    MedeBVCircumstance = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ConnectOfframpMessage = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DisplayMessage = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Category = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedeBVOfframpErrorList", x => x.MedeBVOfframpErrorListID);
                });

            migrationBuilder.CreateTable(
                name: "MedeBVOfframpRequiredRules",
                columns: table => new
                {
                    MedeBVOfframpRequiredRulesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MedeBVOfframpClientResponseTypeCodeID = table.Column<int>(type: "int", nullable: false),
                    Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedeBVOfframpRequiredRules", x => x.MedeBVOfframpRequiredRulesID);
                });

            migrationBuilder.CreateTable(
                name: "MedeBVOfframpResponseTypeCodeList",
                columns: table => new
                {
                    MedeBVOfframpResponseTypeCodeListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ResponseTypeCode = table.Column<int>(type: "int", nullable: false),
                    ResponseTypeDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedeBVOfframpResponseTypeCodeList", x => x.MedeBVOfframpResponseTypeCodeListID);
                });

            migrationBuilder.CreateTable(
                name: "MedicaidIncomeEligibilityLimitList",
                columns: table => new
                {
                    MedicaidIncomeEligibilityLimitList_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    State = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    ThresholdIndividual = table.Column<decimal>(type: "money", nullable: false),
                    ThresholdFamily = table.Column<decimal>(type: "money", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicaidExpansionExcluded = table.Column<int>(type: "int", nullable: false, computedColumnSql: "(case when [State]='WY' OR [State]='WI' OR [State]='TX' OR [State]='TN' OR [State]='SC' OR [State]='MS' OR [State]='KS' OR [State]='GA' OR [State]='FL' OR [State]='AL' then (1) else (0) end)", stored: false),
                    MedicaidEligibilityFPLPercentage = table.Column<int>(type: "int", nullable: false, defaultValue: 138)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicaidIncomeEligibilityLimitList", x => x.MedicaidIncomeEligibilityLimitList_ID);
                });

            migrationBuilder.CreateTable(
                name: "MedOffRampSupplementPlan",
                columns: table => new
                {
                    SupplementPlanId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SupplementLetter = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SupplementDescription = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsCopayCoInsurance = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsCopayCoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCopayCoInsurance = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCopayCoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CPTStatusDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CPTStatusDetailsCopayCoInsurance = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CPTStatusDetailsCopayCoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CPTStatusDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CPTStatusDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleIndividualAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxIndividualAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementspriorAuthorizationRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsBuyBillPermitted = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyAvailable = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummarycoordinatedPlanBenefits = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    CobSummaryDeductibleRemaining = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummaryProductAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummaryOfficeVisitAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummaryAdminAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MedOffRampSupplementPlan_OffRampClient",
                columns: table => new
                {
                    MedOffRampSupplementPlan_OffRampClientID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OffRampClientID = table.Column<int>(type: "int", nullable: false),
                    SupplementLetter = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CobSummarycoordinatedPlanBenefits = table.Column<string>(type: "varchar(800)", unicode: false, maxLength: 800, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedOffRampSupplementPlan_OffRampClient", x => x.MedOffRampSupplementPlan_OffRampClientID);
                });

            migrationBuilder.CreateTable(
                name: "MergeLogs",
                columns: table => new
                {
                    MergeLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    MergeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ID_Kept = table.Column<int>(type: "int", nullable: false),
                    ID_Merged = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MergeLogs", x => x.MergeLogID);
                });

            migrationBuilder.CreateTable(
                name: "Message_Queue",
                columns: table => new
                {
                    MessageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Sender_First_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Sender_Last_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    Brand = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    Message_Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Message_Text = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Read = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SendTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DestinationApplication = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LockedBy = table.Column<string>(type: "nchar(50)", fixedLength: true, maxLength: 50, nullable: true),
                    AssignmentInProgress = table.Column<bool>(type: "bit", nullable: true),
                    Archived = table.Column<bool>(type: "bit", nullable: true),
                    Reviewed = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Message_Queue", x => x.MessageID);
                });

            migrationBuilder.CreateTable(
                name: "MessageModule",
                columns: table => new
                {
                    MessageModuleId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageModule", x => x.MessageModuleId);
                });

            migrationBuilder.CreateTable(
                name: "MessagesSMS",
                columns: table => new
                {
                    MessagesSMSID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MessageText = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    MessageFrom = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MessageTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NumberOfMedia = table.Column<int>(type: "int", nullable: true),
                    MessageSid = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DateSent = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateCreated = table.Column<DateTime>(type: "datetime", nullable: true),
                    MessageDirection = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ErrorMessage = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Uri = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    AccountSid = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    IsRead = table.Column<bool>(type: "bit", nullable: true),
                    ErrorCode = table.Column<int>(type: "int", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AssignmentInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessagesSMS", x => x.MessagesSMSID);
                });

            migrationBuilder.CreateTable(
                name: "MessagesSMSMedia",
                columns: table => new
                {
                    MessagesSMSMediaID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MessagesSMSID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ParentSid = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Sid = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Uri = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: false),
                    DocumentStorageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    IsRead = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessagesSMSMedia", x => x.MessagesSMSMediaID);
                });

            migrationBuilder.CreateTable(
                name: "MessageTypes",
                columns: table => new
                {
                    MessageTypeID = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageTypes", x => x.MessageTypeID);
                });

            migrationBuilder.CreateTable(
                name: "MobileMasterSurveys",
                columns: table => new
                {
                    MobileMasterSurveyID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    SurveyDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SurveyActiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileMasterSurveys", x => x.MobileMasterSurveyID);
                });

            migrationBuilder.CreateTable(
                name: "MobileRefillOrders",
                columns: table => new
                {
                    MobileRefillOrderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    UseDefaultAddress = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    UseCardonFile = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    CardHolderName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CCAcctNumber = table.Column<string>(type: "varchar(16)", unicode: false, maxLength: 16, nullable: true),
                    CCExpDate = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileRefillOrders", x => x.MobileRefillOrderID);
                });

            migrationBuilder.CreateTable(
                name: "MobileRequestPharmacyCall",
                columns: table => new
                {
                    MobileRequestPharmacyCallID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ClientPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RequestedDateTime = table.Column<DateTime>(type: "datetime", nullable: false),
                    CallBackNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileRequestPharmacyCall", x => x.MobileRequestPharmacyCallID);
                });

            migrationBuilder.CreateTable(
                name: "MobileSurveyElements",
                columns: table => new
                {
                    MobileSurveyElementID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    QuestionCategory = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    QuestionText = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileSurveyElements", x => x.MobileSurveyElementID);
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment",
                columns: table => new
                {
                    assessment_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_type_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    patient_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    case_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    clinic_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_guid = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_score = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_status_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_comment = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    active = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment_Answer",
                columns: table => new
                {
                    assessment_answer_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_answer = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    assessment_answer_score = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    next_question_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    display_text_control = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    display_text_control_required = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    reset_other_options = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    enable_list = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    disable_list = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    active = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment_Detail",
                columns: table => new
                {
                    assessment_detail_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question_score = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment_Detail_Answer",
                columns: table => new
                {
                    assessment_detail_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_answer_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_answer_custom = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    assessment_answer_score = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment_Question",
                columns: table => new
                {
                    assessment_question_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_type_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question_type_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    assessment_question_max_score = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_min_answer_count = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    answer_control_type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    display_question_number = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    is_required = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    active = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment_Question_Type",
                columns: table => new
                {
                    assessment_question_type_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question_type_name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_question_type_desc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    active = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "MPU_Assessment_Type",
                columns: table => new
                {
                    assessment_type_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    assessment_type_name = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    assessment_type_desc = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    created_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    created_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_user = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modified_date = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    active = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "NCPDP_RejectCodes",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RejectCode = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    Explanation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NCPDP_RejectCodes", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Note_Overrides",
                columns: table => new
                {
                    Note_Override_RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    NoteType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    NoteID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Note_Overrides", x => x.Note_Override_RecordID);
                });

            migrationBuilder.CreateTable(
                name: "Note_TemplateList",
                columns: table => new
                {
                    Note_TemplateList_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TemplateSubject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    TemplateText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(4,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_TypeShortDesc = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Note_TemplateList", x => x.Note_TemplateList_ID);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    NotificationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    JSONData = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Processed = table.Column<bool>(type: "bit", nullable: false),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Success = table.Column<bool>(type: "bit", nullable: true),
                    Comments = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    EmailNotification = table.Column<bool>(type: "bit", nullable: true),
                    SendPhysicalLetter = table.Column<bool>(type: "bit", nullable: true),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: true),
                    Recipient = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    NotificationContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Read = table.Column<bool>(type: "bit", nullable: true),
                    Trigger_EmailTemplagte_ListID = table.Column<int>(type: "int", nullable: true),
                    Email = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    LetterSentToPrintVendorDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SendFax = table.Column<bool>(type: "bit", nullable: true),
                    FaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    DocumentType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.NotificationID);
                });

            migrationBuilder.CreateTable(
                name: "NotificationTemplates",
                columns: table => new
                {
                    NotificationTemplateID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NotificationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    NotificationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DocumentTemplateID = table.Column<int>(type: "int", nullable: true),
                    TemplateText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NotificationTemplates", x => x.NotificationTemplateID);
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencies",
                columns: table => new
                {
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AgencyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ContactLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencies", x => x.NurseAgencyID);
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyAccreditationList",
                columns: table => new
                {
                    NA_AccreditationListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Accreditation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreateBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyAccreditationList", x => x.NA_AccreditationListID);
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyCertificationList",
                columns: table => new
                {
                    NA_CertificationListID = table.Column<int>(type: "int", nullable: false),
                    Certification = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreateBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyCertificationList", x => x.NA_CertificationListID);
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyPhoneNumbers",
                columns: table => new
                {
                    NurseAgencyPhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyPhoneNumbers", x => x.NurseAgencyPhoneNumberID);
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyRates",
                columns: table => new
                {
                    NurseAgencyRate_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Rate = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyRates", x => x.NurseAgencyRate_ID);
                });

            migrationBuilder.CreateTable(
                name: "OffRampClient_Payer_Relationship",
                columns: table => new
                {
                    OffRampClient_Payer_Relationship_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OffRampClientID = table.Column<int>(type: "int", nullable: false),
                    PayerID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OffRampClient_Payer_Relationship", x => x.OffRampClient_Payer_Relationship_ID);
                });

            migrationBuilder.CreateTable(
                name: "OffRampClient_Primary_Secondary_Relationship",
                columns: table => new
                {
                    OffRampClient_Primary_Secondary_Relationship_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OffRampClientID = table.Column<int>(type: "int", nullable: false),
                    PrimaryPayerID = table.Column<int>(type: "int", nullable: false),
                    SecondaryPayerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OffRampClient_Primary_Secondary_Relationship", x => x.OffRampClient_Primary_Secondary_Relationship_ID);
                });

            migrationBuilder.CreateTable(
                name: "OfframpClients",
                columns: table => new
                {
                    OfframpClientID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ClientName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ClientDrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ClientApplicationName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    eBVType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    ManualInOfframp = table.Column<bool>(type: "bit", nullable: false),
                    HubInConnect = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DefaultUserGroupName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InternalClient = table.Column<bool>(type: "bit", nullable: false),
                    PAExpiryYears = table.Column<int>(type: "int", nullable: true),
                    PAExpiryUserGroup = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    isPayerSamplingEnabled = table.Column<bool>(type: "bit", nullable: false),
                    isRepSamplingEnabled = table.Column<bool>(type: "bit", nullable: false),
                    isSeasonalClient = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OfframpClients", x => x.OfframpClientID);
                });

            migrationBuilder.CreateTable(
                name: "OrderProductForm",
                columns: table => new
                {
                    OrderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AccountNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PhysicianName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OfficeContact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FaxNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PONumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TaxID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    StateLicenseNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    GPOAffiliation = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Eligibility340b = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Price2500 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Price5000 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Price10000 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OrderQuantity2500 = table.Column<int>(type: "int", nullable: true),
                    OrderQuantity5000 = table.Column<int>(type: "int", nullable: true),
                    OrderQuantity10000 = table.Column<int>(type: "int", nullable: true),
                    AddressID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ShipToName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ShipToPracticeName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ShipToAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipToAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipToCity = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipToState = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipToZip = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    isUseShipToInfoForBillTo = table.Column<bool>(type: "bit", nullable: true),
                    BillToName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BillToPracticeName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BillToAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BillToAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BillToCity = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BillToState = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BillToZip = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ShippingPreference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CardType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardHolderName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardHolderPhone = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardHolderAddress = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardHolderCity = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardHolderState = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardHolderZip = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreditCardNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardSecurityCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardExpirationMonth = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CardExpirationYear = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PDF = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    LocationType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderProductForm", x => x.OrderID);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationEnrollments",
                columns: table => new
                {
                    OrganizationEnrollmentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationHIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationOtherId = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrgAddress1 = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrgCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrgState = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OrgZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    OrgIsPrimaryLocation = table.Column<bool>(type: "bit", nullable: true),
                    OrgPhone1 = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    OrgFax = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AdditionalOrgFax = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AdditionalType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AdditionalRepName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    AdditionalRepPhone = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AdditionalRepSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttachedDocumentID_IPE = table.Column<int>(type: "int", nullable: true),
                    SRFComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SRFReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_AssignedTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    DocumentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationCertifications", x => x.OrganizationEnrollmentID);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationEnrollments_Audit",
                columns: table => new
                {
                    OrganizationEnrollments_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationEnrollmentID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationHIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationOtherId = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrgAddress1 = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrgCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrgState = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    OrgZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    OrgIsPrimaryLocation = table.Column<bool>(type: "bit", nullable: true),
                    OrgPhone1 = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    OrgFax = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AdditionalOrgFax = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AdditionalType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AdditionalRepName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    AdditionalRepPhone = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AdditionalRepSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttachedDocumentID_IPE = table.Column<int>(type: "int", nullable: true),
                    SRFComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SRFReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_AssignedTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    DocumentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_log = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Change_Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationEnrollments_Audit", x => x.OrganizationEnrollments_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationMergeLog",
                columns: table => new
                {
                    OrganizationMergeLogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationId_Old = table.Column<int>(type: "int", nullable: false),
                    OrganizationId_New = table.Column<int>(type: "int", nullable: false),
                    MergeStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IsEmailUpdated = table.Column<bool>(type: "bit", nullable: false),
                    IsNPIUpdated = table.Column<bool>(type: "bit", nullable: false),
                    IsTaxIDUpdated = table.Column<bool>(type: "bit", nullable: false),
                    IsTitle10Updated = table.Column<bool>(type: "bit", nullable: false),
                    IsTitle10ExpDateUpdated = table.Column<bool>(type: "bit", nullable: false),
                    AccountName_Old = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AccountName_New = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AccountID_Old = table.Column<long>(type: "bigint", nullable: true),
                    AccountID_New = table.Column<long>(type: "bigint", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationMergeLog", x => x.OrganizationMergeLogId);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationMergeLogDetail",
                columns: table => new
                {
                    OrganizationMergeLogDetailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationMergeLogId = table.Column<int>(type: "int", nullable: false),
                    TableName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    KeyColumn = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    IdValue = table.Column<int>(type: "int", nullable: false),
                    ActionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationMergeLogDetail", x => x.OrganizationMergeLogDetailID);
                });

            migrationBuilder.CreateTable(
                name: "Organizations_Audit",
                columns: table => new
                {
                    Organizations_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TaxID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title10 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title10ExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    MasterOrgnizationID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    BAA_On_File = table.Column<bool>(type: "bit", nullable: true),
                    Date_BAA_Signed = table.Column<DateTime>(type: "datetime", nullable: true),
                    Date_BAA_Sent = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    OrganizationURL = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AccountableCareOrganization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IndependentPracticeOrganization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Other_Identifier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaseManager = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationMethodContact = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredContactMethodID = table.Column<int>(type: "int", nullable: true),
                    HighTouch = table.Column<bool>(type: "bit", nullable: true),
                    HighTouchNote = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    HighTouchChanged = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Organizations_Audit", x => x.Organizations_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationTerritoryAlignment",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false, defaultValue: 1000),
                    ZIPCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    City = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    PAM = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    PAS = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    PAA = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    FRM = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    POD = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FRMEmail = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PAAPhoneExtension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PAN_ApplicationRoles",
                columns: table => new
                {
                    RoleID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAN_ApplicationRoles", x => x.RoleID);
                });

            migrationBuilder.CreateTable(
                name: "PAN_Applications",
                columns: table => new
                {
                    ApplicationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Application = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ApplicationType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAN_Applications", x => x.ApplicationID);
                });

            migrationBuilder.CreateTable(
                name: "PAN_DisenrollmentReversal_Audit",
                columns: table => new
                {
                    DisenrollmentReversalAuditId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    AuditDate = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    DisenrollmentReversalId = table.Column<int>(type: "int", nullable: false),
                    ReversalReasonId = table.Column<int>(type: "int", nullable: true),
                    ReversalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGrantId = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: true),
                    PatientGrantDisenrollmentId = table.Column<int>(type: "int", nullable: true),
                    ReversalNotes = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    ContactedPAN = table.Column<bool>(type: "bit", nullable: true),
                    PANRequestedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ReversalDecision = table.Column<bool>(type: "bit", nullable: true),
                    PANFundRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANFundResponseDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANFundDecision = table.Column<bool>(type: "bit", nullable: true),
                    RequiredOverride = table.Column<bool>(type: "bit", nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: false),
                    ResultMessage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    SubmittedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FinalizedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateOnly>(type: "date", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    AuditType = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAN_DisenrollmentReversal_Audit", x => x.DisenrollmentReversalAuditId)
                        .Annotation("SqlServer:Clustered", false);
                });

            migrationBuilder.CreateTable(
                name: "PanReversals",
                columns: table => new
                {
                    C111TT_CLAIM_BATCH_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CLAIM_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CLAIM_TYPE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PAYMENT_DIRECT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PHARMACY_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CHAIN_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PHARMACY_NAME = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_REJECT_CODE_01 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_REJECT_CODE_02 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DIAGNOSIS_CODE_ICD10 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_RX_DATE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DRUG_TYPE_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_NATIONAL_DRUG_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PRODUCT_NAME = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_NEW_REFILL_IND = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_METRIC_QUANTITY = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DAYS_SUPPLY = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_INGREDIENT_COST_BILLED = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_INGREDIENT_COST_PAID = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DISPENSING_FEE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_COPAY = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_TAX = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_TOTAL_AMOUNT_PAID = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_UCR_AMOUNT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_MEMBER_BIRTHDATE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_MEMBER_SEX = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CARDHOLDER_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_MEMBER_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_ALTERNATE_CARD_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PATIENT_RELATIONSHIP = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PHYSICIAN_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DIAGNOSIS_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PDM_SYSTEM_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PDM_SPONSOR_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PDM_GROUP_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_GROUP_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_GENERIC_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_MAC_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DAW_IND = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_THERAPEUTIC_CLASS_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_RX_OTC_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_GPI = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_EXCEPTION_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_OVERRIDE_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PERIOD_ENDING_DATE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PAID_DATE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_COMPOUND_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_BATCH_DATE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CLAIM_COUNTER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_MAIL_ORDER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_BENEFIT_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_AWP = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CLAIM_IND = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DRUG_PREFERENCE_IND = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PRICING_IND = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DRUG_MANUFACTURER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_CONTROLLED_SUBSTANCE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PATIENT_LAST_NAME = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PATIENT_FIRST_NAME = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PATIENT_MIDDLE_INIT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_THIRD_PARTY_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PHARMACY_NPI_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_D0_RX_NUMBER = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_OTHER_COVERAGE_CODE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_DEDUCTIBLE_AMOUNT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_NUMBER_ON_CARD = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_REVERSAL_DATE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_AMOUNT_APPLIED_TO_OOP = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_ACCUMULATOR_APPLIED_IND = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_AMOUNT_COINSURANCE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_AMOUNT_COPAY = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_PENALTY_AMOUNT = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_ADMIN_FEE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_FILLER_ONE = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    C111TT_FILLER_TWO = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PAPExtension",
                columns: table => new
                {
                    PAPExtensionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: true),
                    HouseHoldSize = table.Column<int>(type: "int", nullable: true),
                    HouseHoldIncome = table.Column<decimal>(type: "numeric(16,2)", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Status = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ProcessedMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__PAPExten__6D123B98F3620F42", x => x.PAPExtensionID);
                });

            migrationBuilder.CreateTable(
                name: "Patient_DeviceID",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DeviceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeviceNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Assigned = table.Column<bool>(type: "bit", nullable: true),
                    AssignedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Patient_DeviceID", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Patient_Fulfillment",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NamePrefix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field4 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field5 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field6 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Field7 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FulfillmentID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IndividualID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CampaignCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CellCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Kit_Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResponseSourceCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentCode = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ExtractDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    VendorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Patient_Fulfillment_ID", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "PatientAddresses_Audit",
                columns: table => new
                {
                    PatientAddressID_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientAddressID = table.Column<int>(type: "int", nullable: true),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Country = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Comments = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FedexAddressVerifiedFlg = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientAttestation",
                columns: table => new
                {
                    PatientAttestationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    Contact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Optout = table.Column<bool>(type: "bit", nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    VerbalConsent = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    Version = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLocationID = table.Column<int>(type: "int", nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDateNA = table.Column<bool>(type: "bit", nullable: true),
                    IsReceived = table.Column<bool>(type: "bit", nullable: true),
                    NurseOptout = table.Column<bool>(type: "bit", nullable: true),
                    NurseOptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    OptoutReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BRCCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusChangeDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FundID = table.Column<int>(type: "int", nullable: true),
                    FundName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AttesterFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttesterLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttesterEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AttesterPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DiseaseState = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CheckBox1 = table.Column<bool>(type: "bit", nullable: true),
                    CheckBox2 = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientAttestation", x => x.PatientAttestationID);
                });

            migrationBuilder.CreateTable(
                name: "PatientAttestationAudit",
                columns: table => new
                {
                    PatientAttestationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttestationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientAttestationID = table.Column<int>(type: "int", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    Contact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Optout = table.Column<bool>(type: "bit", nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Type = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    VerbalConsent = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    Version = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLocationID = table.Column<int>(type: "int", nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDateNA = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsReceived = table.Column<bool>(type: "bit", nullable: true),
                    NurseOptout = table.Column<bool>(type: "bit", nullable: true),
                    NurseOptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    OptoutReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BRCCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusChangeDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FundID = table.Column<int>(type: "int", nullable: true),
                    FundName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AttesterFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttesterLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttesterEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AttesterPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DiseaseState = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    CheckBox1 = table.Column<bool>(type: "bit", nullable: true),
                    CheckBox2 = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientAttestationAudit", x => x.PatientAttestationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "PatientCommunicationMethods",
                columns: table => new
                {
                    PatientCommunicationMethodID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    CommunicatioMethodTypeId = table.Column<int>(type: "int", nullable: true),
                    CommunicationMethodName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Note = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    StartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientCommunicationMethods", x => x.PatientCommunicationMethodID);
                });

            migrationBuilder.CreateTable(
                name: "PatientConsentAudit",
                columns: table => new
                {
                    PatientConsentAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ConsentReceived_Manu = table.Column<bool>(type: "bit", nullable: false),
                    ConsentDate_Manu = table.Column<DateOnly>(type: "date", nullable: true),
                    Consent_Manu_ExpDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ConsentSource = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ConsentReceivedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OptOutDate = table.Column<DateOnly>(type: "date", nullable: true),
                    isOptOut = table.Column<bool>(type: "bit", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ConsentProvider = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentFormVersion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ConsentSourceSubtype = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ConsentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientConsentAudit", x => x.PatientConsentAuditID);
                });

            migrationBuilder.CreateTable(
                name: "PatientConsentPerDrug",
                columns: table => new
                {
                    ConsentPerDrugID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ConsentReceived = table.Column<bool>(type: "bit", nullable: false),
                    ConsentDate_Manu = table.Column<DateOnly>(type: "date", nullable: true),
                    Consent_Manu_ExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ConsentSource = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DrugName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    OptOut = table.Column<bool>(type: "bit", nullable: false),
                    OptOutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ConsentFormVersion = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, defaultValue: "N/A"),
                    ConsentSourceSubtype = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, defaultValue: "N/A"),
                    ConsentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttestationRecordingID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientConsentPerDrug", x => x.ConsentPerDrugID);
                });

            migrationBuilder.CreateTable(
                name: "PatientDeviceUsageLog",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProductUsageDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientDupeSearchResponses",
                columns: table => new
                {
                    PatientDupeSearchResponseID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntityDupeSearchRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    SSN = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ZIP = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MatchScore = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UpdatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientDupeSearchResponses", x => x.PatientDupeSearchResponseID);
                });

            migrationBuilder.CreateTable(
                name: "PatientEligibility_ResponseCodeList",
                columns: table => new
                {
                    PatientEligibility_ResponseCodeListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ResponseCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ResponseCodeDesc = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ResponseComments = table.Column<string>(type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientEligibility_ResponseCodeList", x => x.PatientEligibility_ResponseCodeListID);
                });

            migrationBuilder.CreateTable(
                name: "PatientEligibility_Transactions",
                columns: table => new
                {
                    PatientEligilibity_TransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    InsuranceID = table.Column<int>(type: "int", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    Transaction_InsuranceName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Transaction_InsuranceCode = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Transaction_ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Transaction_ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Transaction_ProviderNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Transaction_PatientMemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Transaction_PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Transaction_PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Transaction_PatientDOB = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Response_Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    Response_Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_TypeDesc = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Response_XML = table.Column<string>(type: "xml", nullable: true),
                    RawResponce = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    RawRequest = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    WebServicesRequestType = table.Column<int>(type: "int", nullable: true),
                    Response_EffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Response_TerminationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Response_PrescriptionRefNum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrescriptionRefNumQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrefProductIdQualifier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrefProductId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrefProductCount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrefProductIncentive = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Request_BinNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ReleaseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_TransactionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ProcessorControlNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_TransactionCount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ServiceProviderIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ServiceProviderId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ServiceDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Request_CertificationID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientGenderCode = table.Column<int>(type: "int", nullable: true),
                    Request_PlaceOfService = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientStreet = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientZipCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientPhoneNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_EmployerId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrimaryCareProviderIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrimaryCareProviderId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrimaryCareProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriptionRefNum = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriptionRefNumQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ProductIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ProductId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_DaysSupply = table.Column<int>(type: "int", nullable: true),
                    Request_QtyDispensed = table.Column<int>(type: "int", nullable: true),
                    Request_UnitOfMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_SplPackageInd = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_SubClarificatoinCodes = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_SubClarifiCodeCnt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PresOriginCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_NumOfRefillsAuthorized = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_DatePresWritten = table.Column<DateTime>(type: "datetime", nullable: true),
                    Request_DispenseAsWritten = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_CompCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_FillNumber = table.Column<int>(type: "int", nullable: true),
                    Request_QtyIntendedDisp = table.Column<int>(type: "int", nullable: true),
                    Request_OtherPaymentsCount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_OtherPayerCoverageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_IngredientCostSub = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Request_DispensingFeeSub = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Request_OtherAmtClaimedSubCnt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_OtherAmountClaimedSubmittedQualifier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_OtherAmountClaimedSubmitted = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Request_UsualCustomaryCharge = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Request_BasisOfCostDetermn = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_GrossAmountDue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Request_ProviderIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ProviderId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_CoPayAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Response_CoPayAmountSpecified = table.Column<bool>(type: "bit", nullable: true),
                    Response_PricingMessage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_HeaderResponseStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_TranResponseStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_RejectCount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_RejectCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_AdditionalMessageInfo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Response_StatusMessage = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Response_MedicarePartDCoverageCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_CmsLowIncomeCostSharingLevel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_ContractId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_FormularyId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_AuthorizationNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_InsuranceGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_InsurancePlanID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_NetworkReimburseId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PayerIdQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PayerId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_RejectFldOccuranceInd = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_ApprovedMsgCodeCount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_ApprovedMsgCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_HlpDskPhoneQual = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_HlpDskPhoneNo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrefProductCopayIncentive = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrefProductDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_Message = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PBMCardHolderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_CardholderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_CardholderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_HomePlan = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_EligibilityClarificationCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_GroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PersonCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PatientRelationshipCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_MedigapId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_MedicaidIndicator = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_ProviderAcceptAssignmentIndicator = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_CmsPartDDefinedQualifiedFacility = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_MedicaidIdNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_BenefitID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberZipCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberStreet = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Request_PrescriberState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_BIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_CardholderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_GroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PersonCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PaNeeded = table.Column<bool>(type: "bit", nullable: true),
                    Response_ClaimNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Response_ClaimReversed = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientEligibility_Transactions", x => x.PatientEligilibity_TransactionID);
                });

            migrationBuilder.CreateTable(
                name: "PatientFMRSR_History",
                columns: table => new
                {
                    PatientFMRSR_HistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_Status = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FirstName_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName_phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Status_Pat = table.Column<string>(type: "varchar(600)", unicode: false, maxLength: 600, nullable: true),
                    EntityAsContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRFComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SRFReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    FMRSC_Type = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Reproductive_Status = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Negative_Pregnancy_Test = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FMRSC_Status_Description = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Reason_for_Change = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Reason_for_Change_Description = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Annual_Verification = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SH_Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SH_LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone_Pat = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address_Phy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    City_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip_Phy = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientSPID = table.Column<int>(type: "int", nullable: true),
                    SPName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    TriageSRID = table.Column<int>(type: "int", nullable: true),
                    DocName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: true),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EnrollmentDate_Phy = table.Column<DateTime>(type: "datetime", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    SR_SubTypeListID = table.Column<int>(type: "int", nullable: true),
                    ResolutionID = table.Column<int>(type: "int", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBY_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FMRSC_VerballyAccepted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FMRSC_InteractionID = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    FMRSC_PrescriberSignatureDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientFMRSR_History", x => x.PatientFMRSR_HistoryID);
                });

            migrationBuilder.CreateTable(
                name: "PatientFMRSR_History_Audit",
                columns: table => new
                {
                    PatientFMRSR_History_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientFMRSR_HistoryID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_Status = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FirstName_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName_phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Status_Pat = table.Column<string>(type: "varchar(600)", unicode: false, maxLength: 600, nullable: true),
                    EntityAsContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRFComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SRFReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    FMRSC_Type = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Reproductive_Status = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Negative_Pregnancy_Test = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FMRSC_Status_Description = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Reason_for_Change = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Reason_for_Change_Description = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FMRSC_Annual_Verification = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SH_Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SH_LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone_Pat = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address_Phy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    City_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip_Phy = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientSPID = table.Column<int>(type: "int", nullable: true),
                    SPName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    TriageSRID = table.Column<int>(type: "int", nullable: true),
                    DocName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    SR_SubTypeListID = table.Column<int>(type: "int", nullable: true),
                    ResolutionID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: true),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EnrollmentDate_Phy = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created_log = table.Column<DateOnly>(type: "date", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Change_Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FMRSC_VerballyAccepted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FMRSC_InteractionID = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    FMRSC_PrescriberSignatureDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientFMRSR_History_Audit", x => x.PatientFMRSR_History_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "PatientInvitationEmailAudit",
                columns: table => new
                {
                    EMailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    Token = table.Column<string>(type: "xml", nullable: false),
                    ExpiredAt = table.Column<DateTime>(type: "datetime", nullable: false),
                    isSubmitted = table.Column<bool>(type: "bit", nullable: false),
                    SubmittedAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IPAddress = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientJourneyData",
                columns: table => new
                {
                    Pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExportID = table.Column<int>(type: "int", nullable: true),
                    TimeStamp = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CarecycleID = table.Column<int>(type: "int", nullable: true),
                    CarecycleStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientName = table.Column<string>(type: "varchar(130)", unicode: false, maxLength: 130, nullable: true),
                    PatientInit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Territory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatCategory = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StartSMNType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientStatus = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PhysicianName = table.Column<string>(type: "varchar(130)", unicode: false, maxLength: 130, nullable: true),
                    CoCNurse_Init = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    CoCNurse_Current = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    CareCycleState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SMNReferralReceivedDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SMNReferralReceivedDateNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAFReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAFReceivedNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAFReceivedColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BICompleted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BICompletedNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BICompletedColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CompleteSMNReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialPriorAuthorization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialPriorAuthorizationNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialPriorAuthorizationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenancePriorAuthorization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenancePriorAuthorizationNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenancePriorAuthorizationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAInitiated = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialShipDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialShipDateNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialShipDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NurseAssignmentDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NurseAssignmentDateNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NurseAssignmentDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstWecomeCallAttempt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstWecomeCallAttemptNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstWecomeCallAttemptColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    WelcomeCallCompleted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    WelcomeCallCompletedNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreInitiationEducationVisit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreInitiationEducationVisitNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitiationVisit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitiationVisitNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitiationVisitColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_24HourPostInitiation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_24HourPostInitiationNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_24HourPostInitiationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenanceSMNReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenanceSMNReceivedNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenanceSMNReceivedColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    visit_1weekPostinitiation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    visit_1weekPostinitiationNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    visit_1weekPostinitiationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_2weekpostinitiationeducation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_2weekpostinitiationeducationNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_2weekpostinitiationeducationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentMaintenanceSMNReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentMaintenanceSMNReceivedNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MonthlyFollowUp = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MonthlyFollowUpNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PostInitiationFollowUpVisit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PostInitiationFollowUpVisitNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastShipDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastShipDateNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaysSinceLastFill = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SpecialtyPharmacy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPAStartDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPAStartDateNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPACompletedDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPACompletedDateNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPACompletedDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Over180days = table.Column<bool>(type: "bit", nullable: true),
                    PatientStatusDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillRemaining = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MostRecentContactAttempt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MostRecentCompletedContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_PostInitiationTitration = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_PostInitiationTitrationNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_PostInitiationTitrationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TitrationFormFaxedtoHCP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TitrationFormFaxedtoHCPNA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientLISCheck",
                columns: table => new
                {
                    PatientLISCheckID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HouseHoldNumber = table.Column<int>(type: "int", nullable: true),
                    GrossIncome = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Medicare = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Medicaid = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientLISCheck", x => x.PatientLISCheckID);
                });

            migrationBuilder.CreateTable(
                name: "PatientLISCheckBatch",
                columns: table => new
                {
                    PatientLISCheckBatchID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    LISLevel = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LISCheckDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    client_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    transaction_status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    patient_first = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    patient_last = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    dob = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ssn = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    part_a = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    part_b = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    part_d = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ab_reject_code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ab_reject_code_2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ab_reject_text = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    d_reject_code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_reject_code_2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_reject_text = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    hcin = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_contract_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_plan_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_plan_name = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    d_member_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_group = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_bin = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    d_pcn = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    processing_comments = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    InboundFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientLISCheckBatch", x => x.PatientLISCheckBatchID);
                });

            migrationBuilder.CreateTable(
                name: "PatientMarketingStatus",
                columns: table => new
                {
                    PatientMarketingStatus_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    SurveyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OptStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientOrganizations",
                columns: table => new
                {
                    PatientOrganizationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValueSql: "(NULL)"),
                    Relationship = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true, defaultValue: "N/A")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientOrganizations", x => x.PatientOrganizationID);
                });

            migrationBuilder.CreateTable(
                name: "PatientPhoneNumbers_Audit",
                columns: table => new
                {
                    PatientPhoneNumberID_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientPhoneNumberID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    OKtoLeaveMsg = table.Column<bool>(type: "bit", nullable: true),
                    PreferredTime = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Country = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CountryCallingCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PreferredCallingRate = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OKtoSendTextMsg = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientPhoneNumbers_Audit", x => x.PatientPhoneNumberID_Audit_ID);
                });

            migrationBuilder.CreateTable(
                name: "PatientPrograms",
                columns: table => new
                {
                    PatientProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SharedRecordProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientPrograms", x => x.PatientProgramID);
                });

            migrationBuilder.CreateTable(
                name: "PatientReactivations",
                columns: table => new
                {
                    PatientReactivationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PendingReactive = table.Column<bool>(type: "bit", nullable: true),
                    ReactivationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientReactivations", x => x.PatientReactivationID);
                });

            migrationBuilder.CreateTable(
                name: "PatientRefill",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    RefillResponse = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    RefillResponseDateTime = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientREMS",
                columns: table => new
                {
                    PatientREMS_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_Status = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FirstName_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName_phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Status_Pat = table.Column<string>(type: "varchar(600)", unicode: false, maxLength: 600, nullable: true),
                    EntityAsContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRFComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SRFReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    PrescriberSignatureDt = table.Column<DateOnly>(type: "date", nullable: true),
                    LiverFnTest = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FRS_Type = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FRS_NagitivePregnancyTest = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FRS_ReproductiveStatus = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FRS_StatusDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    REMS_Signature = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    REMS_SignatureDt = table.Column<DateOnly>(type: "date", nullable: true),
                    REMS_SignatureSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REMS_VerbalSourceLink = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DocType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    SR_SubTypeListID = table.Column<int>(type: "int", nullable: true),
                    ResolutionID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EnrollmentDate_Phy = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SH_Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SH_LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientREMS", x => x.PatientREMS_ID);
                });

            migrationBuilder.CreateTable(
                name: "PatientREMS_Audit",
                columns: table => new
                {
                    PatientREMS_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientREMS_ID = table.Column<int>(type: "int", nullable: false),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    SR_SubTypeListID = table.Column<int>(type: "int", nullable: true),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ResolutionID = table.Column<int>(type: "int", nullable: true),
                    SR_Status = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    FirstName_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName_phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Status_Pat = table.Column<string>(type: "varchar(600)", unicode: false, maxLength: 600, nullable: true),
                    EntityAsContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(120)", unicode: false, maxLength: 120, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SRFComplete = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SRFReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    PrescriberSignatureDt = table.Column<DateOnly>(type: "date", nullable: true),
                    LiverFnTest = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FRS_Type = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FRS_NagitivePregnancyTest = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    FRS_ReproductiveStatus = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FRS_StatusDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    REMS_Signature = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    REMS_SignatureDt = table.Column<DateOnly>(type: "date", nullable: true),
                    REMS_SignatureSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    REMS_VerbalSourceLink = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DocType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DocName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    PCNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EnrollmentDate_Phy = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created_REMS = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_REMS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_log = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SH_Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SH_LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    SH_LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Change_Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientREMS_Audit", x => x.PatientREMS_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "PatientRxDetails",
                columns: table => new
                {
                    PatientRxDetailsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    PatientDeviceID = table.Column<int>(type: "int", nullable: true),
                    RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RxWrittenDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    FillsPrescribed = table.Column<short>(type: "smallint", nullable: false),
                    RefillsRemaining = table.Column<short>(type: "smallint", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientRxDetails", x => x.PatientRxDetailsID);
                });

            migrationBuilder.CreateTable(
                name: "Patients",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Prefix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    RefusedToProvideDOB = table.Column<bool>(type: "bit", nullable: true),
                    YearofBirth = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    SSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MasterPatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProductUsageDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientAuthCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HubCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    LegacyID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentReceived_Manu = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ConsentDate_Manu = table.Column<DateTime>(type: "datetime", nullable: true),
                    Consent_Manu_ExpDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    ConsentSource = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ConsentReceivedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SSNLastFourDigits = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    ConsentProvider = table.Column<string>(type: "varchar(110)", unicode: false, maxLength: 110, nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MarketingMemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMethodContact = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HighTouch = table.Column<bool>(type: "bit", nullable: true),
                    HighTouchNote = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    PortalUrgent = table.Column<bool>(type: "bit", nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmailSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    GenderOther = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Patients", x => x.PatientID);
                });

            migrationBuilder.CreateTable(
                name: "Patients_Audit",
                columns: table => new
                {
                    Patients_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Prefix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    RefusedToProvideDOB = table.Column<bool>(type: "bit", nullable: true),
                    YearofBirth = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    SSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MasterPatientID = table.Column<int>(type: "int", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProductUsageDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientAuthCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HubCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    LegacyID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentReceived_Manu = table.Column<bool>(type: "bit", nullable: true),
                    ConsentDate_Manu = table.Column<DateTime>(type: "datetime", nullable: true),
                    Consent_Manu_ExpDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    ConsentSource = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ConsentReceivedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SSNLastFourDigits = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    ConsentProvider = table.Column<string>(type: "varchar(110)", unicode: false, maxLength: 110, nullable: true),
                    Created_Log = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MarketingMemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmailUpdated = table.Column<bool>(type: "bit", nullable: true),
                    HighTouch = table.Column<bool>(type: "bit", nullable: true),
                    HighTouchNote = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    HighTouchChanged = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Patients_Audit", x => x.Patients_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "PatientSMSTextConsent",
                columns: table => new
                {
                    PatientSMSTextConsentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    IsReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ConsentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentRecordingID = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Optout = table.Column<bool>(type: "bit", nullable: true),
                    OptoutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DeclinedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientSMSTextConsent", x => x.PatientSMSTextConsentID);
                });

            migrationBuilder.CreateTable(
                name: "PatientSMSTextConsentAudit",
                columns: table => new
                {
                    PatientSMSTextConsentAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientSMSTextConsentID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    IsReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ConsentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConsentRecordingID = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: true),
                    DrugTherapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Optout = table.Column<bool>(type: "bit", nullable: true),
                    OptoutDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DeclinedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientSMSTextConsentAudit", x => x.PatientSMSTextConsentAuditID);
                });

            migrationBuilder.CreateTable(
                name: "PatientSpecialtyPharmacies",
                columns: table => new
                {
                    PatientSpecialtyPharmacyID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientSpecialtyPharmacies", x => x.PatientSpecialtyPharmacyID);
                });

            migrationBuilder.CreateTable(
                name: "PatientSpecialtyPharmacies_Audit",
                columns: table => new
                {
                    PatientSpecialtyPharmacies_AutidID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientSpecialtyPharmacyID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    VendorID = table.Column<int>(type: "int", nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Created_log = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientSSN_Encrypted",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    SSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    WasEncrypted = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PatientSSNShow_AuditLog",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    SSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientSSNShow_AuditLog", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "PatientStatusList",
                columns: table => new
                {
                    PatientStatusListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    StatusCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    StatusDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    StatusDetailCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    StatusDetailDescription = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    StatusType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(4,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientStatusList", x => x.PatientStatusListID);
                });

            migrationBuilder.CreateTable(
                name: "PatientXMLData",
                columns: table => new
                {
                    PatientXMLData_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DataDescription = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    XMLData = table.Column<string>(type: "xml", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientXMLData", x => x.PatientXMLData_ID);
                });

            migrationBuilder.CreateTable(
                name: "payer codes",
                columns: table => new
                {
                    PayerId = table.Column<string>(name: "Payer Id", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Payername = table.Column<string>(name: "Payer name", type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EnrollmentRequired = table.Column<string>(name: "Enrollment Required", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PayerDetails",
                columns: table => new
                {
                    PayerDetailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayerID = table.Column<int>(type: "int", nullable: false),
                    Website = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ReleasesBenefitsToThirdParty = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    NonRecordedLine = table.Column<bool>(type: "bit", nullable: true),
                    LongHoldTimes = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Notes = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PayerDetails", x => x.PayerDetailID);
                });

            migrationBuilder.CreateTable(
                name: "PayerInjectionDateConfig_Infinitus",
                columns: table => new
                {
                    ConfigID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HeaderValue = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    InjectionDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    RowLimiter = table.Column<int>(type: "int", nullable: true),
                    DBRowLimiter = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Payers",
                columns: table => new
                {
                    PayerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    CompanyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    ParentPayerID = table.Column<int>(type: "int", nullable: true),
                    Med_ePayerID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedPAPayerID = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    PriorityPayer = table.Column<bool>(type: "bit", nullable: true),
                    TimeZone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Payers", x => x.PayerID);
                });

            migrationBuilder.CreateTable(
                name: "PECOS_Providers_NPI_LookUpList",
                columns: table => new
                {
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Table_NPI", x => x.NPI);
                });

            migrationBuilder.CreateTable(
                name: "PhysicianAddresses_Audit",
                columns: table => new
                {
                    PhysicianAddresses_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FedexAddressVerifiedFlg = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PhysicianEnrollments",
                columns: table => new
                {
                    PhysicianEnrollmentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdateBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FirstName_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName_phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderType = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    phyAddressName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    LocationIsPrimary = table.Column<bool>(type: "bit", nullable: true),
                    PhyAddress1 = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PhyCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PhyPhone1 = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrgAddress1 = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrgCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrgState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrgZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AttachedDocumentID_PE = table.Column<int>(type: "int", nullable: true),
                    SR_AssignedTo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    AdditionalREMSSigDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    DocumentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianCertifications", x => x.PhysicianEnrollmentID);
                });

            migrationBuilder.CreateTable(
                name: "PhysicianEnrollments_Audit",
                columns: table => new
                {
                    PhysicianEnrollment_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianEnrollmentID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugCertificationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EnrollmentDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdateBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    FirstName_Phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName_phy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderType = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    phyAddressName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    LocationIsPrimary = table.Column<bool>(type: "bit", nullable: true),
                    PhyAddress1 = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PhyCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhyZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PhyPhone1 = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrgAddress1 = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    OrgCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrgState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrgZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    AttachedDocumentID_PE = table.Column<int>(type: "int", nullable: true),
                    SR_AssignedTo = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    AdditionalREMSSigDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    DocumentSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_log = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_log = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated_SR = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy_SR = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Change_Action = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianEnrollments_Audit", x => x.PhysicianEnrollment_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "PhysicianPhoneNumbers_Audit",
                columns: table => new
                {
                    PhysicianPhoneNumbers_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianPhoneNumberID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PhysicianPrograms",
                columns: table => new
                {
                    PhysicianProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SharedRecordProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianPrograms", x => x.PhysicianProgramID);
                });

            migrationBuilder.CreateTable(
                name: "Physicians_Audit",
                columns: table => new
                {
                    Physicians_Audit_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Prefix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MasterPhysicianID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    BAA_On_File = table.Column<bool>(type: "bit", nullable: true),
                    Date_BAA_Signed = table.Column<DateTime>(type: "datetime", nullable: true),
                    Date_BAA_Sent = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    W9OnFile = table.Column<bool>(type: "bit", nullable: true),
                    W9Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    HighTouch = table.Column<bool>(type: "bit", nullable: true),
                    HighTouchNote = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    HighTouchChanged = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PhysiciansDetail_Audit",
                columns: table => new
                {
                    PhysiciansDetailAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysiciansDetailID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    MedicareID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    MedicaidID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    TaxID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    BCBSID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    DEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PTAN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Data2000WaiverXDEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysiciansDetail_Audit", x => x.PhysiciansDetailAuditID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_ADSARtoSOC_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Region_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Region_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ADSAR_Territory_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ADSAR_Territory_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SOC_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SOC_Account_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SOC_Address = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SOC_CITY = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SOC_STATE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SOC_ZIP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Portal_EntityToTerr",
                columns: table => new
                {
                    EntityToTerrID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TerritoryID = table.Column<int>(type: "int", nullable: true),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EntityID = table.Column<int>(type: "int", nullable: true),
                    EntityType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    NPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CustomData1 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData2 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData3 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData4 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData5 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_EntityToTerr", x => x.EntityToTerrID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_EntityToTerr_Stage",
                columns: table => new
                {
                    EntityToTerrID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EntityType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EntityID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EntityName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    NPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CustomData1 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData2 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData3 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    FileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Portal_HCP_Buttons_AuditLog",
                columns: table => new
                {
                    AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    UserName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IsPhysician = table.Column<bool>(type: "bit", nullable: false),
                    IsStagingSR = table.Column<bool>(type: "bit", nullable: false),
                    ButtonName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ClickedOn = table.Column<DateTime>(type: "datetime", nullable: false),
                    ClickedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_HCP_Buttons_AuditLog", x => x.AuditID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_NPItoFacilitytoSOC_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    npi = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    mdm_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    first_name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    last_name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    facility_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    facility_name = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    facility_city = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    facility_state = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    facility_zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    facility_office = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    facility_email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    soc_id = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    soc_name = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    soc_city = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    soc_state = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    soc_zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    soc_office = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    soc_email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Portal_NPItoSOC",
                columns: table => new
                {
                    Portal_NPItoSOCID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Facility_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    SOC_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<int>(type: "int", nullable: true),
                    Lastupdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Lastupdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_NPItoSOC", x => x.Portal_NPItoSOCID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_PatientTempRegistration",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IPAddress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DOB = table.Column<DateOnly>(type: "date", nullable: false),
                    Medication = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Created = table.Column<DateOnly>(type: "date", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_PatientTempRegistration", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Regions",
                columns: table => new
                {
                    Portal_RegionID = table.Column<int>(type: "int", nullable: false),
                    RegionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ClientRegionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ApplicationID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ClientCustomDataField1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField4 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField5 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField6 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField7 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ClientCustomDataField8 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Regions", x => x.Portal_RegionID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Roster",
                columns: table => new
                {
                    Portal_RosterID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false, defaultValue: 112),
                    Terr_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Emp_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    First_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Middle_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Last_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Gender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Work_Email = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Internal_Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Business_Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Mobile_Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Start_Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    End_Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    Primary = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    SalesForce = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Active = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    UserType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IsAdmin = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBY = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    ClientCustomDataField1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClientCustomDataField2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Business_Phone_Extension = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    EmailOptOut = table.Column<bool>(type: "bit", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsInsightFlag = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Roster", x => x.Portal_RosterID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Roster_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EMail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Role = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignmentCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignmentName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    HireDate = table.Column<DateTime>(name: "Hire Date", type: "datetime", nullable: true),
                    SalesDivision = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    Gender = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    LineNumber = table.Column<int>(type: "int", nullable: true),
                    InternalPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmployeeID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CustomData1 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData2 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData3 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Roster_Stage", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_SalesForceProgram",
                columns: table => new
                {
                    SalesForceProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SalesForce = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FunctionLabel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Therapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    EffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Portal_SOC",
                columns: table => new
                {
                    Portal_SOCID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SOC_ID = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    SOC_Account_Name = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Territory_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Lastupdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Lastupdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_SOC", x => x.Portal_SOCID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_CMM_SR",
                columns: table => new
                {
                    StagingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RequestID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TokenID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    HCP_PhysicianID = table.Column<int>(type: "int", nullable: false),
                    Physician_ContactID = table.Column<int>(type: "int", nullable: false),
                    ISPhysician = table.Column<bool>(type: "bit", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    AdditionalInfoRequired = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PBMInsurername = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PBMGroupID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PBMBIN = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PBMPCN = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Diagnosis = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    CMMStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CMMOutCome = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdateBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    is_ePA = table.Column<bool>(type: "bit", nullable: true),
                    tbl_fileID = table.Column<int>(type: "int", nullable: true),
                    LastStatusUpdate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Staging_CMM_SR", x => x.StagingID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_HCP_SR",
                columns: table => new
                {
                    RequestID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ParentID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: true),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrgAddressID = table.Column<int>(type: "int", nullable: false),
                    SRTypeShortDesc = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SRTypeListIDs = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SignatureRequired = table.Column<bool>(type: "bit", nullable: false),
                    AdditionalInfoRequired = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    TblFilesIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NoInsurance = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryInsurerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrimaryGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryInsurerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondaryGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMInsurerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    PBMGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMBinNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IndependentPracticeAssociation = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AccountableCareOrganization = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyFax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryICDDiagnosis = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryICDDiagnosis = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AdditionalClinicalInfo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Dosage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Refills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherPrescriptionInfo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IndependentClinicalJudgement = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberSignature = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    createdBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    createdDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    modifiedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modifiedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PafTblFileIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_SubTypeListIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PendingSRShortDescs = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PendingSRTypeListIDs = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PendingSRSubTypeListIds = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatingOrgAddressID = table.Column<int>(type: "int", nullable: true),
                    PatientWeight = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Infuse = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryCardholderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryCardholderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMCardholderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Quantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatingPracticeInfo = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    PatientSavingProgramInfo = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    PatientEligibityInfo = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    PatientIncomeInfo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ApplicationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Staging_HCP_SR", x => x.RequestID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_HCP_SR_Audit",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RequestID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ParentID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: true),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrgAddressID = table.Column<int>(type: "int", nullable: false),
                    SRTypeShortDesc = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SRTypeListIDs = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SignatureRequired = table.Column<bool>(type: "bit", nullable: false),
                    AdditionalInfoRequired = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    TblFilesIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NoInsurance = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryInsurerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrimaryGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryInsurerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondaryGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMInsurerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    PBMGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMBinNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMPCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IndependentPracticeAssociation = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AccountableCareOrganization = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyFax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryICDDiagnosis = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryICDDiagnosis = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AdditionalClinicalInfo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Dosage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Refills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherPrescriptionInfo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IndependentClinicalJudgement = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberSignature = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    createdBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    createdDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    modifiedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    modifiedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PafTblFileIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SR_SubTypeListIDs = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Staging_HCP_SR_Audit", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_Registration",
                columns: table => new
                {
                    RegistratoinRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    AccountType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PracticeName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Password = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Facility = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    StagingStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Pending"),
                    ProcessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HubRecordID = table.Column<int>(type: "int", nullable: true),
                    Reason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessingInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    TaxID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AccountID = table.Column<int>(type: "int", nullable: true),
                    MedicareID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Speciality = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PhoneType2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    AuthorizeContact = table.Column<bool>(type: "bit", nullable: true),
                    DEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Degree = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PotentialDuplicate = table.Column<bool>(type: "bit", nullable: true),
                    IndividualNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HubRecordOrgID = table.Column<int>(type: "int", nullable: true),
                    PracticeURL = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone_Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RegistrationRecordAddressID = table.Column<int>(type: "int", nullable: true),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    BestTimeToContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2_Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreferredCommunicationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PortalType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "HCP"),
                    NCPDP = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: true),
                    OptOut = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Fax2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BillingPreference = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SiteOfService = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    IndividualTaxId = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    StateLicenseNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LicensingState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TermsAndConditionsAcknowledgement = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    BAAAcknowledgement = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    BAALanguageAcknowledgement = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    BAASignatureText = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BAASignatureDate = table.Column<DateOnly>(type: "date", nullable: true),
                    RegisteredFromIPAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BAADocumentListID = table.Column<int>(type: "int", nullable: true),
                    PTAN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PrescriberEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BIFileDocumentID = table.Column<int>(type: "int", nullable: true),
                    TermsOfUserFileDocumentID = table.Column<int>(type: "int", nullable: true),
                    PortalRegistrationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Straging_Registration", x => x.RegistratoinRecordID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_Requests",
                columns: table => new
                {
                    StagingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    OrganizationId = table.Column<int>(type: "int", nullable: true),
                    PhysicianId = table.Column<int>(type: "int", nullable: true),
                    PatientId = table.Column<int>(type: "int", nullable: true),
                    OrgAddressId = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RequestPath = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubTypes = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CustomJsonField = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Tbl_FileId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ServiceRequestIds = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    eBVTransactionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ePATransactionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MedPATransactionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Notes = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Staging_Request", x => x.StagingId);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_SRF",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: false),
                    isNewProvider = table.Column<bool>(type: "bit", nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderPracticeName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderOfficeContact = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderMDSpecialty = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderStateMedLicNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderTaxID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderPhone = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderFax = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderAddress1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderCity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderZip = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientRecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPrefix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSuffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientDaytimePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientEveningPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPrimaryLanguage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientZIP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientEmail = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAlternateContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RelationToPatient = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PatientContactPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalPatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    PrimaryMedicalInsuranceID = table.Column<int>(type: "int", nullable: true),
                    PrimaryMedicalInsuranceName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalInsurancePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceCardHolderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceEmployerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceRelationship = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    SecondaryMedicalPatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    SecondaryMedicalInsuranceID = table.Column<int>(type: "int", nullable: true),
                    SecondaryMedicalInsuranceName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalPolicyNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalGroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalInsurancePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceCardHolderName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceEmployerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceRelationship = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    PBMCard = table.Column<bool>(type: "bit", nullable: true),
                    PBMName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMMemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ICD9Code = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Allergies = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Is_patient_failed_3_months_of_conservative_treatment = table.Column<bool>(type: "bit", nullable: true),
                    Is_patient_received_intra_articular_steroid_injection = table.Column<bool>(type: "bit", nullable: true),
                    Dates_of_Administration = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Is_patient_previously_been_treated_with_sodium_hyaluronate = table.Column<bool>(type: "bit", nullable: true),
                    product_date_range_of_treatment = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Is_patient_had_reduction_of_pain_with_previous_treatment = table.Column<bool>(type: "bit", nullable: true),
                    Clinical_Rationale_for_choosing_SUPARTZ = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    isPatientPresent = table.Column<bool>(type: "bit", nullable: true),
                    PatientSignatureOutput = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PatientSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    isRx = table.Column<bool>(type: "bit", nullable: true),
                    isRight = table.Column<bool>(type: "bit", nullable: true),
                    isLeft = table.Column<bool>(type: "bit", nullable: true),
                    isBllateral = table.Column<bool>(type: "bit", nullable: true),
                    SyringesKnee = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PrescriptionHeight = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriptionWeight = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriptionDirections = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    isDispenseAsWritten = table.Column<bool>(type: "bit", nullable: true),
                    isSubstitutionsAllowed = table.Column<bool>(type: "bit", nullable: true),
                    PrescriberSignatureOutput = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PrescriberSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateProductNeeded = table.Column<DateTime>(type: "datetime", nullable: true),
                    Attn = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    isPhysicianOffice = table.Column<bool>(type: "bit", nullable: true),
                    isPatientHome = table.Column<bool>(type: "bit", nullable: true),
                    isMedicalAndPharmacyBenefit = table.Column<bool>(type: "bit", nullable: true),
                    isOfficeAcceptsDefaultTriage = table.Column<bool>(type: "bit", nullable: true),
                    isMedicalBenefitOnly = table.Column<bool>(type: "bit", nullable: true),
                    FinalTemplate = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    RecordStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedByType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedByType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProcessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HubSRID = table.Column<int>(type: "int", nullable: true),
                    PatientTypedName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    isProviderPresent = table.Column<bool>(type: "bit", nullable: true),
                    PrescriberTypedName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Checksum = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    IPAddress = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    isPharmacyBenefitOnly = table.Column<bool>(type: "bit", nullable: true),
                    Therapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    isRxGelsyn3 = table.Column<bool>(type: "bit", nullable: true),
                    isRightGelsyn3 = table.Column<bool>(type: "bit", nullable: true),
                    isLeftGelsyn3 = table.Column<bool>(type: "bit", nullable: true),
                    isBllateralGelsyn3 = table.Column<bool>(type: "bit", nullable: true),
                    SyringesKneeGelsyn3 = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    isRxDurolane = table.Column<bool>(type: "bit", nullable: true),
                    isRightDurolane = table.Column<bool>(type: "bit", nullable: true),
                    isLeftDurolane = table.Column<bool>(type: "bit", nullable: true),
                    isBllateralDurolane = table.Column<bool>(type: "bit", nullable: true),
                    SyringesKneeDurolane = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    SceduledInjectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Clinical_Rationale_for_choosing_DUROLANE = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Straging_SRF", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Takeda_Hierarchy",
                columns: table => new
                {
                    Area = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAM = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAMEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAMDirector = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAMDirectorEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CM = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HCE = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HCEEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HCEManager = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HCEManagerEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Portal_Territories",
                columns: table => new
                {
                    TerritoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ClientTerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RegionID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ClientCustomDataField1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Territories", x => x.TerritoryID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_TerritoryCaseManager",
                columns: table => new
                {
                    Portal_TerritoryCaseManagerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Lastupdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Lastupdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_TerritoryCaseManager", x => x.Portal_TerritoryCaseManagerID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Tiers",
                columns: table => new
                {
                    TierID = table.Column<int>(type: "int", nullable: false),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Type = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ParentCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentID = table.Column<int>(type: "int", nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RosterID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Tiers", x => x.TierID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_UserSession",
                columns: table => new
                {
                    Portal_UserSessionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserID = table.Column<string>(type: "varchar(36)", unicode: false, maxLength: 36, nullable: true),
                    UserLoginHistoryID = table.Column<int>(type: "int", nullable: true),
                    FunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Catrgoey = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Apply = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Method = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DataType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    DataValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Lastupdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Lastupdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_UserSession", x => x.Portal_UserSessionID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_ZIP_ToTerr",
                columns: table => new
                {
                    ZIP_ToTerrID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ZIPCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DistrictCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ClientCustomDataField1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClientCustomDataField2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    ClickToChat = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ZIP_ToTerr", x => x.ZIP_ToTerrID);
                });

            migrationBuilder.CreateTable(
                name: "Portal_Zip_ToTerr_Minimal_Stage",
                columns: table => new
                {
                    Terr_ID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Portal_Zip_ToTerr_Stage",
                columns: table => new
                {
                    ZipStageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    ZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    City = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    County = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    State = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    TerritoryID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    DistrictID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DistrictName = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    RegionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegionName = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    SalesForce = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    LineNumber = table.Column<int>(type: "int", nullable: true),
                    CustomData1 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData2 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData3 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData4 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData5 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData6 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData7 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData8 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true),
                    CustomData9 = table.Column<string>(type: "varchar(75)", unicode: false, maxLength: 75, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PortalAnnouncement",
                columns: table => new
                {
                    PortalAnnouncementID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Portal = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AnnouncementName = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AnnouncementTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortalAnnouncement", x => x.PortalAnnouncementID);
                });

            migrationBuilder.CreateTable(
                name: "PortalData_LoadRecord",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    LoadID = table.Column<int>(type: "int", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    isError = table.Column<bool>(type: "bit", nullable: true),
                    ErrorMsg = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<int>(type: "int", nullable: true),
                    RegionID = table.Column<int>(type: "int", nullable: true),
                    RegionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryID = table.Column<int>(type: "int", nullable: true),
                    TerritoryCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Old = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PortalData_ReportRecordCount",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LoadID = table.Column<int>(type: "int", nullable: true),
                    LoadDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Report = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RecCnt = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RegionID = table.Column<int>(type: "int", nullable: true),
                    TerritoryID = table.Column<int>(type: "int", nullable: true),
                    UserSessionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PortalFilterRequestConfig",
                columns: table => new
                {
                    PortalFilterRequestConfigID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PortalName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    FilterRequestName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    FilterRequestData = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Deleted = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__PortalFi__4F5CAD8F9F306C5F", x => x.PortalFilterRequestConfigID);
                });

            migrationBuilder.CreateTable(
                name: "PortalFunctionList",
                columns: table => new
                {
                    PortalFunctionListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FunctionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortalFunctionList", x => x.PortalFunctionListID);
                });

            migrationBuilder.CreateTable(
                name: "PortalType",
                columns: table => new
                {
                    PortalTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PortalType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortalType", x => x.PortalTypeID);
                });

            migrationBuilder.CreateTable(
                name: "PortalTypeAnnouncement",
                columns: table => new
                {
                    PortalTypeAnnouncementID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramTypePortalID = table.Column<int>(type: "int", nullable: false),
                    PortalAnnouncementID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Prescription",
                columns: table => new
                {
                    PrescriptionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExternalPrescriptionID = table.Column<long>(type: "bigint", nullable: false),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSuffix = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGender = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    PatientAddressLine1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAddressLine2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    PatientZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientPhoneNumber1 = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    PatientPhoneNumber2 = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    PayerName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BIN = table.Column<string>(type: "char(6)", unicode: false, fixedLength: true, maxLength: 6, nullable: true),
                    PCN = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true),
                    GroupID = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    CardholderID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PersonCode = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    HelpDeskPhone = table.Column<string>(type: "varchar(18)", unicode: false, maxLength: 18, nullable: true),
                    MedicareFlag = table.Column<bool>(type: "bit", nullable: false),
                    BenefitPlanId = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    EffectiveDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TerminationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSLevel = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FormularyID = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true),
                    FutureEffectiveDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FutureTerminationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSEffectDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSTermDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSPlan = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    CarrierName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DateWritten = table.Column<DateOnly>(type: "date", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Sig = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Quantity = table.Column<string>(type: "varchar(8)", unicode: false, maxLength: 8, nullable: true),
                    UnitofMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillQualifier = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Refills = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    DAW = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    DaysSupply = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    LastFillDate = table.Column<DateOnly>(type: "date", nullable: true),
                    RxEffectiveDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Diagnoses = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Note = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PriorAuthStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PriorAuthQual = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PriorAuth = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    IsCreatedByFax = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugBasis = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DoseType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IsPrescriptionClosed = table.Column<bool>(type: "bit", nullable: false),
                    PrescriptionSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ApplicationSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RxReferenceID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillsRemaining = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PrescriberOrderNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubstitutionPermitted = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PharmacistValidated = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    ValidatedOn = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ValidatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Prescrip__4013081205059ED9", x => x.PrescriptionID);
                });

            migrationBuilder.CreateTable(
                name: "ProductOrderList",
                columns: table => new
                {
                    ProductOrderListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Flavor = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ItemNumber = table.Column<long>(type: "bigint", nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(8,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductOrderList", x => x.ProductOrderListID);
                });

            migrationBuilder.CreateTable(
                name: "ProductRequestedOrder",
                columns: table => new
                {
                    ProductRequestedOrderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    ShipToEntityType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ShipToEntityID = table.Column<int>(type: "int", nullable: false),
                    ShipToAddressID = table.Column<int>(type: "int", nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Address3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    RequestedShipmentDate = table.Column<DateOnly>(type: "date", nullable: false),
                    DateReportedToProgram = table.Column<DateOnly>(type: "date", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__ProductR__8ED4E214ECA21136", x => x.ProductRequestedOrderID);
                });

            migrationBuilder.CreateTable(
                name: "ProfiseeEvent",
                columns: table => new
                {
                    EventId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntityId = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: false),
                    EntityName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Profisee__7944C81076EC25ED", x => x.EventId);
                });

            migrationBuilder.CreateTable(
                name: "Program_CopayCard_IDs",
                columns: table => new
                {
                    Program_CopayCard_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardID_Begin = table.Column<int>(type: "int", nullable: true),
                    CopayCardID_End = table.Column<int>(type: "int", nullable: true),
                    NextCopayCardID = table.Column<int>(type: "int", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BIN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PCN = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    GroupNum = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Program_CopayCard_IDs", x => x.Program_CopayCard_ID);
                });

            migrationBuilder.CreateTable(
                name: "ProgramFunctionList",
                columns: table => new
                {
                    ProgramFunctionListID = table.Column<int>(type: "int", nullable: false),
                    FunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ActionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramFunctionList", x => x.ProgramFunctionListID);
                });

            migrationBuilder.CreateTable(
                name: "ProgramFunctions",
                columns: table => new
                {
                    ProgramFunctionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramFunctionListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Comments = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    ActiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramFunctions", x => x.ProgramFunctionID);
                });

            migrationBuilder.CreateTable(
                name: "ProgramMailingList",
                columns: table => new
                {
                    ProgramMailingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ProgramName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CompanyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ServiceTypeID = table.Column<int>(type: "int", nullable: true, defaultValue: 5),
                    ServiceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Standard Overnight"),
                    PackageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Country = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IncludeReturnLabel = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ShipDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Today"),
                    NumberOfPackages = table.Column<int>(type: "int", nullable: true, defaultValueSql: "('1')"),
                    WeightInLB = table.Column<int>(type: "int", nullable: true, defaultValueSql: "('1')"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramMailingList", x => x.ProgramMailingID);
                });

            migrationBuilder.CreateTable(
                name: "ProgramNDCs",
                columns: table => new
                {
                    ProgramNDCID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ItemName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TestClaimAllowed = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true, defaultValue: "Y"),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    DefalultTestClaimQuantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DefaultUnitofMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramNDCs", x => x.ProgramNDCID);
                });

            migrationBuilder.CreateTable(
                name: "ProgramPhoneNumberList",
                columns: table => new
                {
                    ProgramPhoneNumberListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__ProgramP__A7B361B75F79313C", x => x.ProgramPhoneNumberListID);
                });

            migrationBuilder.CreateTable(
                name: "Programs",
                columns: table => new
                {
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ProgramName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ManufacturerID = table.Column<int>(type: "int", nullable: false),
                    ManufacturerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    ActiveDate = table.Column<DateOnly>(type: "date", nullable: true),
                    MaxCopayAmount = table.Column<int>(type: "int", nullable: true),
                    CopayType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayPeriodDays = table.Column<int>(type: "int", nullable: true),
                    SharedRecordProgramID = table.Column<int>(type: "int", nullable: true),
                    DefaultProgram = table.Column<bool>(type: "bit", nullable: true),
                    ManufacturerApplicationName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LayoutType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ManuPortalConfigDB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DisplayScientificDrugName = table.Column<bool>(type: "bit", nullable: true),
                    CopayGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HCPApplicationName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClientApplicationName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(NULL)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Programs", x => x.ProgramID);
                });

            migrationBuilder.CreateTable(
                name: "PSI_ICD9",
                columns: table => new
                {
                    SP_PatientID = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    YOB = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    ICD9 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PublicNumbers",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "QA_RepPayer_Criteria",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepOrPayer = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SRCount = table.Column<int>(type: "int", nullable: true),
                    SRCloseDate = table.Column<DateOnly>(type: "date", nullable: true),
                    RepOrPayerID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SamplingCount = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__QA_RepPa__3214EC07FE0CF88C", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QA_Setting_Admin",
                columns: table => new
                {
                    QASettingAdminID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    RepName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerID = table.Column<int>(type: "int", nullable: true),
                    Threshold = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NoSR = table.Column<int>(type: "int", nullable: true),
                    SrUpdateDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QA_Setting_Admin", x => x.QASettingAdminID);
                });

            migrationBuilder.CreateTable(
                name: "QuestionAnswerFiles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RequestId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FlowId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    QuestionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    File = table.Column<byte[]>(type: "image", nullable: true),
                    PermenentlySaved = table.Column<bool>(type: "bit", nullable: false),
                    ContentType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.QuestionAnswerFiles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuestionAnswers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RequestId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FlowId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    QuestionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    QuestionText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Answer = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    TimeStamp = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.QuestionAnswers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuickCodes",
                columns: table => new
                {
                    QuickCodeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ClientPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    QuickCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuickCodes", x => x.QuickCodeID);
                });

            migrationBuilder.CreateTable(
                name: "RefillReminderCleanUpSpreadsheet_Final",
                columns: table => new
                {
                    BridgeSRDetails = table.Column<string>(name: "Bridge SR Details", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column1 = table.Column<string>(name: "Column 1", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column2 = table.Column<string>(name: "Column 2", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column3 = table.Column<string>(name: "Column 3", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column4 = table.Column<string>(name: "Column 4", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column5 = table.Column<string>(name: "Column 5", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column6 = table.Column<string>(name: "Column 6", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column7 = table.Column<string>(name: "Column 7", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column8 = table.Column<string>(name: "Column 8", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column9 = table.Column<string>(name: "Column 9", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column10 = table.Column<string>(name: "Column 10", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column11 = table.Column<string>(name: "Column 11", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column12 = table.Column<string>(name: "Column 12", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column13 = table.Column<string>(name: "Column 13", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column14 = table.Column<string>(name: "Column 14", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column15 = table.Column<string>(name: "Column 15", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column16 = table.Column<string>(name: "Column 16", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column17 = table.Column<string>(name: "Column 17", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column18 = table.Column<string>(name: "Column 18", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column19 = table.Column<string>(name: "Column 19", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RRSRDetails = table.Column<string>(name: "RR SR Details", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column21 = table.Column<string>(name: "Column 21", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column22 = table.Column<string>(name: "Column 22", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column23 = table.Column<string>(name: "Column 23", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Column24 = table.Column<string>(name: "Column 24", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ReimbursementEnrollmentForm",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    ProviderAddressID = table.Column<int>(type: "int", nullable: false),
                    ProviderFirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderLastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderMiddleName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderFacilityName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderAddressName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderCity = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderState = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderZIP = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ProviderAddressHospital = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderAddressSpecialty = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPhoneNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderFaxNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderAddressPhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderAddressFax = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderAddressEmail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderAddressContact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderAddressContactPhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderAddressContactMethod = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderEmail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderIndividualCompletingForm = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderTaxID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderDEA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    isNewPatient = table.Column<bool>(type: "bit", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientPrefix = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientFirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientSuffix = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientGender = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientSSN = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientCity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientZIP = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientPhoneNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientFaxNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientEmail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrimaryMedicalPatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    PrimaryMedicalInsuranceID = table.Column<int>(type: "int", nullable: true),
                    isPrimaryMedicare = table.Column<bool>(type: "bit", nullable: true),
                    isPrimaryMedicaid = table.Column<bool>(type: "bit", nullable: true),
                    isPrimaryCommercial = table.Column<bool>(type: "bit", nullable: true),
                    isPrimaryWorkerCompensation = table.Column<bool>(type: "bit", nullable: true),
                    isPrimaryChampusTriCARE = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryMedicalInsuranceName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrimaryMedicalInsuranceAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrimaryMedicalInsuranceCity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceState = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PrimaryMedicalInsuranceZip = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PrimaryMedicalInsurancePhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceFax = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceCardHolderName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrimaryMedicalInsuranceCardHolderDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    PrimaryMedicalInsuranceSSN = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PrimaryMedicalInsuranceRelationshipToPatient = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrimaryMedicalInsurancePolicyID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceGroupNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrimaryMedicalInsuranceEmployerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrimaryMedicalInsuranceProviderNPI = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    isPimaryParticipating = table.Column<bool>(type: "bit", nullable: true),
                    isPrimaryNonParticipating = table.Column<bool>(type: "bit", nullable: true),
                    SecondaryMedicalPatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    SecondaryMedicalInsuranceID = table.Column<int>(type: "int", nullable: true),
                    isSecondaryMedicare = table.Column<bool>(type: "bit", nullable: true),
                    isSecondaryMedicaid = table.Column<bool>(type: "bit", nullable: true),
                    isSecondaryCommercial = table.Column<bool>(type: "bit", nullable: true),
                    isSecondaryWorkerCompensation = table.Column<bool>(type: "bit", nullable: true),
                    isSecondaryChampusTriCARE = table.Column<bool>(type: "bit", nullable: true),
                    SecondaryMedicalInsuranceName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryMedicalInsuranceAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryMedicalInsuranceCity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceState = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SecondaryMedicalInsuranceZip = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SecondaryMedicalInsurancePhone = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SecondaryMedicalInsuranceFax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SecondaryMedicalInsuranceCardHolderName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceCardHolderDOB = table.Column<DateOnly>(type: "date", nullable: true),
                    SecondaryMedicalInsuranceSSN = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SecondaryMedicalInsuranceRelationshipToPatient = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryMedicalInsurancePolicyID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceGroupNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceEmployerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryMedicalInsuranceProviderNPI = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    isSecondaryParticipating = table.Column<bool>(type: "bit", nullable: true),
                    isSecondaryNonParticipating = table.Column<bool>(type: "bit", nullable: true),
                    isTreatmentPhysicianOffice = table.Column<bool>(type: "bit", nullable: true),
                    isTreatmentASC = table.Column<bool>(type: "bit", nullable: true),
                    isTreatmentHospitalOutpatient = table.Column<bool>(type: "bit", nullable: true),
                    isTreatmentHospitalInpaitient = table.Column<bool>(type: "bit", nullable: true),
                    isTreatmentOther = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentDiagnosisCodePrimary1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TreatmentDiagnosisCodePrimary2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TreatmentEMGCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TreatmentCPTCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TreatmentDateOfService = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentPatientDosage = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Treatment2500UnitCount = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Treatment5000UnitCount = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Treatment10000UnitCount = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PDF = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Checksum = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    IPAddress = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ProviderFullName = table.Column<string>(type: "varchar(110)", unicode: false, maxLength: 110, nullable: true),
                    PatientHomePhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientWorkPhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientCellPhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientPreferredPhoneType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PatientCanVoiceMessageBeLeft = table.Column<bool>(type: "bit", nullable: true),
                    PatientPrimaryContact = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientPrimaryContactRelationship = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderPhoneNumberExt = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderPhoneNumber2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderPhoneNumber2Ext = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderNPI = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderUPIN = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TreatmentPrescriptionStrengthPrescribed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentLast4digitsOfNDC = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    TreatmentDose = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentFrequency = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TreatmentQuantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentIsPrimaryHypogonadism = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentIsHypogonadotropicHypogonadism = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentIsTesticularFailure = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentIsIdiopathicGonadotropinDeficiency = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentIsLHRHDeficiency = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentOther = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentTestosteroneLevels = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentDrugAllergies = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentIsFirstFill = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryMedicalInsuranceBIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalInsuranceBIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrimaryMedicalInsurancePCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondaryMedicalInsurancePCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderTitle = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Signature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    SignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SignatureName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Notes = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    PrimaryMedicalInsuranceType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecondaryMedicalInsuranceType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentDiagnosisCodePrimary3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentDiagnosisCodePrimary4 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentDiagnosisCodePrimary5 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentCPTCode2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentCPTCode3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentCPTCode4 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentCPTCode5 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentPatientDosage2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentPatientDosage3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientStudySite = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPrimaryLanguage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientBestTimeToContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientContactPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsPatientReferralToPAP = table.Column<bool>(type: "bit", nullable: true),
                    IsMedicaidPending = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyInsurancePlanName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyInsurancePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyInsurancePolicyID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyInsuranceGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyInsuranceMemberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyInsuranceBIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyInsurancePCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderSpecialty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderStateMedicalLic = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerSpecificID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentClinicalTNMStageMetastaticColorectalCancer = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentClinicalTNMStageOther = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentLineOfTherapyThird = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentLineOfTherapyFourth = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentLineOfTherapyFifth = table.Column<bool>(type: "bit", nullable: true),
                    PreviousTreatmentSurgery = table.Column<bool>(type: "bit", nullable: true),
                    PreviousTreatmentRadiation = table.Column<bool>(type: "bit", nullable: true),
                    PreviousTreatmentChemoTargetedTherapy = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentFOLFOX = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentFOLFIRI = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentFOLFOXIRI = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentCapeOx = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentIrinotecan = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentCapecitabine = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentFiveFU = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentBevacizumab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentCetuximab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentPantiumumab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentRegorafenib = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentZivAflibercept = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentEGFRTestCompleted = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentEGFRTestResult = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentKRASStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IncludeNursingServices = table.Column<bool>(type: "bit", nullable: true),
                    PatientSignature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PatientSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientSignatureName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientSignatureRelationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Signature2 = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    SignatureDate2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    SignatureName2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HowManyPeopleLiveInHousehold = table.Column<int>(type: "int", nullable: true),
                    PatientAnnualHouseholdIncome = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    SrType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreviousTreatmentNone = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentSIG = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentTabletsPerCycle = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HasContact = table.Column<bool>(type: "bit", nullable: true),
                    ContactTitle = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ContactZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ContactPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ContactPhoneExt = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    ContactFax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactEMail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyFoundationCare = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyTLCRx = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyIVSolutions = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyWalgreensSpeciality = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyPharmaceuticalSpecialities = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyRxAlreadySentToPharmacy = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsuranceEnrolledInGovernmentProgram = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentHistory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentPercentPredicted = table.Column<int>(type: "int", nullable: true),
                    TreatmentIsNew = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentRxType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentSpecialInstructions = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DispenseAsWritten = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentUseDevice1 = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentUseDevice2 = table.Column<bool>(type: "bit", nullable: true),
                    PrimaryInsuranceType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SecondaryInsuranceType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Height = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Weight = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    BSA = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TreatmentDose2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentFrequency2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentQuantity2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentTabletsPerCycle2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ChemoTargetedTherapyOther = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentLineOfTherapyOther = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentLineOfTherapyOtherStr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyAccredo = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyAvella = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyBiologics = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyCVS_Caremark = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyDiplomat = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyOnco360 = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyWalgreens = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyOnSiteDispensing = table.Column<bool>(type: "bit", nullable: true),
                    ClinicalTNMStageOtherStr = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileID = table.Column<int>(type: "int", nullable: true),
                    PrimaryInsuranceInformationChanged = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    SecondaryInsuranceInformationChanged = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    PatientEAP = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentStart_Date_Fill = table.Column<DateOnly>(type: "date", nullable: true),
                    TreatmentSymptom = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    TreatmentIsBreastCarcinoma = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentIsProstateCarcinoma = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentTestosteroneLevel1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentRefRange1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentDateTaken1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentTestosteroneLevel2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatmentRefRange2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentDateTaken2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentPreTherapy = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TreatmentDate_PreTherapy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LoginAs = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderMedicaidID = table.Column<string>(type: "nchar(20)", fixedLength: true, maxLength: 20, nullable: true),
                    ProviderStateLicense = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientSecondaryContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReferralStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Updated = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BestContactMorning = table.Column<bool>(type: "bit", nullable: true),
                    BestContactAfternoon = table.Column<bool>(type: "bit", nullable: true),
                    BestContactEvening = table.Column<bool>(type: "bit", nullable: true),
                    PreferPharmacyPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PharmacyOther = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyAmber = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyBergen = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyBiologictx = table.Column<bool>(type: "bit", nullable: true),
                    PreferPharmacyContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreferPharmacyName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferPharmacyAddress = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PreferPhrarmacyCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreferPhrarmacyState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreferPhrarmacyZip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreferPhrarmacyStoreLocation = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Diagnosis1 = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosisOther = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosisOtherDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    MedicarePays = table.Column<bool>(type: "bit", nullable: true),
                    Diagnosis1Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    Dose1 = table.Column<bool>(type: "bit", nullable: true),
                    Dose2 = table.Column<bool>(type: "bit", nullable: true),
                    Dose3 = table.Column<bool>(type: "bit", nullable: true),
                    Dose1Qty = table.Column<int>(type: "int", nullable: true),
                    Dose1Frequncy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose1DaysSupply = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose1Refill = table.Column<int>(type: "int", nullable: true),
                    Dose2Qty = table.Column<int>(type: "int", nullable: true),
                    Dose2Frequncy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose2DaysSupply = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose2Refill = table.Column<int>(type: "int", nullable: true),
                    Dose3Qty = table.Column<int>(type: "int", nullable: true),
                    Dose3Frequncy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose3DaysSupply = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose3Refill = table.Column<int>(type: "int", nullable: true),
                    MedicationDirection = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SubstitutionPermitted = table.Column<bool>(type: "bit", nullable: true),
                    Drug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    isPowder = table.Column<bool>(type: "bit", nullable: true),
                    isTablet = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsClassicPKU = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsOther = table.Column<bool>(type: "bit", nullable: true),
                    TreatOther = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    TreatIsPhe = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsPheOther = table.Column<bool>(type: "bit", nullable: true),
                    TreatPheOther = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    TreatIsAllergyKnownYes = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsAllergyKnownNo = table.Column<bool>(type: "bit", nullable: true),
                    TreatAllergyKnown = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    TreatIsOtherMed = table.Column<bool>(type: "bit", nullable: true),
                    TreatOtherMed = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PapWeight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PapIs10mgkg = table.Column<bool>(type: "bit", nullable: true),
                    PapIs20mgkg = table.Column<bool>(type: "bit", nullable: true),
                    PapIsMgkgOther = table.Column<bool>(type: "bit", nullable: true),
                    PapMgkgOther = table.Column<int>(type: "int", nullable: true),
                    PapTotalDay = table.Column<int>(type: "int", nullable: true),
                    PapIsSupply90 = table.Column<bool>(type: "bit", nullable: true),
                    PapIsSupply30 = table.Column<bool>(type: "bit", nullable: true),
                    PapNumRefill = table.Column<int>(type: "int", nullable: true),
                    PapIsPowder500 = table.Column<bool>(type: "bit", nullable: true),
                    PapDayPowder500 = table.Column<int>(type: "int", nullable: true),
                    PapIsPowder100 = table.Column<bool>(type: "bit", nullable: true),
                    PapDayPowder100 = table.Column<int>(type: "int", nullable: true),
                    PapIsTablet100 = table.Column<bool>(type: "bit", nullable: true),
                    PapDayTablet100 = table.Column<int>(type: "int", nullable: true),
                    PapIsContact = table.Column<bool>(type: "bit", nullable: true),
                    PapIsTakePowder = table.Column<bool>(type: "bit", nullable: true),
                    PapTakePowder500 = table.Column<int>(type: "int", nullable: true),
                    PapTakePowder100 = table.Column<int>(type: "int", nullable: true),
                    PapTakePowderTotal = table.Column<int>(type: "int", nullable: true),
                    PapIsTakeTablet = table.Column<bool>(type: "bit", nullable: true),
                    PapTakeTablet = table.Column<int>(type: "int", nullable: true),
                    PapTakeTabletTotal = table.Column<int>(type: "int", nullable: true),
                    PapIsTakeOther = table.Column<bool>(type: "bit", nullable: true),
                    PapTakeOther = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PapPhysicianSignature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PapPhysicianSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PapPhysicianSignatureName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PapIsSignaturePermitted = table.Column<bool>(type: "bit", nullable: true),
                    PapPatientSignature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PapPatientSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PapPatientSignatureName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PapIsSignatureWritten = table.Column<bool>(type: "bit", nullable: true),
                    PapIsShippingInstruction = table.Column<bool>(type: "bit", nullable: true),
                    RegWeight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    RegIs10mgkg = table.Column<bool>(type: "bit", nullable: true),
                    RegIs20mgkg = table.Column<bool>(type: "bit", nullable: true),
                    RegIsMgkgOther = table.Column<bool>(type: "bit", nullable: true),
                    RegMgkgOther = table.Column<int>(type: "int", nullable: true),
                    RegTotalDay = table.Column<int>(type: "int", nullable: true),
                    RegIsSupply90 = table.Column<bool>(type: "bit", nullable: true),
                    RegIsSupply30 = table.Column<bool>(type: "bit", nullable: true),
                    RegNumRefill = table.Column<int>(type: "int", nullable: true),
                    RegIsPowder500 = table.Column<bool>(type: "bit", nullable: true),
                    RegDayPowder500 = table.Column<int>(type: "int", nullable: true),
                    RegIsPowder100 = table.Column<bool>(type: "bit", nullable: true),
                    RegDayPowder100 = table.Column<int>(type: "int", nullable: true),
                    RegIsTablet100 = table.Column<bool>(type: "bit", nullable: true),
                    RegDayTablet100 = table.Column<int>(type: "int", nullable: true),
                    RegIsContact = table.Column<bool>(type: "bit", nullable: true),
                    RegIsTakePowder = table.Column<bool>(type: "bit", nullable: true),
                    RegTakePowder500 = table.Column<int>(type: "int", nullable: true),
                    RegTakePowder100 = table.Column<int>(type: "int", nullable: true),
                    RegTakePowderTotal = table.Column<int>(type: "int", nullable: true),
                    RegIsTakeTablet = table.Column<bool>(type: "bit", nullable: true),
                    RegTakeTablet = table.Column<int>(type: "int", nullable: true),
                    RegTakeTabletTotal = table.Column<int>(type: "int", nullable: true),
                    RegIsTakeOther = table.Column<bool>(type: "bit", nullable: true),
                    RegTakeOther = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    RegPhysicianSignature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    RegPhysicianSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RegPhysicianSignatureName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegIsSignaturePermitted = table.Column<bool>(type: "bit", nullable: true),
                    RegPatientSignature = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    RegPatientSignatureDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RegPatientSignatureName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RegIsSignatureWritten = table.Column<bool>(type: "bit", nullable: true),
                    RegIsShippingInstruction = table.Column<bool>(type: "bit", nullable: true),
                    TreatBaselinePhe = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ProviderLicenseState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AltContactFullName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HasInsuranceCoverage = table.Column<bool>(type: "bit", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    PatientAddressID = table.Column<int>(type: "int", nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescIsGenetics = table.Column<bool>(type: "bit", nullable: true),
                    PrescIsInternalMedicine = table.Column<bool>(type: "bit", nullable: true),
                    PrescIsOther = table.Column<bool>(type: "bit", nullable: true),
                    PrescOtherSpeciality = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsPalynziq2_5mg = table.Column<bool>(type: "bit", nullable: true),
                    IsPalynziq10mg = table.Column<bool>(type: "bit", nullable: true),
                    IsPalynziq20mg = table.Column<bool>(type: "bit", nullable: true),
                    IsPalynziqType40mg = table.Column<bool>(type: "bit", nullable: true),
                    PatientAltContactEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsNKDA = table.Column<bool>(type: "bit", nullable: true),
                    IsPalynziq2_5mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    PalynziqQuantity2_5mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PalynziqRefills2_5mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsPalynziq10mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    PalynziqQuantity10mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PalynziqRefills10mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsPalynziq20mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    PalynziqQuantity20mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PalynziqRefills20mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsPalynziq40mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    PalynziqQuantity40mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PalynziqRefills40mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsInject2_5mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    InjectQuantity2_5mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InjectRefills2_5mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InjectTimePerWeek2_5mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsInject10mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    InjectQuantity10mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InjectRefills10mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InjectTimePerWeek10mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsInject20mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    InjectQuantity20mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InjectRefills20mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InjectTimePerWeek20mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsInject40mgSyringe = table.Column<bool>(type: "bit", nullable: true),
                    InjectQuantity40mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InjectRefills40mg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InjectTimePerWeek40mg = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsShipmentBridgePrescription = table.Column<bool>(type: "bit", nullable: true),
                    IsShipmentShip = table.Column<bool>(type: "bit", nullable: true),
                    ShipmentWeeks = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ShipmentClinicPointOfContact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipmentClinicPointOfContactPhone = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipmentClinicEmail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipmentShipToAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipmentState = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsShipmentAlcoholWipes = table.Column<bool>(type: "bit", nullable: true),
                    IsShipmentGauze = table.Column<bool>(type: "bit", nullable: true),
                    IsShipmentBandAids = table.Column<bool>(type: "bit", nullable: true),
                    IsShipmentGloves = table.Column<bool>(type: "bit", nullable: true),
                    IsShipmentSharpsContainer = table.Column<bool>(type: "bit", nullable: true),
                    IsShipmentOtherSupplies = table.Column<bool>(type: "bit", nullable: true),
                    ShipmentOtherDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsShipmentEpinephrineAutoInjectable = table.Column<bool>(type: "bit", nullable: true),
                    ShipmentZIP = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TherapyType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TreatBaselinePheLevelDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TreatAdministrationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TreatmentSIGOther = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentSIGOtherDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DEAShipTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderxDEA = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientDriverLicense = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientDriverLicenseState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BestContactMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ICD10Code = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PriorTherapy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MedicalHistory = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    KnownAllergies = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OnceMonthly = table.Column<bool>(type: "bit", nullable: true),
                    OnceWeekly = table.Column<bool>(type: "bit", nullable: true),
                    NoKnownAllergies = table.Column<bool>(type: "bit", nullable: true),
                    BridgeWeekly = table.Column<bool>(type: "bit", nullable: true),
                    BridgeWkmg = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BridgeMnthmg = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BridgeMonthly = table.Column<bool>(type: "bit", nullable: true),
                    WeeklyMg = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    WeeklyRefills = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MonthlyMg = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MonthlyRefills = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredPharmacy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MedicaidId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    eHipaaFileId = table.Column<int>(type: "int", nullable: true),
                    TreatmentClinicalTNMStageMetastaticGastricCancer = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentMSIHTestCompleted = table.Column<bool>(name: "TreatmentMSI-HTestCompleted", type: "bit", nullable: true),
                    TreatmentMSIHTestResult = table.Column<string>(name: "TreatmentMSI-HTestResult", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentdMMRTestCompleted = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentdMMRTestResult = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentHER2TestCompleted = table.Column<bool>(name: "TreatmentHER-2TestCompleted", type: "bit", nullable: true),
                    TreatmentHER2TestResult = table.Column<string>(name: "TreatmentHER-2TestResult", type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TreatmentPembrolizumab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentNivolumab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentRamucirumab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentTrastuzumab = table.Column<bool>(type: "bit", nullable: true),
                    ParentGuardianName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TreatIsPhenylketonuria = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsBH4 = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsHyperphenylalaninemia = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsMaternalPhenylketonuria = table.Column<bool>(type: "bit", nullable: true),
                    PalynziqCustomUnit_Induction = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PalynziqCustomUnit_Titra = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PalynziqCustomUnit_Maintain = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PalynziqCustomUnit_Max = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SpecialDeliveryInstructions = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    IsRequirePreMed = table.Column<bool>(type: "bit", nullable: true),
                    IsPreMedFillAtLocal = table.Column<bool>(type: "bit", nullable: true),
                    IsPreMedFillAtSP = table.Column<bool>(type: "bit", nullable: true),
                    IsAutoInjectFillAtLocal = table.Column<bool>(type: "bit", nullable: true),
                    IsAutoInjectFillAtSP = table.Column<bool>(type: "bit", nullable: true),
                    TreatIsE70_1 = table.Column<bool>(type: "bit", nullable: true),
                    IsProvideFreeKuvan = table.Column<bool>(type: "bit", nullable: true),
                    IsBridgePrescriptionKuvan = table.Column<bool>(type: "bit", nullable: true),
                    AppointmentUnknown = table.Column<bool>(type: "bit", nullable: true),
                    AdditionalComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SpecialDeliveryInstructions2 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationName = table.Column<int>(type: "int", nullable: true),
                    SecondaryAddressName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressCity = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressState = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryAddressZip = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryAddressSpecialty = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressHospital = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressContact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressContactPhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryAddressPhone = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressEmail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryAddressContactMethod = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SecondaryAddressFax = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PharmacyCVSSpeciality = table.Column<bool>(type: "bit", nullable: true),
                    Therapy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MyelodysplasticSyndromes = table.Column<bool>(type: "bit", nullable: true),
                    ChronicMyelomodysplasticeLukemia = table.Column<bool>(type: "bit", nullable: true),
                    OtherSyndromes = table.Column<bool>(type: "bit", nullable: true),
                    OtherDiagnosisDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IPSSIntermediate = table.Column<bool>(type: "bit", nullable: true),
                    IPSSHigh = table.Column<bool>(type: "bit", nullable: true),
                    IPSSRIntermediate = table.Column<bool>(type: "bit", nullable: true),
                    IPSSRHigh = table.Column<bool>(type: "bit", nullable: true),
                    IPSSRVeryHigh = table.Column<bool>(type: "bit", nullable: true),
                    WPSSHigh = table.Column<bool>(type: "bit", nullable: true),
                    WPSSVeryHigh = table.Column<bool>(type: "bit", nullable: true),
                    InqoviFixedDosageTab = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentOneTabADay = table.Column<bool>(type: "bit", nullable: true),
                    NumberOfTabletsPerCycle = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrescIsDermatology = table.Column<bool>(type: "bit", nullable: true),
                    PrescIsGeneralPractice = table.Column<bool>(type: "bit", nullable: true),
                    PrescIsPediatricDermatologist = table.Column<bool>(type: "bit", nullable: true),
                    PrescIsPediatrician = table.Column<bool>(type: "bit", nullable: true),
                    IsPal60mgRecommend = table.Column<bool>(type: "bit", nullable: true),
                    Pal60mgRecommendQuantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Pal60mgRecommendRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsPal60mgCustom = table.Column<bool>(type: "bit", nullable: true),
                    Pal60mgCustomUnit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Pal60mgCustomQuantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Pal60mgCustomFrequency = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Pal60mgCustomRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PalInductionCustomRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PalTitraCustomRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IPSSIntermediate1 = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReimbursementEnrollmentForm", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "ReminderNotificationLogs",
                columns: table => new
                {
                    ReminderNotificationLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BatchID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SentTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReminderID = table.Column<int>(type: "int", nullable: false),
                    ReminderDateTime = table.Column<DateTime>(type: "datetime", nullable: false),
                    PortalUserDeviceID = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResponseCode = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    ResponseMessage = table.Column<string>(type: "nchar(50)", fixedLength: true, maxLength: 50, nullable: true),
                    Platform = table.Column<string>(type: "nchar(20)", fixedLength: true, maxLength: 20, nullable: true),
                    DeviceToken = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReminderNotifcationLogs", x => x.ReminderNotificationLogID);
                });

            migrationBuilder.CreateTable(
                name: "Reminders",
                columns: table => new
                {
                    ReminderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ClientPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ReminderType = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Repeating = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    ReminderDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    ReminderTime = table.Column<TimeOnly>(type: "time", nullable: true),
                    RepeatType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DaysOfWeek = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValueSql: "(getutcdate())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NextReminderDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReminderEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReminderPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReminderTimeString = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    TimeZoneString = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reminders", x => x.ReminderID);
                });

            migrationBuilder.CreateTable(
                name: "ReportList",
                columns: table => new
                {
                    ReportListID = table.Column<int>(type: "int", nullable: false),
                    ReportNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ReportName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    ReportDescription = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    ReportPath = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Global = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reports_Master", x => x.ReportListID);
                });

            migrationBuilder.CreateTable(
                name: "RequestInfoes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DrugId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugFullName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FormId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FormName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FormDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrescriberName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RequestId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.RequestInfoes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RIMGIMG2_IMAGE",
                columns: table => new
                {
                    IMGID = table.Column<double>(type: "float", nullable: false),
                    IMGFILENM = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RIMGIMG2_IMAGE", x => x.IMGID);
                });

            migrationBuilder.CreateTable(
                name: "RIMGUDG2_UNQ_DRUG",
                columns: table => new
                {
                    IMGUNIQID = table.Column<double>(type: "float", nullable: false),
                    IMGDFID = table.Column<double>(type: "float", nullable: true),
                    IMGNDC = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    IMGMFGID = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RIMGUDG2_UNQ_DRUG", x => x.IMGUNIQID);
                });

            migrationBuilder.CreateTable(
                name: "RIMGUIJ2_UNQ_DRUG_JRNL",
                columns: table => new
                {
                    IMGUNIQID = table.Column<double>(type: "float", nullable: false),
                    IMGSTRTDT = table.Column<double>(type: "float", nullable: false),
                    IMGSTOPDT = table.Column<double>(type: "float", nullable: true),
                    IMGID = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RIMGUIJ2_UNQ_DRUG_JRNL", x => new { x.IMGUNIQID, x.IMGSTRTDT });
                });

            migrationBuilder.CreateTable(
                name: "RiteAidHolidays",
                columns: table => new
                {
                    RiteAidHolidayID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Date = table.Column<DateOnly>(type: "date", nullable: false),
                    Description = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Holiday = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false, defaultValue: "Y"),
                    OpeningTime = table.Column<TimeOnly>(type: "time", nullable: true),
                    ClosingTime = table.Column<TimeOnly>(type: "time", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiteAidHolidays", x => x.RiteAidHolidayID);
                });

            migrationBuilder.CreateTable(
                name: "RiteAidHours",
                columns: table => new
                {
                    RiteAidHoursID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DayofWeek = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    OpenClosed = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    OpeningTime = table.Column<TimeOnly>(type: "time", nullable: false),
                    ClosingTime = table.Column<TimeOnly>(type: "time", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiteAidHours", x => x.RiteAidHoursID);
                });

            migrationBuilder.CreateTable(
                name: "RMIID1_MED",
                columns: table => new
                {
                    MEDID = table.Column<double>(type: "float", nullable: true),
                    ROUTED_DOSAGE_FORM_MED_ID = table.Column<double>(type: "float", nullable: true),
                    MED_STRENGTH = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: true),
                    MED_STRENGTH_UOM = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: true),
                    MED_MEDID_DESC = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: true),
                    GCN_SEQNO = table.Column<double>(type: "float", nullable: true),
                    MED_GCNSEQNO_ASSIGN_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_NAME_SOURCE_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_FED_LEGEND_IND = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_DEA_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_MULTI_SOURCE_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_GEN_DRUG_NAME_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_GEN_COMP_PRICE_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_GEN_SPREAD_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_INNOV_IND = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_GEN_THERA_EQU_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_DESI_IND = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_REF_DESI2_IND = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MED_STATUS_CD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    GENERIC_MEDID = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RMINDC1_NDC_MEDID",
                columns: table => new
                {
                    NDC = table.Column<string>(type: "nvarchar(11)", maxLength: 11, nullable: true),
                    MEDID = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RNDC14_NDC_MSTR",
                columns: table => new
                {
                    NDC = table.Column<string>(type: "nvarchar(11)", maxLength: 11, nullable: false),
                    LBLRID = table.Column<string>(type: "nvarchar(6)", maxLength: 6, nullable: true),
                    GCN_SEQNO = table.Column<double>(type: "float", nullable: true),
                    PS = table.Column<double>(type: "float", nullable: true),
                    DF = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    AD = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    LN = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    BN = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    PNDC = table.Column<string>(type: "nvarchar(11)", maxLength: 11, nullable: true),
                    REPNDC = table.Column<string>(type: "nvarchar(11)", maxLength: 11, nullable: true),
                    NDCFI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    DADDNC = table.Column<double>(type: "float", nullable: true),
                    DUPDC = table.Column<double>(type: "float", nullable: true),
                    DESI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    DESDTEC = table.Column<double>(type: "float", nullable: true),
                    DESI2 = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    DES2DTEC = table.Column<double>(type: "float", nullable: true),
                    DEA = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    CL = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    GPI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    HOSP = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    INNOV = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    IPI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MINI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    MAINT = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    OBC = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    OBSDTEC = table.Column<double>(type: "float", nullable: true),
                    PPI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    STPK = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    REPACK = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    TOP200 = table.Column<string>(type: "nvarchar(3)", maxLength: 3, nullable: true),
                    UD = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    CSP = table.Column<double>(type: "float", nullable: true),
                    NDL_GDGE = table.Column<double>(type: "float", nullable: true),
                    NDL_LNGTH = table.Column<double>(type: "float", nullable: true),
                    SYR_CPCTY = table.Column<double>(type: "float", nullable: true),
                    SHLF_PCK = table.Column<double>(type: "float", nullable: true),
                    SHIPPER = table.Column<double>(type: "float", nullable: true),
                    HCFA_FDA = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    HCFA_UNIT = table.Column<string>(type: "nvarchar(3)", maxLength: 3, nullable: true),
                    HCFA_PS = table.Column<double>(type: "float", nullable: true),
                    HCFA_APPC = table.Column<double>(type: "float", nullable: true),
                    HCFA_MRKC = table.Column<double>(type: "float", nullable: true),
                    HCFA_TRMC = table.Column<double>(type: "float", nullable: true),
                    HCFA_TYP = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    HCFA_DESC1 = table.Column<double>(type: "float", nullable: true),
                    HCFA_DESI1 = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    UU = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    PD = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    LN25 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    LN25I = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    GPIDC = table.Column<double>(type: "float", nullable: true),
                    BBDC = table.Column<double>(type: "float", nullable: true),
                    HOME = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    INPCKI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    OUTPCKI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    OBC_EXP = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    PS_EQUIV = table.Column<double>(type: "float", nullable: true),
                    PLBLR = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    TOP50GEN = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    OBC3 = table.Column<string>(type: "nvarchar(3)", maxLength: 3, nullable: true),
                    GMI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    GNI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    GSI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    GTI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    NDCGI1 = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    HCFA_DC = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    LN60 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RNDC14_NDC_MSTR", x => x.NDC);
                });

            migrationBuilder.CreateTable(
                name: "RPEMMOE2_MONO",
                columns: table => new
                {
                    PEMONO = table.Column<double>(type: "float", nullable: true),
                    PEMONOE_SN = table.Column<double>(type: "float", nullable: true),
                    PEMTXTEI = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    PEMTXTE = table.Column<string>(type: "nvarchar(76)", maxLength: 76, nullable: true),
                    PEMGNDR = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true),
                    PEMAGE = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RPEMOGC0_MONO_GCNSEQNO_LINK",
                columns: table => new
                {
                    GCN_SEQNO = table.Column<double>(type: "float", nullable: true),
                    PEMONO = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RTMMID1_TM_MED",
                columns: table => new
                {
                    MEDID = table.Column<double>(type: "float", nullable: true),
                    TM_SOURCE_ID = table.Column<double>(type: "float", nullable: true),
                    TM_IND = table.Column<double>(type: "float", nullable: true),
                    TM_ALT_MEDID_DESC = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RTPBTransactions",
                columns: table => new
                {
                    RtpbId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    TransactionType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ServiceRequestId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Failed = table.Column<bool>(type: "bit", nullable: true),
                    RequestContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Activity = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Locale = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ErrorLog = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseTypeCode = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    JsonResponse = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BenefitInvestigationId = table.Column<int>(type: "int", nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__RTPBTran__49CA4B1034F6EFB6", x => x.RtpbId);
                });

            migrationBuilder.CreateTable(
                name: "RuleTriggerConditions",
                columns: table => new
                {
                    RuleTriggerConditionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    RuleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Sr_TypeShortDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_Resolution = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SR_Activity = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SR_ProcessDate = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SR_Task = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_Subtype = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RequireCareCycle = table.Column<bool>(type: "bit", nullable: true),
                    ConditionParameters = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ProcessName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TaskRunFrequency = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true, comment: "Example: {\"RunByWindowsTaskScheduler\":\"false\",\"Month\":\"May,June,July\",\"Date01,02,11,30\":\"\",\"Day\":\"Monday,tuesday,Friday,saturday\",\"Hour\":\"11,09,10\",\"Minute\":\"11,00,23\"}\r\nDetails: Month,Day should be full name(case insensitive). Date, Hour, Minute are in ## format. Hour are in 24 hour date format. When RunByWindowsTaskScheduler is true all other paratmeter values are ignored and Job will be executed as per the Windows Task scheduler timing. ")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RuleTriggerConditions", x => x.RuleTriggerConditionID);
                });

            migrationBuilder.CreateTable(
                name: "RxAdminAction",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramId = table.Column<int>(type: "int", nullable: true),
                    AdminStatus = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ComparisonOperator = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    MinDays = table.Column<int>(type: "int", nullable: true),
                    MaxDays = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__RxAdminA__3214EC07D31BB96F", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalesData",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Invoice_Number = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Invoice_Date = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Item_Number = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Item_Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    Customer_Number = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Customer_Name = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address_ID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesData", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "SalesData_CustomerToVendor",
                columns: table => new
                {
                    SalesData_CustomerToVendorID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Customer_Number = table.Column<int>(type: "int", nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "system"),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesData_CustomerToVendor", x => x.SalesData_CustomerToVendorID);
                });

            migrationBuilder.CreateTable(
                name: "SAMLAuditLog",
                columns: table => new
                {
                    LogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Requester = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    RequestType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    partnerIdP = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    XMLDocument = table.Column<string>(type: "xml", nullable: true),
                    IPAddress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SAMLAuditLog", x => x.LogID);
                });

            migrationBuilder.CreateTable(
                name: "Seasonal_SourceRecord",
                columns: table => new
                {
                    MedeBVProcessingId = table.Column<int>(type: "int", nullable: false),
                    SourceRecordId = table.Column<int>(type: "int", nullable: false),
                    ClientPatientId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MedeBVProcessingTypeId = table.Column<int>(type: "int", nullable: false),
                    MedeBVResponseId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MedeBVResponseSourceTypeId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MedeBVResponseTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    SRMedeBVProcessingId = table.Column<int>(type: "int", nullable: false),
                    SRMedeBVResponseTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    NextScheduledDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SRCreated = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SRModified = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SRStatus = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MDeleted = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Secure_Communication_Documents",
                columns: table => new
                {
                    Secure_Communication_DocumentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Secure_CommunicationID = table.Column<int>(type: "int", nullable: false),
                    FileStorageID = table.Column<int>(type: "int", nullable: true),
                    TemplateID = table.Column<int>(type: "int", nullable: true),
                    SigRequired = table.Column<bool>(type: "bit", nullable: false),
                    SigStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Checksum = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Communication_Documents", x => x.Secure_Communication_DocumentID);
                });

            migrationBuilder.CreateTable(
                name: "Secure_Communications",
                columns: table => new
                {
                    Secure_CommunicationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    EmailAddressFrom = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    EmailAddressTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EmailContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    InitalPortalCommunicationID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    ActionTaken = table.Column<bool>(type: "bit", nullable: false),
                    ActionTakenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CCDeleted = table.Column<bool>(type: "bit", nullable: false),
                    PortalDeleted = table.Column<bool>(type: "bit", nullable: false),
                    RecordSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Hub"),
                    IPAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MessgaeStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ReadDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Communications", x => x.Secure_CommunicationID);
                });

            migrationBuilder.CreateTable(
                name: "SecureMessagesAddresses",
                columns: table => new
                {
                    SecureMessagesAddresseesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ApplicationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ApplicationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ApplicationTitle = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SecureMessagesAddresses", x => x.SecureMessagesAddresseesID);
                });

            migrationBuilder.CreateTable(
                name: "ServiceRequests_AuditLog",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ChangeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OldValue = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    NewValue = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServiceRequests_AuditLog", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "SMS_Templates",
                columns: table => new
                {
                    SMS_Template_Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SMSCategory = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SMSTemplate = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    SR_TypeShortDesc = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SR_TypeListId = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SMS_Templates", x => x.SMS_Template_Id);
                });

            migrationBuilder.CreateTable(
                name: "SOAPAuditLog",
                columns: table => new
                {
                    LogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    serviceName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    methodName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ipAddress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    xmlRequest = table.Column<string>(type: "xml", nullable: true),
                    xmlResponse = table.Column<string>(type: "xml", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SOAPAuditLog", x => x.LogID);
                });

            migrationBuilder.CreateTable(
                name: "SpecialtyPharmacies",
                columns: table => new
                {
                    SPID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SPName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SPCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialtyPharmacies", x => x.SPID);
                });

            migrationBuilder.CreateTable(
                name: "SPInventory",
                columns: table => new
                {
                    SPInventoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SPID = table.Column<int>(type: "int", nullable: true),
                    SPNPI = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    InventoryBeginDate = table.Column<DateOnly>(type: "date", nullable: true),
                    QtyAtBeginDate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InventoryEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    QtyAtEndDate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatdBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CreatedFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SPInventory", x => x.SPInventoryID);
                });

            migrationBuilder.CreateTable(
                name: "SPInventoryAudit",
                columns: table => new
                {
                    AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SPInventoryID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "nchar(100)", fixedLength: true, maxLength: 100, nullable: false),
                    ItemName = table.Column<string>(type: "nchar(100)", fixedLength: true, maxLength: 100, nullable: true),
                    NDC = table.Column<string>(type: "nchar(100)", fixedLength: true, maxLength: 100, nullable: true),
                    InventoryBeginDate = table.Column<DateOnly>(type: "date", nullable: true),
                    InventoryEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    QtyAtBeginDate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    QtyAtEndDate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nchar(100)", fixedLength: true, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SPInventoryAudit", x => x.AuditID);
                });

            migrationBuilder.CreateTable(
                name: "SplitStringResult",
                columns: table => new
                {
                    data = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SR_ActivityList",
                columns: table => new
                {
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ActivityDesc = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    ProgramID = table.Column<short>(type: "smallint", nullable: false),
                    RecordType = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Priority = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Alert = table.Column<bool>(type: "bit", nullable: true),
                    RequireCallLog = table.Column<bool>(type: "bit", nullable: true),
                    ParentListID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_ActivityList", x => x.SR_ActivityListID);
                });

            migrationBuilder.CreateTable(
                name: "SR_AlternateCoverageResearch",
                columns: table => new
                {
                    CoverageResearchID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    Gender = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ResidenceState = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FamilySize = table.Column<int>(type: "int", nullable: true),
                    AnnualGrossIncome = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    LegallyDisabled = table.Column<bool>(type: "bit", nullable: true),
                    AppliedStateFedProgram = table.Column<bool>(type: "bit", nullable: true),
                    EffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SearchDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FoundDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Age = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoverageResearchID", x => x.CoverageResearchID);
                });

            migrationBuilder.CreateTable(
                name: "SR_BridgeEligibility_AuditLog",
                columns: table => new
                {
                    SR_BridgeEligibility_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_BridgeEligibilityID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PreEligibilityDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MedicalExpense = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ExceptionApplied = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_Bridg__3F8620403AF9E1CF", x => x.SR_BridgeEligibility_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_BridgeExtensions",
                columns: table => new
                {
                    SR_BridgeExtensionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    RequestedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateOnly>(type: "date", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_BridgeExtensions", x => x.SR_BridgeExtensionID);
                });

            migrationBuilder.CreateTable(
                name: "SR_BridgeExtensions_AuditLog",
                columns: table => new
                {
                    SR_BridgeExtension_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_BridgeExtensionID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    RequestedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateOnly>(type: "date", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_Bridg__82A4DF2A3ECA72B3", x => x.SR_BridgeExtension_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_Copay_Records",
                columns: table => new
                {
                    SR_Copay_Record_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    TotalApproved = table.Column<decimal>(type: "money", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsVendorCopayCard = table.Column<bool>(type: "bit", nullable: false),
                    BINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCNNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    API_PatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeactivatedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    DeactivatedReason = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    EF_Override_BISRID = table.Column<int>(type: "int", nullable: true),
                    EF_Override_Reason = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EF_Override_Notes = table.Column<string>(type: "varchar(350)", unicode: false, maxLength: 350, nullable: true),
                    EF_Override_Date = table.Column<DateOnly>(type: "date", nullable: true),
                    EF_Override_ExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    MedicalMemberNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicalGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicalBINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicalPCNNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClaimEligibilityDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Copay_Records", x => x.SR_Copay_Record_ID);
                });

            migrationBuilder.CreateTable(
                name: "SR_Copay_Records_AuditLog",
                columns: table => new
                {
                    SR_Copay_Records_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_Copay_Record_ID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    TotalApproved = table.Column<decimal>(type: "money", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsVendorCopayCard = table.Column<bool>(type: "bit", nullable: false),
                    BINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCNNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    API_PatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeactivatedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    DeactivatedReason = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    EF_Override_BISRID = table.Column<int>(type: "int", nullable: true),
                    EF_Override_Reason = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EF_Override_Notes = table.Column<string>(type: "varchar(350)", unicode: false, maxLength: 350, nullable: true),
                    EF_Override_Date = table.Column<DateOnly>(type: "date", nullable: true),
                    EF_Override_ExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_Copay__06E9F87A2688D4CE", x => x.SR_Copay_Records_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_Copay_Records_ErrorLog",
                columns: table => new
                {
                    SR_Copay_Records_ErrorLog_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    CopayCardID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CardStatus = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    APIResponse = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ErrorCode = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ErrorMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Copay_Records_ErrorLog", x => x.SR_Copay_Records_ErrorLog_ID);
                });

            migrationBuilder.CreateTable(
                name: "SR_CopayClaim",
                columns: table => new
                {
                    SR_CopayClaimID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ExternalId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConfirmationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PracticeExternalId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberExternalId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientExternalId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    API_DateCreated = table.Column<DateTime>(type: "datetime", nullable: true),
                    API_DateModified = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionFillDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubmittedCopay = table.Column<decimal>(type: "money", nullable: true),
                    BenefitAmount = table.Column<decimal>(type: "money", nullable: true),
                    ReimbursementType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProductNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClaimType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Dose = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DaysSupplied = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EOBOnFile = table.Column<bool>(type: "bit", nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Response_CopayAmount = table.Column<decimal>(type: "money", nullable: true),
                    PaidDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Response_ClaimNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_AdjustedClaimNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_SubmissionMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_NumberofBenefits = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_APSIndicator = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DispensingFeePaid = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_TraditionalCardSpend = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_UsualandCustomaryAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DateWritten = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DateofFill = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_ReceivedDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_RxOriginCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_New_RefillCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_NumberofRefills = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DAWCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_OtherCoverage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_BasisofReimbursement = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DrugDosageForm = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DrugStrength = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PaidQuantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DaysSupply = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_OrganizationNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PharmacyNABPNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PharmacyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PharmacyGroupCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_MailOrderIndicator = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_DEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_IMSID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PrescriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_PDRP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_IQVIATransactionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_EOB_Flag = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_Copay__5ACABD1749862FC6", x => x.SR_CopayClaimID);
                });

            migrationBuilder.CreateTable(
                name: "SR_CopayPaymentEOB",
                columns: table => new
                {
                    SR_CopayPaymentEOBID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EOBReceivedDate = table.Column<DateOnly>(type: "date", nullable: false),
                    PayeeType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PayeeID = table.Column<int>(type: "int", nullable: false),
                    DateOfService = table.Column<DateOnly>(type: "date", nullable: false),
                    BillingCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OriginalBilledAmount = table.Column<decimal>(type: "money", nullable: true),
                    PrimaryPlanPaidAmount = table.Column<decimal>(type: "money", nullable: true),
                    PatientCopayAmount = table.Column<decimal>(type: "money", nullable: false),
                    PatientDueAmount = table.Column<decimal>(type: "money", nullable: false),
                    TotalCopayRequestedAmount = table.Column<decimal>(type: "money", nullable: false),
                    TotalApprovedAmount = table.Column<decimal>(type: "money", nullable: false),
                    TotalDueAmount = table.Column<decimal>(type: "money", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusUpdatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EF_Override_BISRID = table.Column<int>(type: "int", nullable: true),
                    EF_Override_Reason = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EF_Override_Notes = table.Column<string>(type: "varchar(350)", unicode: false, maxLength: 350, nullable: true),
                    EF_Override_Date = table.Column<DateOnly>(type: "date", nullable: true),
                    EF_Override_ExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    EOBLineStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClaimTypePaymentNumber = table.Column<int>(type: "int", nullable: true),
                    ClaimTypeDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ClaimTypeAmount = table.Column<decimal>(type: "money", nullable: true),
                    PayerMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_CopayPaymentEOB", x => x.SR_CopayPaymentEOBID);
                });

            migrationBuilder.CreateTable(
                name: "SR_CopayPayments",
                columns: table => new
                {
                    SR_CopayPaymentRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TotalDeduction = table.Column<decimal>(type: "money", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    PatientResponsibility = table.Column<decimal>(type: "money", nullable: true),
                    StartDateofService = table.Column<DateOnly>(type: "date", nullable: true),
                    EndDateofService = table.Column<DateOnly>(type: "date", nullable: true),
                    W9OnFile = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    CheckAmount = table.Column<decimal>(type: "money", nullable: true),
                    AvailableBalance = table.Column<decimal>(type: "money", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    RecordStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    GroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCNNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentSRID = table.Column<int>(type: "int", nullable: false),
                    PayeeID = table.Column<int>(type: "int", nullable: true),
                    PayeeType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MedicationCost = table.Column<decimal>(type: "money", nullable: true),
                    InjectionProcedureCost = table.Column<decimal>(type: "money", nullable: true),
                    InjectionGuidanceCost = table.Column<decimal>(type: "money", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_CopayPayments", x => x.SR_CopayPaymentRecordID);
                });

            migrationBuilder.CreateTable(
                name: "SR_eEnrollments_Audit",
                columns: table => new
                {
                    SR_eEnrollments_AuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_eEnrollmentID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    Enrollment_SRID = table.Column<int>(type: "int", nullable: false),
                    eRxStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    eRxReferenceNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriageSRID = table.Column<int>(type: "int", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_eEnrollments_Audit", x => x.SR_eEnrollments_AuditID);
                });

            migrationBuilder.CreateTable(
                name: "SR_FeedbackTracking_AuditLog",
                columns: table => new
                {
                    SR_FeedbackTracking_AuditLogID = table.Column<int>(type: "int", nullable: false),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_FeedbackTrackingID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    CallerType = table.Column<int>(type: "int", nullable: false),
                    ContactType = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    ContactPhoneNumber = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DateOfFeedback = table.Column<DateTime>(type: "datetime", nullable: false),
                    FeedbackResolutionDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    VoyagerID = table.Column<int>(type: "int", nullable: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    CallerStatisfaction = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IssueResolved = table.Column<bool>(type: "bit", nullable: false),
                    IssueType = table.Column<int>(type: "int", nullable: false),
                    IssueSubType = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataPolicy_AuditLog",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SR_MedOffRampDataPolicyId = table.Column<int>(type: "int", nullable: true),
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: true),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: true),
                    PolicyHighLevelInfoEligibilityStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PolicyHighLevelInfoEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_MedOffRampDataPolicy_AuditLog", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataRequestPoliciesTmp",
                columns: table => new
                {
                    SR_MedOffRampDataRequestPoliciesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: false),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    MemberId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PayerId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PayerName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientIsSubscriber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberMiddleName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberPrefix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberSuffix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberTitle = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberDateOfBirth = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubscriberGender = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    SubscriberMemberId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PriorAuthorizationOnFile = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PriorAuthorizationType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PriorAuthorizationNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PriorAuthorizationEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PriorAuthorizationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PolicyType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SR_Messages",
                columns: table => new
                {
                    SR_MessageID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    Category = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Message = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    MessageDate = table.Column<DateOnly>(type: "date", nullable: false),
                    MessageSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MessageRead = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SR_NursingActivity",
                columns: table => new
                {
                    SR_NursingActivityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    ActivityMode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    ActivityType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Status = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Comments = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ActivityDueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivityCompletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivityDurationInMinutes = table.Column<int>(type: "int", nullable: true),
                    TravelTimeInMinutes = table.Column<int>(type: "int", nullable: true),
                    RelatedTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExplainedOrders = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    SetExpectations = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AnsweredDocumentedQuestions = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AskedPatientCall = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    MedicationReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    CartrigesReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    TiganReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PenPakReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    SharpsReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    SwabsReveived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    NeedlesReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PatientKitReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AcceptedEducationVisit = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Dose = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Frequency = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    OptimalUse = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    CoMorbitidties = table.Column<bool>(type: "bit", nullable: true),
                    ImpairedRenalFunction = table.Column<bool>(type: "bit", nullable: true),
                    BothersomeDyskinesia = table.Column<bool>(type: "bit", nullable: true),
                    Somnolence = table.Column<bool>(type: "bit", nullable: true),
                    AdjustedLevo = table.Column<bool>(type: "bit", nullable: true),
                    CartridgesOnHand = table.Column<int>(type: "int", nullable: true),
                    MedicationRefill = table.Column<bool>(type: "bit", nullable: true),
                    SuppliesRefill = table.Column<bool>(type: "bit", nullable: true),
                    AutomatedFollowUpCreated = table.Column<bool>(type: "bit", nullable: true),
                    OfficeSubmitMaintenance = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    DrugAdministered = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    CartrigesOrdered = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PenPakOrdered = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    FrequencyMin = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FrequencyInterval = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PredefinedComments = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    PatExpressedFinancialConcern = table.Column<bool>(type: "bit", nullable: true),
                    ActivityID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_Nursi__CB9F1DE643B7AE54", x => x.SR_NursingActivityID);
                });

            migrationBuilder.CreateTable(
                name: "SR_NursingActivity_History",
                columns: table => new
                {
                    SR_NursingActivity_HistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_NursingActivityID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    ActivityMode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    ActivityType = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Status = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Comments = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ActivityDueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivityCompletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivityDurationInMinutes = table.Column<int>(type: "int", nullable: true),
                    TravelTimeInMinutes = table.Column<int>(type: "int", nullable: true),
                    RelatedTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExplainedOrders = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    SetExpectations = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AnsweredDocumentedQuestions = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AskedPatientCall = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    MedicationReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    CartrigesReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    TiganReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PenPakReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    SharpsReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    SwabsReveived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    NeedlesReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PatientKitReceived = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    AcceptedEducationVisit = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Dose = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Frequency = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    OptimalUse = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    CoMorbitidties = table.Column<bool>(type: "bit", nullable: true),
                    ImpairedRenalFunction = table.Column<bool>(type: "bit", nullable: true),
                    BothersomeDyskinesia = table.Column<bool>(type: "bit", nullable: true),
                    Somnolence = table.Column<bool>(type: "bit", nullable: true),
                    AdjustedLevo = table.Column<bool>(type: "bit", nullable: true),
                    CartridgesOnHand = table.Column<int>(type: "int", nullable: true),
                    MedicationRefill = table.Column<bool>(type: "bit", nullable: true),
                    SuppliesRefill = table.Column<bool>(type: "bit", nullable: true),
                    AutomatedFollowUpCreated = table.Column<bool>(type: "bit", nullable: true),
                    OfficeSubmitMaintenance = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HistoryCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    HistoryCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    DrugAdministered = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    CartrigesOrdered = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PenPakOrdered = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    FrequencyMin = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FrequencyInterval = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatExpressedFinancialConcern = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_Nursi__2BADC3F747883F38", x => x.SR_NursingActivity_HistoryID);
                });

            migrationBuilder.CreateTable(
                name: "SR_OffRamp",
                columns: table => new
                {
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    JSONDataOriginal = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    JSONDataOut = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DateSent = table.Column<DateTime>(type: "datetime", nullable: true),
                    SentBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientId = table.Column<int>(type: "int", nullable: true),
                    ProviderId = table.Column<int>(type: "int", nullable: true),
                    ResponseSentSuccessfully = table.Column<bool>(type: "bit", nullable: true),
                    ResponseMessage = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SR_OffRampType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NextInjectionDate = table.Column<DateOnly>(type: "date", nullable: true),
                    OfframpClientID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_OffRamp", x => x.SR_OffRampId);
                });

            migrationBuilder.CreateTable(
                name: "SR_Organizations_Audit",
                columns: table => new
                {
                    SR_OrganizationAuditID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    ActionDate = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    ActionUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Orgnizations_Audit", x => x.SR_OrganizationAuditID);
                });

            migrationBuilder.CreateTable(
                name: "SR_PAP_AuditLog",
                columns: table => new
                {
                    SR_PAP_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_PAPID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PAPType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PostmarkDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PAPStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    HardshipRequested = table.Column<bool>(type: "bit", nullable: true),
                    HardshipRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    HardshipApproved = table.Column<bool>(type: "bit", nullable: true),
                    HardshipApprovalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    AppealApproved = table.Column<bool>(type: "bit", nullable: true),
                    AppealApprovalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    AppealRequested = table.Column<bool>(type: "bit", nullable: true),
                    AppealRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    MedicalExpense = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ExceptionApplied = table.Column<bool>(type: "bit", nullable: true),
                    AttReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Comments = table.Column<string>(type: "varchar(350)", unicode: false, maxLength: 350, nullable: true),
                    ClientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BVReferralID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EligibilityStatusDate = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_PAP_A__136D874855ADD80B", x => x.SR_PAP_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_Pharmacy_ePA_Details",
                columns: table => new
                {
                    SR_Pharmacy_ePA_DetailsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    NDC = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    SureScriptsCaseID = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    CMTXePAID = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ePADisposition = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PAEffectiveDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PAExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PharmacyType = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DaysSupply = table.Column<int>(type: "int", nullable: true),
                    NumberOfRefills = table.Column<int>(type: "int", nullable: true),
                    ePANotes = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PAAuthorizationNumber = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    ePAStatus = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DeadlineForReply = table.Column<DateOnly>(type: "date", nullable: true),
                    ReferToHubReason = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_ePA", x => x.SR_Pharmacy_ePA_DetailsID);
                });

            migrationBuilder.CreateTable(
                name: "SR_Referrals",
                columns: table => new
                {
                    SR_ReferralsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ReferralReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FoundationName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Referrals", x => x.SR_ReferralsID);
                });

            migrationBuilder.CreateTable(
                name: "SR_Reminder",
                columns: table => new
                {
                    SR_ReminderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DueDate = table.Column<DateOnly>(type: "date", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reminder", x => x.SR_ReminderId);
                });

            migrationBuilder.CreateTable(
                name: "SR_RequiredFields",
                columns: table => new
                {
                    RecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ReqField = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReqFieldName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReqType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_RequiredFields", x => x.RecordID);
                });

            migrationBuilder.CreateTable(
                name: "SR_SubTypeList",
                columns: table => new
                {
                    SR_SubTypeListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    SR_SubTypeShortDesc = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    SR_SubTypeFullDesc = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateOnly>(type: "date", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_SubTypeList", x => x.SR_SubTypeListID);
                });

            migrationBuilder.CreateTable(
                name: "SR_TrainingLogs",
                columns: table => new
                {
                    SR_TrainingLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_VisitID = table.Column<int>(type: "int", nullable: false),
                    LogType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LogDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TrainingLogs", x => x.SR_TrainingLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_TriageFields",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FieldDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Required = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TriageFields", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeDynamicData_AuditLog",
                columns: table => new
                {
                    SR_TypeDynamicData_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_TypeDynamicDataID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ProductApproved = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_TypeD__BEA3E2CE6307D329", x => x.SR_TypeDynamicData_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeGroupDynamicData_AuditLog",
                columns: table => new
                {
                    SR_TypeGroupDynamicData_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: false),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SR_TypeGroupDynamicDataID = table.Column<int>(type: "int", nullable: false),
                    DataGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_TypeG__236CD62621227550", x => x.SR_TypeGroupDynamicData_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeList",
                columns: table => new
                {
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<short>(type: "smallint", nullable: false),
                    SR_TypeShortDesc = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    SR_TypeFullDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ShowTriage = table.Column<bool>(type: "bit", nullable: true),
                    CanSelectMultipleSubTypes = table.Column<bool>(type: "bit", nullable: true),
                    TriagewithoutRule = table.Column<bool>(type: "bit", nullable: true),
                    EnablePatientContactOfSR = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    RequireSRPatient = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    RequireSRPhysician = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    RequireSROrganization = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    RequirePatientConsentDrug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RequireDrug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriageWithoutDocument = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    TriageWithoutBI = table.Column<bool>(type: "bit", nullable: true),
                    CreateFromCopyOnly = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ShowFaqs = table.Column<bool>(type: "bit", nullable: true),
                    AllowSRTypeChange = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    RequireCarecycleOpenToSave = table.Column<bool>(type: "bit", nullable: true),
                    AllowAutoCreateOnly = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    RequireProviderBAA = table.Column<bool>(type: "bit", nullable: true),
                    HideBAABannerSRType = table.Column<bool>(type: "bit", nullable: true),
                    Category = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    NotAllowSelect = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TypeList_1", x => x.SR_TypeListID);
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeList_ByDrug",
                columns: table => new
                {
                    SR_TypeList_ByDrug = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_TypeShortDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    NotInDrug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TypeList_ByDrug", x => x.SR_TypeList_ByDrug);
                });

            migrationBuilder.CreateTable(
                name: "SRActivity_EmailTemplate_List",
                columns: table => new
                {
                    SRActivity_EmailTemplagte_ListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    EmailTo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailFrom = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    TriggerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_TypeShortDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmailFromDisplayName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRActivity_EmailTemplate_List", x => x.SRActivity_EmailTemplagte_ListID);
                });

            migrationBuilder.CreateTable(
                name: "SRAutoStatusLog",
                columns: table => new
                {
                    SRAutoStatusLog_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    FunctionName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Success = table.Column<bool>(type: "bit", nullable: true),
                    Errors = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRAutoStatusLog", x => x.SRAutoStatusLog_ID);
                });

            migrationBuilder.CreateTable(
                name: "SRDocumentType_EmailTemplate_List",
                columns: table => new
                {
                    SRDocumentType_EmailTemplate_ListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentType_LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    EmailTo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailFrom = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    TriggerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmailFromDisplayName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRDocumentType_EmailTemplate_List", x => x.SRDocumentType_EmailTemplate_ListID);
                });

            migrationBuilder.CreateTable(
                name: "SRHubStatusList",
                columns: table => new
                {
                    SRHubStatusListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    StatusCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    StatusDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    StatusDetailCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    StatusDetailDescription = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRHubStatusList", x => x.SRHubStatusListID);
                });

            migrationBuilder.CreateTable(
                name: "Staging_Dispenses",
                columns: table => new
                {
                    StagingDispenseID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RecordDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SPID = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SPNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SCPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SPPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DispenseOrderNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientYearofBirth = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCopay = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientOutofPocket = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayCardID = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CardAmountUsed = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SCProviderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SPProviderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ProviderAddress = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ProviderCity = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ProviderZIP = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SCCFCareCenterID = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    SPCFCareCenterID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CFCareCenterName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ShipDate = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ShippingCarrier = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    TrackingNumber = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PayerName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PBMName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    NDC = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ItemName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    QTY = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FillNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RefillRemainng = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaySupply = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DiagnosisCode = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Duplicate = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "state",
                columns: table => new
                {
                    idusstate = table.Column<int>(type: "int", nullable: false),
                    usstatename = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__state__38D74042678A2F1F", x => x.idusstate);
                });

            migrationBuilder.CreateTable(
                name: "StateCounties",
                columns: table => new
                {
                    StateCountyID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CountyName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StateCounties", x => x.StateCountyID);
                });

            migrationBuilder.CreateTable(
                name: "StateList",
                columns: table => new
                {
                    StateID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Name = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    CountryID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StateList", x => x.StateID);
                });

            migrationBuilder.CreateTable(
                name: "states",
                columns: table => new
                {
                    state_code = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    state = table.Column<string>(type: "varchar(22)", unicode: false, maxLength: 22, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__states__86729A0252D92AFC", x => x.state_code);
                });

            migrationBuilder.CreateTable(
                name: "SurveyAnswer_AuditLog",
                columns: table => new
                {
                    SurveyAnswer_AuditLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SurveyAnswerID = table.Column<int>(type: "int", nullable: true),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SurveyElement_DataPointID = table.Column<int>(type: "int", nullable: true),
                    Answer = table.Column<string>(type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: true),
                    AnswerNotes = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NA = table.Column<bool>(type: "bit", nullable: true),
                    LogCreated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogCreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyAnswer_AuditLog", x => x.SurveyAnswer_AuditLogID);
                });

            migrationBuilder.CreateTable(
                name: "SurveyDataPointDictionary",
                columns: table => new
                {
                    DataPointDictionaryID = table.Column<int>(type: "int", nullable: false),
                    DataPointName = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    DataPointClass = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FieldType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldLength = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldMask = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LookupFieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SubType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyDataPointDictionary", x => x.DataPointDictionaryID);
                });

            migrationBuilder.CreateTable(
                name: "SurveyElement_DataPoints",
                columns: table => new
                {
                    SurveyElement_DataPointID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SurveyElementsID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    DataPointDictionaryID = table.Column<int>(type: "int", nullable: true),
                    LabelText = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    MinValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Style = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShowNote = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    NoteLabelText = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ShowMutlipleNote = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    MutipleNoteLabelText = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RegularExpression = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    RequiredField = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    AllowNA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ValidateClass = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    FieldCode = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SurveyTypes = table.Column<string>(type: "varchar(300)", unicode: false, maxLength: 300, nullable: true),
                    GroupRules = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TriggerRules = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ValidateMessage = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PostRules = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TemplateTagName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SurveyLookupDataList",
                columns: table => new
                {
                    SurveyLookupDataListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    FunctionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ListValue = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Category = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OptionCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShowNote = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    SortOrder = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriggerRules = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    GroupRules = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyLookupDataList", x => x.SurveyLookupDataListID);
                });

            migrationBuilder.CreateTable(
                name: "SurveyMaster",
                columns: table => new
                {
                    SurveyMasterID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SurveyType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SurveyDescription = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    HasProviderLink = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    HasNurseLink = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    ReadOnly = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyMaster", x => x.SurveyMasterID);
                });

            migrationBuilder.CreateTable(
                name: "SurveyMasterByDrug",
                columns: table => new
                {
                    SurveyMasterByDrugID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SurveyMasterID = table.Column<int>(type: "int", nullable: false),
                    NotInDrug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyMasterByDrug", x => x.SurveyMasterByDrugID);
                });

            migrationBuilder.CreateTable(
                name: "SurveyMasterBySRType",
                columns: table => new
                {
                    SurveyMasterBySRTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SurveyMasterID = table.Column<int>(type: "int", nullable: false),
                    Comments = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SR_TypeShortDesc = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Drug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyMasterBySRType", x => x.SurveyMasterBySRTypeID);
                });

            migrationBuilder.CreateTable(
                name: "Synagis_Patients",
                columns: table => new
                {
                    PatientID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InfantFirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InfantMiddleName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InfantLastName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    InfantGender = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ParentContactName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ParentType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    HomePhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CellPhone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: true),
                    CLDP = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Doses = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FirstDoseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastDoseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    GA = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RiskFactors = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientInsuranceCarrier = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BirthWeight = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Diagnosis = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    TOC = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Synagis_Patients", x => x.PatientID);
                });

            migrationBuilder.CreateTable(
                name: "talendFlowCatcher",
                columns: table => new
                {
                    ID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    moment = table.Column<DateTime>(type: "datetime", nullable: true),
                    pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    father_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    root_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    system_pid = table.Column<long>(type: "bigint", nullable: true),
                    project = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    job = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    job_repository_id = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    job_version = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    context = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    origin = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    label = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    count = table.Column<int>(type: "int", nullable: true),
                    reference = table.Column<int>(type: "int", nullable: true),
                    thresholds = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__talendFl__3214EC27637F7924", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "talendLogCatcher",
                columns: table => new
                {
                    ID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    moment = table.Column<DateTime>(type: "datetime", nullable: true),
                    pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    root_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    father_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    project = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    job = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    context = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    priority = table.Column<int>(type: "int", nullable: true),
                    type = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    origin = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    message = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    code = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__talendLo__3214EC27C32D5AA0", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "talendStatCatcher",
                columns: table => new
                {
                    ID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    moment = table.Column<DateTime>(type: "datetime", nullable: true),
                    pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    father_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    root_pid = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    system_pid = table.Column<long>(type: "bigint", nullable: true),
                    project = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    job = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    job_repository_id = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    job_version = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    context = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    origin = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    message_type = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    message = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    duration = table.Column<long>(type: "bigint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__talendSt__3214EC274AAFB5A1", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "TAMTracker_Options",
                columns: table => new
                {
                    TAMTrackerOptionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TAMTrackerID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    LookupDataLIstID = table.Column<int>(type: "int", nullable: true),
                    Answer = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAMTracker_Options", x => x.TAMTrackerOptionID);
                });

            migrationBuilder.CreateTable(
                name: "TAMTrackerColor",
                columns: table => new
                {
                    ColorID = table.Column<int>(type: "int", nullable: false),
                    ColorName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ColorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAMTrackerColor", x => x.ColorID);
                });

            migrationBuilder.CreateTable(
                name: "TAMTrackerColumns",
                columns: table => new
                {
                    TAMTrackerColumeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    UserID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ColumnTitle = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ColumnName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    ColorID = table.Column<int>(type: "int", nullable: true),
                    Display = table.Column<bool>(type: "bit", nullable: true),
                    Priority = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsFreeze = table.Column<bool>(type: "bit", nullable: true),
                    Visible = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAMTrackerColors", x => x.TAMTrackerColumeID);
                });

            migrationBuilder.CreateTable(
                name: "TAMTrackerSorts",
                columns: table => new
                {
                    TAMTrackerSortID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    Selected = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAMTrackerSorts", x => x.TAMTrackerSortID);
                });

            migrationBuilder.CreateTable(
                name: "temp_PatientJourney",
                columns: table => new
                {
                    pkid = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    CarecycleID = table.Column<int>(type: "int", nullable: true),
                    PatientName = table.Column<string>(type: "varchar(130)", unicode: false, maxLength: 130, nullable: true),
                    PatientInit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Territory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatCategory = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StartSMNType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientStatus = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PhysicianName = table.Column<string>(type: "varchar(130)", unicode: false, maxLength: 130, nullable: true),
                    CoCNurse_Init = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    CoCNurse_Current = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    CareCycleState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SMNReferralReceivedDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SMNReferralReceivedDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAFReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAFReceivedColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BICompleted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BICompletedColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialPriorAuthorization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialPriorAuthorizationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenancePriorAuthorization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenancePriorAuthorizationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialShipDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialShipDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NurseAssignmentDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NurseAssignmentDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstWecomeCallAttempt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstWecomeCallAttemptColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    WelcomeCallCompleted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreInitiationEducationVisit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitiationVisit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitiationVisitColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_24HourPostInitiation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_24HourPostInitiationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenanceSMNReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaintenanceSMNReceivedColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    visit_1weekPostinitiation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    visit_1weekPostinitiationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_2weekpostinitiationeducation = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Call_2weekpostinitiationeducationColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentMaintenanceSMNReceived = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MonthlyFollowUp = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PostInitiationFollowUpVisit = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastShipDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DaysSinceLastFill = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SpecialtyPharmacy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPAStartDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPACompletedDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentPACompletedDateColor = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TempPayerCleanup",
                columns: table => new
                {
                    payerId = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    PayerName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CompanyName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    PayerType = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Created = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    LastUpdated = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Deleted = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    ExternalID = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Active = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    ParentPayerID = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Med_ePayerID = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    MedPAPayerID = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Category = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Action = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    F17 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Winner = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ToolTips",
                columns: table => new
                {
                    ToolTip_Key = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ControlType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TookTip_Content = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToolTips", x => x.ToolTip_Key);
                });

            migrationBuilder.CreateTable(
                name: "Tracleer_REMS_InPatientPharmacy",
                columns: table => new
                {
                    InpatientPharmacyID = table.Column<int>(type: "int", nullable: false),
                    PharmacyName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    PharmacyNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyHIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyOtherIdentifier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipToAddress = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ShipToCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ShipToState = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ShipToZip = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    ShipToPhoneNumber = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    ShipToFaxNumber = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    RepName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    RepPhoneNumber = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    RepFax = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    RepEmail = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    InpatientPharmacyCertificationDate = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Tracleer_REMS_Patient",
                columns: table => new
                {
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PrescriberID = table.Column<int>(type: "int", nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDOB = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientZip1 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientZip2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastShipDate = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    FemalePatientCategory = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    FNRPSubtype = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    REMSEnrollmentDate = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    PatientEmailAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAlternatePhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPhoneExt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientAlternatePhoneExt = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientGuardian = table.Column<string>(type: "varchar(101)", unicode: false, maxLength: 101, nullable: true),
                    PatientGuardianrelationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CurrentOrganizationAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    CurrentOrganizationZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CurrentOrganizationPhone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationPhone1Ext = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationPhone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationPhone2Ext = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CurrentOrganizationFax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Tracleer_REMS_Prescriber",
                columns: table => new
                {
                    PrescriberID = table.Column<int>(type: "int", nullable: false),
                    PrescriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PrescriberLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PrescriberMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PrescriberZip1 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriberZip2 = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriberPhone1 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PrescriberPhone1Ext = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberPhone2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PrescriberPhone2Ext = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberFax1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberFax2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmailAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrescriberNPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PrescriberDesignation = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PrescriberDEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PrescriberCertificationDate = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Tracleer_REMS_Unique_Prescribers",
                columns: table => new
                {
                    PrescriberID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TriageRecords",
                columns: table => new
                {
                    TriageRecordID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_TriageID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TriageData = table.Column<string>(type: "xml", nullable: true),
                    TriageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriagedTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SubmittedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriageStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ApprovedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ApprovedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RejectedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RejectedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    APIRxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AcknowledgementDate = table.Column<DateOnly>(type: "date", nullable: true),
                    AcknowledgementStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Triage_GUID = table.Column<Guid>(type: "uniqueidentifier", nullable: true, defaultValueSql: "(newid())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TriageRecords", x => x.TriageRecordID);
                });

            migrationBuilder.CreateTable(
                name: "Trigger_Email_Logs",
                columns: table => new
                {
                    Trigger_Email_LogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TriggerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    EmailTo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailFrom = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: true),
                    EmailNotSent = table.Column<bool>(type: "bit", nullable: true),
                    AdditionalInfo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Trigger_Email_Logs", x => x.Trigger_Email_LogID);
                });

            migrationBuilder.CreateTable(
                name: "Trigger_EmailTemplate_List",
                columns: table => new
                {
                    Trigger_EmailTemplagte_ListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TriggerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    EmailTo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    EmailFrom = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StoredProcName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Trigger_EmailTemplate_List", x => x.Trigger_EmailTemplagte_ListID);
                });

            migrationBuilder.CreateTable(
                name: "UserActiveSessions",
                columns: table => new
                {
                    UserActiveSessionsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserLoginHistoryID = table.Column<int>(type: "int", nullable: true),
                    SessionKey = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LoginDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__UserActi__415EDFCC432E69C6", x => x.UserActiveSessionsID);
                });

            migrationBuilder.CreateTable(
                name: "UserEmailSubscriptions",
                columns: table => new
                {
                    SubscriptionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    EmailTypeID = table.Column<int>(type: "int", nullable: true),
                    IsSubscribed = table.Column<bool>(type: "bit", nullable: true),
                    IsTreatingFacility = table.Column<bool>(type: "bit", nullable: false),
                    IsPhysician = table.Column<bool>(type: "bit", nullable: true),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserEmailSubscriptions", x => x.SubscriptionID);
                });

            migrationBuilder.CreateTable(
                name: "UserGroup",
                columns: table => new
                {
                    UserGroupID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserGroupName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    VendorID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGroup", x => x.UserGroupID);
                });

            migrationBuilder.CreateTable(
                name: "UserGroup_OfframpClient_Relationship",
                columns: table => new
                {
                    UserGroup_OffRampClient_Relationship_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    UserGroupID = table.Column<int>(type: "int", nullable: false),
                    OffRampClientID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGroup_OfframpClient_Relationship", x => x.UserGroup_OffRampClient_Relationship_ID);
                });

            migrationBuilder.CreateTable(
                name: "UserGroup_Payer_Relationship",
                columns: table => new
                {
                    UserGroup_Payer_RelationshipID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    UserGroupID = table.Column<int>(type: "int", nullable: false),
                    PayerID = table.Column<int>(type: "int", nullable: false),
                    Priority = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGroup_Payer_Relationship", x => x.UserGroup_Payer_RelationshipID);
                });

            migrationBuilder.CreateTable(
                name: "UserHistory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    ResetFlag = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    urltext = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    UserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "mhu"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TempPassword = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserHistory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserLoginHistory",
                columns: table => new
                {
                    UserLoginHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserInformationID = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    HostName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IPAddress = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExtraInfo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    LoginDateTime = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    LogoutDateTime = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserLoginHistory", x => x.UserLoginHistoryID);
                });

            migrationBuilder.CreateTable(
                name: "UserPasswordHistory",
                columns: table => new
                {
                    UserPasswordHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    PasswordSalt = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PKPasswordHistory", x => x.UserPasswordHistoryID);
                });

            migrationBuilder.CreateTable(
                name: "UserUserGroupRelation",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    UserGroupID = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserUserGroupRelation", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "USWM_GetProgramIDResult",
                columns: table => new
                {
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "USWM_Zipterr_Educator_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    ZipCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Territory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Educator = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    FileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ValidationField",
                columns: table => new
                {
                    ValidationFieldID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValidationField", x => x.ValidationFieldID);
                });

            migrationBuilder.CreateTable(
                name: "ValidationType",
                columns: table => new
                {
                    ValidationTypeID = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValidationType", x => x.ValidationTypeID);
                });

            migrationBuilder.CreateTable(
                name: "Vendor_APIConfiguration",
                columns: table => new
                {
                    Vendor_APIConfigID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    TriggerRule = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    APIUrl = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    APIKey = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    APISecret = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    APIUserName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    APIPassword = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AuthenticationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResourceID = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AuthTokenURI = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AuthToken = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Vendor_APIMethodConfiguration",
                columns: table => new
                {
                    Vendor_APIMethodConfigurationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    TriggerRule = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SRTypeListID = table.Column<int>(type: "int", nullable: true),
                    SRSubTypeListID = table.Column<int>(type: "int", nullable: true),
                    APIMethod = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    HTTPMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Vendor_CopayNPIs",
                columns: table => new
                {
                    Vendor_CopayNPI_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vendor_NPIs", x => x.Vendor_CopayNPI_ID);
                });

            migrationBuilder.CreateTable(
                name: "Vendor_DFAttributes",
                columns: table => new
                {
                    VendorFolderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OutboundFolder = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    AlertEmailTo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SuccessEmailTo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    SFTP_Host = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SFTP_Port = table.Column<string>(type: "varchar(6)", unicode: false, maxLength: 6, nullable: true),
                    SFTP_UserName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SFTP_OutboundFolder = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SFTP_InboundFolder = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    isOutboundSFTP = table.Column<bool>(type: "bit", nullable: false),
                    isInboundSFTP = table.Column<bool>(type: "bit", nullable: false),
                    NoOfHeaderLines = table.Column<int>(type: "int", nullable: true),
                    isResponseRequired = table.Column<bool>(type: "bit", nullable: false),
                    isTIFFRequired = table.Column<bool>(type: "bit", nullable: false),
                    isCopyAfterSFTPGet = table.Column<bool>(type: "bit", nullable: false),
                    SFTP_CopyFolder = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PDFtoTiffExt = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true, defaultValue: "tiff"),
                    FileByDrugType = table.Column<bool>(type: "bit", nullable: true),
                    SPVendorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    isOldFormat = table.Column<bool>(type: "bit", nullable: true),
                    HighQualityTiff = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    VendorNameInFile = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FileMask = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ZeroByteFile = table.Column<bool>(type: "bit", nullable: true),
                    Format = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    isCmdLineSFTP = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    SFTPCmdLine = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SFTPScriptText = table.Column<string>(type: "varchar(4000)", unicode: false, maxLength: 4000, nullable: true),
                    processAcknowledgement = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    AdditionalParameters = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    isOutboundS3 = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    S3_AccessKey = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    S3_Bucket = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FileHeader = table.Column<string>(type: "varchar(4000)", unicode: false, maxLength: 4000, nullable: true),
                    SFTP_Password = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    SFTP_SSHKeyFileName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vendor_DFAttributes", x => x.VendorFolderID);
                });

            migrationBuilder.CreateTable(
                name: "Vendor_FaxList",
                columns: table => new
                {
                    Vendor_FaxListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(4,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vendor_FaxList", x => x.Vendor_FaxListID);
                });

            migrationBuilder.CreateTable(
                name: "Vendor_SMTPConfiguration",
                columns: table => new
                {
                    VendorSMTPConfigurationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FromEmailAddress = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    SearchString = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EmailSectionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Vendor_S__695FBBB7388165D1", x => x.VendorSMTPConfigurationID);
                });

            migrationBuilder.CreateTable(
                name: "Vendors",
                columns: table => new
                {
                    VendorID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorName = table.Column<string>(type: "varchar(110)", unicode: false, maxLength: 110, nullable: false),
                    VendorCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    VendorType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Unknown"),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Unknown"),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "UU"),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "00000"),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentVendorID = table.Column<int>(type: "int", nullable: true),
                    Email = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PharmacyNCPDPID = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vendors_1", x => x.VendorID);
                });

            migrationBuilder.CreateTable(
                name: "WhiteList",
                columns: table => new
                {
                    WhiteListTableID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WhiteListType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Value_1 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Value_2 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Value_3 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Value_4 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Value_5 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WhiteList", x => x.WhiteListTableID);
                });

            migrationBuilder.CreateTable(
                name: "WhiteListChannelType",
                columns: table => new
                {
                    WhiteListChannelTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WhiteListChannelType", x => x.WhiteListChannelTypeID);
                });

            migrationBuilder.CreateTable(
                name: "WhiteListEntity",
                columns: table => new
                {
                    WhiteListEntityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Sequence = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WhiteListEntity", x => x.WhiteListEntityID);
                });

            migrationBuilder.CreateTable(
                name: "WorkflowLookups",
                columns: table => new
                {
                    LookupID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    LookupName = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false, comment: "The lookup name"),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, comment: "The lookup description"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true, comment: "Active flag")
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Lookups_LookupID", x => x.LookupID);
                },
                comment: "Lookups");

            migrationBuilder.CreateTable(
                name: "WorkflowPAPTypeConfig",
                columns: table => new
                {
                    WorkflowPAPTypeConfigID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    WorkFlowID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PAPTypeItemID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DefaultPAPTypeItemID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LatUpdatedby = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "WorkflowProgramEmail",
                columns: table => new
                {
                    WorkflowProgramEmailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    WorkflowId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    WorkflowTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EmailSubject = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    WorkflowProgramEmailType = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CCList = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    BCCList = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    BodyText = table.Column<string>(type: "text", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkflowProgramEmail", x => x.WorkflowProgramEmailId);
                });

            migrationBuilder.CreateTable(
                name: "Zip_ToCaseManager",
                columns: table => new
                {
                    Zip_ToCaseManagerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ZIPCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    FullName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Lastupdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Lastupdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Zip_ToCaseManager", x => x.Zip_ToCaseManagerID);
                });

            migrationBuilder.CreateTable(
                name: "Zip_ToCaseManager_Stage",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TerritoryName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CMName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CMUsername = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    FileName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ZipCodes",
                columns: table => new
                {
                    ZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    County = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ZipCodes", x => new { x.ZipCode, x.County, x.City, x.State });
                });

            migrationBuilder.CreateTable(
                name: "zUsplusGeoFull",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ZIPCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    City = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    County = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Sequence = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PANCode = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Latitude = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Longitude = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    AreaCode = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    StateFIPS = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    CountyFIPS = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    PlaceFIPS = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    MSACode = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    TimeZone = table.Column<int>(type: "int", nullable: true),
                    DST = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    ZIPType = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "(suser_sname())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_zUsplusGeoFull", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "zUszcGeoFull",
                columns: table => new
                {
                    ZIPCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    City = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    County = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Latitude = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    Longitude = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true),
                    AreaCode = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    StateFIPS = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    CountyFIPS = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    PlaceFIPS = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    MSACode = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: true),
                    TimeZone = table.Column<int>(type: "int", nullable: true),
                    DST = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    ZIPType = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "aspnet_Paths",
                columns: table => new
                {
                    PathId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Path = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    LoweredPath = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_P__CD67DC5847919582", x => x.PathId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK__aspnet_Pa__Appli__4979DDF4",
                        column: x => x.ApplicationId,
                        principalTable: "aspnet_Applications",
                        principalColumn: "ApplicationId");
                });

            migrationBuilder.CreateTable(
                name: "aspnet_Roles",
                columns: table => new
                {
                    RoleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RoleName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    LoweredRoleName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_R__8AFACE1B30AE302A", x => x.RoleId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK__aspnet_Ro__Appli__3296789C",
                        column: x => x.ApplicationId,
                        principalTable: "aspnet_Applications",
                        principalColumn: "ApplicationId");
                });

            migrationBuilder.CreateTable(
                name: "aspnet_Users",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    LoweredUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    MobileAlias = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true, defaultValueSql: "(NULL)"),
                    IsAnonymous = table.Column<bool>(type: "bit", nullable: false),
                    LastActivityDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_U__1788CC4D7A521F79", x => x.UserId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK__aspnet_Us__Appli__7C3A67EB",
                        column: x => x.ApplicationId,
                        principalTable: "aspnet_Applications",
                        principalColumn: "ApplicationId");
                });

            migrationBuilder.CreateTable(
                name: "CaseRecordTransaction",
                columns: table => new
                {
                    CaseRecordTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CaseRecordID = table.Column<int>(type: "int", nullable: false),
                    CaseTransactionType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    CaseTransactionID = table.Column<int>(type: "int", nullable: false),
                    CaseTransactionState = table.Column<bool>(type: "bit", nullable: false),
                    CaseMileStone = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    CaseTransactionStatus = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    CaseFlowStep = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("DF_CaseRecordTransaction_N_TransactionID_PK", x => x.CaseRecordTransactionID);
                    table.ForeignKey(
                        name: "DF_CaseRecordTransaction_CaseRecordID_FK_N",
                        column: x => x.CaseRecordID,
                        principalTable: "CaseRecord",
                        principalColumn: "CaseRecordID");
                });

            migrationBuilder.CreateTable(
                name: "CF_IssueSubType",
                columns: table => new
                {
                    CF_IssueSubTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CF_IssueTypeID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    IssueSubTypeShortDesc = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    IssueSubTypeFullDesc = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__CF_Issue__FD27DB90F6DC3F13", x => x.CF_IssueSubTypeID);
                    table.ForeignKey(
                        name: "FK_CFIssueSubType_CFIssueType",
                        column: x => x.CF_IssueTypeID,
                        principalTable: "CF_IssueType",
                        principalColumn: "CF_IssueTypeID");
                });

            migrationBuilder.CreateTable(
                name: "StatesList",
                columns: table => new
                {
                    StateID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Name = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    CountryID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_State", x => x.StateID);
                    table.ForeignKey(
                        name: "FK_StatesList_CountriesList",
                        column: x => x.CountryID,
                        principalTable: "CountriesList",
                        principalColumn: "CountryID");
                });

            migrationBuilder.CreateTable(
                name: "DocumentFieldList",
                columns: table => new
                {
                    DocumentFieldListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    Category = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Editable = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    DataSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LookUpDataListFunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FieldLength = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MinValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentFieldList", x => x.DocumentFieldListID);
                    table.ForeignKey(
                        name: "FK_DocumentFieldList_DocumentList",
                        column: x => x.DocumentListID,
                        principalTable: "DocumentList",
                        principalColumn: "DocumentListID");
                });

            migrationBuilder.CreateTable(
                name: "DocumentListLetter",
                columns: table => new
                {
                    DocumentListId = table.Column<int>(type: "int", nullable: false),
                    LetterNumber = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    Header = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Document__6E25082060B57663", x => x.DocumentListId);
                    table.ForeignKey(
                        name: "FK_DocumentListID_DocumentList",
                        column: x => x.DocumentListId,
                        principalTable: "DocumentList",
                        principalColumn: "DocumentListID");
                });

            migrationBuilder.CreateTable(
                name: "Documents_SrTypes",
                columns: table => new
                {
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    SrType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_SrTypes", x => new { x.DocumentListID, x.SrType });
                    table.ForeignKey(
                        name: "FK_Documents_SrTypes_DocumentList",
                        column: x => x.DocumentListID,
                        principalTable: "DocumentList",
                        principalColumn: "DocumentListID");
                });

            migrationBuilder.CreateTable(
                name: "Documents_TherapyDrugs",
                columns: table => new
                {
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    TherapyDrug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_TherapyDrugs_1", x => new { x.DocumentListID, x.TherapyDrug });
                    table.ForeignKey(
                        name: "FK_Documents_TherapyDrugs_DocumentList",
                        column: x => x.DocumentListID,
                        principalTable: "DocumentList",
                        principalColumn: "DocumentListID");
                });

            migrationBuilder.CreateTable(
                name: "Documents_DocTypes",
                columns: table => new
                {
                    Documents_DocTypesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    AttachmentDocumentID = table.Column<int>(type: "int", nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Reviewed = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReviewedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_DocTypes_Temp", x => x.Documents_DocTypesID);
                    table.ForeignKey(
                        name: "FK_Documents_DocTypes_DocumentList",
                        column: x => x.DocumentListID,
                        principalTable: "DocumentList",
                        principalColumn: "DocumentListID");
                    table.ForeignKey(
                        name: "FK_Documents_DocTypes_Documents",
                        column: x => x.DocumentID,
                        principalTable: "Documents",
                        principalColumn: "DocumentID");
                });

            migrationBuilder.CreateTable(
                name: "ConnectModularDocTransaction",
                columns: table => new
                {
                    ConnectModularDocTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SelectedDrugNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EBvModularTransactionID = table.Column<int>(type: "int", nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IsDocumentGenerated = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__ConnectM__DF49C1974CFC3802", x => x.ConnectModularDocTransactionID);
                    table.ForeignKey(
                        name: "FK__ConnectMo__Docum__417FEF88",
                        column: x => x.DocumentID,
                        principalTable: "Documents",
                        principalColumn: "DocumentID");
                    table.ForeignKey(
                        name: "FK__ConnectMo__EBvMo__408BCB4F",
                        column: x => x.EBvModularTransactionID,
                        principalTable: "eBvModularTransaction",
                        principalColumn: "eBvModularTransactionID");
                });

            migrationBuilder.CreateTable(
                name: "EntityMergeDetailsLog",
                columns: table => new
                {
                    EntityMergeDetailsLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntityMergeLogId = table.Column<int>(type: "int", nullable: false),
                    TableName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    KeyColumn = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    KeyColumnValue = table.Column<int>(type: "int", nullable: false),
                    ActionName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2(0)", precision: 0, nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    OriginalData = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__EntityMe__C6CDA825BDA42B45", x => x.EntityMergeDetailsLogID);
                    table.ForeignKey(
                        name: "FK__EntityMer__Entit__547131BD",
                        column: x => x.EntityMergeLogId,
                        principalTable: "EntityMergeLog",
                        principalColumn: "EntityMergeLogId");
                });

            migrationBuilder.CreateTable(
                name: "EPAP_Applications",
                columns: table => new
                {
                    ApplicationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    InvitationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The invitation id"),
                    ProgramID = table.Column<int>(type: "int", nullable: false, comment: "The program id"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, comment: "The created timestamp"),
                    ApplicationState = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The application state where the lookup is APPLICATION_STATES"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    ScreenName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Applications_application_id", x => x.ApplicationID);
                    table.ForeignKey(
                        name: "FK_EPapApplications_Invitations",
                        column: x => x.InvitationID,
                        principalTable: "EPAP_Invitations",
                        principalColumn: "InvitationID");
                },
                comment: "The ePap application");

            migrationBuilder.CreateTable(
                name: "FAQ_SRType",
                columns: table => new
                {
                    FAQ_SRTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaqListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestType = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK_FAQ_SRType_FAQList",
                        column: x => x.FaqListID,
                        principalTable: "FAQList",
                        principalColumn: "FaqListID");
                });

            migrationBuilder.CreateTable(
                name: "FAX_LOG_DETAILS",
                columns: table => new
                {
                    FLD_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FLD_FLS_ID = table.Column<int>(type: "int", nullable: false),
                    FLD_EASYLINK_JOBID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FLD_DOCUMENTS_INBOUNDFAXES_ID = table.Column<int>(type: "int", nullable: true),
                    FLD_DOCUMENTS_OUTBOUNDFAXES_ID = table.Column<int>(type: "int", nullable: true),
                    FLD_STATUS = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    FLD_SENT_DATE = table.Column<DateTime>(type: "datetime", nullable: true),
                    FLD_DELIVERY_CONFIRMATION_DATE = table.Column<DateTime>(type: "datetime", nullable: true),
                    FLD_RECORD_CREATED_DATE = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__FAX_LOG___84774207108B795B", x => x.FLD_ID);
                    table.ForeignKey(
                        name: "FLD_FLS_FK",
                        column: x => x.FLD_FLS_ID,
                        principalTable: "FAX_LOG_SUMMARY",
                        principalColumn: "FLS_ID");
                });

            migrationBuilder.CreateTable(
                name: "FundEnrollmentApplicationPatientSite",
                columns: table => new
                {
                    FundEnrollmentApplicationSiteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FundEnrollmentApplicationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneExtenstion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OriginalDistance = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.FundEnrollmentApplicationPatientSite", x => x.FundEnrollmentApplicationSiteID);
                    table.ForeignKey(
                        name: "FK_dbo.FundEnrollmentApplicationPatientSite_dbo.FundEnrollmentApplications_FundEnrollmentApplicationID",
                        column: x => x.FundEnrollmentApplicationID,
                        principalTable: "FundEnrollmentApplications",
                        principalColumn: "FundEnrollmentApplicationID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DocumentAttachments_DocTypes",
                columns: table => new
                {
                    Documents_DocTypesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    VersionNumber = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_DocTypes", x => x.Documents_DocTypesID);
                    table.ForeignKey(
                        name: "FK_DocumentAttachments_DocTypes_Documents",
                        column: x => x.DocumentID,
                        principalTable: "Documents",
                        principalColumn: "DocumentID");
                    table.ForeignKey(
                        name: "FK_DocumentAttachments_DocTypes_LookupDataList",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "DynamicDataByLookupData",
                columns: table => new
                {
                    DynamicDataByLookupDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Required = table.Column<bool>(type: "bit", nullable: false),
                    AllowNA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    ProgramFunction = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    FieldCode = table.Column<string>(type: "varchar(800)", unicode: false, maxLength: 800, nullable: true),
                    ApprovalCode = table.Column<string>(type: "varchar(800)", unicode: false, maxLength: 800, nullable: true),
                    AdditionalField = table.Column<string>(type: "varchar(800)", unicode: false, maxLength: 800, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_BridgeQuestionsByType", x => x.DynamicDataByLookupDataID);
                    table.ForeignKey(
                        name: "FK_DynamicDataByLookupData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_DynamicDataByLookupData_LookupDataList",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "PAN_DisenrollmentReversal",
                columns: table => new
                {
                    DisenrollmentReversalId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReversalReasonId = table.Column<int>(type: "int", nullable: true),
                    ReversalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGrantId = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: true),
                    PatientGrantDisenrollmentId = table.Column<int>(type: "int", nullable: true),
                    ReversalNotes = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    ContactedPAN = table.Column<bool>(type: "bit", nullable: true),
                    PANRequestedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ReversalDecision = table.Column<bool>(type: "bit", nullable: true),
                    PANFundRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANFundResponseDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANFundDecision = table.Column<bool>(type: "bit", nullable: true),
                    RequiredOverride = table.Column<bool>(type: "bit", nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: false),
                    ResultMessage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    SubmittedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FinalizedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateOnly>(type: "date", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAN_DisenrollmentReversal", x => x.DisenrollmentReversalId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_PAN_DisenrollmentReversal_StatusId",
                        column: x => x.StatusId,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "PAN_DisenrollmentReversal_temp",
                columns: table => new
                {
                    DisenrollmentReversalId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReversalReasonId = table.Column<int>(type: "int", nullable: true),
                    ReversalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PatientGrantId = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: true),
                    PatientGrantDisenrollmentId = table.Column<int>(type: "int", nullable: true),
                    ReversalNotes = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    ContactedPAN = table.Column<bool>(type: "bit", nullable: true),
                    PANRequestedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANReversalDecision = table.Column<bool>(type: "bit", nullable: true),
                    PANFundRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANFundResponseDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANFundDecision = table.Column<bool>(type: "bit", nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: false),
                    SubmittedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FinalizedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateOnly>(type: "date", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAN_DisenrollmentReversal_temp", x => x.DisenrollmentReversalId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_PAN_DisenrollmentReversal_StatusId_temp",
                        column: x => x.StatusId,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "Payers_PayerCategories",
                columns: table => new
                {
                    Payers_PayerCategoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayerID = table.Column<int>(type: "int", nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Payer_PayerCategories", x => x.Payers_PayerCategoryID);
                    table.ForeignKey(
                        name: "FK_Payer_PayerCategories_LookupDataListID",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "SR_PAPByTypeMapping",
                columns: table => new
                {
                    SR_PAPByTypeMappingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PAPTypeID = table.Column<int>(type: "int", nullable: false),
                    EligibilityQuestionID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Required = table.Column<bool>(type: "bit", nullable: false),
                    ProgramFunction = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    AllowNA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_PAPEligibilityQuestionsMappings.", x => x.SR_PAPByTypeMappingID);
                    table.ForeignKey(
                        name: "FK_SR_PAPEligibilityQuestionsMappings._DynamicDataList",
                        column: x => x.EligibilityQuestionID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_SR_PAPEligibilityQuestionsMappings._LookupDataList",
                        column: x => x.PAPTypeID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_LookupListItem",
                columns: table => new
                {
                    ListItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ListId = table.Column<int>(type: "int", nullable: false),
                    ItemCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ItemDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Visible = table.Column<bool>(type: "bit", nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_LookupListItem", x => x.ListItemId);
                    table.ForeignKey(
                        name: "FK_LTR_LookupListItem_LTR_LookupList_ListId",
                        column: x => x.ListId,
                        principalTable: "LTR_LookupList",
                        principalColumn: "ListId");
                });

            migrationBuilder.CreateTable(
                name: "DuplicatePatientQueue",
                columns: table => new
                {
                    DuplicatePatientQueueID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientSearchResultId = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AssignmentInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    Priority = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DuplicatePatientQueue", x => x.DuplicatePatientQueueID);
                    table.ForeignKey(
                        name: "fk_DuplicatePatientQueue_MDMPatientSearchResultId",
                        column: x => x.PatientSearchResultId,
                        principalTable: "MDMPatientSearchResult",
                        principalColumn: "MDMPatientSearchResultId");
                });

            migrationBuilder.CreateTable(
                name: "MDMPatientProcessResult",
                columns: table => new
                {
                    MDMPatientProcessResultId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientSearchResultId = table.Column<int>(type: "int", nullable: true),
                    MatchedPatientID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MDMPatientSearchResult_MDMPatientProcessResultId", x => x.MDMPatientProcessResultId);
                    table.ForeignKey(
                        name: "fk_MDMPatientProcessResult_PatientSearchResultId",
                        column: x => x.PatientSearchResultId,
                        principalTable: "MDMPatientSearchResult",
                        principalColumn: "MDMPatientSearchResultId");
                });

            migrationBuilder.CreateTable(
                name: "MedeBVOfframpCOBBlurbAdditionalRules",
                columns: table => new
                {
                    MedeBVOfframpCOBBlurbAdditionalRulesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MedeBVOfframpCOBBlurbRulesID = table.Column<int>(type: "int", nullable: false),
                    PayerType = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    ProductCoinsuranceApplies = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProductCoinsuranceAppliesMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    DeductibleAppliesMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CoversPARTBDeductible = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CoversPARTBDeductibleMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    OOPAppliesMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    SentenceEndMessage = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OVCopayApplies = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OVCopayAppliesMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    CopayContributestoOOPMax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CopayContributestoOOPMaxMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PayerTypeSpecificMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FollowsMedicareGuidelines = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FollowsMedicareGuidelineMessage = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeductibleApplies = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    OOPApplies = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedeBVOfframpCOBBlurbAdditionalRules", x => x.MedeBVOfframpCOBBlurbAdditionalRulesID);
                    table.ForeignKey(
                        name: "FK_MedeBVOfframpCOBBlurbAdditionalRules_MedeBVOfframpCOBBlurbRules",
                        column: x => x.MedeBVOfframpCOBBlurbRulesID,
                        principalTable: "MedeBVOfframpCOBBlurbRules",
                        principalColumn: "MedeBVOfframpCOBBlurbRulesID");
                });

            migrationBuilder.CreateTable(
                name: "APIResponseMessage",
                columns: table => new
                {
                    ResponseMessageId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DisplayText = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    MessageModuleId = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_APIResponseMessage", x => x.ResponseMessageId);
                    table.ForeignKey(
                        name: "FK_MessageModule_MessageModuleId",
                        column: x => x.MessageModuleId,
                        principalTable: "MessageModule",
                        principalColumn: "MessageModuleId");
                });

            migrationBuilder.CreateTable(
                name: "MessageThreads",
                columns: table => new
                {
                    ThreadID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    MessageTypeID = table.Column<int>(type: "int", nullable: false),
                    SendFromApplicationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SendToApplicationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SendFromUserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SendToUserID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Therapy = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    SenderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SenderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false, defaultValue: "O"),
                    LockedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignedTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignedToGroupID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastMessageDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    LastSendFromUserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    Archived = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Threads", x => x.ThreadID);
                    table.ForeignKey(
                        name: "FK_Threads_MessageTypes",
                        column: x => x.MessageTypeID,
                        principalTable: "MessageTypes",
                        principalColumn: "MessageTypeID");
                });

            migrationBuilder.CreateTable(
                name: "MobilePatientSurveyAnswerMaster",
                columns: table => new
                {
                    MobilePatientSurveyAnswerMasterID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MobileMasterSurveyID = table.Column<int>(type: "int", nullable: true),
                    SurveyDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobilePatientSurveyAnswerMaster", x => x.MobilePatientSurveyAnswerMasterID);
                    table.ForeignKey(
                        name: "FK_MobilePatientSurveyAnswerMaster_MobileMasterSurveys",
                        column: x => x.MobileMasterSurveyID,
                        principalTable: "MobileMasterSurveys",
                        principalColumn: "MobileMasterSurveyID");
                });

            migrationBuilder.CreateTable(
                name: "MobileRefillOrderItems",
                columns: table => new
                {
                    MobileRefillOrderItemID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MobileRefillOrderID = table.Column<int>(type: "int", nullable: false),
                    RxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RxProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RxProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileRefillOrderItems", x => x.MobileRefillOrderItemID);
                    table.ForeignKey(
                        name: "FK_MobileRefillOrderItems_MobileRefillOrders",
                        column: x => x.MobileRefillOrderID,
                        principalTable: "MobileRefillOrders",
                        principalColumn: "MobileRefillOrderID");
                });

            migrationBuilder.CreateTable(
                name: "MobileDrugSurveyElements",
                columns: table => new
                {
                    MobileDrugSurveyElementID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DrugNDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    Category = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MobileSurveyElementID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileDrugSurveyElements", x => x.MobileDrugSurveyElementID);
                    table.ForeignKey(
                        name: "FK_MobileDrugSurveyElements_MobileSurveyElements",
                        column: x => x.MobileSurveyElementID,
                        principalTable: "MobileSurveyElements",
                        principalColumn: "MobileSurveyElementID");
                });

            migrationBuilder.CreateTable(
                name: "MobileSurveySubElements",
                columns: table => new
                {
                    MobileSurveySubElementID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MobileSurveyElementID = table.Column<int>(type: "int", nullable: false),
                    SubElementType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Text"),
                    Text = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    AnswerChoiceLookup = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileSurveyAnswers", x => x.MobileSurveySubElementID);
                    table.ForeignKey(
                        name: "FK_MobileSurveyAnswers_MobileSurveyElements",
                        column: x => x.MobileSurveyElementID,
                        principalTable: "MobileSurveyElements",
                        principalColumn: "MobileSurveyElementID");
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyAddresses",
                columns: table => new
                {
                    NurseAgnecyAddressID = table.Column<int>(type: "int", nullable: false),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyAddresses", x => x.NurseAgnecyAddressID);
                    table.ForeignKey(
                        name: "FK_NurseAgencyAddresses_NurseAgencies",
                        column: x => x.NurseAgencyID,
                        principalTable: "NurseAgencies",
                        principalColumn: "NurseAgencyID");
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyCoveredCounties",
                columns: table => new
                {
                    NA_CoveredCountiesID = table.Column<int>(type: "int", nullable: false),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    CoveredCounty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CoveredCountyState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgency_CoveredCounties", x => x.NA_CoveredCountiesID);
                    table.ForeignKey(
                        name: "FK_NurseAgencyCoveredCounties_NurseAgencies",
                        column: x => x.NurseAgencyID,
                        principalTable: "NurseAgencies",
                        principalColumn: "NurseAgencyID");
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyNurses",
                columns: table => new
                {
                    NA_NurseID = table.Column<int>(type: "int", nullable: false),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    NurseFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    NurseLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    ActiveDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgency_Nurses", x => x.NA_NurseID);
                    table.ForeignKey(
                        name: "FK_NurseAgencyNurses_NurseAgencies",
                        column: x => x.NurseAgencyID,
                        principalTable: "NurseAgencies",
                        principalColumn: "NurseAgencyID");
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyAccreditations",
                columns: table => new
                {
                    NurseAgencyAccreditationID = table.Column<int>(type: "int", nullable: false),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    NA_AccreditationListID = table.Column<int>(type: "int", nullable: false),
                    ExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyAccreditations", x => x.NurseAgencyAccreditationID);
                    table.ForeignKey(
                        name: "FK_NurseAgencyAccreditations_NurseAgencies",
                        column: x => x.NurseAgencyID,
                        principalTable: "NurseAgencies",
                        principalColumn: "NurseAgencyID");
                    table.ForeignKey(
                        name: "FK_NurseAgencyAccreditations_NurseAgencyAccreditationList",
                        column: x => x.NA_AccreditationListID,
                        principalTable: "NurseAgencyAccreditationList",
                        principalColumn: "NA_AccreditationListID");
                });

            migrationBuilder.CreateTable(
                name: "NurseAgencyCertifications",
                columns: table => new
                {
                    NurseAgencyCertificationID = table.Column<int>(type: "int", nullable: false),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: false),
                    NA_CertificationListID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NurseAgencyCertifications", x => x.NurseAgencyCertificationID);
                    table.ForeignKey(
                        name: "FK_NurseAgencyCertifications_NurseAgencies",
                        column: x => x.NurseAgencyID,
                        principalTable: "NurseAgencies",
                        principalColumn: "NurseAgencyID");
                    table.ForeignKey(
                        name: "FK_NurseAgencyCertifications_NurseAgencyCertificationList",
                        column: x => x.NA_CertificationListID,
                        principalTable: "NurseAgencyCertificationList",
                        principalColumn: "NA_CertificationListID");
                });

            migrationBuilder.CreateTable(
                name: "ConnectPayerMap",
                columns: table => new
                {
                    ConnectPayerMapID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OfframpClientID = table.Column<int>(type: "int", nullable: false),
                    ClientPayerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    eBVPayerID = table.Column<int>(type: "int", nullable: true),
                    ConnectPayerID = table.Column<int>(type: "int", nullable: true),
                    ConnectDefaultPayer = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConnectPayerMap", x => x.ConnectPayerMapID);
                    table.ForeignKey(
                        name: "FK_ConnectPayerMap_OfframpClients",
                        column: x => x.OfframpClientID,
                        principalTable: "OfframpClients",
                        principalColumn: "OfframpClientID");
                });

            migrationBuilder.CreateTable(
                name: "OfframpCustomConnectInfo",
                columns: table => new
                {
                    OfframpCustomConnectInfoID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OfframpClientID = table.Column<int>(type: "int", nullable: false),
                    CustomConnectProgramID = table.Column<int>(type: "int", nullable: false),
                    SRTypeToCreate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SRSubTypeToCreate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OfframpCustomConnectInfo", x => x.OfframpCustomConnectInfoID);
                    table.ForeignKey(
                        name: "FK_OfframpCustomConnectInfo_OfframpClients",
                        column: x => x.OfframpClientID,
                        principalTable: "OfframpClients",
                        principalColumn: "OfframpClientID");
                });

            migrationBuilder.CreateTable(
                name: "OfframpExternalHubInfo",
                columns: table => new
                {
                    OfframpExternalHubInfoID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OfframpClientID = table.Column<int>(type: "int", nullable: false),
                    ExternalHubName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    BaseUrl = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    AuthEndpoint = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ProcessEndpoint = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ClientID = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ClientSecret = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    UserID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Password = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    DatafeedName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DatafeedFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    SFTPUrl = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    SFTPFolderName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SFTPUsername = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    SFTPPassword = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OfframpExternalHubInfo", x => x.OfframpExternalHubInfoID);
                    table.ForeignKey(
                        name: "FK_OfframpExternalHubInfo_OfframpClients",
                        column: x => x.OfframpClientID,
                        principalTable: "OfframpClients",
                        principalColumn: "OfframpClientID");
                });

            migrationBuilder.CreateTable(
                name: "PAN_ApplicationTokenRoles",
                columns: table => new
                {
                    ApplicationTokenID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ApplicationID = table.Column<int>(type: "int", nullable: false),
                    ClientID = table.Column<int>(type: "int", nullable: false),
                    TokenKey = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TokenSecret = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    RoleID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAN_ApplicationTokenRoles", x => x.ApplicationTokenID);
                    table.ForeignKey(
                        name: "FK_PAN_ApplicationTokenRoles_ApplicationID",
                        column: x => x.ApplicationID,
                        principalTable: "PAN_Applications",
                        principalColumn: "ApplicationID");
                    table.ForeignKey(
                        name: "FK_PAN_ApplicationTokenRoles_ClientID",
                        column: x => x.ClientID,
                        principalTable: "PAN_Applications",
                        principalColumn: "ApplicationID");
                    table.ForeignKey(
                        name: "FK_PAN_ApplicationTokenRoles_RoleID",
                        column: x => x.RoleID,
                        principalTable: "PAN_ApplicationRoles",
                        principalColumn: "RoleID");
                });

            migrationBuilder.CreateTable(
                name: "PatientDevices",
                columns: table => new
                {
                    PatientDeviceID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DeviceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Number = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Make = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Model = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    WirelessNetwork = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientDevices", x => x.PatientDeviceID);
                    table.ForeignKey(
                        name: "FK_PatientDevices_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "PatientDiagnosis",
                columns: table => new
                {
                    PatientDiagnosisID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    DiagnosisListID = table.Column<int>(type: "int", nullable: false),
                    DateofDiagnosis = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientDiagnosis", x => x.PatientDiagnosisID);
                    table.ForeignKey(
                        name: "FK_PatientDiagnosis_DiagnosisList",
                        column: x => x.DiagnosisListID,
                        principalTable: "DiagnosisList",
                        principalColumn: "DiagnosisListID");
                    table.ForeignKey(
                        name: "FK_PatientDiagnosis_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "PatientDynamicData",
                columns: table => new
                {
                    PatientDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EntityDynamicData", x => x.PatientDynamicDataID);
                    table.ForeignKey(
                        name: "FK_EntityDynamicData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_PatientDynamicData_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "PatientNotes",
                columns: table => new
                {
                    PatientNoteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientNotes", x => x.PatientNoteID);
                    table.ForeignKey(
                        name: "FK_PatientNotes_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "PatientSite",
                columns: table => new
                {
                    PatientSiteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneExtenstion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OriginalDistance = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PatientSite", x => x.PatientSiteID);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSite_dbo.Patients.PatientID",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SentAlertHistory",
                columns: table => new
                {
                    SentAlertHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AlertTypeID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    SentDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SentAlertHistory", x => x.SentAlertHistoryID);
                    table.ForeignKey(
                        name: "FK_SentAlertHistory_AlertTypes",
                        column: x => x.AlertTypeID,
                        principalTable: "AlertTypes",
                        principalColumn: "AlertTypeID");
                    table.ForeignKey(
                        name: "FK_SentAlertHistory_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "STMSPatientMedicationProfile",
                columns: table => new
                {
                    PatientMedicationProfileID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    MedicationIDs = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Medications = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    CDRIDs = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    ModifideDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_STMSPatientMedicationProfile", x => x.PatientMedicationProfileID);
                    table.ForeignKey(
                        name: "FK_STMSPatientMedicationProfile_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "PatientStatus",
                columns: table => new
                {
                    PatientStatusID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientStatusListID = table.Column<int>(type: "int", nullable: false),
                    StatusType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Hub"),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: false),
                    TransactionID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    RestatementFlag = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientStatus", x => x.PatientStatusID);
                    table.ForeignKey(
                        name: "FK_PatientStatus_PatientStatusList",
                        column: x => x.PatientStatusListID,
                        principalTable: "PatientStatusList",
                        principalColumn: "PatientStatusListID");
                    table.ForeignKey(
                        name: "FK_PatientStatus_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "PatientStatusNonHub",
                columns: table => new
                {
                    PatientStatusNonHubID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GlobalPatientID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientStatusListID = table.Column<int>(type: "int", nullable: false),
                    StatusType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "SP"),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SPID = table.Column<int>(type: "int", nullable: false),
                    SPPatientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TransactionID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AdditionalInfo = table.Column<string>(type: "xml", nullable: true),
                    CreatedFileName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientStatusNonHub", x => x.PatientStatusNonHubID);
                    table.ForeignKey(
                        name: "FK_PatientStatusNonHub_PatientStatusList",
                        column: x => x.PatientStatusListID,
                        principalTable: "PatientStatusList",
                        principalColumn: "PatientStatusListID");
                });

            migrationBuilder.CreateTable(
                name: "Addresses",
                columns: table => new
                {
                    AddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Instructions = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    AddressLine1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressLine2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AddressLine3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerDetailID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Addresses", x => x.AddressID);
                    table.ForeignKey(
                        name: "FK_Addresses_PayerDetails",
                        column: x => x.PayerDetailID,
                        principalTable: "PayerDetails",
                        principalColumn: "PayerDetailID");
                });

            migrationBuilder.CreateTable(
                name: "FaxNumbers",
                columns: table => new
                {
                    FaxNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaxType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Instructions = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    FaxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerDetailID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FaxNumbers", x => x.FaxNumberID);
                    table.ForeignKey(
                        name: "FK_FaxNumbers_PayerDetails",
                        column: x => x.PayerDetailID,
                        principalTable: "PayerDetails",
                        principalColumn: "PayerDetailID");
                });

            migrationBuilder.CreateTable(
                name: "PhoneNumbers",
                columns: table => new
                {
                    PhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Instructions = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActivatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerDetailID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhoneNumbers", x => x.PhoneNumberID);
                    table.ForeignKey(
                        name: "FK_PhoneNumbers_PayerDetails",
                        column: x => x.PayerDetailID,
                        principalTable: "PayerDetails",
                        principalColumn: "PayerDetailID");
                });

            migrationBuilder.CreateTable(
                name: "Insurances",
                columns: table => new
                {
                    InsuranceID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false, defaultValue: 10),
                    InsuranceBenefitPlanName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    BenefitPlanType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerID = table.Column<int>(type: "int", nullable: true),
                    BINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SoftwareVendorCertificationID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Insurance_Eligibility_Name = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Insurance_Eligibility_Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValueSql: "(getdate())"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalPayorID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalPBMID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    ProductType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BenefitType = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PayerTypeCode_1 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PlanTypeCode_2 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PlanTypeDetailCode_3 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PlanTypeDetailBreakdownCode_4 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    PlanTypeDetailBreakdownCode_5 = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PayerBenefitPlans", x => x.InsuranceID);
                    table.ForeignKey(
                        name: "FK_Insurances_Payers",
                        column: x => x.PayerID,
                        principalTable: "Payers",
                        principalColumn: "PayerID");
                });

            migrationBuilder.CreateTable(
                name: "PayerAddresses",
                columns: table => new
                {
                    PayerAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    PayerID = table.Column<int>(type: "int", nullable: true),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PayerAddresses", x => x.PayerAddressID);
                    table.ForeignKey(
                        name: "FK_PayerAddresses_Payers",
                        column: x => x.PayerID,
                        principalTable: "Payers",
                        principalColumn: "PayerID");
                });

            migrationBuilder.CreateTable(
                name: "Portal_Roster_Area_Mapping",
                columns: table => new
                {
                    Portal_Roster_Area_Mapping_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Portal_RosterID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    AreaCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AreaType = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Roster_Area_Mapping", x => x.Portal_Roster_Area_Mapping_ID);
                    table.ForeignKey(
                        name: "FK__Portal_Ro__Porta__36D37FD9",
                        column: x => x.Portal_RosterID,
                        principalTable: "Portal_Roster",
                        principalColumn: "Portal_RosterID");
                });

            migrationBuilder.CreateTable(
                name: "Portal_Roster_Relation",
                columns: table => new
                {
                    Portal_Roster_RelationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    FRM_Portal_RosterID = table.Column<int>(type: "int", nullable: false),
                    PAA_Portal_RosterID = table.Column<int>(type: "int", nullable: false),
                    PASName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PAMName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Roster_Relation", x => x.Portal_Roster_RelationID);
                    table.ForeignKey(
                        name: "FK__Portal_Ro__FRM_P__3D807D68",
                        column: x => x.FRM_Portal_RosterID,
                        principalTable: "Portal_Roster",
                        principalColumn: "Portal_RosterID");
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_tblFiles",
                columns: table => new
                {
                    iFileID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    FileSize = table.Column<long>(type: "bigint", nullable: true),
                    FileData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    ContentType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Portal_Staging_HCP_SRRequestID = table.Column<int>(type: "int", nullable: true),
                    CreatedTime = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Portal_Staging_tblFiles", x => x.iFileID);
                    table.ForeignKey(
                        name: "FK_Table_1_Tabl",
                        column: x => x.Portal_Staging_HCP_SRRequestID,
                        principalTable: "Portal_Staging_HCP_SR",
                        principalColumn: "RequestID");
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_Registration_Addresses",
                columns: table => new
                {
                    RegistrationRecordAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Address1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    RegistrationRecordID = table.Column<int>(type: "int", nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IsOrganizationAddress = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Portal_S__F5325311760E23F7", x => x.RegistrationRecordAddressID);
                    table.ForeignKey(
                        name: "FK_RegistrationRecordId_PortalStaging",
                        column: x => x.RegistrationRecordID,
                        principalTable: "Portal_Staging_Registration",
                        principalColumn: "RegistratoinRecordID");
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_Registration_Entity",
                columns: table => new
                {
                    RegistrationRecordEntityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RegistrationRecordID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TaxID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PTAN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    HubPhysicianID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    DEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Degree = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Password = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StagingStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone_Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BestTimeToContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PreferredCommunicationMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StateLicenseNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LicensingState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    HIN = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Portal_S__A04536DD7AD2D914", x => x.RegistrationRecordEntityID);
                    table.ForeignKey(
                        name: "FK__Portal_St__Regis__7CBB2186",
                        column: x => x.RegistrationRecordID,
                        principalTable: "Portal_Staging_Registration",
                        principalColumn: "RegistratoinRecordID");
                });

            migrationBuilder.CreateTable(
                name: "eServicesConfigList",
                columns: table => new
                {
                    eServicesConfigListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PortalFunctionListID = table.Column<int>(type: "int", nullable: false),
                    UsingApplication = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ConfigName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ConfigValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eServicesConfigList", x => x.eServicesConfigListID);
                    table.ForeignKey(
                        name: "FK_eServicesConfigList_PortalFunctionList",
                        column: x => x.PortalFunctionListID,
                        principalTable: "PortalFunctionList",
                        principalColumn: "PortalFunctionListID");
                });

            migrationBuilder.CreateTable(
                name: "ProgramPortalType",
                columns: table => new
                {
                    ProgramPortalTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PortalTypeID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramPortalType", x => x.ProgramPortalTypeID);
                    table.ForeignKey(
                        name: "FK_ProgramPortalType_PortalType1",
                        column: x => x.PortalTypeID,
                        principalTable: "PortalType",
                        principalColumn: "PortalTypeID");
                });

            migrationBuilder.CreateTable(
                name: "PatientPrescription",
                columns: table => new
                {
                    PatientPrescriptionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrescriptionID = table.Column<int>(type: "int", nullable: false),
                    ExternalPrescriptionID = table.Column<long>(type: "bigint", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__PatientP__6AB6BE9BD561D7D0", x => x.PatientPrescriptionID);
                    table.ForeignKey(
                        name: "FK__PatientPr__Presc__53C8BCF5",
                        column: x => x.PrescriptionID,
                        principalTable: "Prescription",
                        principalColumn: "PrescriptionID");
                });

            migrationBuilder.CreateTable(
                name: "PrescriptionEligibility",
                columns: table => new
                {
                    PrescriptionEligibilityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrescriptionID = table.Column<int>(type: "int", nullable: true),
                    PayerName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    BIN = table.Column<string>(type: "char(6)", unicode: false, fixedLength: true, maxLength: 6, nullable: true),
                    PCN = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true),
                    GroupID = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    CardholderID = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    PersonCode = table.Column<string>(type: "char(3)", unicode: false, fixedLength: true, maxLength: 3, nullable: true),
                    HelpDeskPhone = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    MedicareFlag = table.Column<bool>(type: "bit", nullable: false),
                    BenefitPlanId = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    EffectiveDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TerminationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSLevel = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true),
                    FormularyID = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true),
                    FutureEffectiveDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FutureTerminationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSEffectDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSTermDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LICSPlan = table.Column<string>(type: "char(4)", unicode: false, fixedLength: true, maxLength: 4, nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    CarrierName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PayerExternalID = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ProcessorIdentificationNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    MutuallyDefined = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PayerResponsibilityCode = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    PatientRelationship = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    Consent = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: true),
                    PBMExternalMemberID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ServiceTypeCoded = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PayerType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Prescrip__B724A2D78FC12491", x => x.PrescriptionEligibilityID);
                    table.ForeignKey(
                        name: "FK__Prescript__Presc__4491665D",
                        column: x => x.PrescriptionID,
                        principalTable: "Prescription",
                        principalColumn: "PrescriptionID");
                });

            migrationBuilder.CreateTable(
                name: "PrescriptionPharmacy",
                columns: table => new
                {
                    PrescriptionPharmacyID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrescriptionID = table.Column<int>(type: "int", nullable: false),
                    StoreName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NCPDP = table.Column<string>(type: "char(10)", unicode: false, fixedLength: true, maxLength: 10, nullable: true),
                    NPI = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Addressline1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Addressline2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    State = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    Fax = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Prescrip__6323F1C9FE9E55BF", x => x.PrescriptionPharmacyID);
                    table.ForeignKey(
                        name: "FK__Prescript__Presc__4B3376F4",
                        column: x => x.PrescriptionID,
                        principalTable: "Prescription",
                        principalColumn: "PrescriptionID");
                });

            migrationBuilder.CreateTable(
                name: "PrescriptionProvider",
                columns: table => new
                {
                    PrescriptionProviderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrescriptionID = table.Column<int>(type: "int", nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ClinicName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AddressLine1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AddressLine2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    State = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    Fax = table.Column<string>(type: "varchar(21)", unicode: false, maxLength: 21, nullable: true),
                    Email = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    DEA = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    NPI = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    IsSupervisingPrescriberinfo = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MedicareID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    MedicaidID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    StateLicenseNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Prescrip__13BDE1C8C2753988", x => x.PrescriptionProviderID);
                    table.ForeignKey(
                        name: "FK__Prescript__Presc__4F0407D8",
                        column: x => x.PrescriptionID,
                        principalTable: "Prescription",
                        principalColumn: "PrescriptionID");
                });

            migrationBuilder.CreateTable(
                name: "ProductRequestedOrderDetail",
                columns: table => new
                {
                    ProductRequestedOrderDetailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductRequestedOrderID = table.Column<int>(type: "int", nullable: false),
                    ProductName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Flavor = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ItemNumber = table.Column<long>(type: "bigint", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductRequestedOrderDetail", x => x.ProductRequestedOrderDetailID);
                    table.ForeignKey(
                        name: "FK__ProductRe__Produ__60620756",
                        column: x => x.ProductRequestedOrderID,
                        principalTable: "ProductRequestedOrder",
                        principalColumn: "ProductRequestedOrderID");
                });

            migrationBuilder.CreateTable(
                name: "Contacts",
                columns: table => new
                {
                    ContactID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Prefix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ContactType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MasterContactID = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ContactCategory = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contacts", x => x.ContactID);
                    table.ForeignKey(
                        name: "FK_Contacts_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "DashboardPanelPrograms",
                columns: table => new
                {
                    DashboardPaneProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DashboardPanelListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Position = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    PanelType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AccountType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NewUserDefault = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    AuthRefreshDefault = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    BlockFrom = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DashboardPanelPrograms", x => x.DashboardPaneProgramID);
                    table.ForeignKey(
                        name: "FK_DashboardPanelPrograms_DashboardPanelList",
                        column: x => x.DashboardPanelListID,
                        principalTable: "DashboardPanelList",
                        principalColumn: "DashboardPanelListID");
                    table.ForeignKey(
                        name: "FK_DashboardPanelPrograms_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "DashboardPanelUserSettings",
                columns: table => new
                {
                    DashboardPanelUserSettingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DashboardPanelListID = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Position = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "L"),
                    SortOrder = table.Column<double>(type: "float", nullable: true, defaultValue: 1.0),
                    DefaultDisplayMode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Show"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    PanelType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "table"),
                    AutoRefresh = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Width = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Height = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DashboardPanelUserSettings", x => x.DashboardPanelUserSettingID);
                    table.ForeignKey(
                        name: "FK_DashboardPanelUserSettings_DashboardPanelList",
                        column: x => x.DashboardPanelListID,
                        principalTable: "DashboardPanelList",
                        principalColumn: "DashboardPanelListID");
                    table.ForeignKey(
                        name: "FK_DashboardPanelUserSettings_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "Documents_FaxQueues",
                columns: table => new
                {
                    Documents_FaxQueueID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaxQueueName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    FaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxPortal_URL = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FaxPortal_UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxPortal_Password = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DirectFax = table.Column<bool>(type: "bit", nullable: false),
                    EmailBox = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_FaxQueues", x => x.Documents_FaxQueueID);
                    table.ForeignKey(
                        name: "FK_Documents_FaxQueues_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "Organizations",
                columns: table => new
                {
                    OrganizationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    OrganizationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TaxID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title10 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Title10ExpDate = table.Column<DateOnly>(type: "date", nullable: true),
                    MasterOrgnizationID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    BAA_On_File = table.Column<bool>(type: "bit", nullable: true),
                    Date_BAA_Signed = table.Column<DateTime>(type: "datetime", nullable: true),
                    Date_BAA_Sent = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    OrganizationURL = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AccountableCareOrganization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    IndependentPracticeOrganization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HIN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Other_Identifier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaseManager = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OrganizationMethodContact = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredContactMethodID = table.Column<int>(type: "int", nullable: true),
                    HighTouch = table.Column<bool>(type: "bit", nullable: true),
                    HighTouchNote = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    W9OnFile = table.Column<bool>(type: "bit", nullable: true),
                    W9Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    SiteReadiness = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RegistrationStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    VIP = table.Column<bool>(type: "bit", nullable: true),
                    Label = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orgnizations", x => x.OrganizationID);
                    table.ForeignKey(
                        name: "FK_Organizations_Programs",
                        column: x => x.MDMProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "PatientAddresses",
                columns: table => new
                {
                    PatientAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false, defaultValue: 99),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Country = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true, defaultValue: "United States"),
                    Comments = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FedexAddressVerifiedFlg = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientAddresses", x => x.PatientAddressID);
                    table.ForeignKey(
                        name: "FK_PatientAddresses_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_PatientAddresses_Programs",
                        column: x => x.MDMProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "PatientPhoneNumbers",
                columns: table => new
                {
                    PatientPhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: false, defaultValue: 2),
                    OKtoLeaveMsg = table.Column<bool>(type: "bit", nullable: true),
                    PreferredTime = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Country = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true, defaultValue: "United States"),
                    CountryCallingCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true, defaultValueSql: "((1))"),
                    PreferredCallingRate = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OKtoSendTextMsg = table.Column<bool>(type: "bit", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientPhoneNumbers", x => x.PatientPhoneNumberID);
                    table.ForeignKey(
                        name: "FK_PatientPhoneNumbers_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_PatientPhoneNumbers_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "PatientStatusProgramList",
                columns: table => new
                {
                    ProgramPatientStatusListID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientStatusListID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(6,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramPatientStatusList", x => x.ProgramPatientStatusListID);
                    table.ForeignKey(
                        name: "FK_ProgramPatientStatusList_PatientStatusList",
                        column: x => x.PatientStatusListID,
                        principalTable: "PatientStatusList",
                        principalColumn: "PatientStatusListID");
                    table.ForeignKey(
                        name: "FK_ProgramPatientStatusList_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "Physicians",
                columns: table => new
                {
                    PhysicianID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Suffix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Prefix = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Title = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ProviderType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    NPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MasterPhysicianID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    BAA_On_File = table.Column<bool>(type: "bit", nullable: true),
                    Date_BAA_Signed = table.Column<DateTime>(type: "datetime", nullable: true),
                    Date_BAA_Sent = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedProgramID = table.Column<int>(type: "int", nullable: true),
                    LastUpdatedProgramID = table.Column<int>(type: "int", nullable: true),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CaseManager = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    W9OnFile = table.Column<bool>(type: "bit", nullable: true),
                    W9Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProviderMethodContact = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    HighTouch = table.Column<bool>(type: "bit", nullable: true),
                    HighTouchNote = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    Validation_Form_On_File = table.Column<bool>(type: "bit", nullable: true),
                    PA_Submission_Service = table.Column<bool>(type: "bit", nullable: true),
                    PreferredPharmacy = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Physicians", x => x.PhysicianID);
                    table.ForeignKey(
                        name: "FK_Physicians_Programs",
                        column: x => x.MDMProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "ProgramURLs",
                columns: table => new
                {
                    ProgramURLID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ApplicationName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    URLType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    URL = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PortalTypeDisplayText = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramURLs", x => x.ProgramURLID);
                    table.ForeignKey(
                        name: "FK_ProgramURLs_ProgramID",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "ProgramVendors",
                columns: table => new
                {
                    ProgramVendorID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    UserInRotation = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PAPTriage = table.Column<bool>(type: "bit", nullable: true),
                    isCopayCardVendor = table.Column<bool>(type: "bit", nullable: false),
                    SUSPTriage = table.Column<bool>(type: "bit", nullable: true),
                    ExternalSPID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DisplayName = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SRTypeSpecific = table.Column<bool>(type: "bit", nullable: true),
                    SPTriageUsingAPI = table.Column<bool>(type: "bit", nullable: true),
                    eBVPharmacyExcludeSP = table.Column<bool>(type: "bit", nullable: true),
                    TestClaimEnabled = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    EAPTriage = table.Column<bool>(type: "bit", nullable: true),
                    QuickStartTriage = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramSPs", x => x.ProgramVendorID);
                    table.ForeignKey(
                        name: "FK_ProgramTriageVendors_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "RxAdminDosesRules",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramId = table.Column<int>(type: "int", nullable: true),
                    AdminDose = table.Column<int>(type: "int", nullable: false),
                    DaysRule = table.Column<int>(type: "int", nullable: false),
                    Comments = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExpirationDoseInDays = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.ForeignKey(
                        name: "FK__RxAdminDo__Progr__2F65D18D",
                        column: x => x.ProgramId,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "UserAccessFunctionList",
                columns: table => new
                {
                    AccessFunctionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FunctionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Category = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessFunctionList", x => x.AccessFunctionID);
                    table.ForeignKey(
                        name: "FK_UserAccessFunctionList_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "UserRoleList",
                columns: table => new
                {
                    UserRoleID = table.Column<int>(type: "int", nullable: false),
                    Role = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserRoleList", x => x.UserRoleID);
                    table.ForeignKey(
                        name: "FK_UserRoleList_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "Reminders_Child",
                columns: table => new
                {
                    ChildReminderID = table.Column<decimal>(type: "numeric(18,0)", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReminderID = table.Column<int>(type: "int", nullable: false),
                    ReminderTime = table.Column<TimeOnly>(type: "time", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChildReminder", x => x.ChildReminderID);
                    table.ForeignKey(
                        name: "FK_ChildReminder_Reminders",
                        column: x => x.ReminderID,
                        principalTable: "Reminders",
                        principalColumn: "ReminderID");
                });

            migrationBuilder.CreateTable(
                name: "ReportParameters",
                columns: table => new
                {
                    ReportParamaterID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportListID = table.Column<int>(type: "int", nullable: true),
                    ParameterName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ParameterDataType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParameterDescription = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ParameterPrompt = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    ParameterDefault = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportParameters", x => x.ReportParamaterID);
                    table.ForeignKey(
                        name: "FK_ReportParameters_ReportList",
                        column: x => x.ReportListID,
                        principalTable: "ReportList",
                        principalColumn: "ReportListID");
                });

            migrationBuilder.CreateTable(
                name: "ReportPrograms",
                columns: table => new
                {
                    ReportProgramsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportPrograms", x => x.ReportProgramsID);
                    table.ForeignKey(
                        name: "FK_ReportPrograms_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_ReportPrograms_ReportList",
                        column: x => x.ReportListID,
                        principalTable: "ReportList",
                        principalColumn: "ReportListID");
                });

            migrationBuilder.CreateTable(
                name: "RuleTriggerActions",
                columns: table => new
                {
                    RuleTriggerActionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ActionName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RuleTriggerConditionID = table.Column<int>(type: "int", nullable: false),
                    ActionParameters = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RuleTriggerActions", x => x.RuleTriggerActionID);
                    table.ForeignKey(
                        name: "FK_RuleTriggerConditionID",
                        column: x => x.RuleTriggerConditionID,
                        principalTable: "RuleTriggerConditions",
                        principalColumn: "RuleTriggerConditionID");
                });

            migrationBuilder.CreateTable(
                name: "SR_AlternateCoveragePlans",
                columns: table => new
                {
                    CoverageResearchID = table.Column<int>(type: "int", nullable: false),
                    CoveragePlanID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InsuranceCompany = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsuranceParentCompany = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PlanType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    WebSite = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RXBenefits = table.Column<bool>(type: "bit", nullable: true),
                    Premium = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    Term = table.Column<int>(type: "int", nullable: true),
                    Deductible = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    OutOfPocket = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    DrugCap = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoveragePlanID", x => x.CoverageResearchID);
                    table.ForeignKey(
                        name: "FK_SR_AlternateCoveragePlans_CoverageResearchID",
                        column: x => x.CoverageResearchID,
                        principalTable: "SR_AlternateCoverageResearch",
                        principalColumn: "CoverageResearchID");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampData",
                columns: table => new
                {
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    ManualBvRequestId = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    MedEbvResponseId = table.Column<string>(type: "nvarchar(38)", maxLength: 38, nullable: true),
                    MedEbvResponseStatus = table.Column<string>(type: "nvarchar(38)", maxLength: 38, nullable: true),
                    MedEbvResponseTypeCode = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    MedEbvResponseTypeMessage = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CaseId = table.Column<int>(type: "int", nullable: true),
                    ExternalCaseId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalCaseId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalCaseId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientId = table.Column<int>(type: "int", nullable: true),
                    ExternalPatientId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalPatientId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalPatientId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientPrefix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientSuffix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientTitle = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientDob = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientGender = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PatientSsn = table.Column<string>(type: "nvarchar(11)", maxLength: 11, nullable: true),
                    PatientAddressLine1 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PatientAddressLine2 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PatientAddressLine3 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PatientCity = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PatientState = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PatientZipCode = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                    PatientCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PatientEmail = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    PatientMedicareId = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    PatientSubscriberId = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    ProviderId = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    ExternalProviderId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalProviderId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalProviderId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderMiddleName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPrefix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderSuffix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderTitle = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderNpi = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    ProviderTexId = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    ProviderSpecialty = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    ProviderEmail = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ProviderPracticeId = table.Column<int>(type: "int", nullable: true),
                    ProviderExternalPracticeId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderExternalPracticeId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderExternalPracticeId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeName = table.Column<string>(type: "nvarchar(55)", maxLength: 55, nullable: true),
                    ProviderPracticeLegalName = table.Column<string>(type: "nvarchar(55)", maxLength: 55, nullable: true),
                    ProviderPracticeNpi = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    ProviderPracticeAddressLine1 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderPracticeAddressLine2 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderPracticeAddressLine3 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderPracticeCity = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeState = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    ProviderPracticeZipCode = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                    ProviderPracticeCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderPracticeEmail = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ProviderPracticeWebsite = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ProviderPracticeFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPracticeMiddleName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPracticeLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPracticePrefix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPracticeSuffix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPracticeTitle = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProviderPracticePlaceOfService = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: true),
                    ProviderPracticePracticeOrganizationId = table.Column<int>(type: "int", nullable: true),
                    ProviderPracticeExternalOrganizationId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeExternalOrganizationId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeExternalOrganizationId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeExternalOrganizationName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeExternalOrganizationLegalName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeExternalOrganizationNPI = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeExternalOrganizationTaxId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeOrganizationAddressLine1 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderPracticeOrganizationAddressLine2 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderPracticeOrganizationAddressLine3 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProviderPracticeOrganizationCIty = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProviderPracticeOrganizationState = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    ProviderPracticeOrganizationZipCode = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                    ProviderPracticeOrganizationCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProviderPracticeOrganizationEmail = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ProviderPracticeOrganizationWebsite = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PracticeId = table.Column<int>(type: "int", nullable: true),
                    ExternalPracticeId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalPracticeId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExternalPracticeId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeName = table.Column<string>(type: "nvarchar(55)", maxLength: 55, nullable: true),
                    PracticeLegalName = table.Column<string>(type: "nvarchar(55)", maxLength: 55, nullable: true),
                    PracticeNpi = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PracticeAddressLine1 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PracticeAddressLine2 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PracticeAddressLine3 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PracticeCIty = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeState = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PracticeZipCode = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                    PracticeCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PracticeEmail = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PracticeWebsite = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PracticeFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticeMiddleName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticeLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticePrefix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticeSuffix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticeTitle = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticePlaceOfService = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: true),
                    PracticePracticeOrganizationId = table.Column<int>(type: "int", nullable: true),
                    PracticeExternalOrganizationId1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeExternalOrganizationId2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeExternalOrganizationId3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeOrganizationName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticeOrganizationLegalName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticeOrganizationNPI = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeOrganizationTaxId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeOrganizationAddressLine1 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PracticeOrganizationAddressLine2 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PracticeOrganizationAddressLine3 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PracticeOrganizationCIty = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeOrganizationState = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PracticeOrganizationZipCode = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                    PracticeOrganizationCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PracticeOrganizationEmail = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PracticeOrganizationWebsite = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MedicationProductName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MedicationNDC = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MedicationDaysSupply = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MedicationQuantity = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MedicationJCode = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MedicationManufactureName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CopayProgramReferral = table.Column<bool>(type: "bit", nullable: true),
                    AlternateCoverageReferral = table.Column<bool>(type: "bit", nullable: true),
                    NextScheduledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfService = table.Column<DateTime>(type: "datetime", nullable: true),
                    RequestingPartyDetailsApplicationName = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    RequestingPartyDetailsUserName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    RequestingPartyDetailsFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    RequestingPartyDetailsLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    RequestingPartyDetailsEmail = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    RequestingPartyDetailsPhone = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    RequestingPartyDetailsPhoneType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    RequestingPartyDetailsFax = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummarycoordinatedPlanBenefits = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CobSummaryDeductibleRemaining = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummaryProductAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummaryOfficeVisitAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummaryAdminAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CobSummarymedicareSupplementLetter = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OtherCoverageAvailable = table.Column<bool>(type: "bit", nullable: true),
                    OtherCoverageEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    OtherCoverageMemberID = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OtherCoverageName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OtherCoverageResultBenefitVerificationTransactionId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OtherCoverageResultbenefitVerificationTransactionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PolicyHighLevelInfoEligibilityStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PolicyHighLevelInfoEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PolicyHighLevelInfoPayerName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPayerType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPlanName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPlanType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoGroupNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoGroupName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCopayApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCoInsApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsPcpCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsSpecialistCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsCopayApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsCoInsApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsPcpCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsSpecialistCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailscoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleIndividualAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleIndividualAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleFamilyAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsdseductibleFamilyAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxIndividualAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxIndividualAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxFamilyAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxFamilyAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementspriorAuthorizationRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsisPriorAuthorizationOnFile = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsPriorAuthorizationEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugRequirementsPriorAuthorizationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugRequirementsPriorTherapyRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsTherapyRestrictionNotes = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsBuyBillPermitted = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsPredeterminationRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyAvailable = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OtherCoverageResultGovernmentPolicyType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    OtherCoverageResultGovernmentPlanDetected = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OtherCoverageResultPolicyMessageId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OtherCoverageResultMedicalPolicy = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ResponseDataElectronicBenefitVerificationReport = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ResponseDataelElectronicBenefitVerificationReportType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DataserviceRequested = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PolicyHighLevelInfoPayerId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ManualBvResponseId = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    TransactionRequestId = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    TransactionResponseId = table.Column<string>(type: "nvarchar(36)", maxLength: 36, nullable: true),
                    MedEbvOffRampStatus = table.Column<string>(type: "nvarchar(38)", maxLength: 38, nullable: true),
                    OtherCoverageResultPolicyMessageContent = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Message = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Result = table.Column<bool>(type: "bit", nullable: true),
                    DrugRequirementsPredeterminationAvailable = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PracticePhoneNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticePhoneExtension = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticePhoneType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeFaxNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeFaxType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PracticeFaxDoNotFax = table.Column<bool>(type: "bit", nullable: true),
                    DrugRequirementsPriorAuthorizationChannel = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsPriorAuthorizationNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    MedEbvResponseTypeCodeFinal = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    EscalationReason = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    SecondaryCoordinateBenefits = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryCoverPartBdeductible = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryfollowMedicareguidelines = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryCopayOOPMax = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SecondaryOfficeVisitCopayApply = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CallingTransactionId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CallingTransactionType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    OutcomeKey = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OutcomeKeyDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NonDuplicationCoverage = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataNew_SR_MedOffRampDataId", x => x.SR_MedOffRampDataId);
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataNew_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "SR_OffRampHistory",
                columns: table => new
                {
                    SR_OffRampHistoryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: true),
                    JSONResponse = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    DateSent = table.Column<DateTime>(type: "datetime", nullable: true),
                    SentBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResponseSentSuccessfully = table.Column<bool>(type: "bit", nullable: true),
                    ResponseMessage = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_OffRampHistory", x => x.SR_OffRampHistoryId);
                    table.ForeignKey(
                        name: "FK_SR_OffRampHistory_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "SR_RxOffRampData",
                columns: table => new
                {
                    SR_RxOffRampDataId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    ManualBvId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ResponseId = table.Column<int>(type: "int", nullable: true),
                    DispositionCode = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ActionRequired = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CaseId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    MBvPatientPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    MBvPatientPhoneNumberType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    RequestOrganization = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RequestUserId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    LocationId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    LocationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LocationMainPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    LocationNpi = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    LocationActive = table.Column<bool>(type: "bit", nullable: true),
                    LocationMainFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    LocationTaxId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeLocationId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    Location_Id = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    LocationAddress1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LocationAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LocationCity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LocationState = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LocationZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ServiceQuantity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ServiceDaysSupply = table.Column<int>(type: "int", nullable: true),
                    ServicePbmPhoneNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ServiceProductId = table.Column<int>(type: "int", nullable: true),
                    ServiceProductNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ServiceProductName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ServiceProductMethod = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ServiceProductDefaultDays = table.Column<int>(type: "int", nullable: true),
                    ServiceProductRequiresAdminCode = table.Column<bool>(type: "bit", nullable: true),
                    ServiceProductDefaultQuantity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientId = table.Column<int>(type: "int", nullable: true),
                    ExternalPatientId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    PatientDob = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true),
                    PatientSSN = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientMedicareId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    PatientZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ProviderId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    ProviderFirstName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    ProviderLastName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    ProviderState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ProviderNpi = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    ProviderTaxId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    ProviderFullNameNpi = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    ProviderProviderId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    ProviderActive = table.Column<bool>(type: "bit", nullable: true),
                    ProviderPracticeProviderId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    PracticeId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    PracticeName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeNpi = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PracticeLegalName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeMainPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PracticeActive = table.Column<bool>(type: "bit", nullable: true),
                    PracticeTaxId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeMainFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PracticeAddress1 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PracticeAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeCity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    PracticeZipCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PracticeOrganizationOrganizationId = table.Column<int>(type: "int", nullable: true),
                    PracticeOrganizationOrganizationName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PracticeOrganizationDefaultZoneId = table.Column<int>(type: "int", nullable: true),
                    PracticeOrganizationGroupExclusion = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserId = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    UserFirstName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    UserLastName = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    UserEmail = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    UserPhone = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    UserPhoneType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    UserFax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_RxOffRampData_SR_RxOffRampDataId", x => x.SR_RxOffRampDataId);
                    table.ForeignKey(
                        name: "FK_SR_RXOffRampData_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "DataConfiguration",
                columns: table => new
                {
                    DataConfigurationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DataDictionaryID = table.Column<int>(type: "int", nullable: false),
                    DynamicLookUpTableName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DynamicLookUpID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    ReferralField = table.Column<bool>(type: "bit", nullable: true),
                    RequiredforSRCreation = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    RequiredforSRClose = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(6,2)", nullable: true),
                    SR_MissingInfo = table.Column<bool>(type: "bit", nullable: true),
                    HideField = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DataConfiguration", x => x.DataConfigurationID);
                    table.ForeignKey(
                        name: "FK_DataConfiguration_DataDictionary1",
                        column: x => x.DataDictionaryID,
                        principalTable: "DataDictionary",
                        principalColumn: "DataDictionaryID");
                    table.ForeignKey(
                        name: "FK_DataConfiguration_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_DataConfiguration_SR_TypeList",
                        column: x => x.SR_TypeListID,
                        principalTable: "SR_TypeList",
                        principalColumn: "SR_TypeListID");
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeActivity",
                columns: table => new
                {
                    SR_TypeActivityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "mhu"),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TypeActivityList", x => x.SR_TypeActivityID);
                    table.ForeignKey(
                        name: "FK_SR_TypeActivity_SR_ActivityList",
                        column: x => x.SR_ActivityListID,
                        principalTable: "SR_ActivityList",
                        principalColumn: "SR_ActivityListID");
                    table.ForeignKey(
                        name: "FK_SR_TypeActivity_SR_TypeList",
                        column: x => x.SR_TypeListID,
                        principalTable: "SR_TypeList",
                        principalColumn: "SR_TypeListID");
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeConfig",
                columns: table => new
                {
                    SR_TypeConfigID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    FunctionName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EntityID = table.Column<int>(type: "int", nullable: false),
                    Value = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateOnly>(type: "date", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateOnly>(type: "date", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TypeConfig", x => x.SR_TypeConfigID);
                    table.ForeignKey(
                        name: "FK_Entity_ID_SRTypeConfig_EntityID",
                        column: x => x.EntityID,
                        principalTable: "Entity",
                        principalColumn: "EntityID");
                    table.ForeignKey(
                        name: "FK_SRTypeConfig_SR_TypeListID",
                        column: x => x.SR_TypeListID,
                        principalTable: "SR_TypeList",
                        principalColumn: "SR_TypeListID");
                });

            migrationBuilder.CreateTable(
                name: "SRHubStatus",
                columns: table => new
                {
                    SRHubStatusID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRHubStatusListID = table.Column<int>(type: "int", nullable: false),
                    StatusType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SRHubStatus", x => x.SRHubStatusID);
                    table.ForeignKey(
                        name: "FK_SRHubStatus_SRHubStatusList",
                        column: x => x.SRHubStatusListID,
                        principalTable: "SRHubStatusList",
                        principalColumn: "SRHubStatusListID");
                });

            migrationBuilder.CreateTable(
                name: "SRHubStatus_SRType_List",
                columns: table => new
                {
                    SRHubStatus_SRType_List_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRTypeShortDesc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRHubStatusListID = table.Column<int>(type: "int", nullable: false),
                    SortOrder = table.Column<decimal>(type: "decimal(6,2)", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramSRHubStatusList", x => x.SRHubStatus_SRType_List_ID);
                    table.ForeignKey(
                        name: "FK_ProgramSRHubStatusList_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_ProgramSRHubStatusList_SRHubStatusList",
                        column: x => x.SRHubStatusListID,
                        principalTable: "SRHubStatusList",
                        principalColumn: "SRHubStatusListID");
                });

            migrationBuilder.CreateTable(
                name: "SurveyCategories",
                columns: table => new
                {
                    SurveyCategoryID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SurveyMasterID = table.Column<int>(type: "int", nullable: true),
                    SurveyCategoryType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SurveyCategoryDescription = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Font = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Color = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Bold = table.Column<bool>(type: "bit", nullable: true),
                    PlaceHolder1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PlaceHolder2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PlaceHolder3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ValidateClass = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyCategories", x => x.SurveyCategoryID);
                    table.ForeignKey(
                        name: "FK_SurveyCategories_SurveyMaster",
                        column: x => x.SurveyMasterID,
                        principalTable: "SurveyMaster",
                        principalColumn: "SurveyMasterID");
                });

            migrationBuilder.CreateTable(
                name: "SurveyHistory",
                columns: table => new
                {
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SurveyMasterID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyHistory", x => x.SurveyHistoryID);
                    table.ForeignKey(
                        name: "FK_SurveyHistory_SurveyMaster",
                        column: x => x.SurveyMasterID,
                        principalTable: "SurveyMaster",
                        principalColumn: "SurveyMasterID");
                });

            migrationBuilder.CreateTable(
                name: "MedvantxInventoryUpdate",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    TriageRecordId = table.Column<int>(type: "int", nullable: true),
                    PharmacyId = table.Column<int>(type: "int", nullable: true),
                    Ndc = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicationName = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    Strength = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OnHandQuantity = table.Column<double>(type: "float", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    InsertDateTime = table.Column<DateTime>(type: "datetime2", nullable: true, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Medvantx__3214EC07D756E626", x => x.Id);
                    table.ForeignKey(
                        name: "FK__MedvantxI__Triag__689E4EE9",
                        column: x => x.TriageRecordId,
                        principalTable: "TriageRecords",
                        principalColumn: "TriageRecordID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_NotificationItems",
                columns: table => new
                {
                    NotificationItemID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DocumentListID = table.Column<int>(type: "int", nullable: false),
                    EmailTemplateID = table.Column<int>(type: "int", nullable: false),
                    EntityTypeID = table.Column<int>(type: "int", nullable: true),
                    EntityID = table.Column<int>(type: "int", nullable: true),
                    RecipientTypeID = table.Column<int>(type: "int", nullable: true),
                    RecipientID = table.Column<int>(type: "int", nullable: true),
                    JSONData = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PMCTypeID = table.Column<int>(type: "int", nullable: false),
                    PMC = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    OptedOut = table.Column<bool>(type: "bit", nullable: true),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: true),
                    NotificationContent = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    ReSend = table.Column<bool>(type: "bit", nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessStatusID = table.Column<int>(type: "int", nullable: true),
                    ParentNotificationItemID = table.Column<int>(type: "int", nullable: true),
                    TransmissionStatusID = table.Column<int>(type: "int", nullable: true),
                    Message = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    IsException = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Read = table.Column<bool>(type: "bit", nullable: false),
                    Source = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, defaultValue: "System")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_NotificationItems", x => x.NotificationItemID);
                    table.ForeignKey(
                        name: "FK_LTR_NotificationItems_DocumentList_DocumentListID",
                        column: x => x.DocumentListID,
                        principalTable: "DocumentList",
                        principalColumn: "DocumentListID");
                    table.ForeignKey(
                        name: "FK_LTR_NotificationItems_LTR_NotificationMaster_NotificationID",
                        column: x => x.NotificationID,
                        principalTable: "LTR_NotificationMaster",
                        principalColumn: "NotificationID");
                    table.ForeignKey(
                        name: "FK_LTR_NotificationItems_Trigger_Email_TemplateList_EmailTemplateID",
                        column: x => x.EmailTemplateID,
                        principalTable: "Trigger_EmailTemplate_List",
                        principalColumn: "Trigger_EmailTemplagte_ListID");
                });

            migrationBuilder.CreateTable(
                name: "Feedback_Configurations",
                columns: table => new
                {
                    FeedbackConfigurationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false),
                    ManagementUserGroupID = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUdpated = table.Column<DateTime>(type: "datetime", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Feedback_Configuration", x => x.FeedbackConfigurationID);
                    table.ForeignKey(
                        name: "FK_Feedback_Configuration_Programs_ProgramID",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_Feedback_Configuration_SR_ActivityList_SR_ActivityListID",
                        column: x => x.SR_ActivityListID,
                        principalTable: "SR_ActivityList",
                        principalColumn: "SR_ActivityListID");
                    table.ForeignKey(
                        name: "FK_Feedback_Configuration_SR_TypeList_SR_TypeListID",
                        column: x => x.SR_TypeListID,
                        principalTable: "SR_TypeList",
                        principalColumn: "SR_TypeListID");
                    table.ForeignKey(
                        name: "FK_Feedback_Configuration_UserGroup_ManagementUserGroupID",
                        column: x => x.ManagementUserGroupID,
                        principalTable: "UserGroup",
                        principalColumn: "UserGroupID");
                });

            migrationBuilder.CreateTable(
                name: "ValidationDefinition",
                columns: table => new
                {
                    ValidationDefinitionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ValidationTypeID = table.Column<byte>(type: "tinyint", nullable: false),
                    Code = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Description = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    RegularExpression = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    MinValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaxValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Format = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValidationDefinition", x => x.ValidationDefinitionID);
                    table.ForeignKey(
                        name: "FK_ValidationDefinition_ValidationType",
                        column: x => x.ValidationTypeID,
                        principalTable: "ValidationType",
                        principalColumn: "ValidationTypeID");
                });

            migrationBuilder.CreateTable(
                name: "OnsitePharmacies",
                columns: table => new
                {
                    OnsitePharmaciesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PharmacyNotAssigned = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Zip = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Telephone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TelephoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentOrganizationName = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    VendorID = table.Column<int>(type: "int", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Updated = table.Column<DateTime>(type: "datetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OnsitePharmacies", x => x.OnsitePharmaciesID);
                    table.ForeignKey(
                        name: "FK_OnsitePharmacies_Vendors",
                        column: x => x.VendorID,
                        principalTable: "Vendors",
                        principalColumn: "VendorID");
                });

            migrationBuilder.CreateTable(
                name: "WhiteListEntitySettings",
                columns: table => new
                {
                    WhiteListEntitySettingsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WhiteListEntityID = table.Column<int>(type: "int", nullable: false),
                    WhiteListItemID = table.Column<int>(type: "int", nullable: false),
                    WhiteListChannelTypeID = table.Column<int>(type: "int", nullable: false),
                    Value = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WhiteListEntitySettings", x => x.WhiteListEntitySettingsID);
                    table.ForeignKey(
                        name: "FK_WhiteListChannelType",
                        column: x => x.WhiteListChannelTypeID,
                        principalTable: "WhiteListChannelType",
                        principalColumn: "WhiteListChannelTypeID");
                    table.ForeignKey(
                        name: "FK_WhiteListEntity",
                        column: x => x.WhiteListEntityID,
                        principalTable: "WhiteListEntity",
                        principalColumn: "WhiteListEntityID");
                });

            migrationBuilder.CreateTable(
                name: "WorkflowLookupItems",
                columns: table => new
                {
                    LookupItemID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    LookupID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The parent lookup id"),
                    LookupValue = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false, comment: "The lookup value"),
                    LookupDisplay = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false, comment: "The lookup display value"),
                    Sequence = table.Column<short>(type: "smallint", nullable: true, comment: "The lookup display sequence"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true, comment: "Active flag"),
                    LookupItemTag = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    LookupDataListID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_LookupItems_LookupItemID", x => x.LookupItemID);
                    table.ForeignKey(
                        name: "FK_WorkflowLookupItems_WorkflowLookups",
                        column: x => x.LookupID,
                        principalTable: "WorkflowLookups",
                        principalColumn: "LookupID");
                },
                comment: "Lookup items");

            migrationBuilder.CreateTable(
                name: "aspnet_PersonalizationAllUsers",
                columns: table => new
                {
                    PathId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PageSettings = table.Column<byte[]>(type: "image", nullable: false),
                    LastUpdatedDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_P__CD67DC594F32B74A", x => x.PathId);
                    table.ForeignKey(
                        name: "FK__aspnet_Pe__PathI__511AFFBC",
                        column: x => x.PathId,
                        principalTable: "aspnet_Paths",
                        principalColumn: "PathId");
                });

            migrationBuilder.CreateTable(
                name: "aspnet_Membership",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ApplicationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    PasswordFormat = table.Column<int>(type: "int", nullable: false),
                    PasswordSalt = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    MobilePIN = table.Column<string>(type: "nvarchar(16)", maxLength: 16, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    LoweredEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    PasswordQuestion = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    PasswordAnswer = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    IsApproved = table.Column<bool>(type: "bit", nullable: false),
                    IsLockedOut = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    LastLoginDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    LastPasswordChangedDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    LastLockoutDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    FailedPasswordAttemptCount = table.Column<int>(type: "int", nullable: false),
                    FailedPasswordAttemptWindowStart = table.Column<DateTime>(type: "datetime", nullable: false),
                    FailedPasswordAnswerAttemptCount = table.Column<int>(type: "int", nullable: false),
                    FailedPasswordAnswerAttemptWindowStart = table.Column<DateTime>(type: "datetime", nullable: false),
                    Comment = table.Column<string>(type: "ntext", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_M__1788CC4D0E591826", x => x.UserId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK__aspnet_Me__Appli__10416098",
                        column: x => x.ApplicationId,
                        principalTable: "aspnet_Applications",
                        principalColumn: "ApplicationId");
                    table.ForeignKey(
                        name: "FK__aspnet_Me__UserI__113584D1",
                        column: x => x.UserId,
                        principalTable: "aspnet_Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "aspnet_PersonalizationPerUser",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    PathId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PageSettings = table.Column<byte[]>(type: "image", nullable: false),
                    LastUpdatedDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_P__3214EC0653F76C67", x => x.Id)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK__aspnet_Pe__PathI__56D3D912",
                        column: x => x.PathId,
                        principalTable: "aspnet_Paths",
                        principalColumn: "PathId");
                    table.ForeignKey(
                        name: "FK__aspnet_Pe__UserI__57C7FD4B",
                        column: x => x.UserId,
                        principalTable: "aspnet_Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "aspnet_Profile",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PropertyNames = table.Column<string>(type: "ntext", nullable: false),
                    PropertyValuesString = table.Column<string>(type: "ntext", nullable: false),
                    PropertyValuesBinary = table.Column<byte[]>(type: "image", nullable: false),
                    LastUpdatedDate = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_P__1788CC4C253C7D7E", x => x.UserId);
                    table.ForeignKey(
                        name: "FK__aspnet_Pr__UserI__2724C5F0",
                        column: x => x.UserId,
                        principalTable: "aspnet_Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "aspnet_UsersInRoles",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RoleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__aspnet_U__AF2760AD36670980", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK__aspnet_Us__RoleI__3943762B",
                        column: x => x.RoleId,
                        principalTable: "aspnet_Roles",
                        principalColumn: "RoleId");
                    table.ForeignKey(
                        name: "FK__aspnet_Us__UserI__384F51F2",
                        column: x => x.UserId,
                        principalTable: "aspnet_Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "UserInformation",
                columns: table => new
                {
                    UserInformationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TimeZone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AccountTypeLookupDataListID = table.Column<int>(type: "int", nullable: true),
                    RptExtract = table.Column<bool>(type: "bit", nullable: false, defaultValue: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserInformation", x => x.UserInformationID);
                    table.ForeignKey(
                        name: "FK_UserInformation_aspnet_Users",
                        column: x => x.UserID,
                        principalTable: "aspnet_Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "Document_Fields",
                columns: table => new
                {
                    Document_FieldsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Document_DocTypeID = table.Column<int>(type: "int", nullable: false),
                    DocumentFieldListID = table.Column<int>(type: "int", nullable: false),
                    DataValue = table.Column<string>(type: "varchar(5000)", unicode: false, maxLength: 5000, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Document_Fields", x => x.Document_FieldsID);
                    table.ForeignKey(
                        name: "FK_Document_Fields_DocumentFieldList",
                        column: x => x.DocumentFieldListID,
                        principalTable: "DocumentFieldList",
                        principalColumn: "DocumentFieldListID");
                    table.ForeignKey(
                        name: "FK_Document_Fields_Documents_DocTypes",
                        column: x => x.Document_DocTypeID,
                        principalTable: "Documents_DocTypes",
                        principalColumn: "Documents_DocTypesID");
                });

            migrationBuilder.CreateTable(
                name: "FAX_LOG_EXCEPTIONS",
                columns: table => new
                {
                    FLE_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FLE_FLS_ID = table.Column<int>(type: "int", nullable: true),
                    FLE_FLD_ID = table.Column<int>(type: "int", nullable: true),
                    FLE_ERROR_MESSAGE_TEXT = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    FLE_STACK_TRACE_TEXT = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    FLE_CREATED_DATE = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__FAX_LOG___ADE5768D15502E78", x => x.FLE_ID);
                    table.ForeignKey(
                        name: "FK_FAX_LOG_EXCEPTIONS_FAX_LOG_DETAILS",
                        column: x => x.FLE_FLD_ID,
                        principalTable: "FAX_LOG_DETAILS",
                        principalColumn: "FLD_ID");
                    table.ForeignKey(
                        name: "FLE_FLS_FK",
                        column: x => x.FLE_FLS_ID,
                        principalTable: "FAX_LOG_SUMMARY",
                        principalColumn: "FLS_ID");
                });

            migrationBuilder.CreateTable(
                name: "MessageThreadReaders",
                columns: table => new
                {
                    MessageThreadReaderID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ThreadID = table.Column<int>(type: "int", nullable: false),
                    UserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReadDateTime = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageThreadReaders", x => x.MessageThreadReaderID);
                    table.ForeignKey(
                        name: "FK_MessageThreadReaders_MessageThreads",
                        column: x => x.ThreadID,
                        principalTable: "MessageThreads",
                        principalColumn: "ThreadID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MobilePatientSurveyAnswers",
                columns: table => new
                {
                    MobilePatientSurveyAnswerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    MobilePatientSurveyAnswerMasterID = table.Column<int>(type: "int", nullable: false),
                    MobileDrugSurveyElementID = table.Column<int>(type: "int", nullable: false),
                    MobileSurveySubElementID = table.Column<int>(type: "int", nullable: false),
                    AnswerText = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobilePatientSurveyAnswers", x => x.MobilePatientSurveyAnswerID);
                    table.ForeignKey(
                        name: "FK_MobilePatientSurveyAnswers_MobileDrugSurveyElements",
                        column: x => x.MobileDrugSurveyElementID,
                        principalTable: "MobileDrugSurveyElements",
                        principalColumn: "MobileDrugSurveyElementID");
                    table.ForeignKey(
                        name: "FK_MobilePatientSurveyAnswers_MobilePatientSurveyAnswerMaster",
                        column: x => x.MobilePatientSurveyAnswerMasterID,
                        principalTable: "MobilePatientSurveyAnswerMaster",
                        principalColumn: "MobilePatientSurveyAnswerMasterID");
                    table.ForeignKey(
                        name: "FK_MobilePatientSurveyAnswers_MobileSurveyAnswers",
                        column: x => x.MobileSurveySubElementID,
                        principalTable: "MobileSurveySubElements",
                        principalColumn: "MobileSurveySubElementID");
                });

            migrationBuilder.CreateTable(
                name: "InsuranceAddresses",
                columns: table => new
                {
                    InsuranceAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    InsuranceID = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InsuranceAddresses", x => x.InsuranceAddressID);
                    table.ForeignKey(
                        name: "FK_InsuranceAddresses_Insurances",
                        column: x => x.InsuranceID,
                        principalTable: "Insurances",
                        principalColumn: "InsuranceID");
                });

            migrationBuilder.CreateTable(
                name: "InsuranceDynamicData",
                columns: table => new
                {
                    InsuranceDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InsuranceID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InsuranceDynamicData", x => x.InsuranceDynamicDataID);
                    table.ForeignKey(
                        name: "FK_InsuranceDynamicData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_InsuranceDynamicData_Patients",
                        column: x => x.InsuranceID,
                        principalTable: "Insurances",
                        principalColumn: "InsuranceID");
                });

            migrationBuilder.CreateTable(
                name: "InsuranceNotes",
                columns: table => new
                {
                    InsuranceNoteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InsuranceID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InsuranceNotes", x => x.InsuranceNoteID);
                    table.ForeignKey(
                        name: "FK_InsuranceNotes_Insurances",
                        column: x => x.InsuranceID,
                        principalTable: "Insurances",
                        principalColumn: "InsuranceID");
                });

            migrationBuilder.CreateTable(
                name: "InsurancePhoneNumbers",
                columns: table => new
                {
                    InsurancePhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InsuranceID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InsurancePhoneNumbers", x => x.InsurancePhoneNumberID);
                    table.ForeignKey(
                        name: "FK_InsurancePhoneNumbers_Insurances",
                        column: x => x.InsuranceID,
                        principalTable: "Insurances",
                        principalColumn: "InsuranceID");
                });

            migrationBuilder.CreateTable(
                name: "PatientInsurance",
                columns: table => new
                {
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    InsuranceType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    MedicalInsuranceID = table.Column<int>(type: "int", nullable: true),
                    PharmacyInsuranceID = table.Column<int>(type: "int", nullable: true),
                    SubscriberID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubscriberID_PBM = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BINNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EmployerName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    EmployerAddress = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    CardHolder = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CH_SSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CH_DOB = table.Column<DateOnly>(type: "date", nullable: true),
                    CH_Phone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CH_Cell = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CH_Email = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Relationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Comments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MedicalGroup = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalPayorID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalPBMID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsurancePhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PBMInsurancePhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InsurancePayerID = table.Column<int>(type: "int", nullable: true),
                    PBMCategory = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PayerPlanTypeLookupID = table.Column<int>(type: "int", nullable: true),
                    TruePharmacyInsuranceID = table.Column<int>(type: "int", nullable: true),
                    InsuranceEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    InsuranceEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    IsMedicalSupplementPlan = table.Column<bool>(type: "bit", nullable: true),
                    MedicalSupplementPlanLetter = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    RxEBVControlNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RxCoverageJsonData = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    eBvModularTransactionID = table.Column<int>(type: "int", nullable: true),
                    EligibityDrugName = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientInsurance", x => x.PatientInsuranceID);
                    table.ForeignKey(
                        name: "FK_PatientInsurance_Insurances",
                        column: x => x.MedicalInsuranceID,
                        principalTable: "Insurances",
                        principalColumn: "InsuranceID");
                    table.ForeignKey(
                        name: "FK_PatientInsurance_Insurances2",
                        column: x => x.PharmacyInsuranceID,
                        principalTable: "Insurances",
                        principalColumn: "InsuranceID");
                    table.ForeignKey(
                        name: "FK_PatientInsurance_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "Portal_Staging_Registration_Addr_Entity_Mapping",
                columns: table => new
                {
                    RegistrationRecordMappingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    RegistrationRecordAddressID = table.Column<int>(type: "int", nullable: false),
                    RegistrationRecordEntityID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Portal_S__E4B76BF860DDFCE7", x => x.RegistrationRecordMappingID);
                    table.ForeignKey(
                        name: "FK__Portal_St__Regis__5E01903C",
                        column: x => x.RegistrationRecordAddressID,
                        principalTable: "Portal_Staging_Registration_Addresses",
                        principalColumn: "RegistrationRecordAddressID");
                    table.ForeignKey(
                        name: "FK__Portal_St__Regis__5EF5B475",
                        column: x => x.RegistrationRecordEntityID,
                        principalTable: "Portal_Staging_Registration_Entity",
                        principalColumn: "RegistrationRecordEntityID");
                });

            migrationBuilder.CreateTable(
                name: "eServicesProgramConfig",
                columns: table => new
                {
                    eServicesProgramConfigID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    eServicesConfigListID = table.Column<int>(type: "int", nullable: false),
                    ConfigValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eServicesProgramConfig", x => x.eServicesProgramConfigID);
                    table.ForeignKey(
                        name: "FK_eServicesProgramConfig_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_eServicesProgramConfig_eServicesConfigList",
                        column: x => x.eServicesConfigListID,
                        principalTable: "eServicesConfigList",
                        principalColumn: "eServicesConfigListID");
                });

            migrationBuilder.CreateTable(
                name: "PortalFunctions",
                columns: table => new
                {
                    PortalFunctionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramPortalTypeID = table.Column<int>(type: "int", nullable: false),
                    PortalFunctionListID = table.Column<int>(type: "int", nullable: false),
                    Comments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ActivatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortalFunctions", x => x.PortalFunctionID);
                    table.ForeignKey(
                        name: "FK_PortalFunctions_PortalFunctionList",
                        column: x => x.PortalFunctionListID,
                        principalTable: "PortalFunctionList",
                        principalColumn: "PortalFunctionListID");
                    table.ForeignKey(
                        name: "FK_PortalFunctions_ProgramPortalType",
                        column: x => x.ProgramPortalTypeID,
                        principalTable: "ProgramPortalType",
                        principalColumn: "ProgramPortalTypeID");
                });

            migrationBuilder.CreateTable(
                name: "ContactAddresses",
                columns: table => new
                {
                    ContactAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false, defaultValue: 1),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FedexAddressVerifiedFlg = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactAddresses", x => x.ContactAddressID);
                    table.ForeignKey(
                        name: "FK_ContactAddresses_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                });

            migrationBuilder.CreateTable(
                name: "ContactDynamicData",
                columns: table => new
                {
                    ContactDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactDynamicData", x => x.ContactDynamicDataID);
                    table.ForeignKey(
                        name: "FK_ContactDynamicData_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_ContactDynamicData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                });

            migrationBuilder.CreateTable(
                name: "ContactNotes",
                columns: table => new
                {
                    ContactNoteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactNotes", x => x.ContactNoteID);
                    table.ForeignKey(
                        name: "FK_ContactNotes_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                });

            migrationBuilder.CreateTable(
                name: "ContactPhoneNumbers",
                columns: table => new
                {
                    ContactPhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 2),
                    OKtoLeaveMsg = table.Column<bool>(type: "bit", nullable: true),
                    PreferredTime = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactPhoneNumbers", x => x.ContactPhoneNumberID);
                    table.ForeignKey(
                        name: "FK_ContactPhoneNumbers_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                });

            migrationBuilder.CreateTable(
                name: "PatientContact",
                columns: table => new
                {
                    PatientContactsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    Relationship = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LegallyAuthRep = table.Column<bool>(type: "bit", nullable: true),
                    PatientContactType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "contact"),
                    PHIAuthRep = table.Column<bool>(type: "bit", nullable: true),
                    PHIAuthSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PHIInteractionID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PHIAuthBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PHIAuthDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CaregiverStatmtRead = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientContact", x => x.PatientContactsID);
                    table.ForeignKey(
                        name: "FK_PatientContact_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_PatientContact_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "ServiceRequests",
                columns: table => new
                {
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_TypeListID = table.Column<int>(type: "int", nullable: true),
                    SR_Status = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false, defaultValue: "O"),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    PatientAddressID = table.Column<int>(type: "int", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    ContactAddressID = table.Column<int>(type: "int", nullable: true),
                    NurseAgencyID = table.Column<int>(type: "int", nullable: true),
                    NurseAgencyAddressID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    StartedAt = table.Column<DateTime>(type: "datetime", nullable: false),
                    StartedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ClosedAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    ClosedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InitialInfoComplete = table.Column<bool>(type: "bit", nullable: true),
                    ResolutionID = table.Column<int>(type: "int", nullable: true),
                    ParentSRID = table.Column<int>(type: "int", nullable: true),
                    EntityAsContact = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    SRInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRHoldStatus = table.Column<bool>(type: "bit", nullable: true),
                    ISCMMSR = table.Column<bool>(type: "bit", nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "Unknown"),
                    CustomDate1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    SRPriority = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CareCycleID = table.Column<int>(type: "int", nullable: true),
                    CareCycleCategory = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SRDrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AutoGenerated = table.Column<bool>(type: "bit", nullable: true),
                    ParentNDCID = table.Column<int>(type: "int", nullable: true),
                    PrescriptionID = table.Column<int>(type: "int", nullable: true),
                    CaseJourneyID = table.Column<int>(type: "int", nullable: true),
                    SelectedDrugNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientEnrollmentGuid = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cases", x => x.ServiceRequestID);
                    table.ForeignKey(
                        name: "FK_Cases_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_Cases_NurseAgencies",
                        column: x => x.NurseAgencyID,
                        principalTable: "NurseAgencies",
                        principalColumn: "NurseAgencyID");
                    table.ForeignKey(
                        name: "FK_Cases_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_Cases_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_ServiceRequests_SR_ActivityList",
                        column: x => x.ResolutionID,
                        principalTable: "SR_ActivityList",
                        principalColumn: "SR_ActivityListID");
                    table.ForeignKey(
                        name: "FK_ServiceRequests_SR_TypeList",
                        column: x => x.SR_TypeListID,
                        principalTable: "SR_TypeList",
                        principalColumn: "SR_TypeListID");
                });

            migrationBuilder.CreateTable(
                name: "Documents_FQ_Users",
                columns: table => new
                {
                    Documents_FQ_UserID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Documents_FaxQueueID = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_FQ_Users", x => x.Documents_FQ_UserID);
                    table.ForeignKey(
                        name: "FK_Documents_FQ_Users_Documents_FaxQueues",
                        column: x => x.Documents_FaxQueueID,
                        principalTable: "Documents_FaxQueues",
                        principalColumn: "Documents_FaxQueueID");
                });

            migrationBuilder.CreateTable(
                name: "Documents_InboundFaxes",
                columns: table => new
                {
                    Documents_InboundFaxID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Documents_FaxQueueID = table.Column<int>(type: "int", nullable: false),
                    ReceivedDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    FaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    NumberofPages = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DocumentStorageID = table.Column<int>(type: "int", nullable: false),
                    DocumentStorageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParentID = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Pending"),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: true),
                    ReasonDeleted = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AssignmentInProgress = table.Column<bool>(type: "bit", nullable: true),
                    TakenBy = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    TakenAt = table.Column<DateTime>(type: "datetime", nullable: true),
                    PageRange = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FaxTo = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    FaxBy = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: true),
                    DirectFaxDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DirectFaxID = table.Column<int>(type: "int", nullable: true),
                    GroupName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    GroupPageNumbers = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    GroupMissingPageNumbers = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Priority = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OCR_Extract_Status = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents_InboundFaxes", x => x.Documents_InboundFaxID);
                    table.ForeignKey(
                        name: "FK_Documents_InboundFaxes_Documents_FaxQueues",
                        column: x => x.Documents_FaxQueueID,
                        principalTable: "Documents_FaxQueues",
                        principalColumn: "Documents_FaxQueueID");
                });

            migrationBuilder.CreateTable(
                name: "ContactOrganizations",
                columns: table => new
                {
                    ContactOrganizationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactOrganizations", x => x.ContactOrganizationID);
                    table.ForeignKey(
                        name: "FK_ContactOrganizations_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "CoveredCounties",
                columns: table => new
                {
                    CoveredCountiesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ConatctID = table.Column<int>(type: "int", nullable: true),
                    OrgID = table.Column<int>(type: "int", nullable: true),
                    CoveredCounty = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CoveredCountyState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoveredCounties", x => x.CoveredCountiesID);
                    table.ForeignKey(
                        name: "FK_CoveredCounties_Contacts",
                        column: x => x.ConatctID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_CoveredCounties_Organizations",
                        column: x => x.OrgID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationAddresses",
                columns: table => new
                {
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    ZIP = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SiteOfService = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    Fax2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2Comments = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrgnizationAddresses", x => x.OrganizationAddressID);
                    table.ForeignKey(
                        name: "FK_OrganizationAddresses_Programs",
                        column: x => x.MDMProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_OrgnizationAddresses_Orgnizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationDynamicData",
                columns: table => new
                {
                    OrganizationDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationDynamicData", x => x.OrganizationDynamicDataID);
                    table.ForeignKey(
                        name: "FK_OrganizationDynamicData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_OrganizationDynamicData_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationNotes",
                columns: table => new
                {
                    OrganizationNoteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationNotes", x => x.OrganizationNoteID);
                    table.ForeignKey(
                        name: "FK_OrganizationNotes_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationPhoneNumbers",
                columns: table => new
                {
                    OrganizationPhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationPhoneNumbers", x => x.OrganizationPhoneNumberID);
                    table.ForeignKey(
                        name: "FK_OrganizationPhoneNumbers_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_OrganizationPhoneNumbers_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationPrograms",
                columns: table => new
                {
                    OrgnizationProgramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrgnizationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SharedRecordProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrgnizationPrograms", x => x.OrgnizationProgramID);
                    table.ForeignKey(
                        name: "FK_OrgnizationPrograms_Orgnizations",
                        column: x => x.OrgnizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "PatientSnoozedAlerts",
                columns: table => new
                {
                    PatientSnoozedAlertID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    SnoozedDays = table.Column<int>(type: "int", nullable: false),
                    SnoozedDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    SnoozedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientSnoozedAlerts", x => x.PatientSnoozedAlertID);
                    table.ForeignKey(
                        name: "FK_PatientSnoozedAlerts_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_PatientSnoozedAlerts_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Visits",
                columns: table => new
                {
                    SR_VisitID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    VisitType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DueDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ContactID = table.Column<int>(type: "int", nullable: true),
                    OrgID = table.Column<int>(type: "int", nullable: true),
                    VisitStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TrainingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TrainingNote = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Feedback = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    TrainingType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeclineReason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Resolution = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ScheduledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReassignVisitID = table.Column<int>(type: "int", nullable: true),
                    ResolutionComment = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServiceRequest_Visits", x => x.SR_VisitID);
                    table.ForeignKey(
                        name: "FK_SR_Visits_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_SR_Visits_Organizations",
                        column: x => x.OrgID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                });

            migrationBuilder.CreateTable(
                name: "CareCyclePhysicians",
                columns: table => new
                {
                    CareCyclePhysicianID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CareCycleID = table.Column<int>(type: "int", nullable: false),
                    PatientPhysicianID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    PhysicianType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PhysicianLocationID = table.Column<int>(type: "int", nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationLocationID = table.Column<int>(type: "int", nullable: true),
                    OptIn = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    Relationship = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CareCyclePhysicians", x => x.CareCyclePhysicianID);
                    table.ForeignKey(
                        name: "FK_CareCyclePhysician_CareCycles",
                        column: x => x.CareCycleID,
                        principalTable: "CareCycles",
                        principalColumn: "CareCycleID");
                    table.ForeignKey(
                        name: "FK_CareCyclePhysician_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_CareCyclePhysician_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "ContactPhysicians",
                columns: table => new
                {
                    ContactPhysicianID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ContactID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    PhysicianType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Delegate = table.Column<bool>(type: "bit", nullable: true),
                    DelegateDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Doneby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactPhysicians", x => x.ContactPhysicianID);
                    table.ForeignKey(
                        name: "FK_ContactPhysicians_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_ContactPhysicians_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "DuplicateNPITracking",
                columns: table => new
                {
                    DuplicateNPITrackingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    NPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DuplicateNPITracking", x => x.DuplicateNPITrackingId);
                    table.ForeignKey(
                        name: "FK_Physcians_PhysicianID",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "Messages",
                columns: table => new
                {
                    MessageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ThreadID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    MessageText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    SendFromUserID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    IsRead = table.Column<bool>(type: "bit", nullable: false),
                    SenderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SenderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    HasAttachment = table.Column<bool>(type: "bit", nullable: true),
                    Reviewed = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Messages", x => x.MessageID);
                    table.ForeignKey(
                        name: "FK_Messages_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_Messages_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_Messages_Physicians",
                        column: x => x.ProviderID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                    table.ForeignKey(
                        name: "FK_Messages_Threads",
                        column: x => x.ThreadID,
                        principalTable: "MessageThreads",
                        principalColumn: "ThreadID");
                });

            migrationBuilder.CreateTable(
                name: "PatientPhysicians",
                columns: table => new
                {
                    PatientPhysicianID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    PhysicianType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PhysicianLocationID = table.Column<int>(type: "int", nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    OrganizationID = table.Column<int>(type: "int", nullable: true),
                    OrganizationLocationID = table.Column<int>(type: "int", nullable: true),
                    OptIn = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastSynced = table.Column<DateTime>(type: "datetime", nullable: true),
                    Relationship = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true, defaultValue: "N/A")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientPhysicians", x => x.PatientPhysicianID);
                    table.ForeignKey(
                        name: "FK_PatientPhysicians_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_PatientPhysicians_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianAddresses",
                columns: table => new
                {
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    MDMProgramID = table.Column<int>(type: "int", nullable: false),
                    AddressType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    AddressName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Rank = table.Column<int>(type: "int", nullable: false),
                    Address1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Address3 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    City = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    State = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Zip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Phone1 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Phone1Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone1Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Phone2 = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Phone2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Phone2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Fax = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FaxComments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Extension2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Fax2Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PreferredMethodOfContact = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    FedexAddressVerifiedFlg = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianAddresses", x => x.PhysicianAddressID);
                    table.ForeignKey(
                        name: "FK_PhysicianAddresses_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianClinicalTrials",
                columns: table => new
                {
                    PhysicianClinicalTrialID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ProviderID = table.Column<int>(type: "int", nullable: false),
                    ClinicalTrialName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianClinicalTrials", x => x.PhysicianClinicalTrialID);
                    table.ForeignKey(
                        name: "FK_PhysicianClinicalTrials_Physicians",
                        column: x => x.ProviderID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianDynamicData",
                columns: table => new
                {
                    PhysicianDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianDynamicData", x => x.PhysicianDynamicDataID);
                    table.ForeignKey(
                        name: "FK_PhysicianDynamicData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_PhysicianDynamicData_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianNotes",
                columns: table => new
                {
                    PhysicianNoteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianNotes", x => x.PhysicianNoteID);
                    table.ForeignKey(
                        name: "FK_PhysicianNotes_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianOrganizations",
                columns: table => new
                {
                    PhysicianOrgID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianOrganizations", x => x.PhysicianOrgID);
                    table.ForeignKey(
                        name: "FK_PhysicianOrganizations_Orgnizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_PhysicianOrganizations_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianPhoneNumbers",
                columns: table => new
                {
                    PhysicianPhoneNumberID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Extension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PhoneComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianPhoneNumbers", x => x.PhysicianPhoneNumberID);
                    table.ForeignKey(
                        name: "FK_PhysicianPhoneNumbers_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                    table.ForeignKey(
                        name: "FK_PhysicianPhoneNumbers_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "PhysiciansDetail",
                columns: table => new
                {
                    PhysiciansDetailID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    MedicareID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    MedicaidID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    TaxID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    BCBSID = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    DEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PTAN = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Data2000WaiverXDEA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    HIN = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysiciansDetail", x => x.PhysiciansDetailID);
                    table.ForeignKey(
                        name: "FK_PhysiciansDetail_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianSignature",
                columns: table => new
                {
                    PhysicianSignatureId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    Signature = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    FileExtension = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Physicia__5F42708FBF0C3A88", x => x.PhysicianSignatureId);
                    table.ForeignKey(
                        name: "FK__Physician__Physi__6FE5D8B6",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianSpecialties",
                columns: table => new
                {
                    PhysicianSpecialtiesID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PhysicianID = table.Column<int>(type: "int", nullable: false, defaultValue: 1),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true, defaultValue: 1),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianSpecialties_1", x => x.PhysicianSpecialtiesID);
                    table.ForeignKey(
                        name: "FK_PhysicianSpecialties_LookupDataList",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                    table.ForeignKey(
                        name: "FK_PhysicianSpecialties_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "PhysicianStateLicenses",
                columns: table => new
                {
                    PhysicianStateLicenseID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    StateLicenseNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    LicenseState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    ExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicianStateLicenses", x => x.PhysicianStateLicenseID);
                    table.ForeignKey(
                        name: "FK_PhysicianStateLicenses_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                });

            migrationBuilder.CreateTable(
                name: "RxAdminDoses",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    PatientId = table.Column<int>(type: "int", nullable: false),
                    DrugId = table.Column<int>(type: "int", nullable: false),
                    Dose = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime", nullable: false),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Notes = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Updated = table.Column<DateTime>(type: "datetime", nullable: false),
                    UpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    OrganizationId = table.Column<int>(type: "int", nullable: false),
                    PhysicianId = table.Column<int>(type: "int", nullable: false),
                    ExternalId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__RxAdminD__3214EC07E2F75502", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RxAdminDoses_DrugId",
                        column: x => x.DrugId,
                        principalTable: "Drug",
                        principalColumn: "DrugID");
                    table.ForeignKey(
                        name: "FK_RxAdminDoses_OrganizationId",
                        column: x => x.OrganizationId,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_RxAdminDoses_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_RxAdminDoses_PhysicianId",
                        column: x => x.PhysicianId,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                    table.ForeignKey(
                        name: "FK_RxAdminDoses_ProgramId",
                        column: x => x.ProgramId,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "UserRoleDefaults",
                columns: table => new
                {
                    UserRoleDefaultID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    UserRoleId = table.Column<int>(type: "int", nullable: false),
                    FunctionID = table.Column<int>(type: "int", nullable: false),
                    DefaultAccess = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false, defaultValue: "N"),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserRoleDefaults", x => x.UserRoleDefaultID);
                    table.ForeignKey(
                        name: "FK_UserRoleDefaults_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_UserRoleDefaults_UserAccessFunctionList",
                        column: x => x.FunctionID,
                        principalTable: "UserAccessFunctionList",
                        principalColumn: "AccessFunctionID");
                    table.ForeignKey(
                        name: "FK_UserRoleDefaults_UserRoleList",
                        column: x => x.UserRoleId,
                        principalTable: "UserRoleList",
                        principalColumn: "UserRoleID");
                });

            migrationBuilder.CreateTable(
                name: "ReportActivityHistory",
                columns: table => new
                {
                    ReportActivityHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportProgramID = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    BeginDate = table.Column<DateOnly>(type: "date", nullable: true),
                    EndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    State = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Year = table.Column<int>(type: "int", nullable: true),
                    Drug = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SRStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SRSubType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherParameter1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherParameter2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OtherParameter3 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportActivityHistory", x => x.ReportActivityHistoryID);
                    table.ForeignKey(
                        name: "FK_ReportActivityHistory_ReportPrograms",
                        column: x => x.ReportProgramID,
                        principalTable: "ReportPrograms",
                        principalColumn: "ReportProgramsID");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataCptCodes",
                columns: table => new
                {
                    SR_MedOffRampDataCptCodesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: false),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    CptCodeDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    cptCode = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataCptCodes_SR_MedOffRampDataCptCodesId", x => x.SR_MedOffRampDataCptCodesId);
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataCptCodes_SR_MEDOffRampData",
                        column: x => x.SR_MedOffRampDataId,
                        principalTable: "SR_MedOffRampData",
                        principalColumn: "SR_MedOffRampDataId");
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataCptCodes_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataDiagnoses",
                columns: table => new
                {
                    SR_MedOffRampDataDiagnosesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: false),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    Diagnosis = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    DiagnosisCode = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataDiagnoses_SR_MedOffRampDataDiagnosesId", x => x.SR_MedOffRampDataDiagnosesId);
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataDiagnoses_SR_MEDOffRampData",
                        column: x => x.SR_MedOffRampDataId,
                        principalTable: "SR_MedOffRampData",
                        principalColumn: "SR_MedOffRampDataId");
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataDiagnoses_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataPolicy",
                columns: table => new
                {
                    SR_MedOffRampDataPolicyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: false),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    BenefitVerificationTransactionId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    benefitVerificationTransactionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PolicyHighLevelInfoEligibilityStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PolicyHighLevelInfoEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PolicyHighLevelInfoPayerName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPayerType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPlanName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPlanType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoGroupNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoGroupName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCopayApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCoInsApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsPcpCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsSpecialistCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    OfficeVisitDetailsCoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsCopayApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsCoInsApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsPcpCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailsSpecialistCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProductStatusDetailscoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleIndividualAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleIndividualAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsDeductibleFamilyAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsdseductibleFamilyAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxIndividualAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxIndividualAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxFamilyAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsOopMaxFamilyAmountMet = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementspriorAuthorizationRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsisPriorAuthorizationOnFile = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsPriorAuthorizationEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugRequirementsPriorAuthorizationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DrugRequirementsPriorTherapyRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsTherapyRestrictionNotes = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsBuyBillPermitted = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsPredeterminationRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyRequired = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyAvailable = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsSpecialtyPharmacyName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MedicalPolicy = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    governmentPlanDetected = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    governmentPolicyType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    policyMessageId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    policyMessageContent = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    DrugRequirementsPredeterminationAvailable = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoPayerId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    OfficeVisitDetailsCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProductStatusDetailsCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PolicyType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PolicyStatus = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    DrugRequirementsPriorAuthorizationChannel = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    DrugRequirementsPriorAuthorizationNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SortOrder = table.Column<int>(type: "int", nullable: true),
                    PolicyHighLevelInfoManualPayerName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualPlanName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualPlanType = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualGroupNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualGroupName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualPayerType1 = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualCallRef = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualNetworkStatus = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    AccumulatorDetailsDeductibleAppliesToOOP = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    AccumulatorDetailsAfterOOPIsMetServicesCovered100Percent = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PolicyHighLevelInfoManualPayerId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientInsuranceId = table.Column<int>(type: "int", nullable: true),
                    PolicyHighLevelInfoManualMedicalInsuranceId = table.Column<int>(type: "int", nullable: true),
                    IsCompleted = table.Column<bool>(type: "bit", nullable: false),
                    PolicyHighLevelInfoManualPlanTypeDetail3 = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    PolicyHighLevelInfoManualPlanTypeDetail4 = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    PolicyHighLevelInfoManualPlanTypeDetail5 = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    PolicyHighLevelInfoConnectPayerOptionCode = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    VerifiedWith = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    PayerPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Med_ePayerID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ConnectPayerPhoneNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PolicyOutcomeKey = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PolicyKeyDescription = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataPolicyNEW_SR_MedOffRampDataPolicyId", x => x.SR_MedOffRampDataPolicyId);
                    table.ForeignKey(
                        name: "FK_SR_MEDOffRampDataPolicyNEW_SR_MEDOffRampData",
                        column: x => x.SR_MedOffRampDataId,
                        principalTable: "SR_MedOffRampData",
                        principalColumn: "SR_MedOffRampDataId");
                    table.ForeignKey(
                        name: "FK_SR_MEDOffRampDataPolicyNEW_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataRequestPolicies",
                columns: table => new
                {
                    SR_MedOffRampDataRequestPoliciesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataId = table.Column<int>(type: "int", nullable: false),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    MemberId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PayerId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PayerName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PatientIsSubscriber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberFirstName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberLastName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberMiddleName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberPrefix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberSuffix = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberTitle = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    SubscriberDateOfBirth = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubscriberGender = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    SubscriberMemberId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PriorAuthorizationOnFile = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    PriorAuthorizationType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PriorAuthorizationNumber = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    PriorAuthorizationEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PriorAuthorizationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    PolicyType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ClientPayerID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataRequestPolicies_SR_MedOffRampDataRequestPoliciesId", x => x.SR_MedOffRampDataRequestPoliciesId);
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataRequestPolicies_SR_MEDOffRampData",
                        column: x => x.SR_MedOffRampDataId,
                        principalTable: "SR_MedOffRampData",
                        principalColumn: "SR_MedOffRampDataId");
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataRequestPolicies_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                });

            migrationBuilder.CreateTable(
                name: "SR_RxOffRampDataPolicy",
                columns: table => new
                {
                    SR_RxOffRampDataPolicyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_RxOffRampDataId = table.Column<int>(type: "int", nullable: false),
                    SR_OffRampId = table.Column<int>(type: "int", nullable: false),
                    ProductDaysSupply = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanPbmId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanPbmName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PbmPlanType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanGroupName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanGroupNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanBinLocationNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanPcnNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PriorAuthorizationStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RetailCoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MailOrderCoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    LtcCoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SpecialtyCoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    InsuranceStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanCoverageLimitationsPlanFormularyStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanCoverageLimitationsStepTherapyStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanCoverageLimitationsPlanPriorAuthorizationStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SubscriberCardHolderId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SubscriberPersonCode = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SubscriberPbmUniqueMemberId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    SubscriberRelationship = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsRetailCopay = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsRetailCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsMailOrderCopay = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsMailOrderCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsLtcCopay = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsLtcCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsSpecialtyCopay = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AmountsSpecialtyCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TransactionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_PlanDeductibleAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_PlanOOPAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_PlanDeductibleAmountMet = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_PlanOOPAmountMet = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_CoveragePhaseMessage = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_TotalPatientCost = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_CopayOrCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_DeductibleRemainingAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_OopRemainingAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_Type = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_CoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail30_PharmacyType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_TotalPatientCost = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_CopayOrCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_DeductibleRemainingAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_OopRemainingAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_Type = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_CoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Mail90_PharmacyType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_TotalPatientCost = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_CopayOrCoinsurance = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_DeductibleRemainingAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_OopRemainingAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_Type = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_CoverageStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CoverageSummary_Retail90_PharmacyType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    RecordStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_RxOffRampDataPolicy_SR_RxOffRampDataPolicyId", x => x.SR_RxOffRampDataPolicyId);
                    table.ForeignKey(
                        name: "FK_SR_RXOffRampDataPolicy_SR_OffRamp",
                        column: x => x.SR_OffRampId,
                        principalTable: "SR_OffRamp",
                        principalColumn: "SR_OffRampId");
                    table.ForeignKey(
                        name: "FK_SR_RXOffRampDataPolicy_SR_RXOffRampData",
                        column: x => x.SR_RxOffRampDataId,
                        principalTable: "SR_RxOffRampData",
                        principalColumn: "SR_RxOffRampDataId");
                });

            migrationBuilder.CreateTable(
                name: "SurveyElements",
                columns: table => new
                {
                    SurveyElementID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SurveyCategoryID = table.Column<int>(type: "int", nullable: true),
                    SurveyElementDictionaryID = table.Column<int>(type: "int", nullable: true),
                    Style = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SortOrder = table.Column<double>(type: "float", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ValidateClass = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ValidateMessage = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyElements", x => x.SurveyElementID);
                    table.ForeignKey(
                        name: "FK_SurveyElements_SurveyCategories",
                        column: x => x.SurveyCategoryID,
                        principalTable: "SurveyCategories",
                        principalColumn: "SurveyCategoryID");
                });

            migrationBuilder.CreateTable(
                name: "SurveyAnswers",
                columns: table => new
                {
                    SurveyAnswerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SurveyHistoryID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SurveyElement_DataPointID = table.Column<int>(type: "int", nullable: true),
                    Answer = table.Column<string>(type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: true),
                    AnswerNotes = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyAnswers", x => x.SurveyAnswerID);
                    table.ForeignKey(
                        name: "FK_SurveyAnswers_SurveyHistory",
                        column: x => x.SurveyHistoryID,
                        principalTable: "SurveyHistory",
                        principalColumn: "SurveyHistoryID");
                });

            migrationBuilder.CreateTable(
                name: "MedvantxLots",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    MedvantxInventoryUpdateId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LotNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AcquisitionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__Medvantx__3214EC0705797FDD", x => x.Id);
                    table.ForeignKey(
                        name: "FK__MedvantxL__Medva__6C6EDFCD",
                        column: x => x.MedvantxInventoryUpdateId,
                        principalTable: "MedvantxInventoryUpdate",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "LTR_EmailNotification",
                columns: table => new
                {
                    EmailNotificationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EventType = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    EmailTo = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    EmailBody = table.Column<string>(type: "text", nullable: true),
                    ExternalMailID = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    EmailStatusID = table.Column<int>(type: "int", nullable: true),
                    Sent = table.Column<bool>(type: "bit", nullable: true),
                    SentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Delivered = table.Column<bool>(type: "bit", nullable: true),
                    DeliveredDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Read = table.Column<bool>(type: "bit", nullable: true),
                    ReadDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Attempts = table.Column<int>(type: "int", nullable: true),
                    Comments = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    TrackDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TrackAttempt = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_EmailNotification", x => x.EmailNotificationID);
                    table.ForeignKey(
                        name: "FK_LTR_EmailNotification_LTR_NotificationItems_NotificationItemID",
                        column: x => x.NotificationItemID,
                        principalTable: "LTR_NotificationItems",
                        principalColumn: "NotificationItemID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_FaxNotification",
                columns: table => new
                {
                    FaxNotificationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EventType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    FaxNumber = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    SentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FaxStatusID = table.Column<int>(type: "int", nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FaxJobID = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FaxJobXDN = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Sent = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Delivered = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    DeliveredDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Comments = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Attempts = table.Column<int>(type: "int", nullable: true),
                    TrackDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TrackAttempt = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_FaxNotification", x => x.FaxNotificationID);
                    table.ForeignKey(
                        name: "FK_LTR_FaxNotification_LTR_NotificationItems_NotificationItemID",
                        column: x => x.NotificationItemID,
                        principalTable: "LTR_NotificationItems",
                        principalColumn: "NotificationItemID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_MailNotification",
                columns: table => new
                {
                    MailNotificationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    EventType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MailAddress = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ProcessedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProcessedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    MailStatusID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_MailNotification", x => x.MailNotificationID);
                    table.ForeignKey(
                        name: "FK_LTR_MailNotification_LTR_NotificationItems_NotificationItemID",
                        column: x => x.NotificationItemID,
                        principalTable: "LTR_NotificationItems",
                        principalColumn: "NotificationItemID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_ProcessLog",
                columns: table => new
                {
                    ProcessLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NotificationID = table.Column<int>(type: "int", nullable: false),
                    NotificationItemID = table.Column<int>(type: "int", nullable: false),
                    ProcessStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Message = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_ProcessLog", x => x.ProcessLogID);
                    table.ForeignKey(
                        name: "FK_LTR_ProcessLog_LTR_NotificationItems_NotificationItemID",
                        column: x => x.NotificationItemID,
                        principalTable: "LTR_NotificationItems",
                        principalColumn: "NotificationItemID");
                    table.ForeignKey(
                        name: "FK_LTR_ProcessLog_LTR_NotificationMaster_NotificationID",
                        column: x => x.NotificationID,
                        principalTable: "LTR_NotificationMaster",
                        principalColumn: "NotificationID");
                });

            migrationBuilder.CreateTable(
                name: "ValidationFieldDefinitionMapping",
                columns: table => new
                {
                    ValidationFieldDefinitionMappingID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ValidationDefinitionID = table.Column<int>(type: "int", nullable: false),
                    ValidationFieldID = table.Column<int>(type: "int", nullable: false),
                    DisplayMessage = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValidationFieldDefinitionMapping", x => x.ValidationFieldDefinitionMappingID);
                    table.ForeignKey(
                        name: "FK_ValidationFieldDefinitionMapping_ValidationDefinition",
                        column: x => x.ValidationDefinitionID,
                        principalTable: "ValidationDefinition",
                        principalColumn: "ValidationDefinitionID");
                    table.ForeignKey(
                        name: "FK_ValidationFieldDefinitionMapping_ValidationField",
                        column: x => x.ValidationFieldID,
                        principalTable: "ValidationField",
                        principalColumn: "ValidationFieldID");
                });

            migrationBuilder.CreateTable(
                name: "Workflow",
                columns: table => new
                {
                    WorkflowID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    ProductID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The workflow product id where the lookup name is WORKFLOW_PRODUCTS"),
                    ProgramID = table.Column<int>(type: "int", nullable: false, comment: "The program id"),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Workflow_WorkflowID", x => x.WorkflowID);
                    table.ForeignKey(
                        name: "FK_Workflow_LookupItems_Product",
                        column: x => x.ProductID,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                },
                comment: "The workflow master table");

            migrationBuilder.CreateTable(
                name: "WorkflowFields",
                columns: table => new
                {
                    FieldID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    Name = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: false, comment: "The field name"),
                    DataType = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The field data type where the lookup name is DATA_TYPES"),
                    Interpretation = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "The field interpretation where the lookup name is INTERPRETATION"),
                    MinLength = table.Column<short>(type: "smallint", nullable: true, comment: "The minimum length"),
                    MaxLength = table.Column<short>(type: "smallint", nullable: true, comment: "The maximum length"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true, comment: "Active flag"),
                    MinValue = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Questions_QuestionID", x => x.FieldID);
                    table.ForeignKey(
                        name: "FK_WorkflowFields_WorkflowLookupItems_DataTypes",
                        column: x => x.DataType,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowFields_WorkflowLookupItems_Interpretation",
                        column: x => x.Interpretation,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                },
                comment: "Workflow field configuration");

            migrationBuilder.CreateTable(
                name: "UserPrograms",
                columns: table => new
                {
                    UserprogramID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserInformationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Role = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    UserSkill = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserPrograms", x => x.UserprogramID);
                    table.ForeignKey(
                        name: "FK_UserPrograms_Programs1",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_UserPrograms_UserInformation1",
                        column: x => x.UserInformationID,
                        principalTable: "UserInformation",
                        principalColumn: "UserInformationID");
                });

            migrationBuilder.CreateTable(
                name: "BenefitInvestigation",
                columns: table => new
                {
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BenefitInvestigationWorkDone = table.Column<bool>(type: "bit", nullable: true),
                    ResponseTypeCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Message = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitInvestigation", x => x.BenefitInvestigationID);
                    table.ForeignKey(
                        name: "FK_BenefitInvestigation_PatientInsurance",
                        column: x => x.PatientInsuranceID,
                        principalTable: "PatientInsurance",
                        principalColumn: "PatientInsuranceID");
                    table.ForeignKey(
                        name: "FK_BenefitInvestigation_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "BenefitInvestigation_eBV",
                columns: table => new
                {
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    BI_ID = table.Column<int>(type: "int", nullable: true),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestionType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BenefitInvestigationWorkDone = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitInvestigation_eBV", x => x.BenefitInvestigation_eBV_ID);
                    table.ForeignKey(
                        name: "FK_BenefitInvestigation_eBV_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "eBvMasterTransactions",
                columns: table => new
                {
                    eBvMasterTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    eBvType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: true),
                    Activity = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvMasterTransactions", x => x.eBvMasterTransactionID);
                    table.ForeignKey(
                        name: "FK_eBvMasterTransactions_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "FundReopenSubscriptionDetails",
                columns: table => new
                {
                    SubscriptionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: false),
                    FundId = table.Column<int>(type: "int", nullable: false),
                    PatientId = table.Column<int>(type: "int", nullable: false),
                    PatientEmailAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientMiddleName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDateOfBirth = table.Column<DateOnly>(type: "date", nullable: false),
                    PatientSSN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientSSNLastFourDigits = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    PatientPhone = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientState = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false),
                    PatientZipCode = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: false),
                    PatientAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientGrantID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    StatusId = table.Column<int>(type: "int", nullable: false),
                    UniqueId = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    FundEnrollmentApplicationId = table.Column<int>(type: "int", nullable: true),
                    GrantType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OptedOut = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    OrganizationId = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundReopenSubscriptionDetails", x => x.SubscriptionId);
                    table.ForeignKey(
                        name: "FK_FundReopenSubscriptionDetails_FundEnrollmentApplications",
                        column: x => x.FundEnrollmentApplicationId,
                        principalTable: "FundEnrollmentApplications",
                        principalColumn: "FundEnrollmentApplicationID");
                    table.ForeignKey(
                        name: "FK_FundReopenSubscriptionDetails_ServiceRequests",
                        column: x => x.ServiceRequestId,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "GrantUsePolicyException",
                columns: table => new
                {
                    GrantUsePolicyExceptionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExtensionReasonId = table.Column<int>(type: "int", nullable: false),
                    PatientGrantId = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestId = table.Column<int>(type: "int", nullable: false),
                    ReasonStartDate = table.Column<DateOnly>(type: "date", nullable: false),
                    ReasonEndDate = table.Column<DateOnly>(type: "date", nullable: false),
                    UserComments = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: false),
                    SupervisorNeeded = table.Column<bool>(type: "bit", nullable: false),
                    SupervisorComments = table.Column<string>(type: "varchar(2500)", unicode: false, maxLength: 2500, nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: false),
                    PANDecision = table.Column<bool>(type: "bit", nullable: true),
                    PANRequestedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PANReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ExceptionStartDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ExceptionEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    SubmittedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GrantUsePolicyExceptionId", x => x.GrantUsePolicyExceptionId)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "GrantUsePolicyException_ExtensionReasonId_LookUpDataList_LookUpDataListId",
                        column: x => x.ExtensionReasonId,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                    table.ForeignKey(
                        name: "GrantUsePolicyException_ServiceRequests_ServiceRequestId",
                        column: x => x.ServiceRequestId,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                    table.ForeignKey(
                        name: "GrantUsePolicyException_StatusId_LookUpDataList_LookUpDataListId",
                        column: x => x.StatusId,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Activities",
                columns: table => new
                {
                    SR_ActivityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false),
                    ActivityDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_NoteID = table.Column<int>(type: "int", nullable: true),
                    CallerType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ReasonForCall = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    IBOBCall = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CallerTypeID = table.Column<int>(type: "int", nullable: true),
                    ReasonForCallID = table.Column<int>(type: "int", nullable: true),
                    DaysOnHand = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Activities", x => x.SR_ActivityID);
                    table.ForeignKey(
                        name: "FK_SR_Activities_SR_ActivityList",
                        column: x => x.SR_ActivityListID,
                        principalTable: "SR_ActivityList",
                        principalColumn: "SR_ActivityListID");
                    table.ForeignKey(
                        name: "FK_SR_Activities_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Assignments",
                columns: table => new
                {
                    SR_AssignmentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: true),
                    UserName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    AssignmentType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Rank = table.Column<int>(type: "int", nullable: true),
                    UserGroupID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Assignments", x => x.SR_AssignmentID);
                    table.ForeignKey(
                        name: "FK_SR_Assignments_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_BridgeEligibility",
                columns: table => new
                {
                    SR_BridgeEligibilityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PreEligibilityDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    MedicalExpense = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ExceptionApplied = table.Column<bool>(type: "bit", nullable: true),
                    OveriddenBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OverrideDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DenialReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AppealDenialDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DenialEnteredBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Override_BISRID = table.Column<int>(type: "int", nullable: true),
                    Override_Reason = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Override_Notes = table.Column<string>(type: "varchar(350)", unicode: false, maxLength: 350, nullable: true),
                    Override_ExpirationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ExtStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExtStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExtStatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ExtEndDate = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_BridgeEligibility", x => x.SR_BridgeEligibilityID);
                    table.ForeignKey(
                        name: "FK_SR_BridgeEligibility_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_CallLogs",
                columns: table => new
                {
                    SR_CallLogID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false),
                    CallLogDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SR_NoteID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_CallLogs", x => x.SR_CallLogID);
                    table.ForeignKey(
                        name: "FK_SR_CallLogs_SR_ActivityList",
                        column: x => x.SR_ActivityListID,
                        principalTable: "SR_ActivityList",
                        principalColumn: "SR_ActivityListID");
                    table.ForeignKey(
                        name: "FK_SR_CallLogs_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Dates",
                columns: table => new
                {
                    SR_DateID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DateValue = table.Column<DateTime>(type: "datetime", nullable: true),
                    NA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Dates", x => x.SR_DateID);
                    table.ForeignKey(
                        name: "FK_SR_Dates_LookupDataList",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                    table.ForeignKey(
                        name: "FK_SR_Dates_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_eEnrollments",
                columns: table => new
                {
                    SR_eEnrollmentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    Enrollment_SRID = table.Column<int>(type: "int", nullable: false),
                    eRxStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    eRxReferenceNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TriageSRID = table.Column<int>(type: "int", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_eEnrollments", x => x.SR_eEnrollmentID);
                    table.ForeignKey(
                        name: "FK_SR_eEnrollments_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_SR_eEnrollments_ServiceRequests",
                        column: x => x.Enrollment_SRID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                    table.ForeignKey(
                        name: "FK_SR_eEnrollments_ServiceRequests1",
                        column: x => x.TriageSRID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_FAQs",
                columns: table => new
                {
                    SR_FaqID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaqListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    FaqSelected = table.Column<bool>(type: "bit", nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_FAQs", x => x.SR_FaqID);
                    table.ForeignKey(
                        name: "FK_SR_FAQs_FaqListID",
                        column: x => x.FaqListID,
                        principalTable: "FAQList",
                        principalColumn: "FaqListID");
                    table.ForeignKey(
                        name: "FK_SR_FAQs_ServiceRequestID",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_IncompleteReasons",
                columns: table => new
                {
                    SR_IncompleteReasonID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_IncompleteReasons", x => x.SR_IncompleteReasonID);
                    table.ForeignKey(
                        name: "FK_SR_IncompleteReasons_LookupDataList",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                    table.ForeignKey(
                        name: "FK_SR_IncompleteReasons_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_MessageThreads",
                columns: table => new
                {
                    SR_ThreadID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ThreadID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Threads", x => x.SR_ThreadID);
                    table.ForeignKey(
                        name: "FK_SR_Threads_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                    table.ForeignKey(
                        name: "FK_SR_Threads_Threads",
                        column: x => x.ThreadID,
                        principalTable: "MessageThreads",
                        principalColumn: "ThreadID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Notes",
                columns: table => new
                {
                    SR_NoteID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Unlocked = table.Column<DateTime>(type: "datetime", nullable: true),
                    UnlockedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NoteAfterSRClosed = table.Column<bool>(type: "bit", nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Notes", x => x.SR_NoteID);
                    table.ForeignKey(
                        name: "FK_SR_Notes_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_OrderDetails",
                columns: table => new
                {
                    SR_OrderDetailsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientDeviceID = table.Column<int>(type: "int", nullable: false),
                    PatientRxDetailsID = table.Column<int>(type: "int", nullable: false),
                    NumberOfMonths = table.Column<short>(type: "smallint", nullable: true),
                    ActivationExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    OrderSubmitted = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PaymentReceived = table.Column<bool>(type: "bit", nullable: true),
                    PaymentAmount = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    OrderStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_OrderDetails", x => x.SR_OrderDetailsID);
                    table.ForeignKey(
                        name: "FK__SR_OrderD__Progr__05905EA9",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK__SR_OrderD__Servi__068482E2",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Organizations",
                columns: table => new
                {
                    SR_OrganizationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    SortOrder = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Orgnizations", x => x.SR_OrganizationID);
                    table.ForeignKey(
                        name: "FK_SR_Oragnizations_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_SR_Orgnizations_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_PAP",
                columns: table => new
                {
                    SR_PAPID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PAPType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PostmarkDate = table.Column<DateOnly>(type: "date", nullable: true),
                    ReceivedDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PAPStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    StatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    HardshipRequested = table.Column<bool>(type: "bit", nullable: true),
                    HardshipRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    HardshipApproved = table.Column<bool>(type: "bit", nullable: true),
                    HardshipApprovalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    EligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    AppealApproved = table.Column<bool>(type: "bit", nullable: true),
                    AppealApprovalDate = table.Column<DateOnly>(type: "date", nullable: true),
                    AppealRequested = table.Column<bool>(type: "bit", nullable: true),
                    AppealRequestDate = table.Column<DateOnly>(type: "date", nullable: true),
                    MedicalExpense = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ExceptionApplied = table.Column<bool>(type: "bit", nullable: true),
                    AttReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Comments = table.Column<string>(type: "varchar(350)", unicode: false, maxLength: 350, nullable: true),
                    APIMessage = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    ClientID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BVReferralID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TempPAPStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TempStatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TempEligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TempReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    DenialReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TempStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondPAPStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondStatusBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SecondStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondEligibilityEndDate = table.Column<DateOnly>(type: "date", nullable: true),
                    SecondApprovalReason = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    EligibilityStatusDate = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_PAP", x => x.SR_PAPID);
                    table.ForeignKey(
                        name: "FK_SR_PAP_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_PAPPaymentSchedules",
                columns: table => new
                {
                    SR_PAPPaymentScheduleID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PayeeID = table.Column<int>(type: "int", nullable: true),
                    PayeeName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PayToPatient = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    PaymentAmount = table.Column<decimal>(type: "money", nullable: false),
                    PaymentFrequency = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    BeginDate = table.Column<DateOnly>(type: "date", nullable: false),
                    EndDate = table.Column<DateOnly>(type: "date", nullable: false),
                    TerminationDate = table.Column<DateOnly>(type: "date", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    CheckWrittenTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAPPaymentSchedules", x => x.SR_PAPPaymentScheduleID);
                    table.ForeignKey(
                        name: "FK_SR_PAPPaymentSchedules_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_SR_PAPPaymentSchedules_ServiceRequests",
                        column: x => x.SRID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Physicians",
                columns: table => new
                {
                    SR_PhysicianID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PhysicianID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_PhysicianType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Physicians", x => x.SR_PhysicianID);
                    table.ForeignKey(
                        name: "FK_SR_Physicians_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                    table.ForeignKey(
                        name: "FK_SR_Physicians_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_SubTypes",
                columns: table => new
                {
                    SR_SubTypeID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    SR_SubTypeListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_SubTypes", x => x.SR_SubTypeID);
                    table.ForeignKey(
                        name: "FK_SR_SubTypes_SR_SubTypeList",
                        column: x => x.SR_SubTypeListID,
                        principalTable: "SR_SubTypeList",
                        principalColumn: "SR_SubTypeListID");
                    table.ForeignKey(
                        name: "FK_SR_SubTypes_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_TestClaims",
                columns: table => new
                {
                    SR_TestClaimID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: false),
                    PatientLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientDOB = table.Column<DateOnly>(type: "date", nullable: false),
                    PatientDiagCode9 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientDiagCode10 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: false),
                    Insurance_Name = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Insurance_Bin = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Insurance_PCN = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientIns_GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientIns_CardHolderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PatientIns_CardHolderDOB = table.Column<DateOnly>(type: "date", nullable: false),
                    PatientIns_PersonCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientIns_RelationshipCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientIns_EmployerName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ProviderID = table.Column<int>(type: "int", nullable: false),
                    ProviderLastName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProviderFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProviderNPI = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ItemName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ItemNDC = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ItemQty = table.Column<decimal>(type: "decimal(6,2)", nullable: false),
                    ItemUnitofMeasure = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ItemDaysSupply = table.Column<int>(type: "int", nullable: false),
                    ItemNumberofRefills = table.Column<int>(type: "int", nullable: false),
                    ItemNeworRefill = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ItemPlaceofService = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    Response_RxNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Response_InsAmount = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    Responce_CopayAmount = table.Column<decimal>(type: "decimal(8,2)", nullable: true),
                    Response_Reason = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Sent = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TestClaims", x => x.SR_TestClaimID);
                    table.ForeignKey(
                        name: "FK_SR_TestClaims_PatientInsurance",
                        column: x => x.PatientInsuranceID,
                        principalTable: "PatientInsurance",
                        principalColumn: "PatientInsuranceID");
                    table.ForeignKey(
                        name: "FK_SR_TestClaims_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_SR_TestClaims_Physicians",
                        column: x => x.ProviderID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                    table.ForeignKey(
                        name: "FK_SR_TestClaims_ServiceRequests",
                        column: x => x.SRID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Tickles",
                columns: table => new
                {
                    SR_TickleID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    SR_ActivityListID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TickleDueDate = table.Column<DateOnly>(type: "date", nullable: true),
                    TickleStatusDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TickleStatus = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: false, defaultValue: "O"),
                    TickleComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TickleAssignment = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Priority = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    UserGroupID = table.Column<int>(type: "int", nullable: true),
                    DateSnoozed = table.Column<DateTime>(type: "datetime", nullable: true),
                    SnoozedDays = table.Column<int>(type: "int", nullable: true),
                    SnoozedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AutoGenerated = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Tickles", x => x.SR_TickleID);
                    table.ForeignKey(
                        name: "FK_SR_Tickles_SR_ActivityList",
                        column: x => x.SR_ActivityListID,
                        principalTable: "SR_ActivityList",
                        principalColumn: "SR_ActivityListID");
                    table.ForeignKey(
                        name: "FK_SR_Tickles_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_Triages",
                columns: table => new
                {
                    SR_TriageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TriageType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    VendorID = table.Column<int>(type: "int", nullable: false),
                    ReasonSelected = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DocumentID = table.Column<int>(type: "int", nullable: true),
                    TriagedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TriagedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Cancelled = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    CancelledBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CancelledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TriagePayerType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ExternalID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    RedirectedToSPDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_Triages", x => x.SR_TriageID);
                    table.ForeignKey(
                        name: "FK_SR_Triages_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_SR_Triages_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeDynamicData",
                columns: table => new
                {
                    SR_TypeDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ProductApproved = table.Column<string>(type: "varchar(1)", unicode: false, maxLength: 1, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_TypeDynamicData", x => x.SR_TypeDynamicDataID);
                    table.ForeignKey(
                        name: "FK_SR_TypeDynamicData_DynamicDataList1",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_SR_TypeDynamicData_ServiceRequests1",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_TypeGroupDynamicData",
                columns: table => new
                {
                    SR_TypeGroupDynamicDataID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DataGroupID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: false),
                    Answer = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__SR_TypeG__90B3E200EB5A2C2F", x => x.SR_TypeGroupDynamicDataID);
                    table.ForeignKey(
                        name: "FK_SR_TypeGroupDynamicData_DynamicDataList",
                        column: x => x.DynamicDataListID,
                        principalTable: "DynamicDataList",
                        principalColumn: "DynamicDataListID");
                    table.ForeignKey(
                        name: "FK_SR_TypeGroupDynamicData_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "TAMTracker",
                columns: table => new
                {
                    TAMTrackerID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ReasonForCasePending = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RecordType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MissingInfo = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    CompleteEnrollmentDate = table.Column<DateOnly>(type: "date", nullable: true),
                    OVPRequested = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    BICompleteDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PayorName = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Payortype = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    PA_FE_Required = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    PASentMDDate = table.Column<DateOnly>(type: "date", nullable: true),
                    FirstAttemptPAResults = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    ReasonforDenial = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: true),
                    SP = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OVPShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    FirstPaidShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    BridgeStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    BridgeShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    PAPShipDate = table.Column<DateOnly>(type: "date", nullable: true),
                    NoStartReason = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    AppealResult = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ReasonNotAppealing = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    TAMComments = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: true),
                    TAMReviewComplete = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    BIStatus = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: true),
                    ReferralDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientID = table.Column<int>(type: "int", nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientStatusID = table.Column<int>(type: "int", nullable: true),
                    ColorID = table.Column<int>(type: "int", nullable: true),
                    Urgent = table.Column<bool>(type: "bit", nullable: true),
                    DueDate = table.Column<DateOnly>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TAMTracker", x => x.TAMTrackerID);
                    table.ForeignKey(
                        name: "FK_TAMTracker_SR",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationNPIs",
                columns: table => new
                {
                    OrganizationNPIID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    NPI = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PharmacyNABP = table.Column<string>(type: "char(7)", unicode: false, fixedLength: true, maxLength: 7, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationNPIs", x => x.OrganizationNPIID)
                        .Annotation("SqlServer:Clustered", false);
                    table.ForeignKey(
                        name: "FK_OrganizationNPIs_OrganizationAddresses",
                        column: x => x.OrganizationAddressID,
                        principalTable: "OrganizationAddresses",
                        principalColumn: "OrganizationAddressID");
                    table.ForeignKey(
                        name: "FK_OrganizationNPIs_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_OrganizationNPIs_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "OrganizationTaxIDs",
                columns: table => new
                {
                    OrganizationTaxID_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrganizationID = table.Column<int>(type: "int", nullable: false),
                    OrganizationAddressID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    TaxID = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationTaxIDs", x => x.OrganizationTaxID_ID);
                    table.ForeignKey(
                        name: "FK_OrganizationTaxIDs_OrganizationAddresses",
                        column: x => x.OrganizationAddressID,
                        principalTable: "OrganizationAddresses",
                        principalColumn: "OrganizationAddressID");
                    table.ForeignKey(
                        name: "FK_OrganizationTaxIDs_Organizations",
                        column: x => x.OrganizationID,
                        principalTable: "Organizations",
                        principalColumn: "OrganizationID");
                    table.ForeignKey(
                        name: "FK_OrganizationTaxIDs_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                });

            migrationBuilder.CreateTable(
                name: "Mailings",
                columns: table => new
                {
                    MailingID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    PatientID = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    ContactID = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    PhysicianID = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    PatientAddressID = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    ContactAddressID = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    PhysicianAddressID = table.Column<int>(type: "int", nullable: true, defaultValue: 0),
                    MailingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "", comment: "This will be the number that can be searchable in Fedex Ship Manager App."),
                    MailAddress1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    MailAddress2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    MailCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    MailState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false, defaultValue: ""),
                    MailZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: false, defaultValue: ""),
                    MailCarrier = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    MailShippingMethod = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    TrackingNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    MailStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "Pending"),
                    MailDateDt = table.Column<DateTime>(type: "datetime", nullable: true),
                    MailDeliveryDateDt = table.Column<DateTime>(type: "datetime", nullable: true),
                    MailCost = table.Column<decimal>(type: "money", nullable: true, defaultValue: 0m),
                    IsAddressVerified = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    AddressVerifiedDateDt = table.Column<DateTime>(type: "datetime", nullable: true),
                    AddressVerifiedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    DeletedFlg = table.Column<bool>(type: "bit", nullable: false),
                    CreatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    LastUpdatedDt = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getutcdate())"),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    EntityID = table.Column<int>(type: "int", nullable: false, comment: "This column holds the foreign key reference to the EntityID field of Entity Table"),
                    Comment = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SH_Shipments", x => x.MailingID);
                    table.ForeignKey(
                        name: "FK_SH_Shipments_ContactAddresses",
                        column: x => x.ContactAddressID,
                        principalTable: "ContactAddresses",
                        principalColumn: "ContactAddressID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_Contacts",
                        column: x => x.ContactID,
                        principalTable: "Contacts",
                        principalColumn: "ContactID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_Entity",
                        column: x => x.EntityID,
                        principalTable: "Entity",
                        principalColumn: "EntityID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_PatientAddresses",
                        column: x => x.PatientAddressID,
                        principalTable: "PatientAddresses",
                        principalColumn: "PatientAddressID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_Patients",
                        column: x => x.PatientID,
                        principalTable: "Patients",
                        principalColumn: "PatientID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_PhysicianAddresses",
                        column: x => x.PhysicianAddressID,
                        principalTable: "PhysicianAddresses",
                        principalColumn: "PhysicianAddressID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_Physicians",
                        column: x => x.PhysicianID,
                        principalTable: "Physicians",
                        principalColumn: "PhysicianID");
                    table.ForeignKey(
                        name: "FK_SH_Shipments_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataPolicyCptCodesDetails",
                columns: table => new
                {
                    SR_MedOffRampDataPolicyCptCodesDetailsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataPolicyId = table.Column<int>(type: "int", nullable: false),
                    CptCodeDetailsStatus = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailsDeductibleApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailsCopayApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailsCoInsApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailsOopMaxApplies = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailsPcpCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailsSpecialistCopayAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    CptCodeDetailscoInsuranceAmount = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    CptCodeDetailsCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataPolicyCptCodesDetails_SR_MedOffRampDataPolicyCptCodesDetailsId", x => x.SR_MedOffRampDataPolicyCptCodesDetailsId);
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataPolicyCptCodesDetails_SR_MedOffRampDataPolicy",
                        column: x => x.SR_MedOffRampDataPolicyId,
                        principalTable: "SR_MedOffRampDataPolicy",
                        principalColumn: "SR_MedOffRampDataPolicyId");
                });

            migrationBuilder.CreateTable(
                name: "SR_MedOffRampDataPolicyResultClientSpecificItems",
                columns: table => new
                {
                    SR_MedOffRampDataPolicyResultClientSpecificItemsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_MedOffRampDataPolicyId = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: true),
                    Key = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllowDelete = table.Column<bool>(type: "bit", nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_MedOffRampDataPolicyResultClientSpecificItems_SR_MedOffRampDataPolicyResultClientSpecificItemsId", x => x.SR_MedOffRampDataPolicyResultClientSpecificItemsId);
                    table.ForeignKey(
                        name: "FK_SR_MedOffRampDataPolicyResultClientSpecificItems_SR_MedOffRampDataPolicy",
                        column: x => x.SR_MedOffRampDataPolicyId,
                        principalTable: "SR_MedOffRampDataPolicy",
                        principalColumn: "SR_MedOffRampDataPolicyId");
                });

            migrationBuilder.CreateTable(
                name: "SR_RxOffRampDataPolicyCoverageLimitationMessage",
                columns: table => new
                {
                    SR_RxOffRampDataPolicyCoverageLimitationMessageId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_RxOffRampDataPolicyId = table.Column<int>(type: "int", nullable: false),
                    LookupDataListID = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Id = table.Column<int>(type: "int", nullable: false),
                    Message = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_SR_RxOffRampDataPolicyCoverageMessage_SR_RxOffRampDataPolicyCoverageMessageId", x => x.SR_RxOffRampDataPolicyCoverageLimitationMessageId);
                    table.ForeignKey(
                        name: "FK_SR_RxOffRampDatapolicyCoverageLimitationMessage_LookupDataList",
                        column: x => x.LookupDataListID,
                        principalTable: "LookupDataList",
                        principalColumn: "LookupDataListID");
                    table.ForeignKey(
                        name: "FK_SR_RxOffRampDatapolicyCoverageLimitationMessage_SR_RxOffRampDataPolicy",
                        column: x => x.SR_RxOffRampDataPolicyId,
                        principalTable: "SR_RxOffRampDataPolicy",
                        principalColumn: "SR_RxOffRampDataPolicyId");
                });

            migrationBuilder.CreateTable(
                name: "SurveyAnswersMutliSelect",
                columns: table => new
                {
                    SurveyAnswersMultiSelectID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: true),
                    SurveyAnswerID = table.Column<int>(type: "int", nullable: true),
                    SurveyLookUpDataListID = table.Column<int>(type: "int", nullable: true),
                    Notes = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyAnswersMutliSelect", x => x.SurveyAnswersMultiSelectID);
                    table.ForeignKey(
                        name: "FK_SurveyAnswersMutliSelect_SurveyAnswers",
                        column: x => x.SurveyAnswerID,
                        principalTable: "SurveyAnswers",
                        principalColumn: "SurveyAnswerID");
                    table.ForeignKey(
                        name: "FK_SurveyAnswersMutliSelect_SurveyLookupDataList",
                        column: x => x.SurveyLookUpDataListID,
                        principalTable: "SurveyLookupDataList",
                        principalColumn: "SurveyLookupDataListID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_EmailError_Log",
                columns: table => new
                {
                    LogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmailNotificationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    EntityTypeID = table.Column<int>(type: "int", nullable: true),
                    EntityID = table.Column<int>(type: "int", nullable: true),
                    Email = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ErrorSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ErrorDetails = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_EmailError_Log", x => x.LogId);
                    table.ForeignKey(
                        name: "FK_LTR_EmailError_Log_LTR_EmailNotification_EmailNotificationID",
                        column: x => x.EmailNotificationID,
                        principalTable: "LTR_EmailNotification",
                        principalColumn: "EmailNotificationID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_EmailTransaction",
                columns: table => new
                {
                    EmailTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmailNotificationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ExternalID = table.Column<int>(type: "int", nullable: true),
                    EmailEvent = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttemptNo = table.Column<int>(type: "int", nullable: true),
                    EventTimeStamp = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_EmailTransaction", x => x.EmailTransactionID);
                    table.ForeignKey(
                        name: "FK_LTR_EmailTransaction_LTR_EmailNotification_EmailNotificationID",
                        column: x => x.EmailNotificationID,
                        principalTable: "LTR_EmailNotification",
                        principalColumn: "EmailNotificationID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_FaxError_Log",
                columns: table => new
                {
                    LogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaxNotificationID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    EntityTypeID = table.Column<int>(type: "int", nullable: true),
                    EntityID = table.Column<int>(type: "int", nullable: true),
                    FaxNumber = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ErrorSource = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    ErrorDetails = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_FaxError_Log", x => x.LogId);
                    table.ForeignKey(
                        name: "FK_LTR_FaxError_Log_LTR_FaxNotification_FaxNotificationID",
                        column: x => x.FaxNotificationID,
                        principalTable: "LTR_FaxNotification",
                        principalColumn: "FaxNotificationID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_FaxTransaction",
                columns: table => new
                {
                    FaxTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FaxNotificationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ExternalID = table.Column<int>(type: "int", nullable: true),
                    Event = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttemptNo = table.Column<int>(type: "int", nullable: true),
                    EventTimeStamp = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_FaxTransaction", x => x.FaxTransactionID);
                    table.ForeignKey(
                        name: "FK_LTR_FaxTransaction_LTR_FaxNotification_FaxNotificationID",
                        column: x => x.FaxNotificationID,
                        principalTable: "LTR_FaxNotification",
                        principalColumn: "FaxNotificationID");
                });

            migrationBuilder.CreateTable(
                name: "LTR_MailTransaction",
                columns: table => new
                {
                    MailNotificationID = table.Column<int>(type: "int", nullable: false),
                    MailTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    ExternalID = table.Column<int>(type: "int", nullable: true),
                    Event = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    AttemptNo = table.Column<int>(type: "int", nullable: true),
                    EventTimeStamp = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExternalMessage = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LTR_MailTransaction", x => x.MailNotificationID);
                    table.ForeignKey(
                        name: "FK_LTR_MailTransaction_LTR_MailNotification_MailNotificationID",
                        column: x => x.MailNotificationID,
                        principalTable: "LTR_MailNotification",
                        principalColumn: "MailNotificationID");
                });

            migrationBuilder.CreateTable(
                name: "WorkflowProgramConfig",
                columns: table => new
                {
                    WorkflowProgramConfigID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    WorkflowID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The parent workflow for a program and product"),
                    InvitationExpirationHours = table.Column<int>(type: "int", nullable: true, comment: "The number of hours for which an invitation must expire"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())", comment: "The created timestamp"),
                    Updated = table.Column<DateTime>(type: "datetime", nullable: true, comment: "The updated timestamp"),
                    Domain = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, comment: "The domain for a vanity url"),
                    Subdomain = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, comment: "The subdomain for a vanity url"),
                    CSSText = table.Column<string>(type: "nvarchar(max)", nullable: true, comment: "The css to be used for custom css"),
                    LogoManufacturer = table.Column<byte[]>(type: "varbinary(max)", nullable: true, comment: "The manufacturer lo"),
                    LogoProgram = table.Column<byte[]>(type: "varbinary(max)", nullable: true, comment: "The program / franchise or drug lo"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true, comment: "Active flag"),
                    ConectDrugName = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    AttestationType = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    ConsentSource = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    SupportEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    InvitationExpirationType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_WorkflowProgramConfiguration_WorkflowProgramConfigurationID", x => x.WorkflowProgramConfigID);
                    table.ForeignKey(
                        name: "FK_WorkflowProgramConfig_Workflow",
                        column: x => x.WorkflowID,
                        principalTable: "Workflow",
                        principalColumn: "WorkflowID");
                },
                comment: "Program configuration");

            migrationBuilder.CreateTable(
                name: "WorkflowProgramInvitationConfig",
                columns: table => new
                {
                    WorkflowProgramInvitationConfigId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    WorkflowId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SupportEmail = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    EmailSubject = table.Column<string>(type: "varchar(250)", unicode: false, maxLength: 250, nullable: false),
                    SupportContactInformation = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_WorkflowProgramInvitationConfig_WorkflowProgramInvitationConfigId", x => x.WorkflowProgramInvitationConfigId);
                    table.ForeignKey(
                        name: "FK_WorkflowProgramInvitationConfig_Workflow",
                        column: x => x.WorkflowId,
                        principalTable: "Workflow",
                        principalColumn: "WorkflowID");
                });

            migrationBuilder.CreateTable(
                name: "WorkflowStepContent",
                columns: table => new
                {
                    WorkflowStepContentID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    WorkflowID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The parent workflow for a program and product"),
                    ProgramWorkflowStep = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The program workflow step in for which the content is to be displayed where the lookup name is WORKFLOW_STEPS"),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "The html markup to display"),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_WorkflowContent_WorkflowContentID", x => x.WorkflowStepContentID);
                    table.ForeignKey(
                        name: "FK_WorkflowStepContent_LookupItems_WorkflowStep",
                        column: x => x.ProgramWorkflowStep,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowStepContent_Workflow",
                        column: x => x.WorkflowID,
                        principalTable: "Workflow",
                        principalColumn: "WorkflowID");
                },
                comment: "Stores displayable content for workflow steps by content key where the lookup name is WORKFLOW_CONTENT");

            migrationBuilder.CreateTable(
                name: "WorkflowSteps",
                columns: table => new
                {
                    WorkflowStepID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    WorkflowID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The parent workflow for a program and product"),
                    WorkflowStep = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "The workflow step where the lookup name is WORKFLOW_STEPS"),
                    Sequence = table.Column<byte>(type: "tinyint", nullable: true, comment: "The workflow step sequence for display"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true, comment: "Active flag"),
                    IconCss = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    WorkflowTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HeadingText = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    ButtonText = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    StepText = table.Column<string>(type: "varchar(70)", unicode: false, maxLength: 70, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Workflow_ProgramWorkflowID", x => x.WorkflowStepID);
                    table.ForeignKey(
                        name: "FK_WorkflowSteps_Workflow",
                        column: x => x.WorkflowID,
                        principalTable: "Workflow",
                        principalColumn: "WorkflowID");
                    table.ForeignKey(
                        name: "FK_WorkflowTypeId",
                        column: x => x.WorkflowTypeId,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Workflow_LookupItems",
                        column: x => x.WorkflowStep,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                },
                comment: "The workflow steps for a workflow");

            migrationBuilder.CreateTable(
                name: "WorkflowProgramFields",
                columns: table => new
                {
                    ProgramFieldID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    FieldID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The field id"),
                    ProgramWorkflowStep = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The program workflow step in for which the field is to be displayed where the lookup name is WORKFLOW_STEPS"),
                    TableName = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, comment: "The table name of the table to present data for"),
                    FieldName = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true, comment: "The field name of the the field to present data for"),
                    FieldLabel = table.Column<string>(type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: true, comment: "The field display label"),
                    FieldPlaceHolder = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, comment: "The text to display in the input place holder attribute"),
                    Sequence = table.Column<byte>(type: "tinyint", nullable: false, comment: "The field display sequence"),
                    IsReadOnly = table.Column<bool>(type: "bit", nullable: false, comment: "Read only flag"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, comment: "Active flag"),
                    IsRequired = table.Column<bool>(type: "bit", nullable: false, comment: "Required flag"),
                    ResponseOptionKey = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "The lookup to be used to populate a list of options for the field"),
                    ConditionalSRSubType = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "The service request sub type to use for conditional display where the lookup name is SR_SUB_TYPES"),
                    ConditionalProgramFieldId = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "Indicates that the question can only be displayed based on the ConditionalValue from the given program field id."),
                    ConditionalValue = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, comment: "The conditional value of a response text to be used for display when the ConditionalProgramFieldId is specified"),
                    ConditionalResponseOption = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "The conditional value of a response option to be used for display when the ConditionalProgramFieldId is specified"),
                    FieldTag = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    DynamicDataListID = table.Column<int>(type: "int", nullable: true),
                    CssClass = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    RequiredFieldMessage = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    WhereClause = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    WorkflowID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_ProgramQuestions_ProgramQuestionID", x => x.ProgramFieldID);
                    table.ForeignKey(
                        name: "FK_WorkflowProgramFields_ConditionalField",
                        column: x => x.ConditionalProgramFieldId,
                        principalTable: "WorkflowProgramFields",
                        principalColumn: "ProgramFieldID");
                    table.ForeignKey(
                        name: "FK_WorkflowProgramFields_Fields",
                        column: x => x.FieldID,
                        principalTable: "WorkflowFields",
                        principalColumn: "FieldID");
                    table.ForeignKey(
                        name: "FK_WorkflowProgramFields_LookupItems_ProgramWorkflowStep",
                        column: x => x.ProgramWorkflowStep,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowProgramFields_LookupItems_ResponseOption",
                        column: x => x.ConditionalResponseOption,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowProgramFields_WorkflowLookupItems_ConditionalValue",
                        column: x => x.ConditionalSRSubType,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowProgramFields_WorkflowLookup_ResponseOptionKey",
                        column: x => x.ResponseOptionKey,
                        principalTable: "WorkflowLookups",
                        principalColumn: "LookupID");
                },
                comment: "Field configuration specific to a given program");

            migrationBuilder.CreateTable(
                name: "UserProgramSettings",
                columns: table => new
                {
                    UserSettingID = table.Column<int>(type: "int", nullable: false),
                    UserProgramID = table.Column<int>(type: "int", nullable: false),
                    AccessFunctionID = table.Column<int>(type: "int", nullable: false),
                    Access = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserProgramSettings", x => x.UserSettingID);
                    table.ForeignKey(
                        name: "FK_UserProgramSettings_UserAccessFunctionList",
                        column: x => x.AccessFunctionID,
                        principalTable: "UserAccessFunctionList",
                        principalColumn: "AccessFunctionID");
                    table.ForeignKey(
                        name: "FK_UserProgramSettings_UserPrograms",
                        column: x => x.UserProgramID,
                        principalTable: "UserPrograms",
                        principalColumn: "UserprogramID");
                });

            migrationBuilder.CreateTable(
                name: "BenefitHistory",
                columns: table => new
                {
                    BenefitHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: true),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldListID = table.Column<int>(type: "int", nullable: false),
                    BenefitHistoryFieldValue = table.Column<string>(type: "varchar(3000)", unicode: false, maxLength: 3000, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NA = table.Column<bool>(type: "bit", nullable: true, defaultValue: false),
                    AnswerID = table.Column<int>(type: "int", nullable: true),
                    BI_NDC_RecordID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitHistory", x => x.BenefitHistoryID);
                    table.ForeignKey(
                        name: "FK_BenefitHistory_BenefitHistoryFieldList1",
                        column: x => x.BenefitHistoryFieldListID,
                        principalTable: "BenefitHistoryFieldList",
                        principalColumn: "BenefitHistoryFieldListID");
                    table.ForeignKey(
                        name: "FK_BenefitHistory_BenefitInvestigation",
                        column: x => x.BenefitInvestigationID,
                        principalTable: "BenefitInvestigation",
                        principalColumn: "BenefitInvestigationID");
                    table.ForeignKey(
                        name: "FK_BenefitHistory_PatientInsurance1",
                        column: x => x.PatientInsuranceID,
                        principalTable: "PatientInsurance",
                        principalColumn: "PatientInsuranceID");
                    table.ForeignKey(
                        name: "FK_BenefitHistory_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "PayerAdminTicket",
                columns: table => new
                {
                    PayerAdminTicketID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    BenefitInvestigationID = table.Column<int>(type: "int", nullable: true),
                    BenefitType = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    Status = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "New"),
                    RequesterComments = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    PayerAdminComments = table.Column<string>(type: "varchar(1000)", unicode: false, maxLength: 1000, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientInsuranceID = table.Column<int>(type: "int", nullable: true),
                    ResolutionID = table.Column<int>(type: "int", nullable: true),
                    ResolvedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Resolvedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LockedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PayerAdminTicket", x => x.PayerAdminTicketID);
                    table.ForeignKey(
                        name: "FK_PayerAdminTicket_PatientInsurance",
                        column: x => x.PatientInsuranceID,
                        principalTable: "PatientInsurance",
                        principalColumn: "PatientInsuranceID");
                    table.ForeignKey(
                        name: "FK_PayerAdminTicket_PayerAdminTicket",
                        column: x => x.BenefitInvestigationID,
                        principalTable: "BenefitInvestigation",
                        principalColumn: "BenefitInvestigationID");
                });

            migrationBuilder.CreateTable(
                name: "eBvCoverageBenefitDetails",
                columns: table => new
                {
                    eBvCoverageBenefitDetailsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    PbmID = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    PbmName = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    PlanName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PlanEffectiveDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PlanEffectiveDateSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PlanType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CheckId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PbmMemberID = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    BinLocationNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CardHolderID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    CardHolderName = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    Relationship = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PersonCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    GroupName = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    PcnNumber = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: true),
                    GroupNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PolicyNumber = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    RetailPharmacy = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    RetailPharmacySpecified = table.Column<bool>(type: "bit", nullable: true),
                    MailOrderPharmacy = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    MailOrderPharmacySpecified = table.Column<bool>(type: "bit", nullable: true),
                    PatientEligibilityErrorMessage = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientEligibilityStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientEligibilityStatusSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PayerMessage = table.Column<string>(type: "varchar(264)", unicode: false, maxLength: 264, nullable: true),
                    PharmacyBenefitRetailStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyBenefitRetailStatusSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyBenefitMailOrderStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyBenefitMailOrderStatusSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyBenefitLTCStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyBenefitLTCStatusSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyBenefitSpecialtyStatus = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyBenefitSpecialtyStatusSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PatientDataConflict = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PatientDataConflictSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PatientFirstName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientMiddleName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientLastName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientSuffix = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientPrefix = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    PatientGender = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientGenderSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PatientDOB = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientDOBSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PatientAddress1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientAddress2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientCity = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PatientState = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    PatientStateSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PatientZip = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NDC = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    MedicareId = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvCoverageBenefitDetails", x => x.eBvCoverageBenefitDetailsID);
                    table.ForeignKey(
                        name: "FK_eBvCoverageBenefitDetails_BenefitInvestigation_eBV",
                        column: x => x.BenefitInvestigation_eBV_ID,
                        principalTable: "BenefitInvestigation_eBV",
                        principalColumn: "BenefitInvestigation_eBV_ID");
                });

            migrationBuilder.CreateTable(
                name: "eBvCoverageBenefitTransactions",
                columns: table => new
                {
                    eBvCoverageBenefitTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvMasterTransactionID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Failed = table.Column<bool>(type: "bit", nullable: true),
                    ErrorLog = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Locale = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RequestContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseTypeCode = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    JsonResponse = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvCoverageBenefitTransactions", x => x.eBvCoverageBenefitTransactionID);
                    table.ForeignKey(
                        name: "FK_eBvCoverageBenefitTransactions_eBvMasterTransactions",
                        column: x => x.eBvMasterTransactionID,
                        principalTable: "eBvMasterTransactions",
                        principalColumn: "eBvMasterTransactionID");
                });

            migrationBuilder.CreateTable(
                name: "eBvMedicationBenefitTransactions",
                columns: table => new
                {
                    eBvMedicationBenefitTransactionID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvMasterTransactionID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Failed = table.Column<bool>(type: "bit", nullable: true),
                    ErrorLog = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Locale = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RequestContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseContext = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponseTypeCode = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    JsonResponse = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    PbmId = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    SPId = table.Column<int>(type: "int", nullable: false),
                    NDC = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvMedicationBenefitTransactions", x => x.eBvMedicationBenefitTransactionID);
                    table.ForeignKey(
                        name: "FK_eBvMedicationBenefitTransactions_eBvMasterTransactions",
                        column: x => x.eBvMasterTransactionID,
                        principalTable: "eBvMasterTransactions",
                        principalColumn: "eBvMasterTransactionID");
                });

            migrationBuilder.CreateTable(
                name: "FundReopenSubscriptionMedications",
                columns: table => new
                {
                    FundReopenSubscriptionMedicationID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SubscriptionId = table.Column<int>(type: "int", nullable: false),
                    DrugID = table.Column<int>(type: "int", nullable: false),
                    DrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundReopenSubscriptionMedications", x => x.FundReopenSubscriptionMedicationID);
                    table.ForeignKey(
                        name: "FK_FundReopenSubscriptionMedications_FundReopenSubscriptionDetails",
                        column: x => x.SubscriptionId,
                        principalTable: "FundReopenSubscriptionDetails",
                        principalColumn: "SubscriptionId");
                });

            migrationBuilder.CreateTable(
                name: "FundReopenSubscriptionSubscribers",
                columns: table => new
                {
                    FundReopenSubscriptionSubscriberId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SubscriptionId = table.Column<int>(type: "int", nullable: false),
                    SubscriberFirstName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SubscriberLastName = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    SubscriberEmailAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    SubscriberType = table.Column<int>(type: "int", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundReopenSubscriptionSubscribers", x => x.FundReopenSubscriptionSubscriberId);
                    table.ForeignKey(
                        name: "FK_FundReopenSubscriptionSubscribers_FundReopenSubscriptionDetails",
                        column: x => x.SubscriptionId,
                        principalTable: "FundReopenSubscriptionDetails",
                        principalColumn: "SubscriptionId");
                });

            migrationBuilder.CreateTable(
                name: "SubscriptionHistory",
                columns: table => new
                {
                    SubscriptionHistoryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SubscriptionId = table.Column<int>(type: "int", nullable: false),
                    Exclude = table.Column<bool>(type: "bit", nullable: false),
                    RequestedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Source = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getutcdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubscriptionHistory", x => x.SubscriptionHistoryId);
                    table.ForeignKey(
                        name: "FK_SubscriptionHistory_FundReopenSubscriptionDetails",
                        column: x => x.SubscriptionId,
                        principalTable: "FundReopenSubscriptionDetails",
                        principalColumn: "SubscriptionId");
                });

            migrationBuilder.CreateTable(
                name: "SR_NoteHistory",
                columns: table => new
                {
                    SR_NoteHistoryID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SR_NoteID = table.Column<int>(type: "int", nullable: false),
                    ServiceRequestID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: true),
                    NoteText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    NoteDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_NoteHistory_1", x => x.SR_NoteHistoryID);
                    table.ForeignKey(
                        name: "FK_SR_NoteHistory_SR_Notes",
                        column: x => x.SR_NoteID,
                        principalTable: "SR_Notes",
                        principalColumn: "SR_NoteID");
                    table.ForeignKey(
                        name: "FK_SR_NoteHistory_ServiceRequests",
                        column: x => x.ServiceRequestID,
                        principalTable: "ServiceRequests",
                        principalColumn: "ServiceRequestID");
                });

            migrationBuilder.CreateTable(
                name: "SR_PAPScheduledPayments",
                columns: table => new
                {
                    SR_PAPScheduledPaymentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SR_PAPPaymentScheduleID = table.Column<int>(type: "int", nullable: false),
                    PaymentDate = table.Column<DateOnly>(type: "date", nullable: false),
                    PaymentAmount = table.Column<decimal>(type: "money", nullable: false),
                    PaymentGenerated = table.Column<bool>(type: "bit", nullable: true),
                    PaymentCancelled = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SR_PAPScheduledPayments", x => x.SR_PAPScheduledPaymentID);
                    table.ForeignKey(
                        name: "FK_SR_PAPScheduledPayments_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_SR_PAPScheduledPayments_SR_PAPPaymentSchedules",
                        column: x => x.SR_PAPPaymentScheduleID,
                        principalTable: "SR_PAPPaymentSchedules",
                        principalColumn: "SR_PAPPaymentScheduleID");
                });

            migrationBuilder.CreateTable(
                name: "ConnectFedexAddressVerifications",
                columns: table => new
                {
                    ConnectFedexAddressVerificationID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MailingID = table.Column<long>(type: "bigint", nullable: false),
                    ConnectFedexAPIRequestID = table.Column<long>(type: "bigint", nullable: false),
                    RequestAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true, defaultValue: ""),
                    RequestCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    RequestState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true, defaultValue: ""),
                    RequestZipCode = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true, defaultValue: ""),
                    RequestCountry = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    ResponseAddress = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true, defaultValue: ""),
                    ResponseCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    ResponseState = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true, defaultValue: ""),
                    ResponseZipCode = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true, defaultValue: ""),
                    ResponseCountry = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: ""),
                    Classification = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResultState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResultAddressLine1 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResultAddressLine2 = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResultCity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResultAddressState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ResultPostalCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "((0))"),
                    NotificationCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "((0))"),
                    NotificationMessage = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValueSql: "((0))"),
                    NotificationSeverity = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    NotificationSource = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ReplyDateTime = table.Column<DateTime>(type: "datetime", nullable: true),
                    ParsedZipCodeAddOn = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedZipCodeBase = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedBuilding = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedHouseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedPreStreetType = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedStreetName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedStreetSuffix = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedUnitNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedUnitLabel = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedLeadingDirectional = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedTrailingDirectional = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedOrganization = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedPOBox = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    ParsedRuralRoute = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeletedFlg = table.Column<bool>(type: "bit", nullable: false),
                    CreatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedByID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    UpdatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    UpdatedByID = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: "")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SH_FedexAddressVerifications", x => x.ConnectFedexAddressVerificationID);
                    table.ForeignKey(
                        name: "FK_FedexAddressVerifications_ConnectFedexAPIRequests",
                        column: x => x.ConnectFedexAPIRequestID,
                        principalTable: "ConnectFedexAPIRequests",
                        principalColumn: "ConnectFedexAPIRequestID");
                    table.ForeignKey(
                        name: "FK_FedexAddressVerifications_Mailings",
                        column: x => x.MailingID,
                        principalTable: "Mailings",
                        principalColumn: "MailingID");
                });

            migrationBuilder.CreateTable(
                name: "MailingDocuments",
                columns: table => new
                {
                    MailingDocumentID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MailingID = table.Column<long>(type: "bigint", nullable: false),
                    DocumentID = table.Column<int>(type: "int", nullable: false),
                    DeletedFlg = table.Column<bool>(type: "bit", nullable: false),
                    CreatedDt = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, defaultValue: ""),
                    LastUpdatedDt = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true, defaultValue: "")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SH_ShipmentDocuments", x => x.MailingDocumentID);
                    table.ForeignKey(
                        name: "FK_SH_ShipmentDocuments_Documents",
                        column: x => x.DocumentID,
                        principalTable: "Documents",
                        principalColumn: "DocumentID");
                    table.ForeignKey(
                        name: "FK_SH_ShipmentDocuments_SH_Shipments",
                        column: x => x.MailingID,
                        principalTable: "Mailings",
                        principalColumn: "MailingID");
                });

            migrationBuilder.CreateTable(
                name: "WorkflowPDFs",
                columns: table => new
                {
                    PDFID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramFieldID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PDFTemplateName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ListType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkflowPDFs", x => x.PDFID);
                    table.ForeignKey(
                        name: "FK_WorkflowPDFs_WorkflowProgramFields",
                        column: x => x.ProgramFieldID,
                        principalTable: "WorkflowProgramFields",
                        principalColumn: "ProgramFieldID");
                });

            migrationBuilder.CreateTable(
                name: "WorkflowResponses",
                columns: table => new
                {
                    WorkflowResponseID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The primary key"),
                    ApplicationID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The application id"),
                    ProgramFieldID = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "The parent program field id"),
                    ResponseOption = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "The selected lookup item used in the response"),
                    ResponseText = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true, comment: "The user input"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_WorkflowAnswers_WorkflowAnswerID", x => x.WorkflowResponseID);
                    table.ForeignKey(
                        name: "FK_WorkflowResponses_Applications",
                        column: x => x.ApplicationID,
                        principalTable: "EPAP_Applications",
                        principalColumn: "ApplicationID");
                    table.ForeignKey(
                        name: "FK_WorkflowResponses_WorkflowProgramFields",
                        column: x => x.ProgramFieldID,
                        principalTable: "WorkflowProgramFields",
                        principalColumn: "ProgramFieldID");
                    table.ForeignKey(
                        name: "FL_WorkflowResponses_WorkflowLookupItems_ResponseOption",
                        column: x => x.ResponseOption,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                },
                comment: "The user supplied values to workflow fields");

            migrationBuilder.CreateTable(
                name: "WorkflowStepProgramFields",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramFieldID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramWorkFlowStepID = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkflowStepProgramFields", x => x.ID);
                    table.ForeignKey(
                        name: "FK_WorkflowStepProgramFields_WorkflowLookupItems",
                        column: x => x.ProgramWorkFlowStepID,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowStepProgramFields_WorkflowProgramFields",
                        column: x => x.ProgramFieldID,
                        principalTable: "WorkflowProgramFields",
                        principalColumn: "ProgramFieldID");
                });

            migrationBuilder.CreateTable(
                name: "eBvInsuranceFormularyCoverage",
                columns: table => new
                {
                    eBvInsuranceFormularyCoverageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvCoverageBenefitDetailsID = table.Column<int>(type: "int", nullable: false),
                    FormularyStatus = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    FormularyStatusText = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    RelativeCost = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    RelativeCostLimit = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: true),
                    Otc = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    OtcSpecified = table.Column<bool>(type: "bit", nullable: true),
                    Supply = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    Generic = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    GenericSpecified = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvInsuranceFormularyCoverage", x => x.eBvInsuranceFormularyCoverageID);
                    table.ForeignKey(
                        name: "FK_eBvInsuranceFormularyCoverage_eBvCoverageBenefitDetails",
                        column: x => x.eBvCoverageBenefitDetailsID,
                        principalTable: "eBvCoverageBenefitDetails",
                        principalColumn: "eBvCoverageBenefitDetailsID");
                });

            migrationBuilder.CreateTable(
                name: "eBvMedicationBenefitDetails",
                columns: table => new
                {
                    eBvMedicationBenefitDetailsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BenefitInvestigation_eBV_ID = table.Column<int>(type: "int", nullable: false),
                    ProgramID = table.Column<short>(type: "smallint", nullable: false),
                    PbmName = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    PlanName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugCodeQualifier = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    DrugCodeValue = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    PbmErrorMessage = table.Column<string>(type: "varchar(2000)", unicode: false, maxLength: 2000, nullable: true),
                    DrugBrandName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugGenericName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugDescription = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    DrugQuantity = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DrugQuantityUOM = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DrugDaysSupply = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    DrugForm = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: true),
                    DrugStrength = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugStrengthUnit = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DrugRoute = table.Column<string>(type: "varchar(40)", unicode: false, maxLength: 40, nullable: true),
                    DrugCoverageStatusCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PriorAuthorizationStatusCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: false),
                    NDC = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    eBvCoverageBenefitDetailsID = table.Column<int>(type: "int", nullable: true),
                    SPId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvMedicationBenefitDetails", x => x.eBvMedicationBenefitDetailsID);
                    table.ForeignKey(
                        name: "FK_eBvMedicationBenefitDetails_BenefitInvestigation_eBV",
                        column: x => x.BenefitInvestigation_eBV_ID,
                        principalTable: "BenefitInvestigation_eBV",
                        principalColumn: "BenefitInvestigation_eBV_ID");
                    table.ForeignKey(
                        name: "FK_eBvMedicationBenefitDetails_eBvCoverageBenefitDetails",
                        column: x => x.eBvCoverageBenefitDetailsID,
                        principalTable: "eBvCoverageBenefitDetails",
                        principalColumn: "eBvCoverageBenefitDetailsID");
                });

            migrationBuilder.CreateTable(
                name: "SR_PAPPayments",
                columns: table => new
                {
                    SR_PAPPaymentID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramID = table.Column<int>(type: "int", nullable: false),
                    SRID = table.Column<int>(type: "int", nullable: false),
                    SR_PAPScheduledPaymentID = table.Column<int>(type: "int", nullable: true),
                    PayeeID = table.Column<int>(type: "int", nullable: true),
                    PayeeName = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Amount = table.Column<decimal>(type: "money", nullable: true),
                    PaymentDate = table.Column<DateOnly>(type: "date", nullable: false),
                    PayToPatient = table.Column<bool>(type: "bit", nullable: true),
                    PaymentForDate = table.Column<DateOnly>(type: "date", nullable: false),
                    Void = table.Column<bool>(type: "bit", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    CreatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedBy = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    SR_PAPPaymentScheduleID = table.Column<int>(type: "int", nullable: true),
                    CheckWrittenTo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PAPPayments", x => x.SR_PAPPaymentID);
                    table.ForeignKey(
                        name: "FK_SR_PAPPayments_Programs",
                        column: x => x.ProgramID,
                        principalTable: "Programs",
                        principalColumn: "ProgramID");
                    table.ForeignKey(
                        name: "FK_SR_PAPPayments_SR_PAPScheduledPayments",
                        column: x => x.SR_PAPScheduledPaymentID,
                        principalTable: "SR_PAPScheduledPayments",
                        principalColumn: "SR_PAPScheduledPaymentID");
                });

            migrationBuilder.CreateTable(
                name: "WorkflowPDFTaggings",
                columns: table => new
                {
                    PDFTaggingID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PDFID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReferencedControlID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PDFTagName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DataType = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConfigurationTag = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    Created = table.Column<DateTime>(type: "datetime", nullable: true, defaultValueSql: "(getdate())"),
                    Createdby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    LastUpdated = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdatedby = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkflowPDFTaggings", x => x.PDFTaggingID);
                    table.ForeignKey(
                        name: "FK_WorkflowPDFTaggings_WorkflowLookupItems",
                        column: x => x.DataType,
                        principalTable: "WorkflowLookupItems",
                        principalColumn: "LookupItemID");
                    table.ForeignKey(
                        name: "FK_WorkflowPDFTaggings_WorkflowPDFs",
                        column: x => x.PDFID,
                        principalTable: "WorkflowPDFs",
                        principalColumn: "PDFID");
                });

            migrationBuilder.CreateTable(
                name: "eBvCopayFactor",
                columns: table => new
                {
                    eBvCopayFactorID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvInsuranceFormularyCoverageID = table.Column<int>(type: "int", nullable: false),
                    ProductType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PharmacyType = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PharmacyTypeSpecified = table.Column<bool>(type: "bit", nullable: true),
                    OutOfPocketRangeStart = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    OutOfPocketRangeEnd = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FlatCopayAmount = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PercentCopayRate = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FirstCopayTerm = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    FirstCopayTermSpecified = table.Column<bool>(type: "bit", nullable: true),
                    MinimumCopay = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MaximumCopay = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    DaysSupplyPerCopayField = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    CopayTier = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    MaximumCopayTier = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvCopayFactor", x => x.eBvCopayFactorID);
                    table.ForeignKey(
                        name: "FK_eBvCopayFactor_eBvInsuranceFormularyCoverage",
                        column: x => x.eBvInsuranceFormularyCoverageID,
                        principalTable: "eBvInsuranceFormularyCoverage",
                        principalColumn: "eBvInsuranceFormularyCoverageID");
                });

            migrationBuilder.CreateTable(
                name: "eBvCoverageFactors",
                columns: table => new
                {
                    eBvCoverageFactorsID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvInsuranceFormularyCoverageID = table.Column<int>(type: "int", nullable: false),
                    CoverageMessageList = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    GenderLimitList = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    PriorAuthorizationRequired = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepTherapy = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepTherapySpecified = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvCoverageFactors", x => x.eBvCoverageFactorsID);
                    table.ForeignKey(
                        name: "FK_eBvCoverageFactors_eBvInsuranceFormularyCoverage",
                        column: x => x.eBvInsuranceFormularyCoverageID,
                        principalTable: "eBvInsuranceFormularyCoverage",
                        principalColumn: "eBvInsuranceFormularyCoverageID");
                });

            migrationBuilder.CreateTable(
                name: "eBvDrugPharmacyCoverage",
                columns: table => new
                {
                    eBvDrugPharmacyCoverageID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvMedicationBenefitDetailsID = table.Column<int>(type: "int", nullable: false),
                    PharmacyNCPDPID = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    PharmacyNPI = table.Column<string>(type: "varchar(35)", unicode: false, maxLength: 35, nullable: true),
                    PharmacyName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    PharmacyPhoneNumber = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PharmacyFaxNumber = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    PharmacyAddress1 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PharmacyAddress2 = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PharmacyCity = table.Column<string>(type: "varchar(255)", unicode: false, maxLength: 255, nullable: true),
                    PharmacyState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PharmacyStateSpecified = table.Column<bool>(type: "bit", nullable: true),
                    PharmacyZip = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PharmacyTypes = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    IsRequestedPharmacy = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    IsRequestedPharmacySpecified = table.Column<bool>(type: "bit", nullable: true),
                    DrugStatusCode = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    Quantity = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    QuantityUOM = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DaysSupplyPriced = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    PlanPayAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    PatientPayAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OopAppliedAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    OopRemainingAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeductibleAppliedAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DeductibleRemainingAmount = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TotalCost = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    TotalSavings = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    DrugFormularyStatusCode = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: true),
                    PriorAuthorization = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    PriorAuthorizationSpecified = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    CoveragePhaseMessage = table.Column<string>(type: "varchar(210)", unicode: false, maxLength: 210, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvDrugPharmacyCoverage", x => x.eBvDrugPharmacyCoverageID);
                    table.ForeignKey(
                        name: "FK_eBvDrugPharmacyCoverage_eBvMedicationBenefitDetails",
                        column: x => x.eBvMedicationBenefitDetailsID,
                        principalTable: "eBvMedicationBenefitDetails",
                        principalColumn: "eBvMedicationBenefitDetailsID");
                });

            migrationBuilder.CreateTable(
                name: "eBvAgeLimit",
                columns: table => new
                {
                    eBvAgeLimitID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvCoverageFactorsID = table.Column<int>(type: "int", nullable: false),
                    AgeLimitApplicable = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    AgeLimitApplicableSpecified = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    MinimumAge = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    MinimumAgeQualifier = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true),
                    MaximumAge = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    MaximumAgeQualifier = table.Column<string>(type: "varchar(20)", unicode: false, maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvAgeLimit", x => x.eBvAgeLimitID);
                    table.ForeignKey(
                        name: "FK_eBvAgeLimit_eBvCoverageFactors",
                        column: x => x.eBvCoverageFactorsID,
                        principalTable: "eBvCoverageFactors",
                        principalColumn: "eBvCoverageFactorsID");
                });

            migrationBuilder.CreateTable(
                name: "eBvQuantityLimit",
                columns: table => new
                {
                    eBvQuantityLimitID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvCoverageFactorsID = table.Column<int>(type: "int", nullable: false),
                    QuantityLimitApplicable = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    QuantityLimitApplicableSpecified = table.Column<bool>(type: "bit", nullable: true),
                    MaximumAmount = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    MaximumAmountQualifier = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    MaximumAmountTimePeriod = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: true),
                    MaximumAmountTimePeriodStartDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaximumAmountTimePeriodStartDateSpecified = table.Column<bool>(type: "bit", nullable: true),
                    MaximumAmountTimePeriodEndDate = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: true),
                    MaximumAmountTimePeriodEndDateSpecified = table.Column<bool>(type: "bit", nullable: true),
                    MaximumAmountTimePeriodUnits = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvQuantityLimit", x => x.eBvQuantityLimitID);
                    table.ForeignKey(
                        name: "FK_eBvQuantityLimit_eBvCoverageFactors",
                        column: x => x.eBvCoverageFactorsID,
                        principalTable: "eBvCoverageFactors",
                        principalColumn: "eBvCoverageFactorsID");
                });

            migrationBuilder.CreateTable(
                name: "eBvResourceLink",
                columns: table => new
                {
                    eBvResourceLinkID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvCoverageFactorsID = table.Column<int>(type: "int", nullable: false),
                    ResourceLinkMessage = table.Column<string>(type: "varchar(265)", unicode: false, maxLength: 265, nullable: true),
                    ResourceLinkMessageTypeSpecified = table.Column<bool>(type: "bit", nullable: true),
                    ResourceLinkMessageType = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvResourceLink", x => x.eBvResourceLinkID);
                    table.ForeignKey(
                        name: "FK_eBvResourceLink_eBvCoverageFactors",
                        column: x => x.eBvCoverageFactorsID,
                        principalTable: "eBvCoverageFactors",
                        principalColumn: "eBvCoverageFactorsID");
                });

            migrationBuilder.CreateTable(
                name: "eBvStepDrug",
                columns: table => new
                {
                    eBvStepDrugID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvCoverageFactorsID = table.Column<int>(type: "int", nullable: false),
                    StepDrugCode = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    StepDrugCodeQualifier = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugCodeQualifierSpecified = table.Column<bool>(type: "bit", nullable: true),
                    StepDrugStrength = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    StepDrugStrengthForm = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugStrengthUOM = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugDBCode = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: true),
                    StepDrugDBCodeQualifier = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugDBCodeQualifierSpecified = table.Column<bool>(type: "bit", nullable: true),
                    StepDrugDEASchedule = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugName = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    StepOrder = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    NumberToTry = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: true),
                    DiagnosisCode = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DiagnosisCodeQualifier = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    DiagnosisCodeQualifierSpecified = table.Column<bool>(type: "bit", nullable: true),
                    StepDrugOTC = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugOTCSpecified = table.Column<bool>(type: "bit", nullable: true),
                    StepDrugSupply = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugSupplySpecified = table.Column<bool>(type: "bit", nullable: true),
                    StepDrugGeneric = table.Column<string>(type: "varchar(10)", unicode: false, maxLength: 10, nullable: true),
                    StepDrugGenericSpecified = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvStepDrug", x => x.eBvStepDrugID);
                    table.ForeignKey(
                        name: "FK_eBvStepDrug_eBvCoverageFactors",
                        column: x => x.eBvCoverageFactorsID,
                        principalTable: "eBvCoverageFactors",
                        principalColumn: "eBvCoverageFactorsID");
                });

            migrationBuilder.CreateTable(
                name: "eBvDrugCoverageAlert",
                columns: table => new
                {
                    eBvDrugCoverageAlertID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    eBvDrugPharmacyCoverageID = table.Column<int>(type: "int", nullable: false),
                    DrugCoverageAlertCode = table.Column<string>(type: "varchar(25)", unicode: false, maxLength: 25, nullable: true),
                    DrugCoverageAlertText = table.Column<string>(type: "varchar(210)", unicode: false, maxLength: 210, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eBvDrugCoverageAlert", x => x.eBvDrugCoverageAlertID);
                    table.ForeignKey(
                        name: "FK_eBvDrugCoverageAlert_eBvDrugPharmacyCoverage",
                        column: x => x.eBvDrugPharmacyCoverageID,
                        principalTable: "eBvDrugPharmacyCoverage",
                        principalColumn: "eBvDrugPharmacyCoverageID");
                });

            migrationBuilder.CreateIndex(
                name: "ProgramIndex",
                table: "AAOSummary",
                columns: new[] { "ProgramID", "ServiceRequestID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Addresses_PayerDetailID",
                table: "Addresses",
                column: "PayerDetailID");

            migrationBuilder.CreateIndex(
                name: "IX_APIResponseMessage_MessageModuleId",
                table: "APIResponseMessage",
                column: "MessageModuleId");

            migrationBuilder.CreateIndex(
                name: "UQ__aspnet_A__17477DE472B0FDB1",
                table: "aspnet_Applications",
                column: "LoweredApplicationName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "UQ__aspnet_A__30910331758D6A5C",
                table: "aspnet_Applications",
                column: "ApplicationName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "aspnet_Membership_index",
                table: "aspnet_Membership",
                columns: new[] { "ApplicationId", "LoweredEmail" })
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "aspnet_Paths_index",
                table: "aspnet_Paths",
                columns: new[] { "ApplicationId", "LoweredPath" },
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "aspnet_PersonalizationPerUser_index1",
                table: "aspnet_PersonalizationPerUser",
                columns: new[] { "PathId", "UserId" },
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "aspnet_PersonalizationPerUser_ncindex2",
                table: "aspnet_PersonalizationPerUser",
                columns: new[] { "UserId", "PathId" },
                unique: true,
                filter: "[UserId] IS NOT NULL AND [PathId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "aspnet_Roles_index1",
                table: "aspnet_Roles",
                columns: new[] { "ApplicationId", "LoweredRoleName" },
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "aspnet_Users_Index",
                table: "aspnet_Users",
                columns: new[] { "ApplicationId", "LoweredUserName" },
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "aspnet_Users_Index2",
                table: "aspnet_Users",
                columns: new[] { "ApplicationId", "LastActivityDate" });

            migrationBuilder.CreateIndex(
                name: "aspnet_UsersInRoles_index",
                table: "aspnet_UsersInRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_BenefitHistory_BenefitHistoryFieldListID",
                table: "BenefitHistory",
                column: "BenefitHistoryFieldListID");

            migrationBuilder.CreateIndex(
                name: "IX_BenefitHistory_BIID",
                table: "BenefitHistory",
                columns: new[] { "BenefitInvestigationID", "Deleted", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "IX_BenefitHistory_PatientInsuranceID",
                table: "BenefitHistory",
                column: "PatientInsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_BenefitHistory_ProgramID",
                table: "BenefitHistory",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_BenefitHistory_ServiceRequestID",
                table: "BenefitHistory",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_BenefitHistoryFieldList_ProgramID",
                table: "BenefitHistoryFieldList",
                columns: new[] { "ProgramID", "FieldName", "Active", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_BenefitInvestigation_ServiceRequestID",
                table: "BenefitInvestigation",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "PatientInsuranceID_Deleted",
                table: "BenefitInvestigation",
                columns: new[] { "PatientInsuranceID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_BenefitInvestigation_eBV_ServiceRequestID",
                table: "BenefitInvestigation_eBV",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_ServiceRequestID",
                table: "BI_NDC_History",
                columns: new[] { "ProgramID", "ServiceRequestID", "BI_NDC_RecordID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_ServiceRequestID",
                table: "BI_NDC_Records",
                columns: new[] { "ProgramID", "Deleted", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "IX_PDD_Patient_ARUP",
                table: "Biomarin_PatientDailyDiagnosis",
                columns: new[] { "PatientID", "ARUPAccessionNumber" });

            migrationBuilder.CreateIndex(
                name: "programIDActiveDeletedRank",
                table: "CareCycleOrganizations",
                columns: new[] { "ProgramID", "Active", "Deleted", "Rank" });

            migrationBuilder.CreateIndex(
                name: "IX_CareCycleID_PhysicianID_Rank_Deleted_Includes",
                table: "CareCyclePhysicians",
                columns: new[] { "CareCycleID", "PhysicianID", "Rank", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_CareCyclePhysicians_PatientID",
                table: "CareCyclePhysicians",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_CareCyclePhysicians_PhysicianID",
                table: "CareCyclePhysicians",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "ProgramIDRandActiveDeleted",
                table: "CareCyclePhysicians",
                columns: new[] { "ProgramID", "Rank", "Active", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramIDTherapy",
                table: "CareCycles",
                columns: new[] { "ProgramID", "DrugTherapy" });

            migrationBuilder.CreateIndex(
                name: "ProgramIDInclude",
                table: "CareCycleSchedule",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_CaseRecordTransaction_CaseRecordID",
                table: "CaseRecordTransaction",
                column: "CaseRecordID");

            migrationBuilder.CreateIndex(
                name: "IX_Cayston_Staging_Patient_Referral_ProgramID_DuplicatePatientID",
                table: "Cayston_Staging_Patient_Referral",
                columns: new[] { "ProgramID", "DuplicatePatientID" });

            migrationBuilder.CreateIndex(
                name: "IX_CF_IssueSubType_CF_IssueTypeID",
                table: "CF_IssueSubType",
                column: "CF_IssueTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_ConnectFedexAddressVerifications_ConnectFedexAPIRequestID",
                table: "ConnectFedexAddressVerifications",
                column: "ConnectFedexAPIRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_ConnectFedexAddressVerifications_MailingID",
                table: "ConnectFedexAddressVerifications",
                column: "MailingID");

            migrationBuilder.CreateIndex(
                name: "IX_ConnectModularDocTransaction_DocumentID",
                table: "ConnectModularDocTransaction",
                column: "DocumentID");

            migrationBuilder.CreateIndex(
                name: "IX_ConnectModularDocTransaction_EBvModularTransactionID",
                table: "ConnectModularDocTransaction",
                column: "EBvModularTransactionID");

            migrationBuilder.CreateIndex(
                name: "IX_ConnectPayerMap_OfframpClientID",
                table: "ConnectPayerMap",
                column: "OfframpClientID");

            migrationBuilder.CreateIndex(
                name: "ContactID",
                table: "ContactAddresses",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "Zipcode",
                table: "ContactAddresses",
                column: "ZIP");

            migrationBuilder.CreateIndex(
                name: "IX_ContactDynamicData_ContactID",
                table: "ContactDynamicData",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "IX_ContactDynamicData_DynamicDataListID",
                table: "ContactDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_ContactNotes_ContactID",
                table: "ContactNotes",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "ContactID_OrganizationID",
                table: "ContactOrganizations",
                columns: new[] { "ContactID", "OrganizationID" });

            migrationBuilder.CreateIndex(
                name: "IX_ContactOrganizations_OrganizationID",
                table: "ContactOrganizations",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "ContactPhone",
                table: "ContactPhoneNumbers",
                columns: new[] { "ProgramID", "ContactID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_ContactID_PhoneType_Active_Deleted",
                table: "ContactPhoneNumbers",
                columns: new[] { "ContactID", "PhoneType", "Active", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_ContactPhysicians",
                table: "ContactPhysicians",
                columns: new[] { "ProgramID", "ContactID" });

            migrationBuilder.CreateIndex(
                name: "IX_ContactPhysicians_ContactID",
                table: "ContactPhysicians",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "IX_ContactPhysicians_PhysicianID",
                table: "ContactPhysicians",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "Deleted_Includes",
                table: "Contacts",
                column: "Deleted");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_ProgramID",
                table: "Contacts",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_CoveredCounties_ConatctID",
                table: "CoveredCounties",
                column: "ConatctID");

            migrationBuilder.CreateIndex(
                name: "IX_CoveredCounties_OrgID",
                table: "CoveredCounties",
                column: "OrgID");

            migrationBuilder.CreateIndex(
                name: "IX_DashboardPanelPrograms_DashboardPanelListID",
                table: "DashboardPanelPrograms",
                column: "DashboardPanelListID");

            migrationBuilder.CreateIndex(
                name: "IX_DashboardPanelPrograms_ProgramID",
                table: "DashboardPanelPrograms",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_DashboardPanelUserSettings_DashboardPanelListID",
                table: "DashboardPanelUserSettings",
                column: "DashboardPanelListID");

            migrationBuilder.CreateIndex(
                name: "IX_DashboardPanelUserSettings_ProgramID",
                table: "DashboardPanelUserSettings",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "Idx_DATABASECHANGESTATUS_ID",
                table: "DATABASECHANGESTATUS",
                column: "ID");

            migrationBuilder.CreateIndex(
                name: "Idx_DATABASECHANGESTATUS_Status",
                table: "DATABASECHANGESTATUS",
                column: "Status");

            migrationBuilder.CreateIndex(
                name: "IX_DataConfiguration_DataDictionaryID",
                table: "DataConfiguration",
                column: "DataDictionaryID");

            migrationBuilder.CreateIndex(
                name: "IX_DataConfiguration_ProgramID",
                table: "DataConfiguration",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_DataConfiguration_SR_TypeListID",
                table: "DataConfiguration",
                column: "SR_TypeListID");

            migrationBuilder.CreateIndex(
                name: "IX_KeyValueInt",
                table: "DF_CDC",
                columns: new[] { "ProgramID", "Deleted", "KeyValInt" });

            migrationBuilder.CreateIndex(
                name: "IX_KeyValueStr",
                table: "DF_CDC",
                columns: new[] { "ProgramID", "KeyValStr" });

            migrationBuilder.CreateIndex(
                name: "ICDCode include",
                table: "DiagnosisList",
                columns: new[] { "ICDCode", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_Directories_Organizations",
                table: "Directories_Organizations",
                column: "OrganizationID",
                unique: true,
                filter: "[OrganizationID] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Dispenses_ItemName_Deleted",
                table: "Dispenses",
                columns: new[] { "ItemName", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Dispenses_ProgramID_Deleted",
                table: "Dispenses",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "PatientID",
                table: "Dispenses",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "Program_PatientID_Drug",
                table: "Dispenses",
                columns: new[] { "ProgramID", "PatientID", "DrugName" });

            migrationBuilder.CreateIndex(
                name: "IX_Document_Fields_Document_DocTypeID",
                table: "Document_Fields",
                column: "Document_DocTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_Document_Fields_DocumentFieldListID",
                table: "Document_Fields",
                column: "DocumentFieldListID");

            migrationBuilder.CreateIndex(
                name: "IX_Document_Fields_Program",
                table: "Document_Fields",
                columns: new[] { "ProgramID", "Document_DocTypeID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "DocumentID_ProgramID_Includes",
                table: "Document_OutboundFaxes",
                columns: new[] { "DocumentID", "ProgramID" });

            migrationBuilder.CreateIndex(
                name: "IX_DocumentAttachments_DocTypes",
                table: "DocumentAttachments_DocTypes",
                columns: new[] { "DocumentID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_DocumentAttachments_DocTypes_LookupDataListID",
                table: "DocumentAttachments_DocTypes",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentFieldList_DocumentListID",
                table: "DocumentFieldList",
                column: "DocumentListID");

            migrationBuilder.CreateIndex(
                name: "EntityID",
                table: "Documents",
                column: "EntityID");

            migrationBuilder.CreateIndex(
                name: "IX_Documents_Program",
                table: "Documents",
                columns: new[] { "ProgramID", "Deleted", "EntityID", "EntityName", "FileStorageID", "FileName", "Source" });

            migrationBuilder.CreateIndex(
                name: "IX_Documents_DocTypes_DocumentID",
                table: "Documents_DocTypes",
                column: "DocumentID");

            migrationBuilder.CreateIndex(
                name: "IX_Documents_DocTypes_DocumentListID",
                table: "Documents_DocTypes",
                column: "DocumentListID");

            migrationBuilder.CreateIndex(
                name: "InvitateID",
                table: "Documents_eHIPAAInvites",
                column: "InvitateID");

            migrationBuilder.CreateIndex(
                name: "IX_Documents_FaxQueues_ProgramID",
                table: "Documents_FaxQueues",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_Documents_FQ_Users_Documents_FaxQueueID",
                table: "Documents_FQ_Users",
                column: "Documents_FaxQueueID");

            migrationBuilder.CreateIndex(
                name: "Documents_FaxQueueID_GroupName_ProcessedDate_Includes",
                table: "Documents_InboundFaxes",
                columns: new[] { "Documents_FaxQueueID", "GroupName", "ProcessedDate" });

            migrationBuilder.CreateIndex(
                name: "IX_Documents_InboundFaxes_QID",
                table: "Documents_InboundFaxes",
                columns: new[] { "Documents_FaxQueueID", "Status" });

            migrationBuilder.CreateIndex(
                name: "IX_DuplicateNPITracking_PhysicianID",
                table: "DuplicateNPITracking",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_DuplicatePatientQueue_PatientSearchResultId",
                table: "DuplicatePatientQueue",
                column: "PatientSearchResultId");

            migrationBuilder.CreateIndex(
                name: "IX_DynamicDataByLookupData_DynamicDataListID",
                table: "DynamicDataByLookupData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_DynamicDataByLookupData_LookupDataListID",
                table: "DynamicDataByLookupData",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "Program_Deleted_Include",
                table: "DynamicDataList",
                columns: new[] { "ProgramID", "Deleted", "Active" });

            migrationBuilder.CreateIndex(
                name: "Program_Deleted_Include_All",
                table: "DynamicDataList",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_eBvAgeLimit_eBvCoverageFactorsID",
                table: "eBvAgeLimit",
                column: "eBvCoverageFactorsID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvCopayFactor_eBvInsuranceFormularyCoverageID",
                table: "eBvCopayFactor",
                column: "eBvInsuranceFormularyCoverageID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvCoverageBenefitDetails_BenefitInvestigation_eBV_ID",
                table: "eBvCoverageBenefitDetails",
                column: "BenefitInvestigation_eBV_ID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvCoverageBenefitTransactions_eBvMasterTransactionID",
                table: "eBvCoverageBenefitTransactions",
                column: "eBvMasterTransactionID");

            migrationBuilder.CreateIndex(
                name: "UNIQUE_eBvInsuranceFormularyCoverageID",
                table: "eBvCoverageFactors",
                column: "eBvInsuranceFormularyCoverageID",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_eBvDrugCoverageAlert_eBvDrugPharmacyCoverageID",
                table: "eBvDrugCoverageAlert",
                column: "eBvDrugPharmacyCoverageID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvDrugPharmacyCoverage_eBvMedicationBenefitDetailsID",
                table: "eBvDrugPharmacyCoverage",
                column: "eBvMedicationBenefitDetailsID");

            migrationBuilder.CreateIndex(
                name: "UNIQUE_eBvCoverageBenefitDetailsID",
                table: "eBvInsuranceFormularyCoverage",
                column: "eBvCoverageBenefitDetailsID",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_eBvMasterTransactions_ServiceRequestID",
                table: "eBvMasterTransactions",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvMedicationBenefitDetails_BenefitInvestigation_eBV_ID",
                table: "eBvMedicationBenefitDetails",
                column: "BenefitInvestigation_eBV_ID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvMedicationBenefitDetails_eBvCoverageBenefitDetailsID",
                table: "eBvMedicationBenefitDetails",
                column: "eBvCoverageBenefitDetailsID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvMedicationBenefitTransactions_eBvMasterTransactionID",
                table: "eBvMedicationBenefitTransactions",
                column: "eBvMasterTransactionID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvQuantityLimit_eBvCoverageFactorsID",
                table: "eBvQuantityLimit",
                column: "eBvCoverageFactorsID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvResourceLink_eBvCoverageFactorsID",
                table: "eBvResourceLink",
                column: "eBvCoverageFactorsID");

            migrationBuilder.CreateIndex(
                name: "IX_eBvStepDrug_eBvCoverageFactorsID",
                table: "eBvStepDrug",
                column: "eBvCoverageFactorsID");

            migrationBuilder.CreateIndex(
                name: "IX_EntityMergeDetailsLog_EntityMergeLogId",
                table: "EntityMergeDetailsLog",
                column: "EntityMergeLogId");

            migrationBuilder.CreateIndex(
                name: "IX_EPAP_Applications_InvitationID",
                table: "EPAP_Applications",
                column: "InvitationID");

            migrationBuilder.CreateIndex(
                name: "IX_eServicesConfigList_PortalFunctionListID",
                table: "eServicesConfigList",
                column: "PortalFunctionListID");

            migrationBuilder.CreateIndex(
                name: "IX_eServicesProgramConfig_eServicesConfigListID",
                table: "eServicesProgramConfig",
                column: "eServicesConfigListID");

            migrationBuilder.CreateIndex(
                name: "IX_eServicesProgramConfig_ProgramID",
                table: "eServicesProgramConfig",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_FAQ_SRType_FaqListID",
                table: "FAQ_SRType",
                column: "FaqListID");

            migrationBuilder.CreateIndex(
                name: "IX_FAX_LOG_DETAILS_FLD_FLS_ID",
                table: "FAX_LOG_DETAILS",
                column: "FLD_FLS_ID");

            migrationBuilder.CreateIndex(
                name: "IX_FAX_LOG_EXCEPTIONS_FLE_FLD_ID",
                table: "FAX_LOG_EXCEPTIONS",
                column: "FLE_FLD_ID");

            migrationBuilder.CreateIndex(
                name: "IX_FAX_LOG_EXCEPTIONS_FLE_FLS_ID",
                table: "FAX_LOG_EXCEPTIONS",
                column: "FLE_FLS_ID");

            migrationBuilder.CreateIndex(
                name: "IX_FaxNumbers_PayerDetailID",
                table: "FaxNumbers",
                column: "PayerDetailID");

            migrationBuilder.CreateIndex(
                name: "IX_Feedback_Configurations_ManagementUserGroupID",
                table: "Feedback_Configurations",
                column: "ManagementUserGroupID");

            migrationBuilder.CreateIndex(
                name: "IX_Feedback_Configurations_ProgramID",
                table: "Feedback_Configurations",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_Feedback_Configurations_SR_ActivityListID",
                table: "Feedback_Configurations",
                column: "SR_ActivityListID");

            migrationBuilder.CreateIndex(
                name: "IX_Feedback_Configurations_SR_TypeListID",
                table: "Feedback_Configurations",
                column: "SR_TypeListID");

            migrationBuilder.CreateIndex(
                name: "IX_FundEnrollmentApplicationPatientSite_FundEnrollmentApplicationID",
                table: "FundEnrollmentApplicationPatientSite",
                column: "FundEnrollmentApplicationID");

            migrationBuilder.CreateIndex(
                name: "ix_FundEnrollmentApplications_EnrollmentType_CreatedBy_SubmitDate_Deleted_ApplicationState_includes",
                table: "FundEnrollmentApplications",
                columns: new[] { "EnrollmentType", "CreatedBy", "SubmitDate", "Deleted", "ApplicationState" });

            migrationBuilder.CreateIndex(
                name: "ix_FundEnrollmentApplications_EnrollmentType_FundId_PatientID_ApplicationState_Deleted",
                table: "FundEnrollmentApplications",
                columns: new[] { "EnrollmentType", "FundId", "PatientID", "ApplicationState", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ix_FundEnrollmentApplications_ProgramID_Deleted_PatientID_EnrollmentType_SubmitDate",
                table: "FundEnrollmentApplications",
                columns: new[] { "ProgramID", "Deleted", "PatientID", "EnrollmentType", "SubmitDate" });

            migrationBuilder.CreateIndex(
                name: "ix_FundEnrollmentApplications_ServiceRequestID_Deleted",
                table: "FundEnrollmentApplications",
                columns: new[] { "ServiceRequestID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_FundReopenSubscriptionDetails_FundEnrollmentApplicationId",
                table: "FundReopenSubscriptionDetails",
                column: "FundEnrollmentApplicationId");

            migrationBuilder.CreateIndex(
                name: "IX_FundReopenSubscriptionDetails_ServiceRequestId",
                table: "FundReopenSubscriptionDetails",
                column: "ServiceRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_FundReopenSubscriptionMedications_SubscriptionId",
                table: "FundReopenSubscriptionMedications",
                column: "SubscriptionId");

            migrationBuilder.CreateIndex(
                name: "IX_FundReopenSubscriptionSubscribers_SubscriptionId",
                table: "FundReopenSubscriptionSubscribers",
                column: "SubscriptionId");

            migrationBuilder.CreateIndex(
                name: "IX_GrantUsePolicyException_ExtensionReasonId",
                table: "GrantUsePolicyException",
                column: "ExtensionReasonId");

            migrationBuilder.CreateIndex(
                name: "IX_GrantUsePolicyException_ServiceRequestId",
                table: "GrantUsePolicyException",
                column: "ServiceRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_GrantUsePolicyException_StatusId",
                table: "GrantUsePolicyException",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "ProgramAndID",
                table: "ININLog",
                columns: new[] { "InteractionId", "ProgramId", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_InsuranceAddresses_InsuranceID",
                table: "InsuranceAddresses",
                column: "InsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_InsuranceDynamicData_DynamicDataListID",
                table: "InsuranceDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_InsuranceDynamicData_InsuranceID",
                table: "InsuranceDynamicData",
                column: "InsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_InsuranceNotes_InsuranceID",
                table: "InsuranceNotes",
                column: "InsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_InsurancePhoneNumbers_InsuranceID",
                table: "InsurancePhoneNumbers",
                column: "InsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_Insurances_PayerID",
                table: "Insurances",
                column: "PayerID");

            migrationBuilder.CreateIndex(
                name: "IX_LokupDataList_FunctionName",
                table: "LookupDataList",
                column: "FunctionName");

            migrationBuilder.CreateIndex(
                name: "IX_LookupDataList_Category",
                table: "LookupDataList",
                column: "Category");

            migrationBuilder.CreateIndex(
                name: "IX_LookupDataList_ProgramID",
                table: "LookupDataList",
                columns: new[] { "ProgramID", "Active" });

            migrationBuilder.CreateIndex(
                name: "UQ_StatusList",
                table: "LookupLists",
                column: "Code",
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_LTR_EmailError_Log_EmailNotificationID",
                table: "LTR_EmailError_Log",
                column: "EmailNotificationID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_EmailNotification_NotificationItemID",
                table: "LTR_EmailNotification",
                column: "NotificationItemID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_EmailTransaction_EmailNotificationID",
                table: "LTR_EmailTransaction",
                column: "EmailNotificationID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_FaxError_Log_FaxNotificationID",
                table: "LTR_FaxError_Log",
                column: "FaxNotificationID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_FaxNotification_NotificationItemID",
                table: "LTR_FaxNotification",
                column: "NotificationItemID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_FaxTransaction_FaxNotificationID",
                table: "LTR_FaxTransaction",
                column: "FaxNotificationID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_LookupListItem_ListId",
                table: "LTR_LookupListItem",
                column: "ListId");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_MailNotification_NotificationItemID",
                table: "LTR_MailNotification",
                column: "NotificationItemID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_NotificationItems_DocumentListID",
                table: "LTR_NotificationItems",
                column: "DocumentListID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_NotificationItems_EmailTemplateID",
                table: "LTR_NotificationItems",
                column: "EmailTemplateID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_NotificationItems_NotificationID",
                table: "LTR_NotificationItems",
                column: "NotificationID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_ProcessLog_NotificationID",
                table: "LTR_ProcessLog",
                column: "NotificationID");

            migrationBuilder.CreateIndex(
                name: "IX_LTR_ProcessLog_NotificationItemID",
                table: "LTR_ProcessLog",
                column: "NotificationItemID");

            migrationBuilder.CreateIndex(
                name: "IX_MailingDocuments_DocumentID",
                table: "MailingDocuments",
                column: "DocumentID");

            migrationBuilder.CreateIndex(
                name: "IX_MailingDocuments_MailingID",
                table: "MailingDocuments",
                column: "MailingID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_ContactAddressID",
                table: "Mailings",
                column: "ContactAddressID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_ContactID",
                table: "Mailings",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_EntityID",
                table: "Mailings",
                column: "EntityID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_PatientAddressID",
                table: "Mailings",
                column: "PatientAddressID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_PatientID",
                table: "Mailings",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_PhysicianAddressID",
                table: "Mailings",
                column: "PhysicianAddressID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_PhysicianID",
                table: "Mailings",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_Mailings_ServiceRequestID",
                table: "Mailings",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SH_Shipments",
                table: "Mailings",
                column: "MailingNumber",
                unique: true,
                filter: "[MailingNumber] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_MDMPatientProcessResult_PatientSearchResultId",
                table: "MDMPatientProcessResult",
                column: "PatientSearchResultId");

            migrationBuilder.CreateIndex(
                name: "IX_MedeBVOfframpCOBBlurbAdditionalRules_MedeBVOfframpCOBBlurbRulesID",
                table: "MedeBVOfframpCOBBlurbAdditionalRules",
                column: "MedeBVOfframpCOBBlurbRulesID");

            migrationBuilder.CreateIndex(
                name: "IX_MedvantxInventoryUpdate_TriageRecordId",
                table: "MedvantxInventoryUpdate",
                column: "TriageRecordId");

            migrationBuilder.CreateIndex(
                name: "IX_MedvantxLots_MedvantxInventoryUpdateId",
                table: "MedvantxLots",
                column: "MedvantxInventoryUpdateId");

            migrationBuilder.CreateIndex(
                name: "ProgramID_Source_Status_Deleted",
                table: "Message_Queue",
                columns: new[] { "ProgramID", "Source", "Status", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Messages_OrganizationID",
                table: "Messages",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_PatientID",
                table: "Messages",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_ProviderID",
                table: "Messages",
                column: "ProviderID");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_ThreadID",
                table: "Messages",
                column: "ThreadID");

            migrationBuilder.CreateIndex(
                name: "IX_MessagesProgram",
                table: "Messages",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "NonClusteredIndex-20220514-022345",
                table: "MessageThreadReaders",
                column: "ThreadID");

            migrationBuilder.CreateIndex(
                name: "IX_MessageThreads_MessageTypeID",
                table: "MessageThreads",
                column: "MessageTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_ThreadsProgram",
                table: "MessageThreads",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramLastMsgDate",
                table: "MessageThreads",
                columns: new[] { "ProgramID", "Deleted", "LastMessageDate" });

            migrationBuilder.CreateIndex(
                name: "IX_MobileDrugSurveyElements_MobileSurveyElementID",
                table: "MobileDrugSurveyElements",
                column: "MobileSurveyElementID");

            migrationBuilder.CreateIndex(
                name: "IX_MobilePatientSurveyAnswerMaster_MobileMasterSurveyID",
                table: "MobilePatientSurveyAnswerMaster",
                column: "MobileMasterSurveyID");

            migrationBuilder.CreateIndex(
                name: "IX_MobilePatientSurveyAnswers_MobileDrugSurveyElementID",
                table: "MobilePatientSurveyAnswers",
                column: "MobileDrugSurveyElementID");

            migrationBuilder.CreateIndex(
                name: "IX_MobilePatientSurveyAnswers_MobilePatientSurveyAnswerMasterID",
                table: "MobilePatientSurveyAnswers",
                column: "MobilePatientSurveyAnswerMasterID");

            migrationBuilder.CreateIndex(
                name: "IX_MobilePatientSurveyAnswers_MobileSurveySubElementID",
                table: "MobilePatientSurveyAnswers",
                column: "MobileSurveySubElementID");

            migrationBuilder.CreateIndex(
                name: "IX_MobileRefillOrderItems_MobileRefillOrderID",
                table: "MobileRefillOrderItems",
                column: "MobileRefillOrderID");

            migrationBuilder.CreateIndex(
                name: "IX_MobileRequestPharmacyCall",
                table: "MobileRequestPharmacyCall",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_MobileSurveySubElements_MobileSurveyElementID",
                table: "MobileSurveySubElements",
                column: "MobileSurveyElementID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyAccreditations_NA_AccreditationListID",
                table: "NurseAgencyAccreditations",
                column: "NA_AccreditationListID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyAccreditations_NurseAgencyID",
                table: "NurseAgencyAccreditations",
                column: "NurseAgencyID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyAddresses_NurseAgencyID",
                table: "NurseAgencyAddresses",
                column: "NurseAgencyID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyCertifications_NA_CertificationListID",
                table: "NurseAgencyCertifications",
                column: "NA_CertificationListID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyCertifications_NurseAgencyID",
                table: "NurseAgencyCertifications",
                column: "NurseAgencyID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyCoveredCounties_NurseAgencyID",
                table: "NurseAgencyCoveredCounties",
                column: "NurseAgencyID");

            migrationBuilder.CreateIndex(
                name: "IX_NurseAgencyNurses_NurseAgencyID",
                table: "NurseAgencyNurses",
                column: "NurseAgencyID");

            migrationBuilder.CreateIndex(
                name: "IX_OfframpCustomConnectInfo_OfframpClientID",
                table: "OfframpCustomConnectInfo",
                column: "OfframpClientID");

            migrationBuilder.CreateIndex(
                name: "IX_OfframpExternalHubInfo_OfframpClientID",
                table: "OfframpExternalHubInfo",
                column: "OfframpClientID");

            migrationBuilder.CreateIndex(
                name: "IX_OnsitePharmacies_VendorID",
                table: "OnsitePharmacies",
                column: "VendorID");

            migrationBuilder.CreateIndex(
                name: "OrganizationID",
                table: "OrganizationAddresses",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "ProgramIDDeleted",
                table: "OrganizationAddresses",
                columns: new[] { "MDMProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationDynamicData_DynamicDataListID",
                table: "OrganizationDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationDynamicData_OrganizationID",
                table: "OrganizationDynamicData",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_OrgEnrollments_SRID",
                table: "OrganizationEnrollments",
                column: "SRID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationNotes_OrganizationID",
                table: "OrganizationNotes",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationNPIs_OrganizationAddressID",
                table: "OrganizationNPIs",
                column: "OrganizationAddressID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationNPIs_OrganizationID",
                table: "OrganizationNPIs",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationNPIs_ProgramID",
                table: "OrganizationNPIs",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPhoneNumbers_OrganizationID",
                table: "OrganizationPhoneNumbers",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramID_OrganizationID_Deleted_Includes",
                table: "OrganizationPhoneNumbers",
                columns: new[] { "ProgramID", "OrganizationID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPrograms_OrgnizationID",
                table: "OrganizationPrograms",
                column: "OrgnizationID");

            migrationBuilder.CreateIndex(
                name: "IX_Organizations",
                table: "Organizations",
                columns: new[] { "MDMProgramID", "Deleted", "OrganizationName" });

            migrationBuilder.CreateIndex(
                name: "Org Name",
                table: "Organizations",
                column: "OrganizationName");

            migrationBuilder.CreateIndex(
                name: "ProgramIDDeleted",
                table: "Organizations",
                columns: new[] { "MDMProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramHighTouchChange",
                table: "Organizations_Audit",
                columns: new[] { "MDMProgramID", "HighTouchChanged" });

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationTaxIDs_OrganizationAddressID",
                table: "OrganizationTaxIDs",
                column: "OrganizationAddressID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationTaxIDs_OrganizationID",
                table: "OrganizationTaxIDs",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationTaxIDs_ProgramID",
                table: "OrganizationTaxIDs",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_PAN_ApplicationTokenRoles_ApplicationID",
                table: "PAN_ApplicationTokenRoles",
                column: "ApplicationID");

            migrationBuilder.CreateIndex(
                name: "IX_PAN_ApplicationTokenRoles_ClientID",
                table: "PAN_ApplicationTokenRoles",
                column: "ClientID");

            migrationBuilder.CreateIndex(
                name: "IX_PAN_ApplicationTokenRoles_RoleID",
                table: "PAN_ApplicationTokenRoles",
                column: "RoleID");

            migrationBuilder.CreateIndex(
                name: "IX_PAN_DisenrollmentReversal_StatusId",
                table: "PAN_DisenrollmentReversal",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_PAN_DisenrollmentReversal_temp_StatusId",
                table: "PAN_DisenrollmentReversal_temp",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientAddresses_MDMProgramID",
                table: "PatientAddresses",
                column: "MDMProgramID");

            migrationBuilder.CreateIndex(
                name: "NonClusteredIndex-20170427-021308",
                table: "PatientAddresses",
                columns: new[] { "PatientID", "Active", "Deleted", "Rank" });

            migrationBuilder.CreateIndex(
                name: "INDX_PatientConsentAudit_PatientID_ProgramID",
                table: "PatientConsentAudit",
                columns: new[] { "PatientID", "ProgramID" });

            migrationBuilder.CreateIndex(
                name: "PatientConsentPerDrug_IDX_Covering",
                table: "PatientConsentPerDrug",
                columns: new[] { "ProgramID", "Deleted", "PatientID", "ConsentReceived", "OptOut", "Consent_Manu_ExpDate", "DrugName" });

            migrationBuilder.CreateIndex(
                name: "PatientConsentPerDrug_optoutInfo",
                table: "PatientConsentPerDrug",
                columns: new[] { "ProgramID", "ConsentReceived", "Deleted", "Consent_Manu_ExpDate" });

            migrationBuilder.CreateIndex(
                name: "ProgramID_ConsentReceived_OptOut_Deleted_Consent_Manu_ExpDate_Includes",
                table: "PatientConsentPerDrug",
                columns: new[] { "ProgramID", "ConsentReceived", "OptOut", "Deleted", "Consent_Manu_ExpDate" });

            migrationBuilder.CreateIndex(
                name: "ProgramPatientID",
                table: "PatientConsentPerDrug",
                columns: new[] { "ProgramID", "PatientID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientContact_ContactID",
                table: "PatientContact",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientContact_PatientID",
                table: "PatientContact",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientDevices",
                table: "PatientDevices",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientDiagnosis_DiagnosisListID",
                table: "PatientDiagnosis",
                column: "DiagnosisListID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientDiagnosis_PatientID",
                table: "PatientDiagnosis",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientDynamicData_DynamicDataListID",
                table: "PatientDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientDynamicData_Program",
                table: "PatientDynamicData",
                columns: new[] { "ProgramID", "Deleted", "PatientID" });

            migrationBuilder.CreateIndex(
                name: "PatientID_ProgramID",
                table: "PatientDynamicData",
                columns: new[] { "PatientID", "ProgramID" });

            migrationBuilder.CreateIndex(
                name: "PatientID_ProgramID_DynamicDataListID_Deleted",
                table: "PatientDynamicData",
                columns: new[] { "PatientID", "ProgramID", "DynamicDataListID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NCI_PATFMHIS_SRID_EnrollmentDate",
                table: "PatientFMRSR_History",
                columns: new[] { "SRID", "EnrollmentDate" });

            migrationBuilder.CreateIndex(
                name: "Program_SRID_SHID",
                table: "PatientFMRSR_History",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientInsurance_InsuranceType",
                table: "PatientInsurance",
                column: "InsuranceType");

            migrationBuilder.CreateIndex(
                name: "IX_PatientInsurance_MedicalInsuranceID",
                table: "PatientInsurance",
                column: "MedicalInsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientInsurance_PatientID",
                table: "PatientInsurance",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientInsurance_PharmacyInsuranceID",
                table: "PatientInsurance",
                column: "PharmacyInsuranceID");

            migrationBuilder.CreateIndex(
                name: "Pkid_PatientJourney",
                table: "PatientJourneyData",
                column: "Pkid")
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "ProgramSRID",
                table: "PatientLISCheck",
                columns: new[] { "ProgramID", "ServiceRequestID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientNotes_PatientID",
                table: "PatientNotes",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "NonClusteredIndex-20170427-021209",
                table: "PatientOrganizations",
                columns: new[] { "PatientID", "OrganizationID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "NonClusteredIndex-20170511-125020",
                table: "PatientPhoneNumbers",
                columns: new[] { "PatientID", "Active", "Deleted", "Rank" });

            migrationBuilder.CreateIndex(
                name: "PatientPhone",
                table: "PatientPhoneNumbers",
                columns: new[] { "ProgramID", "PatientID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Deleted",
                table: "PatientPhysicians",
                column: "Deleted");

            migrationBuilder.CreateIndex(
                name: "IX_PatientPhysicians",
                table: "PatientPhysicians",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientPhysicians_PhysicianID",
                table: "PatientPhysicians",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientPhysicians_ProgramID_Rank_Active_Deleted",
                table: "PatientPhysicians",
                columns: new[] { "ProgramID", "Rank", "Active", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientPrescription_PrescriptionID",
                table: "PatientPrescription",
                column: "PrescriptionID");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_PREMS_SRID_EnrollmentDate_Resolution",
                table: "PatientREMS",
                columns: new[] { "SRID", "EnrollmentDate", "Resolution" });

            migrationBuilder.CreateIndex(
                name: "PatentID",
                table: "PatientREMS",
                columns: new[] { "PatientID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "PatientID",
                table: "PatientREMS",
                columns: new[] { "PatientID", "ProgramID", "DrugName", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramID_Include",
                table: "PatientREMS",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Deleted_PatientAuthCode_Includes",
                table: "Patients",
                columns: new[] { "Deleted", "PatientAuthCode" });

            migrationBuilder.CreateIndex(
                name: "NonClusteredIndex-20170511-130055",
                table: "Patients",
                columns: new[] { "MDMProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "PatientName",
                table: "Patients",
                column: "Deleted");

            migrationBuilder.CreateIndex(
                name: "ProgramIDandPatientID",
                table: "Patients_Audit",
                columns: new[] { "PatientID", "MDMProgramID" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientSite_PatientID",
                table: "PatientSite",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientSnoozedAlerts_OrganizationID",
                table: "PatientSnoozedAlerts",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientSnoozedAlerts_PatientID",
                table: "PatientSnoozedAlerts",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "ProgramID_PatientID_DrugName_EndDate",
                table: "PatientSpecialtyPharmacies",
                columns: new[] { "ProgramID", "PatientID", "DrugName", "EndDate" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientStatus_PatientStatusListID",
                table: "PatientStatus",
                column: "PatientStatusListID");

            migrationBuilder.CreateIndex(
                name: "PatientID_Deleted",
                table: "PatientStatus",
                columns: new[] { "PatientID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramInclude",
                table: "PatientStatus",
                columns: new[] { "ProgramID", "Deleted", "PatientID" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientStatusNonHub_PatientStatusListID",
                table: "PatientStatusNonHub",
                column: "PatientStatusListID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientStatusProgramList_PatientStatusListID",
                table: "PatientStatusProgramList",
                column: "PatientStatusListID");

            migrationBuilder.CreateIndex(
                name: "IX_PatientStatusProgramList_ProgramID",
                table: "PatientStatusProgramList",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_PayerAddresses_PayerID",
                table: "PayerAddresses",
                column: "PayerID");

            migrationBuilder.CreateIndex(
                name: "IX_PayerAdminTicket_BenefitInvestigationID",
                table: "PayerAdminTicket",
                column: "BenefitInvestigationID");

            migrationBuilder.CreateIndex(
                name: "IX_PayerAdminTicket_PatientInsuranceID",
                table: "PayerAdminTicket",
                column: "PatientInsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_Payers_PayerCategories_LookupDataListID",
                table: "Payers_PayerCategories",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_Table_LastName",
                table: "PECOS_Providers_NPI_LookUpList",
                column: "LastName");

            migrationBuilder.CreateIndex(
                name: "IX_PhoneNumbers_PayerDetailID",
                table: "PhoneNumbers",
                column: "PayerDetailID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianAddresses",
                table: "PhysicianAddresses",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianAddresses_Program_Deleted",
                table: "PhysicianAddresses",
                columns: new[] { "MDMProgramID", "Deleted", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianClinicalTrials_ProviderID",
                table: "PhysicianClinicalTrials",
                column: "ProviderID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianDynamicData_DynamicDataListID",
                table: "PhysicianDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianDynamicData_PhysicianID",
                table: "PhysicianDynamicData",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_PhysicianEnrollments_SRID",
                table: "PhysicianEnrollments",
                column: "SRID");

            migrationBuilder.CreateIndex(
                name: "Phy_Program_Drug_Deleted",
                table: "PhysicianEnrollments",
                columns: new[] { "PhysicianID", "ProgramID", "DrugName", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianNotes_PhysicianID",
                table: "PhysicianNotes",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianOrganizations_OrganizationID",
                table: "PhysicianOrganizations",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianOrganizations_PhysicianID",
                table: "PhysicianOrganizations",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianOrganizations_ProgramID_Deleted",
                table: "PhysicianOrganizations",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianPhoneNumbers_PhysicianID",
                table: "PhysicianPhoneNumbers",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianPhoneNumbers_ProgramID",
                table: "PhysicianPhoneNumbers",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_MDM,Deleted",
                table: "Physicians",
                columns: new[] { "MDMProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Physicians",
                table: "Physicians",
                columns: new[] { "MDMProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PhysiciansDetail_PhysicianID",
                table: "PhysiciansDetail",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "PhysicianSignature_PhysicianID",
                table: "PhysicianSignature",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianSpecialties_LookupDataListID",
                table: "PhysicianSpecialties",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianSpecialties_PhysicianID",
                table: "PhysicianSpecialties",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_PhysicianStateLicenses_PhysicianID",
                table: "PhysicianStateLicenses",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "IX_Portal_EntityToTerr_ProgramID__EntityID__EntityType",
                table: "Portal_EntityToTerr",
                columns: new[] { "ProgramID", "EntityID", "EntityType" });

            migrationBuilder.CreateIndex(
                name: "IX_Portal_EntityToTerr_ProgramID__TerritoryCode__TerritoryType",
                table: "Portal_EntityToTerr",
                columns: new[] { "ProgramID", "TerritoryCode", "TerritoryType" });

            migrationBuilder.CreateIndex(
                name: "ProgramIDNPI",
                table: "Portal_EntityToTerr",
                columns: new[] { "ProgramID", "NPI" });

            migrationBuilder.CreateIndex(
                name: "TerritoryCode",
                table: "Portal_EntityToTerr",
                columns: new[] { "ProgramID", "TerritoryCode" });

            migrationBuilder.CreateIndex(
                name: "IX_Portal_EntityToTerr_Stage_ProgramID",
                table: "Portal_EntityToTerr_Stage",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "ProgramNPI",
                table: "Portal_NPItoSOC",
                columns: new[] { "ProgramID", "NPI" });

            migrationBuilder.CreateIndex(
                name: "ProgramSOCID",
                table: "Portal_NPItoSOC",
                columns: new[] { "ProgramID", "SOC_ID" });

            migrationBuilder.CreateIndex(
                name: "ProgramInclude",
                table: "Portal_Regions",
                columns: new[] { "ProgramID", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Roster_Area_Mapping_Portal_RosterID",
                table: "Portal_Roster_Area_Mapping",
                column: "Portal_RosterID");

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Roster_Relation_FRM_Portal_RosterID",
                table: "Portal_Roster_Relation",
                column: "FRM_Portal_RosterID");

            migrationBuilder.CreateIndex(
                name: "NonClusteredIndex-20200924-105249",
                table: "Portal_SOC",
                column: "SOC_ID",
                unique: true,
                filter: "[SOC_ID] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ProgramTerritoryID",
                table: "Portal_SOC",
                columns: new[] { "ProgramID", "SOC_ID" });

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Staging_Registration_Addr_Entity_Mapping_RegistrationRecordAddressID",
                table: "Portal_Staging_Registration_Addr_Entity_Mapping",
                column: "RegistrationRecordAddressID");

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Staging_Registration_Addr_Entity_Mapping_RegistrationRecordEntityID",
                table: "Portal_Staging_Registration_Addr_Entity_Mapping",
                column: "RegistrationRecordEntityID");

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Staging_Registration_Addresses_RegistrationRecordID",
                table: "Portal_Staging_Registration_Addresses",
                column: "RegistrationRecordID");

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Staging_Registration_Entity_RegistrationRecordID",
                table: "Portal_Staging_Registration_Entity",
                column: "RegistrationRecordID");

            migrationBuilder.CreateIndex(
                name: "IX_Portal_Staging_tblFiles_Portal_Staging_HCP_SRRequestID",
                table: "Portal_Staging_tblFiles",
                column: "Portal_Staging_HCP_SRRequestID");

            migrationBuilder.CreateIndex(
                name: "Portal_Territories_ClientTerritoryCode",
                table: "Portal_Territories",
                column: "ClientTerritoryCode");

            migrationBuilder.CreateIndex(
                name: "ProgramID",
                table: "Portal_Territories",
                columns: new[] { "ProgramID", "ClientTerritoryCode" });

            migrationBuilder.CreateIndex(
                name: "UserID_deleted",
                table: "Portal_UserSession",
                columns: new[] { "UserID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "Portal_ZIP_ToTerr_TerritoryCode",
                table: "Portal_ZIP_ToTerr",
                column: "TerritoryCode");

            migrationBuilder.CreateIndex(
                name: "ProgramID",
                table: "Portal_ZIP_ToTerr",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "programIDandSelesForce",
                table: "Portal_ZIP_ToTerr",
                columns: new[] { "ProgramID", "SalesForce" });

            migrationBuilder.CreateIndex(
                name: "ProgramZIPCODE",
                table: "Portal_ZIP_ToTerr",
                columns: new[] { "ProgramID", "ZIPCode" });

            migrationBuilder.CreateIndex(
                name: "IX_PortalData_LoadRecord_LoadID",
                table: "PortalData_LoadRecord",
                column: "LoadID",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ProgramLoadID",
                table: "PortalData_LoadRecord",
                columns: new[] { "ProgramID", "LoadID", "Status", "RegionID", "TerritoryID" });

            migrationBuilder.CreateIndex(
                name: "IX_PortalFunctions_PortalFunctionListID",
                table: "PortalFunctions",
                column: "PortalFunctionListID");

            migrationBuilder.CreateIndex(
                name: "IX_PortalFunctions_ProgramPortalTypeID",
                table: "PortalFunctions",
                column: "ProgramPortalTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionEligibility_PrescriptionID",
                table: "PrescriptionEligibility",
                column: "PrescriptionID");

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionPharmacy_PrescriptionID",
                table: "PrescriptionPharmacy",
                column: "PrescriptionID");

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionProvider_PrescriptionID",
                table: "PrescriptionProvider",
                column: "PrescriptionID");

            migrationBuilder.CreateIndex(
                name: "IX_ProductRequestedOrderDetail_ProductRequestedOrderID",
                table: "ProductRequestedOrderDetail",
                column: "ProductRequestedOrderID");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPortalType_PortalTypeID",
                table: "ProgramPortalType",
                column: "PortalTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramURLs_ProgramID",
                table: "ProgramURLs",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "ProgramVendorID",
                table: "ProgramVendors",
                columns: new[] { "ProgramID", "VendorID", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_QuickCodes",
                table: "QuickCodes",
                column: "QuickCode",
                unique: true,
                filter: "[QuickCode] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Reminders_Child_ReminderID",
                table: "Reminders_Child",
                column: "ReminderID");

            migrationBuilder.CreateIndex(
                name: "IX_ReportActivityHistory_ReportProgramID",
                table: "ReportActivityHistory",
                column: "ReportProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_ReportParameters_ReportListID",
                table: "ReportParameters",
                column: "ReportListID");

            migrationBuilder.CreateIndex(
                name: "IX_ReportPrograms_ProgramID",
                table: "ReportPrograms",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_ReportPrograms_ReportListID",
                table: "ReportPrograms",
                column: "ReportListID");

            migrationBuilder.CreateIndex(
                name: "IX_RuleTriggerActions_RuleTriggerConditionID",
                table: "RuleTriggerActions",
                column: "RuleTriggerConditionID");

            migrationBuilder.CreateIndex(
                name: "uniq_Condn",
                table: "RuleTriggerConditions",
                columns: new[] { "ProgramID", "RuleName", "Sr_TypeShortDesc", "SR_Resolution", "SR_Subtype", "DrugName", "ProcessName", "SR_Activity" },
                unique: true,
                filter: "[RuleName] IS NOT NULL AND [Sr_TypeShortDesc] IS NOT NULL AND [SR_Resolution] IS NOT NULL AND [SR_Subtype] IS NOT NULL AND [DrugName] IS NOT NULL AND [ProcessName] IS NOT NULL AND [SR_Activity] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_RxAdminDoses_DrugId",
                table: "RxAdminDoses",
                column: "DrugId");

            migrationBuilder.CreateIndex(
                name: "IX_RxAdminDoses_OrganizationId",
                table: "RxAdminDoses",
                column: "OrganizationId");

            migrationBuilder.CreateIndex(
                name: "IX_RxAdminDoses_PatientId",
                table: "RxAdminDoses",
                column: "PatientId");

            migrationBuilder.CreateIndex(
                name: "IX_RxAdminDoses_PhysicianId",
                table: "RxAdminDoses",
                column: "PhysicianId");

            migrationBuilder.CreateIndex(
                name: "IX_RxAdminDoses_ProgramId",
                table: "RxAdminDoses",
                column: "ProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_RxAdminDosesRules_ProgramId",
                table: "RxAdminDosesRules",
                column: "ProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_SentAlertHistory_AlertTypeID",
                table: "SentAlertHistory",
                column: "AlertTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_SentAlertHistory_PatientID",
                table: "SentAlertHistory",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_SentAlertHistory_SentDate",
                table: "SentAlertHistory",
                column: "SentDate");

            migrationBuilder.CreateIndex(
                name: "ContactID",
                table: "ServiceRequests",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "IX_ServiceRequests_ByProgramIDStartedAt",
                table: "ServiceRequests",
                columns: new[] { "ProgramID", "StartedAt" });

            migrationBuilder.CreateIndex(
                name: "IX_ServiceRequests_NurseAgencyID",
                table: "ServiceRequests",
                column: "NurseAgencyID");

            migrationBuilder.CreateIndex(
                name: "IX_ServiceRequests_ResolutionID",
                table: "ServiceRequests",
                column: "ResolutionID");

            migrationBuilder.CreateIndex(
                name: "PatientID",
                table: "ServiceRequests",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "ProgramID",
                table: "ServiceRequests",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "ProgramID with include fields",
                table: "ServiceRequests",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "SR with PatientID",
                table: "ServiceRequests",
                column: "Deleted");

            migrationBuilder.CreateIndex(
                name: "SR_Status",
                table: "ServiceRequests",
                column: "SR_Status");

            migrationBuilder.CreateIndex(
                name: "SR_TypeListID",
                table: "ServiceRequests",
                column: "SR_TypeListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Activities_1",
                table: "SR_Activities",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Activities_SR_ActivityListID",
                table: "SR_Activities",
                column: "SR_ActivityListID");

            migrationBuilder.CreateIndex(
                name: "ServiceRequestID",
                table: "SR_Activities",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "SR_Activities_withCreated",
                table: "SR_Activities",
                columns: new[] { "ProgramID", "SR_ActivityListID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ActivityDesc_ProgramID_RecordType_Active_Includes",
                table: "SR_ActivityList",
                columns: new[] { "ActivityDesc", "ProgramID", "RecordType", "Active" });

            migrationBuilder.CreateIndex(
                name: "ProgramActivityDesc",
                table: "SR_ActivityList",
                columns: new[] { "ProgramID", "Deleted", "Active" });

            migrationBuilder.CreateIndex(
                name: "<IX_SR_Assignments>",
                table: "SR_Assignments",
                columns: new[] { "ServiceRequestID", "ProgramID", "Deleted", "Rank" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Assignments_Program",
                table: "SR_Assignments",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_BridgeEligibility_ServiceRequestID",
                table: "SR_BridgeEligibility",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_BridgeExtensions",
                table: "SR_BridgeExtensions",
                columns: new[] { "ServiceRequestID", "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_CallLogs_ServiceRequestID",
                table: "SR_CallLogs",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_CallLogs_SR_ActivityListID",
                table: "SR_CallLogs",
                column: "SR_ActivityListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Dates_LookupDataListID",
                table: "SR_Dates",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Dates_ProgramID",
                table: "SR_Dates",
                columns: new[] { "ProgramID", "Deleted", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Dates_ServiceRequestID",
                table: "SR_Dates",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_eEnrollments",
                table: "SR_eEnrollments",
                columns: new[] { "PatientID", "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_eEnrollments_Enrollment_SRID",
                table: "SR_eEnrollments",
                column: "Enrollment_SRID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_eEnrollments_TriageSRID",
                table: "SR_eEnrollments",
                column: "TriageSRID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_FAQs_FaqListID",
                table: "SR_FAQs",
                column: "FaqListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_FAQs_ServiceRequestID",
                table: "SR_FAQs",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_IncompleteReasons_LookupDataListID",
                table: "SR_IncompleteReasons",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_IncompleteReasons_ServiceRequestID",
                table: "SR_IncompleteReasons",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "UIDX_SR_MedOffRampDataNew_SR_OffRampId",
                table: "SR_MedOffRampData",
                column: "SR_OffRampId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SR_MedRDCC_OfframpId_ProgramID_OffRampDataID_Deleted",
                table: "SR_MedOffRampDataCptCodes",
                columns: new[] { "SR_MedOffRampDataId", "SR_OffRampId", "Deleted", "ProgramID" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataCptCodes_SR_OffRampId",
                table: "SR_MedOffRampDataCptCodes",
                column: "SR_OffRampId");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SRMRDD_OFFRAMPID_PROGRAMID_DELETE",
                table: "SR_MedOffRampDataDiagnoses",
                columns: new[] { "SR_MedOffRampDataId", "SR_OffRampId", "Deleted", "ProgramID" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataDiagnoses_SR_OffRampId",
                table: "SR_MedOffRampDataDiagnoses",
                column: "SR_OffRampId");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SRMORDP_Deleted",
                table: "SR_MedOffRampDataPolicy",
                columns: new[] { "Deleted", "SR_OffRampId", "PolicyType", "ProgramID" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataPolicy_SR_MedOffRampDataId",
                table: "SR_MedOffRampDataPolicy",
                column: "SR_MedOffRampDataId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataPolicy_SR_OffRampId",
                table: "SR_MedOffRampDataPolicy",
                column: "SR_OffRampId");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SEMedORDPCCD_DataPolicyId",
                table: "SR_MedOffRampDataPolicyCptCodesDetails",
                column: "SR_MedOffRampDataPolicyId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataPolicyResultClientSpecificItems_SR_MedOffRampDataPolicyId",
                table: "SR_MedOffRampDataPolicyResultClientSpecificItems",
                column: "SR_MedOffRampDataPolicyId");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SRMedORDRP_Deleted_OfframpId_ProgramID_PolicyType_PayerName",
                table: "SR_MedOffRampDataRequestPolicies",
                columns: new[] { "Deleted", "SR_MedOffRampDataId", "SR_OffRampId", "PolicyType" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataRequestPolicies_SR_MedOffRampDataId",
                table: "SR_MedOffRampDataRequestPolicies",
                column: "SR_MedOffRampDataId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_MedOffRampDataRequestPolicies_SR_OffRampId",
                table: "SR_MedOffRampDataRequestPolicies",
                column: "SR_OffRampId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_MessageThreads_ServiceRequestID",
                table: "SR_MessageThreads",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_MessageThreads_ThreadID",
                table: "SR_MessageThreads",
                column: "ThreadID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Threads_Programs",
                table: "SR_MessageThreads",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramSRID",
                table: "SR_MessageThreads",
                columns: new[] { "ProgramID", "ThreadID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_NoteHistory_ServiceRequestID",
                table: "SR_NoteHistory",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_NoteHistory_SR_NoteID",
                table: "SR_NoteHistory",
                column: "SR_NoteID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Notes_ServiceRequestID",
                table: "SR_Notes",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "SR_Notes_ProgramID",
                table: "SR_Notes",
                columns: new[] { "ProgramID", "Deleted", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "<SR_NursingActivity_SRIDPatientIDActivity>",
                table: "SR_NursingActivity",
                columns: new[] { "ProgramID", "Deleted", "Status" });

            migrationBuilder.CreateIndex(
                name: "NextInjectionDate_SR_OffRampType_Includes",
                table: "SR_OffRamp",
                columns: new[] { "NextInjectionDate", "SR_OffRampType" });

            migrationBuilder.CreateIndex(
                name: "ProgramID_ServiceRequestID",
                table: "SR_OffRamp",
                columns: new[] { "ProgramID", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "ServiceRequestID_Includes",
                table: "SR_OffRamp",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "ServiceRequestID_SR_OffRampType_Includes",
                table: "SR_OffRamp",
                columns: new[] { "ServiceRequestID", "SR_OffRampType" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_OffRampHistory_SR_OffRampId",
                table: "SR_OffRampHistory",
                column: "SR_OffRampId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_OrderDetails_ProgramID",
                table: "SR_OrderDetails",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_OrderDetails_ServiceRequestID",
                table: "SR_OrderDetails",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SR_Org",
                table: "SR_Organizations",
                columns: new[] { "ServiceRequestID", "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Organizations",
                table: "SR_Organizations",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Organizations_OrganizationID",
                table: "SR_Organizations",
                column: "OrganizationID");

            migrationBuilder.CreateIndex(
                name: "SR_Org",
                table: "SR_Organizations",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ServiceRequestID_ProgramID_PAPStatus_Deleted",
                table: "SR_PAP",
                columns: new[] { "ServiceRequestID", "ProgramID", "PAPStatus", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPByTypeMapping_EligibilityQuestionID",
                table: "SR_PAPByTypeMapping",
                column: "EligibilityQuestionID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPByTypeMapping_PAPTypeID",
                table: "SR_PAPByTypeMapping",
                column: "PAPTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPPayments_ProgramID",
                table: "SR_PAPPayments",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPPayments_SR_PAPScheduledPaymentID",
                table: "SR_PAPPayments",
                column: "SR_PAPScheduledPaymentID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPPaymentSchedules_ProgramID",
                table: "SR_PAPPaymentSchedules",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPPaymentSchedules_SRID",
                table: "SR_PAPPaymentSchedules",
                column: "SRID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPScheduledPayments_ProgramID",
                table: "SR_PAPScheduledPayments",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_PAPScheduledPayments_SR_PAPPaymentScheduleID",
                table: "SR_PAPScheduledPayments",
                column: "SR_PAPPaymentScheduleID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Physicians_PhysicianID",
                table: "SR_Physicians",
                column: "PhysicianID");

            migrationBuilder.CreateIndex(
                name: "ix_SR_Physicians_ProgramID_SR_PhysicianType_Deleted_includes",
                table: "SR_Physicians",
                columns: new[] { "ProgramID", "SR_PhysicianType", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Physicians_SRID_Program_Deleted",
                table: "SR_Physicians",
                columns: new[] { "ServiceRequestID", "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "UIDX_SR_RxOffRampData_SR_OffRampId",
                table: "SR_RxOffRampData",
                column: "SR_OffRampId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SR_RxOffRampDataPolicy_SR_OffRampId",
                table: "SR_RxOffRampDataPolicy",
                column: "SR_OffRampId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_RxOffRampDataPolicy_SR_RxOffRampDataId",
                table: "SR_RxOffRampDataPolicy",
                column: "SR_RxOffRampDataId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_RxOffRampDataPolicyCoverageLimitationMessage_LookupDataListID",
                table: "SR_RxOffRampDataPolicyCoverageLimitationMessage",
                column: "LookupDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_RxOffRampDataPolicyCoverageLimitationMessage_SR_RxOffRampDataPolicyId",
                table: "SR_RxOffRampDataPolicyCoverageLimitationMessage",
                column: "SR_RxOffRampDataPolicyId");

            migrationBuilder.CreateIndex(
                name: "IX_SR_SubTypes_ProgramID_Deleted",
                table: "SR_SubTypes",
                columns: new[] { "ProgramID", "Deleted", "SR_SubTypeListID", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_SubTypes_ServiceRequestID",
                table: "SR_SubTypes",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_SubTypes_SR_SubTypeListID",
                table: "SR_SubTypes",
                column: "SR_SubTypeListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TestClaims_PatientID",
                table: "SR_TestClaims",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TestClaims_PatientInsuranceID",
                table: "SR_TestClaims",
                column: "PatientInsuranceID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TestClaims_ProviderID",
                table: "SR_TestClaims",
                column: "ProviderID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TestClaims_SRID",
                table: "SR_TestClaims",
                column: "SRID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Tickles_ServiceRequestID",
                table: "SR_Tickles",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Tickles_SR_ActivityListID",
                table: "SR_Tickles",
                column: "SR_ActivityListID");

            migrationBuilder.CreateIndex(
                name: "SR_Tickles_withStatusDeleted",
                table: "SR_Tickles",
                columns: new[] { "TickleStatus", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Triages_ProgramID_Deleted",
                table: "SR_Triages",
                columns: new[] { "ProgramID", "Deleted", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "SRID",
                table: "SR_Triages",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TypeActivity_SR_TypeListID",
                table: "SR_TypeActivity",
                column: "SR_TypeListID");

            migrationBuilder.CreateIndex(
                name: "ProgramID_Active_Deleted_Includes",
                table: "SR_TypeActivity",
                columns: new[] { "ProgramID", "Active", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "SR_ActivityListID_ProgramID_Active_Includes",
                table: "SR_TypeActivity",
                columns: new[] { "SR_ActivityListID", "ProgramID", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_TypeConfig_EntityID",
                table: "SR_TypeConfig",
                column: "EntityID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TypeConfig_SR_TypeListID",
                table: "SR_TypeConfig",
                column: "SR_TypeListID");

            migrationBuilder.CreateIndex(
                name: "IX_DynamicDataListID",
                table: "SR_TypeDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_SR_TDD_SR_Del",
                table: "SR_TypeDynamicData",
                columns: new[] { "ServiceRequestID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramSRID",
                table: "SR_TypeDynamicData",
                columns: new[] { "ProgramID", "Deleted", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "SR_TypeDynamicData_IDX_Covering",
                table: "SR_TypeDynamicData",
                columns: new[] { "ProgramID", "Deleted", "DynamicDataListID", "Answer", "AnswerID", "ServiceRequestID" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_TypeGroupDynamicData_DynamicDataListID",
                table: "SR_TypeGroupDynamicData",
                column: "DynamicDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TypeGroupDynamicData_ServiceRequestID",
                table: "SR_TypeGroupDynamicData",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_TypeList_ProgramID_ShortDesc_Active_Deleted",
                table: "SR_TypeList",
                columns: new[] { "ProgramID", "SR_TypeShortDesc", "Active", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "<SR_Visits_SRIDContactIDStatus>",
                table: "SR_Visits",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_Visits_ContactID",
                table: "SR_Visits",
                column: "ContactID");

            migrationBuilder.CreateIndex(
                name: "IX_SR_Visits_OrgID",
                table: "SR_Visits",
                column: "OrgID");

            migrationBuilder.CreateIndex(
                name: "IX_SRHubStatus_SRHubStatusListID",
                table: "SRHubStatus",
                column: "SRHubStatusListID");

            migrationBuilder.CreateIndex(
                name: "IX_SRHubStatus_SRType_List_ProgramID",
                table: "SRHubStatus_SRType_List",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_SRHubStatus_SRType_List_SRHubStatusListID",
                table: "SRHubStatus_SRType_List",
                column: "SRHubStatusListID");

            migrationBuilder.CreateIndex(
                name: "IX_StatesList_CountryID",
                table: "StatesList",
                column: "CountryID");

            migrationBuilder.CreateIndex(
                name: "IX_STMSPatientMedicationProfile_PatientID",
                table: "STMSPatientMedicationProfile",
                column: "PatientID");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionHistory_SubscriptionId",
                table: "SubscriptionHistory",
                column: "SubscriptionId");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyAnswers_SurveyHistoryID",
                table: "SurveyAnswers",
                column: "SurveyHistoryID");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyAnswersMutliSelect_SurveyAnswerID",
                table: "SurveyAnswersMutliSelect",
                column: "SurveyAnswerID");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyAnswersMutliSelect_SurveyLookUpDataListID",
                table: "SurveyAnswersMutliSelect",
                column: "SurveyLookUpDataListID");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyCategories_SurveyMasterID",
                table: "SurveyCategories",
                column: "SurveyMasterID");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyElements_SurveyCategoryID",
                table: "SurveyElements",
                column: "SurveyCategoryID");

            migrationBuilder.CreateIndex(
                name: "IX_SurveyHistory_SurveyMasterID",
                table: "SurveyHistory",
                column: "SurveyMasterID");

            migrationBuilder.CreateIndex(
                name: "ServiceRequest",
                table: "SurveyHistory",
                columns: new[] { "ProgramID", "ServiceRequestID", "PatientID" });

            migrationBuilder.CreateIndex(
                name: "IX_TAMTracker_ServiceRequestID",
                table: "TAMTracker",
                column: "ServiceRequestID");

            migrationBuilder.CreateIndex(
                name: "ProgramDeleted",
                table: "TAMTracker",
                columns: new[] { "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramIDSRID",
                table: "TAMTracker",
                columns: new[] { "ProgramID", "PatientID" });

            migrationBuilder.CreateIndex(
                name: "ProgramID_TAMTrackerID",
                table: "TAMTracker_Options",
                columns: new[] { "ProgramID", "TAMTrackerID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "ProgramIDDefault",
                table: "TAMTrackerColumns",
                columns: new[] { "ProgramID", "Deleted", "Active" });

            migrationBuilder.CreateIndex(
                name: "IX_SR_TriageID",
                table: "TriageRecords",
                columns: new[] { "SR_TriageID", "ProgramID", "Deleted" });

            migrationBuilder.CreateIndex(
                name: "IX_UserAccessFunctionList_ProgramID",
                table: "UserAccessFunctionList",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_UserInformation_UserID",
                table: "UserInformation",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_NCI_UPS_ProgramID_Role_Deleted",
                table: "UserPrograms",
                columns: new[] { "ProgramID", "Deleted", "Role" });

            migrationBuilder.CreateIndex(
                name: "IX_UserPrograms_UserInformationID",
                table: "UserPrograms",
                column: "UserInformationID");

            migrationBuilder.CreateIndex(
                name: "IX_UserProgramSettings_AccessFunctionID",
                table: "UserProgramSettings",
                column: "AccessFunctionID");

            migrationBuilder.CreateIndex(
                name: "IX_UserProgramSettings_Program",
                table: "UserProgramSettings",
                column: "UserProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_UserRoleDefaults_FunctionID",
                table: "UserRoleDefaults",
                column: "FunctionID");

            migrationBuilder.CreateIndex(
                name: "IX_UserRoleDefaults_ProgramID",
                table: "UserRoleDefaults",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_UserRoleDefaults_UserRoleId",
                table: "UserRoleDefaults",
                column: "UserRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_UserRoleList_ProgramID",
                table: "UserRoleList",
                column: "ProgramID");

            migrationBuilder.CreateIndex(
                name: "IX_ValidationDefinition_ValidationTypeID",
                table: "ValidationDefinition",
                column: "ValidationTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_ValidationFieldDefinitionMapping_ValidationDefinitionID",
                table: "ValidationFieldDefinitionMapping",
                column: "ValidationDefinitionID");

            migrationBuilder.CreateIndex(
                name: "IX_ValidationFieldDefinitionMapping_ValidationFieldID",
                table: "ValidationFieldDefinitionMapping",
                column: "ValidationFieldID");

            migrationBuilder.CreateIndex(
                name: "IX_WhiteListEntitySettings_WhiteListChannelTypeID",
                table: "WhiteListEntitySettings",
                column: "WhiteListChannelTypeID");

            migrationBuilder.CreateIndex(
                name: "IX_WhiteListEntitySettings_WhiteListEntityID",
                table: "WhiteListEntitySettings",
                column: "WhiteListEntityID");

            migrationBuilder.CreateIndex(
                name: "IX_Workflow_ProductID",
                table: "Workflow",
                column: "ProductID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowFields_DataType",
                table: "WorkflowFields",
                column: "DataType");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowFields_Interpretation",
                table: "WorkflowFields",
                column: "Interpretation");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowLookupItems_LookupID",
                table: "WorkflowLookupItems",
                column: "LookupID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowPDFs_ProgramFieldID",
                table: "WorkflowPDFs",
                column: "ProgramFieldID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowPDFTaggings_DataType",
                table: "WorkflowPDFTaggings",
                column: "DataType");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowPDFTaggings_PDFID",
                table: "WorkflowPDFTaggings",
                column: "PDFID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramConfig_WorkflowID",
                table: "WorkflowProgramConfig",
                column: "WorkflowID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramFields_ConditionalProgramFieldId",
                table: "WorkflowProgramFields",
                column: "ConditionalProgramFieldId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramFields_ConditionalResponseOption",
                table: "WorkflowProgramFields",
                column: "ConditionalResponseOption");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramFields_ConditionalSRSubType",
                table: "WorkflowProgramFields",
                column: "ConditionalSRSubType");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramFields_FieldID",
                table: "WorkflowProgramFields",
                column: "FieldID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramFields_ProgramWorkflowStep",
                table: "WorkflowProgramFields",
                column: "ProgramWorkflowStep");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramFields_ResponseOptionKey",
                table: "WorkflowProgramFields",
                column: "ResponseOptionKey");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowProgramInvitationConfig_WorkflowId",
                table: "WorkflowProgramInvitationConfig",
                column: "WorkflowId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowResponses_ApplicationID",
                table: "WorkflowResponses",
                column: "ApplicationID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowResponses_ProgramFieldID",
                table: "WorkflowResponses",
                column: "ProgramFieldID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowResponses_ResponseOption",
                table: "WorkflowResponses",
                column: "ResponseOption");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowStepContent_ProgramWorkflowStep",
                table: "WorkflowStepContent",
                column: "ProgramWorkflowStep");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowStepContent_WorkflowID",
                table: "WorkflowStepContent",
                column: "WorkflowID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowStepProgramFields_ProgramFieldID",
                table: "WorkflowStepProgramFields",
                column: "ProgramFieldID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowStepProgramFields_ProgramWorkFlowStepID",
                table: "WorkflowStepProgramFields",
                column: "ProgramWorkFlowStepID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowSteps_WorkflowID",
                table: "WorkflowSteps",
                column: "WorkflowID");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowSteps_WorkflowStep",
                table: "WorkflowSteps",
                column: "WorkflowStep");

            migrationBuilder.CreateIndex(
                name: "IX_WorkflowSteps_WorkflowTypeId",
                table: "WorkflowSteps",
                column: "WorkflowTypeId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "_Aaa");

            migrationBuilder.DropTable(
                name: "_VendorPhone");

            migrationBuilder.DropTable(
                name: "A_Message");

            migrationBuilder.DropTable(
                name: "AAO_SR_Patients");

            migrationBuilder.DropTable(
                name: "AAOSummary");

            migrationBuilder.DropTable(
                name: "Addresses");

            migrationBuilder.DropTable(
                name: "AndrogelININLog");

            migrationBuilder.DropTable(
                name: "AnnualGrossIncomeConfiguration");

            migrationBuilder.DropTable(
                name: "APIResponseMessage");

            migrationBuilder.DropTable(
                name: "aspnet_Membership");

            migrationBuilder.DropTable(
                name: "aspnet_MembershipUsers_AuditLog");

            migrationBuilder.DropTable(
                name: "aspnet_PersonalizationAllUsers");

            migrationBuilder.DropTable(
                name: "aspnet_PersonalizationPerUser");

            migrationBuilder.DropTable(
                name: "aspnet_Profile");

            migrationBuilder.DropTable(
                name: "aspnet_SchemaVersions");

            migrationBuilder.DropTable(
                name: "aspnet_UsersInRoles");

            migrationBuilder.DropTable(
                name: "aspnet_WebEvent_Events");

            migrationBuilder.DropTable(
                name: "AuditLog");

            migrationBuilder.DropTable(
                name: "AutoCallingBVProcessConfiguration");

            migrationBuilder.DropTable(
                name: "AutoDialer");

            migrationBuilder.DropTable(
                name: "BenefitHistory");

            migrationBuilder.DropTable(
                name: "BenefitHistory_eBV");

            migrationBuilder.DropTable(
                name: "BenefitHistory_ImportLog_eBV");

            migrationBuilder.DropTable(
                name: "BenefitHistoryFieldList_eBV");

            migrationBuilder.DropTable(
                name: "BenefitHistoryFieldMappingList_eBV");

            migrationBuilder.DropTable(
                name: "BenefitInvestigation_Realtime");

            migrationBuilder.DropTable(
                name: "BenefitInvestigationTypeFields");

            migrationBuilder.DropTable(
                name: "BI_NDC_History");

            migrationBuilder.DropTable(
                name: "BI_NDC_History_ImportLog_eBV");

            migrationBuilder.DropTable(
                name: "BI_NDC_Records");

            migrationBuilder.DropTable(
                name: "Biomarin_EntityToTerr_Stage");

            migrationBuilder.DropTable(
                name: "Biomarin_PatientDailyDiagnosis");

            migrationBuilder.DropTable(
                name: "Biomarin_PatientDailyDiagnosis_AuditLog");

            migrationBuilder.DropTable(
                name: "Biomarin_PatientREMS");

            migrationBuilder.DropTable(
                name: "Biomarin_PrescriberREMS");

            migrationBuilder.DropTable(
                name: "Biomarin_Roster_Stage");

            migrationBuilder.DropTable(
                name: "Biomarin_ZipToTerr_Stage");

            migrationBuilder.DropTable(
                name: "BiomarinConsentedPatients");

            migrationBuilder.DropTable(
                name: "CareCycleOrganizations");

            migrationBuilder.DropTable(
                name: "CareCyclePhysicians");

            migrationBuilder.DropTable(
                name: "CareCycles_Audit");

            migrationBuilder.DropTable(
                name: "CareCycleSchedule");

            migrationBuilder.DropTable(
                name: "CareCycleSchedule_Audit");

            migrationBuilder.DropTable(
                name: "CareMetX_Dir_Sales_wProf_IDs");

            migrationBuilder.DropTable(
                name: "CaseEnrollment");

            migrationBuilder.DropTable(
                name: "CaseJourneyByDrug");

            migrationBuilder.DropTable(
                name: "CaseJourneyCloserRulesSetting");

            migrationBuilder.DropTable(
                name: "CaseManager_ByRegion");

            migrationBuilder.DropTable(
                name: "CaseRecordTransaction");

            migrationBuilder.DropTable(
                name: "Cayston_ProcessActivityMapping");

            migrationBuilder.DropTable(
                name: "Cayston_Staging_Patient_Referral");

            migrationBuilder.DropTable(
                name: "CF_IssueSubType");

            migrationBuilder.DropTable(
                name: "CheckInsuranceResult");

            migrationBuilder.DropTable(
                name: "ClaimsViewAuditLog");

            migrationBuilder.DropTable(
                name: "CMMStatusMailService");

            migrationBuilder.DropTable(
                name: "Coherus_Employees_Stage");

            migrationBuilder.DropTable(
                name: "Coherus_Group_Assignment_Stage");

            migrationBuilder.DropTable(
                name: "Coherus_Group_Geo_Stage");

            migrationBuilder.DropTable(
                name: "Coherus_Groups_Stage");

            migrationBuilder.DropTable(
                name: "Coherus_Roster_Stage");

            migrationBuilder.DropTable(
                name: "Coherus_ZipTerr_Stage");

            migrationBuilder.DropTable(
                name: "Communications");

            migrationBuilder.DropTable(
                name: "ConnectFedexAddressVerifications");

            migrationBuilder.DropTable(
                name: "ConnectFedexAPIErrorLogs");

            migrationBuilder.DropTable(
                name: "ConnectiveRxAPILog");

            migrationBuilder.DropTable(
                name: "ConnectModularDocTransaction");

            migrationBuilder.DropTable(
                name: "ConnectPayerMap");

            migrationBuilder.DropTable(
                name: "ContactAddresses_Audit");

            migrationBuilder.DropTable(
                name: "ContactDynamicData");

            migrationBuilder.DropTable(
                name: "ContactLicenses");

            migrationBuilder.DropTable(
                name: "ContactNotes");

            migrationBuilder.DropTable(
                name: "ContactOrganizations");

            migrationBuilder.DropTable(
                name: "ContactPhoneNumbers");

            migrationBuilder.DropTable(
                name: "ContactPhoneNumbers_Audit");

            migrationBuilder.DropTable(
                name: "ContactPhysicians");

            migrationBuilder.DropTable(
                name: "ContactPhysicians_Audit");

            migrationBuilder.DropTable(
                name: "ContactPrograms");

            migrationBuilder.DropTable(
                name: "Contacts_Audit");

            migrationBuilder.DropTable(
                name: "Copay_Adjudication_DenialReasons");

            migrationBuilder.DropTable(
                name: "Copay_Adjudications");

            migrationBuilder.DropTable(
                name: "Copay_Invoices");

            migrationBuilder.DropTable(
                name: "Copay_PSKWRedemption");

            migrationBuilder.DropTable(
                name: "CornerStone_CFS_Shipments");

            migrationBuilder.DropTable(
                name: "CountryList");

            migrationBuilder.DropTable(
                name: "CoveredCounties");

            migrationBuilder.DropTable(
                name: "CRUSH_FILE_LOG");

            migrationBuilder.DropTable(
                name: "CRUSHFTP_LOG");

            migrationBuilder.DropTable(
                name: "customer");

            migrationBuilder.DropTable(
                name: "CustomerState");

            migrationBuilder.DropTable(
                name: "DailyStatusChanges");

            migrationBuilder.DropTable(
                name: "DashboardPanelPrograms");

            migrationBuilder.DropTable(
                name: "DashboardPanelUserSettings");

            migrationBuilder.DropTable(
                name: "DATABASECHANGELOG");

            migrationBuilder.DropTable(
                name: "DATABASECHANGELOGLOCK");

            migrationBuilder.DropTable(
                name: "DATABASECHANGESTATUS");

            migrationBuilder.DropTable(
                name: "DATABASECHANGESTRELEASEBRANCH");

            migrationBuilder.DropTable(
                name: "DataConfiguration");

            migrationBuilder.DropTable(
                name: "Date_WorkDay");

            migrationBuilder.DropTable(
                name: "Demo_SRAccountAddresses");

            migrationBuilder.DropTable(
                name: "DF_AutomaticTaskLog");

            migrationBuilder.DropTable(
                name: "DF_AutomaticTaskRecords");

            migrationBuilder.DropTable(
                name: "DF_CDC");

            migrationBuilder.DropTable(
                name: "DF_CustomSchedule");

            migrationBuilder.DropTable(
                name: "DF_DataExtractMaxEntityID");

            migrationBuilder.DropTable(
                name: "DF_EbvTracking");

            migrationBuilder.DropTable(
                name: "DF_EmailLog");

            migrationBuilder.DropTable(
                name: "DF_Fields");

            migrationBuilder.DropTable(
                name: "DF_Files");

            migrationBuilder.DropTable(
                name: "DF_InboundFileErrors");

            migrationBuilder.DropTable(
                name: "DF_InboundFileLog");

            migrationBuilder.DropTable(
                name: "DF_InboundRecordDetails");

            migrationBuilder.DropTable(
                name: "DF_JobAlerts");

            migrationBuilder.DropTable(
                name: "DF_JobExes");

            migrationBuilder.DropTable(
                name: "DF_Jobs");

            migrationBuilder.DropTable(
                name: "DF_OutboundFileErrors");

            migrationBuilder.DropTable(
                name: "DF_OutboundFileLog");

            migrationBuilder.DropTable(
                name: "DF_OutboundRecordDetails");

            migrationBuilder.DropTable(
                name: "DF_OutboundRecordTracking");

            migrationBuilder.DropTable(
                name: "DF_RecurringProcessErrors");

            migrationBuilder.DropTable(
                name: "DF_RecurringProcessLog");

            migrationBuilder.DropTable(
                name: "DF_SFTP");

            migrationBuilder.DropTable(
                name: "DF_TalendContext");

            migrationBuilder.DropTable(
                name: "DF_Vermedica_EBVTracking");

            migrationBuilder.DropTable(
                name: "DF_ZipRstTracking");

            migrationBuilder.DropTable(
                name: "DiagnosisListPrograms");

            migrationBuilder.DropTable(
                name: "DirectFaxAssignment");

            migrationBuilder.DropTable(
                name: "Directories_Organizations");

            migrationBuilder.DropTable(
                name: "DispenseOrderTypes");

            migrationBuilder.DropTable(
                name: "DispenseQtyConversion");

            migrationBuilder.DropTable(
                name: "Dispenses");

            migrationBuilder.DropTable(
                name: "Dispenses_fromSP");

            migrationBuilder.DropTable(
                name: "Dispenses_History");

            migrationBuilder.DropTable(
                name: "Dispenses_Log");

            migrationBuilder.DropTable(
                name: "Dispenses_Walgreens");

            migrationBuilder.DropTable(
                name: "Document_Field_MultiAnswers");

            migrationBuilder.DropTable(
                name: "Document_Fields");

            migrationBuilder.DropTable(
                name: "Document_OutboundFaxes");

            migrationBuilder.DropTable(
                name: "DocumentAttachments_DocTypes");

            migrationBuilder.DropTable(
                name: "DocumentListLetter");

            migrationBuilder.DropTable(
                name: "DocumentManagement");

            migrationBuilder.DropTable(
                name: "DocumentMappings");

            migrationBuilder.DropTable(
                name: "Documents_eHIPAAInvites");

            migrationBuilder.DropTable(
                name: "Documents_Entity");

            migrationBuilder.DropTable(
                name: "Documents_FQ_Users");

            migrationBuilder.DropTable(
                name: "Documents_InboundFaxes");

            migrationBuilder.DropTable(
                name: "Documents_MoveAudits");

            migrationBuilder.DropTable(
                name: "Documents_OCR_Coordinates");

            migrationBuilder.DropTable(
                name: "Documents_OCR_DynamicData");

            migrationBuilder.DropTable(
                name: "Documents_OutboundAttachments");

            migrationBuilder.DropTable(
                name: "Documents_SrTypes");

            migrationBuilder.DropTable(
                name: "Documents_TherapyDrugs");

            migrationBuilder.DropTable(
                name: "DocumentTemplates");

            migrationBuilder.DropTable(
                name: "DrugCPTCode");

            migrationBuilder.DropTable(
                name: "DrugCPTCodePrograms");

            migrationBuilder.DropTable(
                name: "DrugDetail");

            migrationBuilder.DropTable(
                name: "DrugResources");

            migrationBuilder.DropTable(
                name: "DrugServiceLevel");

            migrationBuilder.DropTable(
                name: "Dup");

            migrationBuilder.DropTable(
                name: "DuplicateNPITracking");

            migrationBuilder.DropTable(
                name: "DuplicatePatientQueue");

            migrationBuilder.DropTable(
                name: "DynamicDataByLookupData");

            migrationBuilder.DropTable(
                name: "EagleForceAPILog");

            migrationBuilder.DropTable(
                name: "eBvAgeLimit");

            migrationBuilder.DropTable(
                name: "eBvCopayFactor");

            migrationBuilder.DropTable(
                name: "eBvCoverageBenefitTransactions");

            migrationBuilder.DropTable(
                name: "eBvDrugCoverageAlert");

            migrationBuilder.DropTable(
                name: "EBVMedicalResponseTypeCode");

            migrationBuilder.DropTable(
                name: "eBvMedicationBenefitTransactions");

            migrationBuilder.DropTable(
                name: "eBvMockResponses");

            migrationBuilder.DropTable(
                name: "eBvQuantityLimit");

            migrationBuilder.DropTable(
                name: "eBvResourceLink");

            migrationBuilder.DropTable(
                name: "eBvStepDrug");

            migrationBuilder.DropTable(
                name: "eConsent");

            migrationBuilder.DropTable(
                name: "eHipaaApiPrograms");

            migrationBuilder.DropTable(
                name: "eHipaaPatientInvites");

            migrationBuilder.DropTable(
                name: "EmailHistory");

            migrationBuilder.DropTable(
                name: "EmailSubscriptionTypes");

            migrationBuilder.DropTable(
                name: "EmailTemplates");

            migrationBuilder.DropTable(
                name: "Enrollment");

            migrationBuilder.DropTable(
                name: "Enrollment_DupSearchLogs");

            migrationBuilder.DropTable(
                name: "Entity_IDs");

            migrationBuilder.DropTable(
                name: "EntityDupeSearchRequests");

            migrationBuilder.DropTable(
                name: "EntityMergeDetailsLog");

            migrationBuilder.DropTable(
                name: "ePAFEmailLinkAudit");

            migrationBuilder.DropTable(
                name: "EPAP_ApplicationLog");

            migrationBuilder.DropTable(
                name: "EpsilonCallLog");

            migrationBuilder.DropTable(
                name: "EReferrals");

            migrationBuilder.DropTable(
                name: "eServiceAPILog");

            migrationBuilder.DropTable(
                name: "eServicesProgramConfig");

            migrationBuilder.DropTable(
                name: "EventsQueue");

            migrationBuilder.DropTable(
                name: "ExperianAPILog");

            migrationBuilder.DropTable(
                name: "FAQ_SRType");

            migrationBuilder.DropTable(
                name: "FAX_INBOUND_REPORT");

            migrationBuilder.DropTable(
                name: "FAX_LOG_EXCEPTIONS");

            migrationBuilder.DropTable(
                name: "FAX_Sample_Report");

            migrationBuilder.DropTable(
                name: "FaxNumbers");

            migrationBuilder.DropTable(
                name: "FederalPovertyLeveList");

            migrationBuilder.DropTable(
                name: "FedExMailTrackInterfacer");

            migrationBuilder.DropTable(
                name: "Feedback_Configurations");

            migrationBuilder.DropTable(
                name: "FieldPortalConfig");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplicationInsurances");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplicationInsurances_Audit");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplicationMedications");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplicationMedications_Audit");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplicationPatientSite");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplications_Audit");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplications_Extension");

            migrationBuilder.DropTable(
                name: "FundReopenSubscriptionMedications");

            migrationBuilder.DropTable(
                name: "FundReopenSubscriptionSubscribers");

            migrationBuilder.DropTable(
                name: "GetAgeInYearDayResult");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_MedImmuneSPP_V2Result");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_MedImmuneSPPResult");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_PathwayOpsumitResult");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_PathwayTracleerResult");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_PathwayUptravi_testsudhaResult");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_PathwayUptravi_V2Result");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_PathwayUptraviResult");

            migrationBuilder.DropTable(
                name: "GetExtendedTriageRecord_PathwayVentavisResult");

            migrationBuilder.DropTable(
                name: "GetMedicalHistoryResult");

            migrationBuilder.DropTable(
                name: "GetSRManagementResult_ishitaTestResult");

            migrationBuilder.DropTable(
                name: "GetWorkHours_TableResult");

            migrationBuilder.DropTable(
                name: "GlobalConfigurations");

            migrationBuilder.DropTable(
                name: "GrantUsePolicyException");

            migrationBuilder.DropTable(
                name: "GrantUsePolicyException_Audit");

            migrationBuilder.DropTable(
                name: "HCP_Portal_PatientCaregiver");

            migrationBuilder.DropTable(
                name: "HCP_Portal_SRType_Mapping");

            migrationBuilder.DropTable(
                name: "HCPPortalNLog");

            migrationBuilder.DropTable(
                name: "HCPServicesAPICallLogs");

            migrationBuilder.DropTable(
                name: "IMAGES");

            migrationBuilder.DropTable(
                name: "Import_Providers");

            migrationBuilder.DropTable(
                name: "IncomeAttestation");

            migrationBuilder.DropTable(
                name: "IncomeAttestationAudit");

            migrationBuilder.DropTable(
                name: "ININIncomeLog");

            migrationBuilder.DropTable(
                name: "ININLog");

            migrationBuilder.DropTable(
                name: "Insurance_Eligibility_LookUpList");

            migrationBuilder.DropTable(
                name: "InsuranceAddresses");

            migrationBuilder.DropTable(
                name: "InsuranceDynamicData");

            migrationBuilder.DropTable(
                name: "InsuranceEligibilityCodes");

            migrationBuilder.DropTable(
                name: "InsuranceNotes");

            migrationBuilder.DropTable(
                name: "InsurancePhoneNumbers");

            migrationBuilder.DropTable(
                name: "InsurancePrograms");

            migrationBuilder.DropTable(
                name: "InvalidPatientEmailCleanUp");

            migrationBuilder.DropTable(
                name: "Log4Net_Error");

            migrationBuilder.DropTable(
                name: "Lookup_PA");

            migrationBuilder.DropTable(
                name: "LookupInfinitusPayerID");

            migrationBuilder.DropTable(
                name: "LookupLists");

            migrationBuilder.DropTable(
                name: "LTR_EmailError_Log");

            migrationBuilder.DropTable(
                name: "LTR_EmailNotification_Audit");

            migrationBuilder.DropTable(
                name: "LTR_EmailTransaction");

            migrationBuilder.DropTable(
                name: "LTR_ErrorLogs");

            migrationBuilder.DropTable(
                name: "LTR_FaxError_Log");

            migrationBuilder.DropTable(
                name: "LTR_FaxNotification_Audit");

            migrationBuilder.DropTable(
                name: "LTR_FaxTransaction");

            migrationBuilder.DropTable(
                name: "LTR_LookupListItem");

            migrationBuilder.DropTable(
                name: "LTR_MailNotification_Audit");

            migrationBuilder.DropTable(
                name: "LTR_MailTransaction");

            migrationBuilder.DropTable(
                name: "LTR_NotificationItems_Audit");

            migrationBuilder.DropTable(
                name: "LTR_NotificationMaster_Audit");

            migrationBuilder.DropTable(
                name: "LTR_ProcessLog");

            migrationBuilder.DropTable(
                name: "MailingDocuments");

            migrationBuilder.DropTable(
                name: "MailingWebServiceRequests");

            migrationBuilder.DropTable(
                name: "MailTrackingErrors");

            migrationBuilder.DropTable(
                name: "MailTrackings");

            migrationBuilder.DropTable(
                name: "MDM_Location");

            migrationBuilder.DropTable(
                name: "MDM_Organization");

            migrationBuilder.DropTable(
                name: "MDM_Provider");

            migrationBuilder.DropTable(
                name: "MDM_SalesAlignment");

            migrationBuilder.DropTable(
                name: "MDMPatientProcessResult");

            migrationBuilder.DropTable(
                name: "MedeBVOfframpClientResponseTypeCodes");

            migrationBuilder.DropTable(
                name: "MedeBVOfframpCOBBlurbAdditionalRules");

            migrationBuilder.DropTable(
                name: "MedeBVOfframpErrorList");

            migrationBuilder.DropTable(
                name: "MedeBVOfframpRequiredRules");

            migrationBuilder.DropTable(
                name: "MedeBVOfframpResponseTypeCodeList");

            migrationBuilder.DropTable(
                name: "MedicaidIncomeEligibilityLimitList");

            migrationBuilder.DropTable(
                name: "MedOffRampSupplementPlan");

            migrationBuilder.DropTable(
                name: "MedOffRampSupplementPlan_OffRampClient");

            migrationBuilder.DropTable(
                name: "MedvantxLots");

            migrationBuilder.DropTable(
                name: "MergeLogs");

            migrationBuilder.DropTable(
                name: "Message_Queue");

            migrationBuilder.DropTable(
                name: "Messages");

            migrationBuilder.DropTable(
                name: "MessagesSMS");

            migrationBuilder.DropTable(
                name: "MessagesSMSMedia");

            migrationBuilder.DropTable(
                name: "MessageThreadReaders");

            migrationBuilder.DropTable(
                name: "MobilePatientSurveyAnswers");

            migrationBuilder.DropTable(
                name: "MobileRefillOrderItems");

            migrationBuilder.DropTable(
                name: "MobileRequestPharmacyCall");

            migrationBuilder.DropTable(
                name: "MPU_Assessment");

            migrationBuilder.DropTable(
                name: "MPU_Assessment_Answer");

            migrationBuilder.DropTable(
                name: "MPU_Assessment_Detail");

            migrationBuilder.DropTable(
                name: "MPU_Assessment_Detail_Answer");

            migrationBuilder.DropTable(
                name: "MPU_Assessment_Question");

            migrationBuilder.DropTable(
                name: "MPU_Assessment_Question_Type");

            migrationBuilder.DropTable(
                name: "MPU_Assessment_Type");

            migrationBuilder.DropTable(
                name: "NCPDP_RejectCodes");

            migrationBuilder.DropTable(
                name: "Note_Overrides");

            migrationBuilder.DropTable(
                name: "Note_TemplateList");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "NotificationTemplates");

            migrationBuilder.DropTable(
                name: "NurseAgencyAccreditations");

            migrationBuilder.DropTable(
                name: "NurseAgencyAddresses");

            migrationBuilder.DropTable(
                name: "NurseAgencyCertifications");

            migrationBuilder.DropTable(
                name: "NurseAgencyCoveredCounties");

            migrationBuilder.DropTable(
                name: "NurseAgencyNurses");

            migrationBuilder.DropTable(
                name: "NurseAgencyPhoneNumbers");

            migrationBuilder.DropTable(
                name: "NurseAgencyRates");

            migrationBuilder.DropTable(
                name: "OffRampClient_Payer_Relationship");

            migrationBuilder.DropTable(
                name: "OffRampClient_Primary_Secondary_Relationship");

            migrationBuilder.DropTable(
                name: "OfframpCustomConnectInfo");

            migrationBuilder.DropTable(
                name: "OfframpExternalHubInfo");

            migrationBuilder.DropTable(
                name: "OnsitePharmacies");

            migrationBuilder.DropTable(
                name: "OrderProductForm");

            migrationBuilder.DropTable(
                name: "OrganizationDynamicData");

            migrationBuilder.DropTable(
                name: "OrganizationEnrollments");

            migrationBuilder.DropTable(
                name: "OrganizationEnrollments_Audit");

            migrationBuilder.DropTable(
                name: "OrganizationMergeLog");

            migrationBuilder.DropTable(
                name: "OrganizationMergeLogDetail");

            migrationBuilder.DropTable(
                name: "OrganizationNotes");

            migrationBuilder.DropTable(
                name: "OrganizationNPIs");

            migrationBuilder.DropTable(
                name: "OrganizationPhoneNumbers");

            migrationBuilder.DropTable(
                name: "OrganizationPrograms");

            migrationBuilder.DropTable(
                name: "Organizations_Audit");

            migrationBuilder.DropTable(
                name: "OrganizationTaxIDs");

            migrationBuilder.DropTable(
                name: "OrganizationTerritoryAlignment");

            migrationBuilder.DropTable(
                name: "PAN_ApplicationTokenRoles");

            migrationBuilder.DropTable(
                name: "PAN_DisenrollmentReversal");

            migrationBuilder.DropTable(
                name: "PAN_DisenrollmentReversal_Audit");

            migrationBuilder.DropTable(
                name: "PAN_DisenrollmentReversal_temp");

            migrationBuilder.DropTable(
                name: "PanReversals");

            migrationBuilder.DropTable(
                name: "PAPExtension");

            migrationBuilder.DropTable(
                name: "Patient_DeviceID");

            migrationBuilder.DropTable(
                name: "Patient_Fulfillment");

            migrationBuilder.DropTable(
                name: "PatientAddresses_Audit");

            migrationBuilder.DropTable(
                name: "PatientAttestation");

            migrationBuilder.DropTable(
                name: "PatientAttestationAudit");

            migrationBuilder.DropTable(
                name: "PatientCommunicationMethods");

            migrationBuilder.DropTable(
                name: "PatientConsentAudit");

            migrationBuilder.DropTable(
                name: "PatientConsentPerDrug");

            migrationBuilder.DropTable(
                name: "PatientContact");

            migrationBuilder.DropTable(
                name: "PatientDevices");

            migrationBuilder.DropTable(
                name: "PatientDeviceUsageLog");

            migrationBuilder.DropTable(
                name: "PatientDiagnosis");

            migrationBuilder.DropTable(
                name: "PatientDupeSearchResponses");

            migrationBuilder.DropTable(
                name: "PatientDynamicData");

            migrationBuilder.DropTable(
                name: "PatientEligibility_ResponseCodeList");

            migrationBuilder.DropTable(
                name: "PatientEligibility_Transactions");

            migrationBuilder.DropTable(
                name: "PatientFMRSR_History");

            migrationBuilder.DropTable(
                name: "PatientFMRSR_History_Audit");

            migrationBuilder.DropTable(
                name: "PatientInvitationEmailAudit");

            migrationBuilder.DropTable(
                name: "PatientJourneyData");

            migrationBuilder.DropTable(
                name: "PatientLISCheck");

            migrationBuilder.DropTable(
                name: "PatientLISCheckBatch");

            migrationBuilder.DropTable(
                name: "PatientMarketingStatus");

            migrationBuilder.DropTable(
                name: "PatientNotes");

            migrationBuilder.DropTable(
                name: "PatientOrganizations");

            migrationBuilder.DropTable(
                name: "PatientPhoneNumbers");

            migrationBuilder.DropTable(
                name: "PatientPhoneNumbers_Audit");

            migrationBuilder.DropTable(
                name: "PatientPhysicians");

            migrationBuilder.DropTable(
                name: "PatientPrescription");

            migrationBuilder.DropTable(
                name: "PatientPrograms");

            migrationBuilder.DropTable(
                name: "PatientReactivations");

            migrationBuilder.DropTable(
                name: "PatientRefill");

            migrationBuilder.DropTable(
                name: "PatientREMS");

            migrationBuilder.DropTable(
                name: "PatientREMS_Audit");

            migrationBuilder.DropTable(
                name: "PatientRxDetails");

            migrationBuilder.DropTable(
                name: "Patients_Audit");

            migrationBuilder.DropTable(
                name: "PatientSite");

            migrationBuilder.DropTable(
                name: "PatientSMSTextConsent");

            migrationBuilder.DropTable(
                name: "PatientSMSTextConsentAudit");

            migrationBuilder.DropTable(
                name: "PatientSnoozedAlerts");

            migrationBuilder.DropTable(
                name: "PatientSpecialtyPharmacies");

            migrationBuilder.DropTable(
                name: "PatientSpecialtyPharmacies_Audit");

            migrationBuilder.DropTable(
                name: "PatientSSN_Encrypted");

            migrationBuilder.DropTable(
                name: "PatientSSNShow_AuditLog");

            migrationBuilder.DropTable(
                name: "PatientStatus");

            migrationBuilder.DropTable(
                name: "PatientStatusNonHub");

            migrationBuilder.DropTable(
                name: "PatientStatusProgramList");

            migrationBuilder.DropTable(
                name: "PatientXMLData");

            migrationBuilder.DropTable(
                name: "payer codes");

            migrationBuilder.DropTable(
                name: "PayerAddresses");

            migrationBuilder.DropTable(
                name: "PayerAdminTicket");

            migrationBuilder.DropTable(
                name: "PayerInjectionDateConfig_Infinitus");

            migrationBuilder.DropTable(
                name: "Payers_PayerCategories");

            migrationBuilder.DropTable(
                name: "PECOS_Providers_NPI_LookUpList");

            migrationBuilder.DropTable(
                name: "PhoneNumbers");

            migrationBuilder.DropTable(
                name: "PhysicianAddresses_Audit");

            migrationBuilder.DropTable(
                name: "PhysicianClinicalTrials");

            migrationBuilder.DropTable(
                name: "PhysicianDynamicData");

            migrationBuilder.DropTable(
                name: "PhysicianEnrollments");

            migrationBuilder.DropTable(
                name: "PhysicianEnrollments_Audit");

            migrationBuilder.DropTable(
                name: "PhysicianNotes");

            migrationBuilder.DropTable(
                name: "PhysicianOrganizations");

            migrationBuilder.DropTable(
                name: "PhysicianPhoneNumbers");

            migrationBuilder.DropTable(
                name: "PhysicianPhoneNumbers_Audit");

            migrationBuilder.DropTable(
                name: "PhysicianPrograms");

            migrationBuilder.DropTable(
                name: "Physicians_Audit");

            migrationBuilder.DropTable(
                name: "PhysiciansDetail");

            migrationBuilder.DropTable(
                name: "PhysiciansDetail_Audit");

            migrationBuilder.DropTable(
                name: "PhysicianSignature");

            migrationBuilder.DropTable(
                name: "PhysicianSpecialties");

            migrationBuilder.DropTable(
                name: "PhysicianStateLicenses");

            migrationBuilder.DropTable(
                name: "Portal_ADSARtoSOC_Stage");

            migrationBuilder.DropTable(
                name: "Portal_EntityToTerr");

            migrationBuilder.DropTable(
                name: "Portal_EntityToTerr_Stage");

            migrationBuilder.DropTable(
                name: "Portal_HCP_Buttons_AuditLog");

            migrationBuilder.DropTable(
                name: "Portal_NPItoFacilitytoSOC_Stage");

            migrationBuilder.DropTable(
                name: "Portal_NPItoSOC");

            migrationBuilder.DropTable(
                name: "Portal_PatientTempRegistration");

            migrationBuilder.DropTable(
                name: "Portal_Regions");

            migrationBuilder.DropTable(
                name: "Portal_Roster_Area_Mapping");

            migrationBuilder.DropTable(
                name: "Portal_Roster_Relation");

            migrationBuilder.DropTable(
                name: "Portal_Roster_Stage");

            migrationBuilder.DropTable(
                name: "Portal_SalesForceProgram");

            migrationBuilder.DropTable(
                name: "Portal_SOC");

            migrationBuilder.DropTable(
                name: "Portal_Staging_CMM_SR");

            migrationBuilder.DropTable(
                name: "Portal_Staging_HCP_SR_Audit");

            migrationBuilder.DropTable(
                name: "Portal_Staging_Registration_Addr_Entity_Mapping");

            migrationBuilder.DropTable(
                name: "Portal_Staging_Requests");

            migrationBuilder.DropTable(
                name: "Portal_Staging_SRF");

            migrationBuilder.DropTable(
                name: "Portal_Staging_tblFiles");

            migrationBuilder.DropTable(
                name: "Portal_Takeda_Hierarchy");

            migrationBuilder.DropTable(
                name: "Portal_Territories");

            migrationBuilder.DropTable(
                name: "Portal_TerritoryCaseManager");

            migrationBuilder.DropTable(
                name: "Portal_Tiers");

            migrationBuilder.DropTable(
                name: "Portal_UserSession");

            migrationBuilder.DropTable(
                name: "Portal_ZIP_ToTerr");

            migrationBuilder.DropTable(
                name: "Portal_Zip_ToTerr_Minimal_Stage");

            migrationBuilder.DropTable(
                name: "Portal_Zip_ToTerr_Stage");

            migrationBuilder.DropTable(
                name: "PortalAnnouncement");

            migrationBuilder.DropTable(
                name: "PortalData_LoadRecord");

            migrationBuilder.DropTable(
                name: "PortalData_ReportRecordCount");

            migrationBuilder.DropTable(
                name: "PortalFilterRequestConfig");

            migrationBuilder.DropTable(
                name: "PortalFunctions");

            migrationBuilder.DropTable(
                name: "PortalTypeAnnouncement");

            migrationBuilder.DropTable(
                name: "PrescriptionEligibility");

            migrationBuilder.DropTable(
                name: "PrescriptionPharmacy");

            migrationBuilder.DropTable(
                name: "PrescriptionProvider");

            migrationBuilder.DropTable(
                name: "ProductOrderList");

            migrationBuilder.DropTable(
                name: "ProductRequestedOrderDetail");

            migrationBuilder.DropTable(
                name: "ProfiseeEvent");

            migrationBuilder.DropTable(
                name: "Program_CopayCard_IDs");

            migrationBuilder.DropTable(
                name: "ProgramFunctionList");

            migrationBuilder.DropTable(
                name: "ProgramFunctions");

            migrationBuilder.DropTable(
                name: "ProgramMailingList");

            migrationBuilder.DropTable(
                name: "ProgramNDCs");

            migrationBuilder.DropTable(
                name: "ProgramPhoneNumberList");

            migrationBuilder.DropTable(
                name: "ProgramURLs");

            migrationBuilder.DropTable(
                name: "ProgramVendors");

            migrationBuilder.DropTable(
                name: "PSI_ICD9");

            migrationBuilder.DropTable(
                name: "PublicNumbers");

            migrationBuilder.DropTable(
                name: "QA_RepPayer_Criteria");

            migrationBuilder.DropTable(
                name: "QA_Setting_Admin");

            migrationBuilder.DropTable(
                name: "QuestionAnswerFiles");

            migrationBuilder.DropTable(
                name: "QuestionAnswers");

            migrationBuilder.DropTable(
                name: "QuickCodes");

            migrationBuilder.DropTable(
                name: "RefillReminderCleanUpSpreadsheet_Final");

            migrationBuilder.DropTable(
                name: "ReimbursementEnrollmentForm");

            migrationBuilder.DropTable(
                name: "ReminderNotificationLogs");

            migrationBuilder.DropTable(
                name: "Reminders_Child");

            migrationBuilder.DropTable(
                name: "ReportActivityHistory");

            migrationBuilder.DropTable(
                name: "ReportParameters");

            migrationBuilder.DropTable(
                name: "RequestInfoes");

            migrationBuilder.DropTable(
                name: "RIMGIMG2_IMAGE");

            migrationBuilder.DropTable(
                name: "RIMGUDG2_UNQ_DRUG");

            migrationBuilder.DropTable(
                name: "RIMGUIJ2_UNQ_DRUG_JRNL");

            migrationBuilder.DropTable(
                name: "RiteAidHolidays");

            migrationBuilder.DropTable(
                name: "RiteAidHours");

            migrationBuilder.DropTable(
                name: "RMIID1_MED");

            migrationBuilder.DropTable(
                name: "RMINDC1_NDC_MEDID");

            migrationBuilder.DropTable(
                name: "RNDC14_NDC_MSTR");

            migrationBuilder.DropTable(
                name: "RPEMMOE2_MONO");

            migrationBuilder.DropTable(
                name: "RPEMOGC0_MONO_GCNSEQNO_LINK");

            migrationBuilder.DropTable(
                name: "RTMMID1_TM_MED");

            migrationBuilder.DropTable(
                name: "RTPBTransactions");

            migrationBuilder.DropTable(
                name: "RuleTriggerActions");

            migrationBuilder.DropTable(
                name: "RxAdminAction");

            migrationBuilder.DropTable(
                name: "RxAdminDoses");

            migrationBuilder.DropTable(
                name: "RxAdminDosesRules");

            migrationBuilder.DropTable(
                name: "SalesData");

            migrationBuilder.DropTable(
                name: "SalesData_CustomerToVendor");

            migrationBuilder.DropTable(
                name: "SAMLAuditLog");

            migrationBuilder.DropTable(
                name: "Seasonal_SourceRecord");

            migrationBuilder.DropTable(
                name: "Secure_Communication_Documents");

            migrationBuilder.DropTable(
                name: "Secure_Communications");

            migrationBuilder.DropTable(
                name: "SecureMessagesAddresses");

            migrationBuilder.DropTable(
                name: "SentAlertHistory");

            migrationBuilder.DropTable(
                name: "ServiceRequests_AuditLog");

            migrationBuilder.DropTable(
                name: "SMS_Templates");

            migrationBuilder.DropTable(
                name: "SOAPAuditLog");

            migrationBuilder.DropTable(
                name: "SpecialtyPharmacies");

            migrationBuilder.DropTable(
                name: "SPInventory");

            migrationBuilder.DropTable(
                name: "SPInventoryAudit");

            migrationBuilder.DropTable(
                name: "SplitStringResult");

            migrationBuilder.DropTable(
                name: "SR_Activities");

            migrationBuilder.DropTable(
                name: "SR_AlternateCoveragePlans");

            migrationBuilder.DropTable(
                name: "SR_Assignments");

            migrationBuilder.DropTable(
                name: "SR_BridgeEligibility");

            migrationBuilder.DropTable(
                name: "SR_BridgeEligibility_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_BridgeExtensions");

            migrationBuilder.DropTable(
                name: "SR_BridgeExtensions_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_CallLogs");

            migrationBuilder.DropTable(
                name: "SR_Copay_Records");

            migrationBuilder.DropTable(
                name: "SR_Copay_Records_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_Copay_Records_ErrorLog");

            migrationBuilder.DropTable(
                name: "SR_CopayClaim");

            migrationBuilder.DropTable(
                name: "SR_CopayPaymentEOB");

            migrationBuilder.DropTable(
                name: "SR_CopayPayments");

            migrationBuilder.DropTable(
                name: "SR_Dates");

            migrationBuilder.DropTable(
                name: "SR_eEnrollments");

            migrationBuilder.DropTable(
                name: "SR_eEnrollments_Audit");

            migrationBuilder.DropTable(
                name: "SR_FAQs");

            migrationBuilder.DropTable(
                name: "SR_FeedbackTracking_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_IncompleteReasons");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataCptCodes");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataDiagnoses");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataPolicy_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataPolicyCptCodesDetails");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataPolicyResultClientSpecificItems");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataRequestPolicies");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataRequestPoliciesTmp");

            migrationBuilder.DropTable(
                name: "SR_Messages");

            migrationBuilder.DropTable(
                name: "SR_MessageThreads");

            migrationBuilder.DropTable(
                name: "SR_NoteHistory");

            migrationBuilder.DropTable(
                name: "SR_NursingActivity");

            migrationBuilder.DropTable(
                name: "SR_NursingActivity_History");

            migrationBuilder.DropTable(
                name: "SR_OffRampHistory");

            migrationBuilder.DropTable(
                name: "SR_OrderDetails");

            migrationBuilder.DropTable(
                name: "SR_Organizations");

            migrationBuilder.DropTable(
                name: "SR_Organizations_Audit");

            migrationBuilder.DropTable(
                name: "SR_PAP");

            migrationBuilder.DropTable(
                name: "SR_PAP_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_PAPByTypeMapping");

            migrationBuilder.DropTable(
                name: "SR_PAPPayments");

            migrationBuilder.DropTable(
                name: "SR_Pharmacy_ePA_Details");

            migrationBuilder.DropTable(
                name: "SR_Physicians");

            migrationBuilder.DropTable(
                name: "SR_Referrals");

            migrationBuilder.DropTable(
                name: "SR_Reminder");

            migrationBuilder.DropTable(
                name: "SR_RequiredFields");

            migrationBuilder.DropTable(
                name: "SR_RxOffRampDataPolicyCoverageLimitationMessage");

            migrationBuilder.DropTable(
                name: "SR_SubTypes");

            migrationBuilder.DropTable(
                name: "SR_TestClaims");

            migrationBuilder.DropTable(
                name: "SR_Tickles");

            migrationBuilder.DropTable(
                name: "SR_TrainingLogs");

            migrationBuilder.DropTable(
                name: "SR_TriageFields");

            migrationBuilder.DropTable(
                name: "SR_Triages");

            migrationBuilder.DropTable(
                name: "SR_TypeActivity");

            migrationBuilder.DropTable(
                name: "SR_TypeConfig");

            migrationBuilder.DropTable(
                name: "SR_TypeDynamicData");

            migrationBuilder.DropTable(
                name: "SR_TypeDynamicData_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_TypeGroupDynamicData");

            migrationBuilder.DropTable(
                name: "SR_TypeGroupDynamicData_AuditLog");

            migrationBuilder.DropTable(
                name: "SR_TypeList_ByDrug");

            migrationBuilder.DropTable(
                name: "SR_Visits");

            migrationBuilder.DropTable(
                name: "SRActivity_EmailTemplate_List");

            migrationBuilder.DropTable(
                name: "SRAutoStatusLog");

            migrationBuilder.DropTable(
                name: "SRDocumentType_EmailTemplate_List");

            migrationBuilder.DropTable(
                name: "SRHubStatus");

            migrationBuilder.DropTable(
                name: "SRHubStatus_SRType_List");

            migrationBuilder.DropTable(
                name: "Staging_Dispenses");

            migrationBuilder.DropTable(
                name: "state");

            migrationBuilder.DropTable(
                name: "StateCounties");

            migrationBuilder.DropTable(
                name: "StateList");

            migrationBuilder.DropTable(
                name: "states");

            migrationBuilder.DropTable(
                name: "StatesList");

            migrationBuilder.DropTable(
                name: "STMSPatientMedicationProfile");

            migrationBuilder.DropTable(
                name: "SubscriptionHistory");

            migrationBuilder.DropTable(
                name: "SurveyAnswer_AuditLog");

            migrationBuilder.DropTable(
                name: "SurveyAnswersMutliSelect");

            migrationBuilder.DropTable(
                name: "SurveyDataPointDictionary");

            migrationBuilder.DropTable(
                name: "SurveyElement_DataPoints");

            migrationBuilder.DropTable(
                name: "SurveyElements");

            migrationBuilder.DropTable(
                name: "SurveyMasterByDrug");

            migrationBuilder.DropTable(
                name: "SurveyMasterBySRType");

            migrationBuilder.DropTable(
                name: "Synagis_Patients");

            migrationBuilder.DropTable(
                name: "talendFlowCatcher");

            migrationBuilder.DropTable(
                name: "talendLogCatcher");

            migrationBuilder.DropTable(
                name: "talendStatCatcher");

            migrationBuilder.DropTable(
                name: "TAMTracker");

            migrationBuilder.DropTable(
                name: "TAMTracker_Options");

            migrationBuilder.DropTable(
                name: "TAMTrackerColor");

            migrationBuilder.DropTable(
                name: "TAMTrackerColumns");

            migrationBuilder.DropTable(
                name: "TAMTrackerSorts");

            migrationBuilder.DropTable(
                name: "temp_PatientJourney");

            migrationBuilder.DropTable(
                name: "TempPayerCleanup");

            migrationBuilder.DropTable(
                name: "ToolTips");

            migrationBuilder.DropTable(
                name: "Tracleer_REMS_InPatientPharmacy");

            migrationBuilder.DropTable(
                name: "Tracleer_REMS_Patient");

            migrationBuilder.DropTable(
                name: "Tracleer_REMS_Prescriber");

            migrationBuilder.DropTable(
                name: "Tracleer_REMS_Unique_Prescribers");

            migrationBuilder.DropTable(
                name: "Trigger_Email_Logs");

            migrationBuilder.DropTable(
                name: "UserActiveSessions");

            migrationBuilder.DropTable(
                name: "UserEmailSubscriptions");

            migrationBuilder.DropTable(
                name: "UserGroup_OfframpClient_Relationship");

            migrationBuilder.DropTable(
                name: "UserGroup_Payer_Relationship");

            migrationBuilder.DropTable(
                name: "UserHistory");

            migrationBuilder.DropTable(
                name: "UserLoginHistory");

            migrationBuilder.DropTable(
                name: "UserPasswordHistory");

            migrationBuilder.DropTable(
                name: "UserProgramSettings");

            migrationBuilder.DropTable(
                name: "UserRoleDefaults");

            migrationBuilder.DropTable(
                name: "UserUserGroupRelation");

            migrationBuilder.DropTable(
                name: "USWM_GetProgramIDResult");

            migrationBuilder.DropTable(
                name: "USWM_Zipterr_Educator_Stage");

            migrationBuilder.DropTable(
                name: "ValidationFieldDefinitionMapping");

            migrationBuilder.DropTable(
                name: "Vendor_APIConfiguration");

            migrationBuilder.DropTable(
                name: "Vendor_APIMethodConfiguration");

            migrationBuilder.DropTable(
                name: "Vendor_CopayNPIs");

            migrationBuilder.DropTable(
                name: "Vendor_DFAttributes");

            migrationBuilder.DropTable(
                name: "Vendor_FaxList");

            migrationBuilder.DropTable(
                name: "Vendor_SMTPConfiguration");

            migrationBuilder.DropTable(
                name: "WhiteList");

            migrationBuilder.DropTable(
                name: "WhiteListEntitySettings");

            migrationBuilder.DropTable(
                name: "WorkflowPAPTypeConfig");

            migrationBuilder.DropTable(
                name: "WorkflowPDFTaggings");

            migrationBuilder.DropTable(
                name: "WorkflowProgramConfig");

            migrationBuilder.DropTable(
                name: "WorkflowProgramEmail");

            migrationBuilder.DropTable(
                name: "WorkflowProgramInvitationConfig");

            migrationBuilder.DropTable(
                name: "WorkflowResponses");

            migrationBuilder.DropTable(
                name: "WorkflowStepContent");

            migrationBuilder.DropTable(
                name: "WorkflowStepProgramFields");

            migrationBuilder.DropTable(
                name: "WorkflowSteps");

            migrationBuilder.DropTable(
                name: "Zip_ToCaseManager");

            migrationBuilder.DropTable(
                name: "Zip_ToCaseManager_Stage");

            migrationBuilder.DropTable(
                name: "ZipCodes");

            migrationBuilder.DropTable(
                name: "zUsplusGeoFull");

            migrationBuilder.DropTable(
                name: "zUszcGeoFull");

            migrationBuilder.DropTable(
                name: "MessageModule");

            migrationBuilder.DropTable(
                name: "aspnet_Paths");

            migrationBuilder.DropTable(
                name: "aspnet_Roles");

            migrationBuilder.DropTable(
                name: "BenefitHistoryFieldList");

            migrationBuilder.DropTable(
                name: "CareCycles");

            migrationBuilder.DropTable(
                name: "CaseRecord");

            migrationBuilder.DropTable(
                name: "CF_IssueType");

            migrationBuilder.DropTable(
                name: "ConnectFedexAPIRequests");

            migrationBuilder.DropTable(
                name: "eBvModularTransaction");

            migrationBuilder.DropTable(
                name: "DashboardPanelList");

            migrationBuilder.DropTable(
                name: "DataDictionary");

            migrationBuilder.DropTable(
                name: "DocumentFieldList");

            migrationBuilder.DropTable(
                name: "Documents_DocTypes");

            migrationBuilder.DropTable(
                name: "Documents_FaxQueues");

            migrationBuilder.DropTable(
                name: "eBvDrugPharmacyCoverage");

            migrationBuilder.DropTable(
                name: "eBvMasterTransactions");

            migrationBuilder.DropTable(
                name: "eBvCoverageFactors");

            migrationBuilder.DropTable(
                name: "EntityMergeLog");

            migrationBuilder.DropTable(
                name: "eServicesConfigList");

            migrationBuilder.DropTable(
                name: "FAX_LOG_DETAILS");

            migrationBuilder.DropTable(
                name: "UserGroup");

            migrationBuilder.DropTable(
                name: "LTR_EmailNotification");

            migrationBuilder.DropTable(
                name: "LTR_FaxNotification");

            migrationBuilder.DropTable(
                name: "LTR_LookupList");

            migrationBuilder.DropTable(
                name: "LTR_MailNotification");

            migrationBuilder.DropTable(
                name: "Mailings");

            migrationBuilder.DropTable(
                name: "MDMPatientSearchResult");

            migrationBuilder.DropTable(
                name: "MedeBVOfframpCOBBlurbRules");

            migrationBuilder.DropTable(
                name: "MedvantxInventoryUpdate");

            migrationBuilder.DropTable(
                name: "MobileDrugSurveyElements");

            migrationBuilder.DropTable(
                name: "MobilePatientSurveyAnswerMaster");

            migrationBuilder.DropTable(
                name: "MobileSurveySubElements");

            migrationBuilder.DropTable(
                name: "MobileRefillOrders");

            migrationBuilder.DropTable(
                name: "NurseAgencyAccreditationList");

            migrationBuilder.DropTable(
                name: "NurseAgencyCertificationList");

            migrationBuilder.DropTable(
                name: "OfframpClients");

            migrationBuilder.DropTable(
                name: "Vendors");

            migrationBuilder.DropTable(
                name: "OrganizationAddresses");

            migrationBuilder.DropTable(
                name: "PAN_Applications");

            migrationBuilder.DropTable(
                name: "PAN_ApplicationRoles");

            migrationBuilder.DropTable(
                name: "DiagnosisList");

            migrationBuilder.DropTable(
                name: "PatientStatusList");

            migrationBuilder.DropTable(
                name: "BenefitInvestigation");

            migrationBuilder.DropTable(
                name: "PayerDetails");

            migrationBuilder.DropTable(
                name: "Portal_Roster");

            migrationBuilder.DropTable(
                name: "Portal_Staging_Registration_Addresses");

            migrationBuilder.DropTable(
                name: "Portal_Staging_Registration_Entity");

            migrationBuilder.DropTable(
                name: "Portal_Staging_HCP_SR");

            migrationBuilder.DropTable(
                name: "ProgramPortalType");

            migrationBuilder.DropTable(
                name: "Prescription");

            migrationBuilder.DropTable(
                name: "ProductRequestedOrder");

            migrationBuilder.DropTable(
                name: "Reminders");

            migrationBuilder.DropTable(
                name: "ReportPrograms");

            migrationBuilder.DropTable(
                name: "RuleTriggerConditions");

            migrationBuilder.DropTable(
                name: "Drug");

            migrationBuilder.DropTable(
                name: "AlertTypes");

            migrationBuilder.DropTable(
                name: "SR_AlternateCoverageResearch");

            migrationBuilder.DropTable(
                name: "FAQList");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampDataPolicy");

            migrationBuilder.DropTable(
                name: "MessageThreads");

            migrationBuilder.DropTable(
                name: "SR_Notes");

            migrationBuilder.DropTable(
                name: "SR_PAPScheduledPayments");

            migrationBuilder.DropTable(
                name: "LookupDataList");

            migrationBuilder.DropTable(
                name: "SR_RxOffRampDataPolicy");

            migrationBuilder.DropTable(
                name: "SR_SubTypeList");

            migrationBuilder.DropTable(
                name: "DynamicDataList");

            migrationBuilder.DropTable(
                name: "SRHubStatusList");

            migrationBuilder.DropTable(
                name: "CountriesList");

            migrationBuilder.DropTable(
                name: "FundReopenSubscriptionDetails");

            migrationBuilder.DropTable(
                name: "SurveyAnswers");

            migrationBuilder.DropTable(
                name: "SurveyLookupDataList");

            migrationBuilder.DropTable(
                name: "SurveyCategories");

            migrationBuilder.DropTable(
                name: "UserPrograms");

            migrationBuilder.DropTable(
                name: "UserAccessFunctionList");

            migrationBuilder.DropTable(
                name: "UserRoleList");

            migrationBuilder.DropTable(
                name: "ValidationDefinition");

            migrationBuilder.DropTable(
                name: "ValidationField");

            migrationBuilder.DropTable(
                name: "WhiteListChannelType");

            migrationBuilder.DropTable(
                name: "WhiteListEntity");

            migrationBuilder.DropTable(
                name: "WorkflowPDFs");

            migrationBuilder.DropTable(
                name: "EPAP_Applications");

            migrationBuilder.DropTable(
                name: "Workflow");

            migrationBuilder.DropTable(
                name: "Documents");

            migrationBuilder.DropTable(
                name: "eBvMedicationBenefitDetails");

            migrationBuilder.DropTable(
                name: "eBvInsuranceFormularyCoverage");

            migrationBuilder.DropTable(
                name: "PortalFunctionList");

            migrationBuilder.DropTable(
                name: "FAX_LOG_SUMMARY");

            migrationBuilder.DropTable(
                name: "LTR_NotificationItems");

            migrationBuilder.DropTable(
                name: "ContactAddresses");

            migrationBuilder.DropTable(
                name: "Entity");

            migrationBuilder.DropTable(
                name: "PatientAddresses");

            migrationBuilder.DropTable(
                name: "PhysicianAddresses");

            migrationBuilder.DropTable(
                name: "TriageRecords");

            migrationBuilder.DropTable(
                name: "MobileMasterSurveys");

            migrationBuilder.DropTable(
                name: "MobileSurveyElements");

            migrationBuilder.DropTable(
                name: "Organizations");

            migrationBuilder.DropTable(
                name: "PatientInsurance");

            migrationBuilder.DropTable(
                name: "Portal_Staging_Registration");

            migrationBuilder.DropTable(
                name: "PortalType");

            migrationBuilder.DropTable(
                name: "ReportList");

            migrationBuilder.DropTable(
                name: "SR_MedOffRampData");

            migrationBuilder.DropTable(
                name: "MessageTypes");

            migrationBuilder.DropTable(
                name: "SR_PAPPaymentSchedules");

            migrationBuilder.DropTable(
                name: "SR_RxOffRampData");

            migrationBuilder.DropTable(
                name: "FundEnrollmentApplications");

            migrationBuilder.DropTable(
                name: "SurveyHistory");

            migrationBuilder.DropTable(
                name: "UserInformation");

            migrationBuilder.DropTable(
                name: "ValidationType");

            migrationBuilder.DropTable(
                name: "WorkflowProgramFields");

            migrationBuilder.DropTable(
                name: "EPAP_Invitations");

            migrationBuilder.DropTable(
                name: "eBvCoverageBenefitDetails");

            migrationBuilder.DropTable(
                name: "DocumentList");

            migrationBuilder.DropTable(
                name: "LTR_NotificationMaster");

            migrationBuilder.DropTable(
                name: "Trigger_EmailTemplate_List");

            migrationBuilder.DropTable(
                name: "Physicians");

            migrationBuilder.DropTable(
                name: "Insurances");

            migrationBuilder.DropTable(
                name: "SR_OffRamp");

            migrationBuilder.DropTable(
                name: "SurveyMaster");

            migrationBuilder.DropTable(
                name: "aspnet_Users");

            migrationBuilder.DropTable(
                name: "WorkflowFields");

            migrationBuilder.DropTable(
                name: "BenefitInvestigation_eBV");

            migrationBuilder.DropTable(
                name: "Payers");

            migrationBuilder.DropTable(
                name: "aspnet_Applications");

            migrationBuilder.DropTable(
                name: "WorkflowLookupItems");

            migrationBuilder.DropTable(
                name: "ServiceRequests");

            migrationBuilder.DropTable(
                name: "WorkflowLookups");

            migrationBuilder.DropTable(
                name: "Contacts");

            migrationBuilder.DropTable(
                name: "NurseAgencies");

            migrationBuilder.DropTable(
                name: "Patients");

            migrationBuilder.DropTable(
                name: "SR_ActivityList");

            migrationBuilder.DropTable(
                name: "SR_TypeList");

            migrationBuilder.DropTable(
                name: "Programs");
        }
    }
}
