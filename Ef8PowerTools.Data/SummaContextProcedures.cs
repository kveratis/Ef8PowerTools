// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Ef8PowerTools.Data.Models
{
    public partial class SummaContext
    {
        private ISummaContextProcedures _procedures;

        public virtual ISummaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SummaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISummaContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class SummaContextProcedures : ISummaContextProcedures
    {
        private readonly SummaContext _context;

        public SummaContextProcedures(SummaContext context)
        {
            _context = context;
        }

        public virtual async Task<List<AddNewRxAdminColumnWithForeignKeyResult>> AddNewRxAdminColumnWithForeignKeyAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AddNewRxAdminColumnWithForeignKeyResult>("EXEC @returnValue = [dbo].[AddNewRxAdminColumnWithForeignKey]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Admin_Doses_DeleteResult>> Admin_Doses_DeleteAsync(int? Id, int? ProgramID, int? PatientID, string AdminUpdatedUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdminUpdatedUser",
                    Size = 100,
                    Value = AdminUpdatedUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Admin_Doses_DeleteResult>("EXEC @returnValue = [dbo].[Admin_Doses_Delete] @Id, @ProgramID, @PatientID, @AdminUpdatedUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Admin_Doses_InsertResult>> Admin_Doses_InsertAsync(int? ProgramID, int? PatientID, string PatientFName, string PatientLName, DateOnly? PatientDob, int? NDC, string DrugName, string DrugForm, string DrugStrength, int? AdminDose, DateTime? AdminDate, string AdminStatus, string AdminSource, string AdminNotes, string AdminUpdatedUser, DateTime? AdminUpdatedDate, bool? Active, bool? Deleted, DateTime? Created, string CreatedBy, string ExternalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientFName",
                    Size = 50,
                    Value = PatientFName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientLName",
                    Size = 50,
                    Value = PatientLName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientDob",
                    Value = PatientDob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "NDC",
                    Value = NDC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugForm",
                    Size = 100,
                    Value = DrugForm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugStrength",
                    Size = 100,
                    Value = DrugStrength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminDose",
                    Value = AdminDose ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdminDate",
                    Value = AdminDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdminStatus",
                    Size = 50,
                    Value = AdminStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminSource",
                    Size = 50,
                    Value = AdminSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminNotes",
                    Size = 1000,
                    Value = AdminNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminUpdatedUser",
                    Size = 50,
                    Value = AdminUpdatedUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminUpdatedDate",
                    Value = AdminUpdatedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Deleted",
                    Value = Deleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Created",
                    Value = Created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExternalId",
                    Size = 50,
                    Value = ExternalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Admin_Doses_InsertResult>("EXEC @returnValue = [dbo].[Admin_Doses_Insert] @ProgramID, @PatientID, @PatientFName, @PatientLName, @PatientDob, @NDC, @DrugName, @DrugForm, @DrugStrength, @AdminDose, @AdminDate, @AdminStatus, @AdminSource, @AdminNotes, @AdminUpdatedUser, @AdminUpdatedDate, @Active, @Deleted, @Created, @CreatedBy, @ExternalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Admin_Doses_SaveResult>> Admin_Doses_SaveAsync(int? ProgramID, int? PatientID, string PatientFName, string PatientLName, DateOnly? PatientDob, int? NDC, string DrugName, string DrugForm, string DrugStrength, int? AdminDose, DateTime? AdminDate, string AdminStatus, string AdminSource, string AdminNotes, bool? Active, bool? Deleted, DateTime? Created, string CreatedBy, int? OrgId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientFName",
                    Size = 50,
                    Value = PatientFName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientLName",
                    Size = 50,
                    Value = PatientLName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientDob",
                    Value = PatientDob ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "NDC",
                    Value = NDC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugForm",
                    Size = 100,
                    Value = DrugForm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugStrength",
                    Size = 100,
                    Value = DrugStrength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminDose",
                    Value = AdminDose ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdminDate",
                    Value = AdminDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdminStatus",
                    Size = 50,
                    Value = AdminStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminSource",
                    Size = 50,
                    Value = AdminSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminNotes",
                    Size = 1000,
                    Value = AdminNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Deleted",
                    Value = Deleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Created",
                    Value = Created ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgId",
                    Value = OrgId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Admin_Doses_SaveResult>("EXEC @returnValue = [dbo].[Admin_Doses_Save] @ProgramID, @PatientID, @PatientFName, @PatientLName, @PatientDob, @NDC, @DrugName, @DrugForm, @DrugStrength, @AdminDose, @AdminDate, @AdminStatus, @AdminSource, @AdminNotes, @Active, @Deleted, @Created, @CreatedBy, @OrgId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Admin_Doses_UpdateResult>> Admin_Doses_UpdateAsync(int? Id, int? ProgramID, int? PatientID, int? AdminDose, DateTime? AdminDate, string AdminStatus, string AdminSource, string AdminNotes, string AdminUpdatedUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdminDose",
                    Value = AdminDose ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdminDate",
                    Value = AdminDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdminStatus",
                    Size = 50,
                    Value = AdminStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminSource",
                    Size = 50,
                    Value = AdminSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminNotes",
                    Size = 1000,
                    Value = AdminNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminUpdatedUser",
                    Size = 100,
                    Value = AdminUpdatedUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Admin_Doses_UpdateResult>("EXEC @returnValue = [dbo].[Admin_Doses_Update] @Id, @ProgramID, @PatientID, @AdminDose, @AdminDate, @AdminStatus, @AdminSource, @AdminNotes, @AdminUpdatedUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_AppealReportResult>> AlimeraPortal_AppealReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_AppealReportResult>("EXEC @returnValue = [dbo].[AlimeraPortal_AppealReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_BISRCoverageActivityResult>> AlimeraPortal_BISRCoverageActivityAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_BISRCoverageActivityResult>("EXEC @returnValue = [dbo].[AlimeraPortal_BISRCoverageActivity] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_BISRCoverageActivity_ChartDataResult>> AlimeraPortal_BISRCoverageActivity_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_BISRCoverageActivity_ChartDataResult>("EXEC @returnValue = [dbo].[AlimeraPortal_BISRCoverageActivity_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_BISRCoverageActivity_ChartData2Result>> AlimeraPortal_BISRCoverageActivity_ChartData2Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_BISRCoverageActivity_ChartData2Result>("EXEC @returnValue = [dbo].[AlimeraPortal_BISRCoverageActivity_ChartData2] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_ClaimSupportResult>> AlimeraPortal_ClaimSupportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_ClaimSupportResult>("EXEC @returnValue = [dbo].[AlimeraPortal_ClaimSupport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNOrganizationDetailResult>> AlimeraPortal_DNOrganizationDetailAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNOrganizationDetailResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNOrganizationDetail] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNOrganizationSearchResult>> AlimeraPortal_DNOrganizationSearchAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string OrganizationName, string FRMCode, string City, string State, string Zip, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNOrganizationSearchResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNOrganizationSearch] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @OrganizationName, @FRMCode, @City, @State, @Zip, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNPatientDetailResult>> AlimeraPortal_DNPatientDetailAsync(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNPatientDetailResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNPatientDetail] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNPatientSearchResult>> AlimeraPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, int? PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 150,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNProviderDetailsResult>> AlimeraPortal_DNProviderDetailsAsync(int? ProgramID, string Drugname, int? PhysicianID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Drugname",
                    Size = -1,
                    Value = Drugname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNProviderDetailsResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNProviderDetails] @ProgramID, @Drugname, @PhysicianID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNProviderSearchResult>> AlimeraPortal_DNProviderSearchAsync(int? ProgramID, string DrugName, string NPI, string ProviderName, string City, string State, string Zip, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 20,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 300,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNProviderSearchResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNProviderSearch] @ProgramID, @DrugName, @NPI, @ProviderName, @City, @State, @Zip, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNServiceRequestDetailResult>> AlimeraPortal_DNServiceRequestDetailAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string SRTypeShortDesc, string SRStatus, DateTime? StartDate, DateTime? EndDate, int? PatientID, int? PhysicianID, string PhysicianName, string OrganizationName, string DrugName, bool? noconsent, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 10,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRStatus",
                    Size = 1,
                    Value = SRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 100,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "noconsent",
                    Value = noconsent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNServiceRequestDetailResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNServiceRequestDetail] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @SRTypeShortDesc, @SRStatus, @StartDate, @EndDate, @PatientID, @PhysicianID, @PhysicianName, @OrganizationName, @DrugName, @noconsent, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_DNServiceRequestSearchResult>> AlimeraPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SRType, string SR_Status, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[AlimeraPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SRType, @SR_Status, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_FieldPortalSecurityServiceResult>> AlimeraPortal_FieldPortalSecurityServiceAsync(string userName, int? ProgramId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 50,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_FieldPortalSecurityServiceResult>("EXEC @returnValue = [dbo].[AlimeraPortal_FieldPortalSecurityService] @userName, @ProgramId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_GetFilterTerritoryCodeForReportResult>> AlimeraPortal_GetFilterTerritoryCodeForReportAsync(int? ProgramID, int? RegionID, int? ABMTerritoryID, int? SAETerritoryID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritoryID",
                    Value = ABMTerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritoryID",
                    Value = SAETerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_GetFilterTerritoryCodeForReportResult>("EXEC @returnValue = [dbo].[AlimeraPortal_GetFilterTerritoryCodeForReport] @ProgramID, @RegionID, @ABMTerritoryID, @SAETerritoryID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_GetSPDetailsResult>> AlimeraPortal_GetSPDetailsAsync(int? ProramId, string ManufactureName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProramId",
                    Value = ProramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_GetSPDetailsResult>("EXEC @returnValue = [dbo].[AlimeraPortal_GetSPDetails] @ProramId, @ManufactureName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_GetUserSalesForceResult>> AlimeraPortal_GetUserSalesForceAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_GetUserSalesForceResult>("EXEC @returnValue = [dbo].[AlimeraPortal_GetUserSalesForce] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_IncompleteEnrollmentsResult>> AlimeraPortal_IncompleteEnrollmentsAsync(int? ProgramID, string Drugname, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Drugname",
                    Size = -1,
                    Value = Drugname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_IncompleteEnrollmentsResult>("EXEC @returnValue = [dbo].[AlimeraPortal_IncompleteEnrollments] @ProgramID, @Drugname, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_IncompleteEnrollments_CountResult>> AlimeraPortal_IncompleteEnrollments_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_IncompleteEnrollments_CountResult>("EXEC @returnValue = [dbo].[AlimeraPortal_IncompleteEnrollments_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_MessageCenterAutoCompleteResult>> AlimeraPortal_MessageCenterAutoCompleteAsync(int? ProgramID, string PNameSearchTerm, string PhyNameSearchTerm, string SRIDSearchTerm, string ToFieldSearchTerm, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PNameSearchTerm",
                    Size = 50,
                    Value = PNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhyNameSearchTerm",
                    Size = 50,
                    Value = PhyNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRIDSearchTerm",
                    Size = 50,
                    Value = SRIDSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToFieldSearchTerm",
                    Size = 50,
                    Value = ToFieldSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_MessageCenterAutoCompleteResult>("EXEC @returnValue = [dbo].[AlimeraPortal_MessageCenterAutoComplete] @ProgramID, @PNameSearchTerm, @PhyNameSearchTerm, @SRIDSearchTerm, @ToFieldSearchTerm, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_MessagesResult>> AlimeraPortal_MessagesAsync(int? ProgramID, string UserName, int? ThreadID, bool? IsUnread, bool? IsRead, bool? IsArchive, string DrugName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsUnread",
                    Value = IsUnread ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsArchive",
                    Value = IsArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_MessagesResult>("EXEC @returnValue = [dbo].[AlimeraPortal_Messages] @ProgramID, @UserName, @ThreadID, @IsUnread, @IsRead, @IsArchive, @DrugName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_Messages_CountResult>> AlimeraPortal_Messages_CountAsync(int? ProgramID, string UserName, string DBName, string DrugNme, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugNme",
                    Size = -1,
                    Value = DrugNme ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_Messages_CountResult>("EXEC @returnValue = [dbo].[AlimeraPortal_Messages_Count] @ProgramID, @UserName, @DBName, @DrugNme", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_MITrendsResult>> AlimeraPortal_MITrendsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_MITrendsResult>("EXEC @returnValue = [dbo].[AlimeraPortal_MITrends] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_PAPReportResult>> AlimeraPortal_PAPReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 250,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_PAPReportResult>("EXEC @returnValue = [dbo].[AlimeraPortal_PAPReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_PAPReport_ChartDataResult>> AlimeraPortal_PAPReport_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_PAPReport_ChartDataResult>("EXEC @returnValue = [dbo].[AlimeraPortal_PAPReport_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_PAReportResult>> AlimeraPortal_PAReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_PAReportResult>("EXEC @returnValue = [dbo].[AlimeraPortal_PAReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpDNSRUpdateTerritoryResult>> AlimeraPortal_TmpDNSRUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpDNSRUpdateTerritoryResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpDNSRUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpInsuranceResult>> AlimeraPortal_TmpInsuranceAsync(int? ProgramID, int? Rank, int? CoveredID, int? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rank",
                    Value = Rank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CoveredID",
                    Value = CoveredID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpInsuranceResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpInsurance] @ProgramID, @Rank, @CoveredID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpPatienInfoResult>> AlimeraPortal_TmpPatienInfoAsync(int? ProgramID, string DrugName, string SalesForce, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 50,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpPatienInfoResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpPatienInfo] @ProgramID, @DrugName, @SalesForce, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpReportDrilldownDataResult>> AlimeraPortal_TmpReportDrilldownDataAsync(int? ProgramID, bool? IsTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsTest",
                    Value = IsTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpReportDrilldownDataResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpReportDrilldownData] @ProgramID, @IsTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpSRIDbyDirllDownResult>> AlimeraPortal_TmpSRIDbyDirllDownAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpSRIDbyDirllDownResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpSRIDbyDirllDown] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpSRIDbyDirllDown_MultiDrugResult>> AlimeraPortal_TmpSRIDbyDirllDown_MultiDrugAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpSRIDbyDirllDown_MultiDrugResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpSRIDbyDirllDown_MultiDrug] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TmpSRSearch_PrmResult>> AlimeraPortal_TmpSRSearch_PrmAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string DrugName, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SalesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 100,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TmpSRSearch_PrmResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TmpSRSearch_Prm] @ProgramID, @StartDate, @EndDate, @DrugName, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SalesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TopFacilitiesResult>> AlimeraPortal_TopFacilitiesAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TopFacilitiesResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TopFacilities] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TopFacilities_ChartDataResult>> AlimeraPortal_TopFacilities_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TopFacilities_ChartDataResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TopFacilities_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TopPlansResult>> AlimeraPortal_TopPlansAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TopPlansResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TopPlans] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TopPlans_ChartDataResult>> AlimeraPortal_TopPlans_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TopPlans_ChartDataResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TopPlans_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TopProvidersResult>> AlimeraPortal_TopProvidersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TopProvidersResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TopProviders] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_TopProviders_ChartDataResult>> AlimeraPortal_TopProviders_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_TopProviders_ChartDataResult>("EXEC @returnValue = [dbo].[AlimeraPortal_TopProviders_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_WorkInProgressResult>> AlimeraPortal_WorkInProgressAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_WorkInProgressResult>("EXEC @returnValue = [dbo].[AlimeraPortal_WorkInProgress] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AlimeraPortal_WorkInProgress_CountResult>> AlimeraPortal_WorkInProgress_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AlimeraPortal_WorkInProgress_CountResult>("EXEC @returnValue = [dbo].[AlimeraPortal_WorkInProgress_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ApellisPortal_DNOrganizationContactResult>> ApellisPortal_DNOrganizationContactAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ApellisPortal_DNOrganizationContactResult>("EXEC @returnValue = [dbo].[ApellisPortal_DNOrganizationContact] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ApellisPortal_DNPatientDetailResult>> ApellisPortal_DNPatientDetailAsync(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ApellisPortal_DNPatientDetailResult>("EXEC @returnValue = [dbo].[ApellisPortal_DNPatientDetail] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ApellisPortal_DNServiceRequestSearchResult>> ApellisPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SRType, string SRSubType, string SR_Status, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRSubType",
                    Size = 10,
                    Value = SRSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ApellisPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[ApellisPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SRType, @SRSubType, @SR_Status, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ApellisPortal_TmpPatienInfoResult>> ApellisPortal_TmpPatienInfoAsync(int? ProgramID, string DrugName, string SalesForce, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 50,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ApellisPortal_TmpPatienInfoResult>("EXEC @returnValue = [dbo].[ApellisPortal_TmpPatienInfo] @ProgramID, @DrugName, @SalesForce, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<API_AdditionalCheck_SR_Eligibility_QSResult>> API_AdditionalCheck_SR_Eligibility_QSAsync(int? ProgramId, int? RecordID, int? RuleTriggerConditionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RecordID",
                    Value = RecordID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RuleTriggerConditionID",
                    Value = RuleTriggerConditionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<API_AdditionalCheck_SR_Eligibility_QSResult>("EXEC @returnValue = [dbo].[API_AdditionalCheck_SR_Eligibility_QS] @ProgramId, @RecordID, @RuleTriggerConditionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AutoCreateSRResult>> AutoCreateSRAsync(int? ProgramID, int? OriginalSRID, string NewSRTypeShortDesc, string NewSRSubTypeDesc, string NewSRAssignedToUser, string NewSRAssignedToUserGroup, int? NewPatientID, int? NewPatientAddressID, int? NewPhysicianID, int? NewPhysicianAddressID, int? NewOrganizationID, int? NewOrganizationAddressID, int? NewContactID, string NewSRSource, string NewSRMedium, string NewSRDrugName, string NewSRStatus, string NewSRResolution, string NewDocumentTypeName, int? NewFileStorageID, string NewFileName, string NewSRFMissingInfo, string UserName, string SR_ExistingCheck, string newTaskName, bool? Task_DueDateRequireBusinessDay, int? Task_DueDateByNumber, string Task_AssignedToUser, string Task_AssignedToUserGroup, bool? Task_CreationMandatory, bool? CareCycleRequired, bool? ENR_Document_Attachment_Mandatory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OriginalSRID",
                    Value = OriginalSRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRTypeShortDesc",
                    Size = 50,
                    Value = NewSRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRSubTypeDesc",
                    Size = 50,
                    Value = NewSRSubTypeDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRAssignedToUser",
                    Size = 50,
                    Value = NewSRAssignedToUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRAssignedToUserGroup",
                    Size = 50,
                    Value = NewSRAssignedToUserGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewPatientID",
                    Value = NewPatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewPatientAddressID",
                    Value = NewPatientAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewPhysicianID",
                    Value = NewPhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewPhysicianAddressID",
                    Value = NewPhysicianAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewOrganizationID",
                    Value = NewOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewOrganizationAddressID",
                    Value = NewOrganizationAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewContactID",
                    Value = NewContactID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRSource",
                    Size = 50,
                    Value = NewSRSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRMedium",
                    Size = 50,
                    Value = NewSRMedium ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRDrugName",
                    Size = 1000,
                    Value = NewSRDrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRStatus",
                    Size = 1,
                    Value = NewSRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRResolution",
                    Size = 150,
                    Value = NewSRResolution ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewDocumentTypeName",
                    Size = 1000,
                    Value = NewDocumentTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewFileStorageID",
                    Value = NewFileStorageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewFileName",
                    Size = 500,
                    Value = NewFileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRFMissingInfo",
                    Size = -1,
                    Value = NewSRFMissingInfo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_ExistingCheck",
                    Size = 50,
                    Value = SR_ExistingCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newTaskName",
                    Size = 500,
                    Value = newTaskName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Task_DueDateRequireBusinessDay",
                    Value = Task_DueDateRequireBusinessDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Task_DueDateByNumber",
                    Value = Task_DueDateByNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Task_AssignedToUser",
                    Size = 50,
                    Value = Task_AssignedToUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Task_AssignedToUserGroup",
                    Size = 50,
                    Value = Task_AssignedToUserGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Task_CreationMandatory",
                    Value = Task_CreationMandatory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CareCycleRequired",
                    Value = CareCycleRequired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ENR_Document_Attachment_Mandatory",
                    Value = ENR_Document_Attachment_Mandatory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AutoCreateSRResult>("EXEC @returnValue = [dbo].[AutoCreateSR] @ProgramID, @OriginalSRID, @NewSRTypeShortDesc, @NewSRSubTypeDesc, @NewSRAssignedToUser, @NewSRAssignedToUserGroup, @NewPatientID, @NewPatientAddressID, @NewPhysicianID, @NewPhysicianAddressID, @NewOrganizationID, @NewOrganizationAddressID, @NewContactID, @NewSRSource, @NewSRMedium, @NewSRDrugName, @NewSRStatus, @NewSRResolution, @NewDocumentTypeName, @NewFileStorageID, @NewFileName, @NewSRFMissingInfo, @UserName, @SR_ExistingCheck, @newTaskName, @Task_DueDateRequireBusinessDay, @Task_DueDateByNumber, @Task_AssignedToUser, @Task_AssignedToUserGroup, @Task_CreationMandatory, @CareCycleRequired, @ENR_Document_Attachment_Mandatory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AutoGenerateSR_PA_BI_V1Result>> AutoGenerateSR_PA_BI_V1Async(int? ProgramID, int? OriginalSRID, string NewSRTypeShortDesc, string NewSRSubTypeDesc, string Createdby, string UserName, bool? AutoGenerated, bool? SROpen_Required, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OriginalSRID",
                    Value = OriginalSRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRTypeShortDesc",
                    Size = 50,
                    Value = NewSRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRSubTypeDesc",
                    Size = 50,
                    Value = NewSRSubTypeDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Createdby",
                    Size = 50,
                    Value = Createdby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AutoGenerated",
                    Value = AutoGenerated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SROpen_Required",
                    Value = SROpen_Required ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AutoGenerateSR_PA_BI_V1Result>("EXEC @returnValue = [dbo].[AutoGenerateSR_PA_BI_V1] @ProgramID, @OriginalSRID, @NewSRTypeShortDesc, @NewSRSubTypeDesc, @Createdby, @UserName, @AutoGenerated, @SROpen_Required", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<BiogenPortal_TopFacilitiesResult>> BiogenPortal_TopFacilitiesAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<BiogenPortal_TopFacilitiesResult>("EXEC @returnValue = [dbo].[BiogenPortal_TopFacilities] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<BioMarinHCPPortal_PKU_GetPatients_V2_testResult>> BioMarinHCPPortal_PKU_GetPatients_V2_testAsync(int? ProgramID, int? OrgID, int? PhysicianID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<BioMarinHCPPortal_PKU_GetPatients_V2_testResult>("EXEC @returnValue = [dbo].[BioMarinHCPPortal_PKU_GetPatients_V2_test] @ProgramID, @OrgID, @PhysicianID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<BridgeEligibilityAdditionalValidationCheckResult>> BridgeEligibilityAdditionalValidationCheckAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<BridgeEligibilityAdditionalValidationCheckResult>("EXEC @returnValue = [dbo].[BridgeEligibilityAdditionalValidationCheck] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<BridgeEligibilityValidationCheckResult>> BridgeEligibilityValidationCheckAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<BridgeEligibilityValidationCheckResult>("EXEC @returnValue = [dbo].[BridgeEligibilityValidationCheck] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_AppConfigsResult>> CelltrionPortal_AppConfigsAsync(int? ProgramID, string FunctionName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionName",
                    Size = 50,
                    Value = FunctionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_AppConfigsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_AppConfigs] @ProgramID, @FunctionName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_AppealReportResult>> CelltrionPortal_AppealReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_AppealReportResult>("EXEC @returnValue = [dbo].[CelltrionPortal_AppealReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_BISRCoverageActivityResult>> CelltrionPortal_BISRCoverageActivityAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_BISRCoverageActivityResult>("EXEC @returnValue = [dbo].[CelltrionPortal_BISRCoverageActivity] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_BISRCoverageActivity_ChartDataResult>> CelltrionPortal_BISRCoverageActivity_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_BISRCoverageActivity_ChartDataResult>("EXEC @returnValue = [dbo].[CelltrionPortal_BISRCoverageActivity_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_BISRCoverageActivity_ChartData2Result>> CelltrionPortal_BISRCoverageActivity_ChartData2Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_BISRCoverageActivity_ChartData2Result>("EXEC @returnValue = [dbo].[CelltrionPortal_BISRCoverageActivity_ChartData2] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_ClaimSupportResult>> CelltrionPortal_ClaimSupportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_ClaimSupportResult>("EXEC @returnValue = [dbo].[CelltrionPortal_ClaimSupport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNBiDetailResult>> CelltrionPortal_DNBiDetailAsync(int? ProgramID, int? BIID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BIID",
                    Value = BIID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNBiDetailResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNBiDetail] @ProgramID, @BIID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNOrganizationAddressResult>> CelltrionPortal_DNOrganizationAddressAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNOrganizationAddressResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNOrganizationAddress] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNOrganizationContactResult>> CelltrionPortal_DNOrganizationContactAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNOrganizationContactResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNOrganizationContact] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNOrganizationDetailResult>> CelltrionPortal_DNOrganizationDetailAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNOrganizationDetailResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNOrganizationDetail] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNOrganizationPatientResult>> CelltrionPortal_DNOrganizationPatientAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNOrganizationPatientResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNOrganizationPatient] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNOrganizationProviderResult>> CelltrionPortal_DNOrganizationProviderAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNOrganizationProviderResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNOrganizationProvider] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNOrganizationSearchResult>> CelltrionPortal_DNOrganizationSearchAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string OrganizationName, string FRMCode, string City, string State, string Zip, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNOrganizationSearchResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNOrganizationSearch] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @OrganizationName, @FRMCode, @City, @State, @Zip, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNPatientDetailResult>> CelltrionPortal_DNPatientDetailAsync(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNPatientDetailResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNPatientDetail] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNPatientNotesResult>> CelltrionPortal_DNPatientNotesAsync(int? ProgramID, int? PatientNoteID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientNoteID",
                    Value = PatientNoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNPatientNotesResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNPatientNotes] @ProgramID, @PatientNoteID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNPatientPermissionResult>> CelltrionPortal_DNPatientPermissionAsync(int? ProgramID, int? PatientID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNPatientPermissionResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNPatientPermission] @ProgramID, @PatientID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNPatientSearchResult>> CelltrionPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, string PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 150,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNProviderDetailsResult>> CelltrionPortal_DNProviderDetailsAsync(int? ProgramID, string Drugname, int? PhysicianID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Drugname",
                    Size = 50,
                    Value = Drugname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNProviderDetailsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNProviderDetails] @ProgramID, @Drugname, @PhysicianID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNProviderSearchResult>> CelltrionPortal_DNProviderSearchAsync(int? ProgramID, string DrugName, string NPI, string ProviderName, string City, string State, string Zip, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 20,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 300,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNProviderSearchResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNProviderSearch] @ProgramID, @DrugName, @NPI, @ProviderName, @City, @State, @Zip, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNServiceRequestBIsResult>> CelltrionPortal_DNServiceRequestBIsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNServiceRequestBIsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNServiceRequestBIs] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNServiceRequestDetailResult>> CelltrionPortal_DNServiceRequestDetailAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string SRTypeShortDesc, string SRStatus, DateTime? StartDate, DateTime? EndDate, int? PatientID, int? PhysicianID, string PhysicianName, string OrganizationName, string DrugName, bool? noconsent, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 10,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRStatus",
                    Size = 1,
                    Value = SRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 100,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "noconsent",
                    Value = noconsent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNServiceRequestDetailResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNServiceRequestDetail] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @SRTypeShortDesc, @SRStatus, @StartDate, @EndDate, @PatientID, @PhysicianID, @PhysicianName, @OrganizationName, @DrugName, @noconsent, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNServiceRequestDocumentsResult>> CelltrionPortal_DNServiceRequestDocumentsAsync(int? ProgramID, int? ServiceRequestID, string Source, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 20,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNServiceRequestDocumentsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNServiceRequestDocuments] @ProgramID, @ServiceRequestID, @Source", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNServiceRequestHubStatusResult>> CelltrionPortal_DNServiceRequestHubStatusAsync(int? ProgramID, int? ServiceRequestID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNServiceRequestHubStatusResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNServiceRequestHubStatus] @ProgramID, @ServiceRequestID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNServiceRequestNotesResult>> CelltrionPortal_DNServiceRequestNotesAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNServiceRequestNotesResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNServiceRequestNotes] @ProgramID, @ServiceRequestID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNServiceRequestSearchResult>> CelltrionPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, string PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SRType, string SR_Status, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SRType, @SR_Status, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNSOCDetailsResult>> CelltrionPortal_DNSOCDetailsAsync(int? ProgramID, string SOCID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 20,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNSOCDetailsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNSOCDetails] @ProgramID, @SOCID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_DNSRPermissionResult>> CelltrionPortal_DNSRPermissionAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_DNSRPermissionResult>("EXEC @returnValue = [dbo].[CelltrionPortal_DNSRPermission] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_FieldPortalSecurityServiceResult>> CelltrionPortal_FieldPortalSecurityServiceAsync(string userName, int? ProgramId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 50,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_FieldPortalSecurityServiceResult>("EXEC @returnValue = [dbo].[CelltrionPortal_FieldPortalSecurityService] @userName, @ProgramId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_FreeGoodReportResult>> CelltrionPortal_FreeGoodReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_FreeGoodReportResult>("EXEC @returnValue = [dbo].[CelltrionPortal_FreeGoodReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_Get_RostersResult>> CelltrionPortal_Get_RostersAsync(int? ProgramID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_Get_RostersResult>("EXEC @returnValue = [dbo].[CelltrionPortal_Get_Rosters] @ProgramID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_Get_ServiceRequestResult>> CelltrionPortal_Get_ServiceRequestAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_Get_ServiceRequestResult>("EXEC @returnValue = [dbo].[CelltrionPortal_Get_ServiceRequest] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetDisclaimerTextResult>> CelltrionPortal_GetDisclaimerTextAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetDisclaimerTextResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetDisclaimerText]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetDrillDownListResult>> CelltrionPortal_GetDrillDownListAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, string Filter, string Value, string salesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Filter",
                    Size = 50,
                    Value = Filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 50,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salesForce",
                    Size = 50,
                    Value = salesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetDrillDownListResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetDrillDownList] @ProgramID, @DrugName, @SearchTerritoryCode, @Filter, @Value, @salesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetFilterTerritoryCodeForReportResult>> CelltrionPortal_GetFilterTerritoryCodeForReportAsync(int? ProgramID, int? RegionID, int? ABMTerritoryID, int? SAETerritoryID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritoryID",
                    Value = ABMTerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritoryID",
                    Value = SAETerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetFilterTerritoryCodeForReportResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetFilterTerritoryCodeForReport] @ProgramID, @RegionID, @ABMTerritoryID, @SAETerritoryID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetSPDetailsResult>> CelltrionPortal_GetSPDetailsAsync(int? ProramId, string ManufactureName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProramId",
                    Value = ProramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetSPDetailsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetSPDetails] @ProramId, @ManufactureName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetTerritoryInfoResult>> CelltrionPortal_GetTerritoryInfoAsync(int? ProgramID, string TerritoryCode, int? TerritoryID, int? RegionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 10,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryID",
                    Value = TerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetTerritoryInfoResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetTerritoryInfo] @ProgramID, @TerritoryCode, @TerritoryID, @RegionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetTerritoryListResult>> CelltrionPortal_GetTerritoryListAsync(int? ProgramID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetTerritoryListResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetTerritoryList] @ProgramID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetUserInfoResult>> CelltrionPortal_GetUserInfoAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetUserInfoResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetUserInfo] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetUserSalesForceResult>> CelltrionPortal_GetUserSalesForceAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetUserSalesForceResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetUserSalesForce] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_GetUserTerritoryInfoResult>> CelltrionPortal_GetUserTerritoryInfoAsync(int? ProgramID, int? CareMetxRecordID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CareMetxRecordID",
                    Value = CareMetxRecordID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_GetUserTerritoryInfoResult>("EXEC @returnValue = [dbo].[CelltrionPortal_GetUserTerritoryInfo] @ProgramID, @CareMetxRecordID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_IncompleteEnrollmentsResult>> CelltrionPortal_IncompleteEnrollmentsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_IncompleteEnrollmentsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_IncompleteEnrollments] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CelltrionPortal_InsertDNSPDetailsAsync(int? ProgramId, string ManufactureName, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CelltrionPortal_InsertDNSPDetails] @ProgramId, @ManufactureName, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_MessageCenterAutoCompleteResult>> CelltrionPortal_MessageCenterAutoCompleteAsync(int? ProgramID, string PatientIdSearchTerm, string PhyNameSearchTerm, string SRIDSearchTerm, string ToFieldSearchTerm, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientIdSearchTerm",
                    Size = 50,
                    Value = PatientIdSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhyNameSearchTerm",
                    Size = 50,
                    Value = PhyNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRIDSearchTerm",
                    Size = 50,
                    Value = SRIDSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToFieldSearchTerm",
                    Size = 50,
                    Value = ToFieldSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_MessageCenterAutoCompleteResult>("EXEC @returnValue = [dbo].[CelltrionPortal_MessageCenterAutoComplete] @ProgramID, @PatientIdSearchTerm, @PhyNameSearchTerm, @SRIDSearchTerm, @ToFieldSearchTerm, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_MessagePatientSRResult>> CelltrionPortal_MessagePatientSRAsync(int? ProgramID, string DrugName, int? PatientID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_MessagePatientSRResult>("EXEC @returnValue = [dbo].[CelltrionPortal_MessagePatientSR] @ProgramID, @DrugName, @PatientID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_MessagePhySRResult>> CelltrionPortal_MessagePhySRAsync(int? ProgramID, string DrugName, int? PhysicianID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_MessagePhySRResult>("EXEC @returnValue = [dbo].[CelltrionPortal_MessagePhySR] @ProgramID, @DrugName, @PhysicianID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_MessagesResult>> CelltrionPortal_MessagesAsync(int? ProgramID, string UserName, int? ThreadID, bool? IsUnread, bool? IsRead, bool? IsArchive, string DrugName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsUnread",
                    Value = IsUnread ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsArchive",
                    Value = IsArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_MessagesResult>("EXEC @returnValue = [dbo].[CelltrionPortal_Messages] @ProgramID, @UserName, @ThreadID, @IsUnread, @IsRead, @IsArchive, @DrugName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_Messages_CountResult>> CelltrionPortal_Messages_CountAsync(int? ProgramID, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_Messages_CountResult>("EXEC @returnValue = [dbo].[CelltrionPortal_Messages_Count] @ProgramID, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_MessageStatusUpdateResult>> CelltrionPortal_MessageStatusUpdateAsync(int? ThreadID, int? ProgramID, bool? Status, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_MessageStatusUpdateResult>("EXEC @returnValue = [dbo].[CelltrionPortal_MessageStatusUpdate] @ThreadID, @ProgramID, @Status, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_MITrendsResult>> CelltrionPortal_MITrendsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_MITrendsResult>("EXEC @returnValue = [dbo].[CelltrionPortal_MITrends] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_PAPReportResult>> CelltrionPortal_PAPReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_PAPReportResult>("EXEC @returnValue = [dbo].[CelltrionPortal_PAPReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_PAReportResult>> CelltrionPortal_PAReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_PAReportResult>("EXEC @returnValue = [dbo].[CelltrionPortal_PAReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_PortalUserbyUserNameResult>> CelltrionPortal_PortalUserbyUserNameAsync(int? ProgramID, string ApplicationName, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 50,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 100,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_PortalUserbyUserNameResult>("EXEC @returnValue = [dbo].[CelltrionPortal_PortalUserbyUserName] @ProgramID, @ApplicationName, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_SaveNewMessageResult>> CelltrionPortal_SaveNewMessageAsync(int? ProgramID, int? SRID, int? ThreadID, string To, string Subject, string MessageText, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Size = 50,
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 200,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MessageText",
                    Size = -1,
                    Value = MessageText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_SaveNewMessageResult>("EXEC @returnValue = [dbo].[CelltrionPortal_SaveNewMessage] @ProgramID, @SRID, @ThreadID, @To, @Subject, @MessageText, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpDNSRUpdateTerritoryResult>> CelltrionPortal_TmpDNSRUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpDNSRUpdateTerritoryResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpDNSRUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CelltrionPortal_TmpDNUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CelltrionPortal_TmpDNUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpInsuranceResult>> CelltrionPortal_TmpInsuranceAsync(int? ProgramID, int? Rank, int? CoveredID, int? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rank",
                    Value = Rank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CoveredID",
                    Value = CoveredID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpInsuranceResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpInsurance] @ProgramID, @Rank, @CoveredID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpPatienInfoResult>> CelltrionPortal_TmpPatienInfoAsync(int? ProgramID, string DrugName, string SalesForce, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 50,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpPatienInfoResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpPatienInfo] @ProgramID, @DrugName, @SalesForce, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpPatienSRInfoResult>> CelltrionPortal_TmpPatienSRInfoAsync(int? ProgramID, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpPatienSRInfoResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpPatienSRInfo] @ProgramID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpReportDrilldownDataResult>> CelltrionPortal_TmpReportDrilldownDataAsync(int? ProgramID, bool? IsTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsTest",
                    Value = IsTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpReportDrilldownDataResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpReportDrilldownData] @ProgramID, @IsTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpSRIDbyDirllDownResult>> CelltrionPortal_TmpSRIDbyDirllDownAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpSRIDbyDirllDownResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpSRIDbyDirllDown] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TmpSRSearch_PrmResult>> CelltrionPortal_TmpSRSearch_PrmAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string DrugName, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, string PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SalesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 100,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TmpSRSearch_PrmResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TmpSRSearch_Prm] @ProgramID, @StartDate, @EndDate, @DrugName, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SalesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_Top10PayersResult>> CelltrionPortal_Top10PayersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_Top10PayersResult>("EXEC @returnValue = [dbo].[CelltrionPortal_Top10Payers] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TopFacilitiesResult>> CelltrionPortal_TopFacilitiesAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TopFacilitiesResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TopFacilities] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TopFacilities_ChartDataResult>> CelltrionPortal_TopFacilities_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TopFacilities_ChartDataResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TopFacilities_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TopPlansResult>> CelltrionPortal_TopPlansAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TopPlansResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TopPlans] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TopPlans_ChartDataResult>> CelltrionPortal_TopPlans_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TopPlans_ChartDataResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TopPlans_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TopProvidersResult>> CelltrionPortal_TopProvidersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TopProvidersResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TopProviders] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_TopProviders_ChartDataResult>> CelltrionPortal_TopProviders_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_TopProviders_ChartDataResult>("EXEC @returnValue = [dbo].[CelltrionPortal_TopProviders_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_WorkInProgressResult>> CelltrionPortal_WorkInProgressAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_WorkInProgressResult>("EXEC @returnValue = [dbo].[CelltrionPortal_WorkInProgress] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CelltrionPortal_WorkInProgress_CountResult>> CelltrionPortal_WorkInProgress_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CelltrionPortal_WorkInProgress_CountResult>("EXEC @returnValue = [dbo].[CelltrionPortal_WorkInProgress_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<check_PAP_Eligibility_V21Result>> check_PAP_Eligibility_V21Async(int? ProgramID, int? SRID, int? size, decimal? income, string state, string papType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "size",
                    Value = size ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "income",
                    Precision = 19,
                    Scale = 4,
                    Value = income ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Size = 10,
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "papType",
                    Size = 1000,
                    Value = papType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<check_PAP_Eligibility_V21Result>("EXEC @returnValue = [dbo].[check_PAP_Eligibility_V21] @ProgramID, @SRID, @size, @income, @state, @papType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CheckDynamicDataAdditionalValidationAsync(int? ProgramID, int? SRID, string FieldName, string FieldValue, string DrugName, string SelectedSrStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FieldName",
                    Size = 100,
                    Value = FieldName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FieldValue",
                    Size = 100,
                    Value = FieldValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SelectedSrStatus",
                    Size = 10,
                    Value = SelectedSrStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CheckDynamicDataAdditionalValidation] @ProgramID, @SRID, @FieldName, @FieldValue, @DrugName, @SelectedSrStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckOKtoCloseSR_V47Result>> CheckOKtoCloseSR_V47Async(int? ProgramID, int? SRID, string NewSRType, bool? HasCovDetSubType, int? ResolutionID, string SR_SubType, string UserName, string SelectedDrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRType",
                    Size = 50,
                    Value = NewSRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HasCovDetSubType",
                    Value = HasCovDetSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ResolutionID",
                    Value = ResolutionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_SubType",
                    Size = 50,
                    Value = SR_SubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SelectedDrugName",
                    Size = 20,
                    Value = SelectedDrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckOKtoCloseSR_V47Result>("EXEC @returnValue = [dbo].[CheckOKtoCloseSR_V47] @ProgramID, @SRID, @NewSRType, @HasCovDetSubType, @ResolutionID, @SR_SubType, @UserName, @SelectedDrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckOKtoCreateSR_SpecialRule_V12Result>> CheckOKtoCreateSR_SpecialRule_V12Async(int? ProgramID, int? PatientID, string SRType, string SR_SubType, string DrugName, int? SRID, int? ProviderID, int? OrgId, int? ContactId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 100,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_SubType",
                    Size = 100,
                    Value = SR_SubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderID",
                    Value = ProviderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgId",
                    Value = OrgId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContactId",
                    Value = ContactId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckOKtoCreateSR_SpecialRule_V12Result>("EXEC @returnValue = [dbo].[CheckOKtoCreateSR_SpecialRule_V12] @ProgramID, @PatientID, @SRType, @SR_SubType, @DrugName, @SRID, @ProviderID, @OrgId, @ContactId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckPatientIncomeEligibilityForPAPAndERAPAP_V3Result>> CheckPatientIncomeEligibilityForPAPAndERAPAP_V3Async(int? ProgramID, int? PatientID, string State, int? HouseholdSize, decimal? HouseholdIncome, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HouseholdSize",
                    Value = HouseholdSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HouseholdIncome",
                    Precision = 19,
                    Scale = 4,
                    Value = HouseholdIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckPatientIncomeEligibilityForPAPAndERAPAP_V3Result>("EXEC @returnValue = [dbo].[CheckPatientIncomeEligibilityForPAPAndERAPAP_V3] @ProgramID, @PatientID, @State, @HouseholdSize, @HouseholdIncome", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CoherusHCPPortal_GetBenefitVerificationGridResults_V2Result>> CoherusHCPPortal_GetBenefitVerificationGridResults_V2Async(int? ProgramId, int? PatientId, int? OrgId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientId",
                    Value = PatientId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgId",
                    Value = OrgId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CoherusHCPPortal_GetBenefitVerificationGridResults_V2Result>("EXEC @returnValue = [dbo].[CoherusHCPPortal_GetBenefitVerificationGridResults_V2] @ProgramId, @PatientId, @OrgId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CompleteSRFChecking_V51Result>> CompleteSRFChecking_V51Async(int? ProgramID, int? SRID, int? PatientID, string TriagePayerType, int? VendorID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TriagePayerType",
                    Size = 100,
                    Value = TriagePayerType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VendorID",
                    Value = VendorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CompleteSRFChecking_V51Result>("EXEC @returnValue = [dbo].[CompleteSRFChecking_V51] @ProgramID, @SRID, @PatientID, @TriagePayerType, @VendorID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CopyEligibilityDetails_RulesEngine_APIAsync(int? ProgramID, int? NewSrID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NewSrID",
                    Value = NewSrID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CopyEligibilityDetails_RulesEngine_API] @ProgramID, @NewSrID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CreateFAChildSRAsync(int? ProgramID, int? PatientSRID, int? TemplateSRID, int? PatientID, string SRTypeShortDesc, string SR_SubTypeShortDesc, string NewSRAssignedToUser, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientSRID",
                    Value = PatientSRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TemplateSRID",
                    Value = TemplateSRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 50,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_SubTypeShortDesc",
                    Size = 50,
                    Value = SR_SubTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewSRAssignedToUser",
                    Size = 50,
                    Value = NewSRAssignedToUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateFAChildSR] @ProgramID, @PatientSRID, @TemplateSRID, @PatientID, @SRTypeShortDesc, @SR_SubTypeShortDesc, @NewSRAssignedToUser, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CreateNewTaskFromProcessDates_V1Async(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateNewTaskFromProcessDates_V1] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CreateSR_PAPRecordAsync(int? ProgramID, int? SRID, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateSR_PAPRecord] @ProgramID, @SRID, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DataExtract_Pathways_SRPAPResult>> DataExtract_Pathways_SRPAPAsync(string LastRunUtcDate, bool? IsFullExtract, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LastRunUtcDate",
                    Size = 100,
                    Value = LastRunUtcDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DataExtract_Pathways_SRPAPResult>("EXEC @returnValue = [dbo].[DataExtract_Pathways_SRPAP] @LastRunUtcDate, @IsFullExtract", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DataExtract_Pathways_SRTriageResult>> DataExtract_Pathways_SRTriageAsync(string LastRunUtcDate, bool? IsFullExtract, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LastRunUtcDate",
                    Size = 100,
                    Value = LastRunUtcDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DataExtract_Pathways_SRTriageResult>("EXEC @returnValue = [dbo].[DataExtract_Pathways_SRTriage] @LastRunUtcDate, @IsFullExtract", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus_DE_GLAGeneVariantResult>> DF_Amicus_DE_GLAGeneVariantAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus_DE_GLAGeneVariantResult>("EXEC @returnValue = [dbo].[DF_Amicus_DE_GLAGeneVariant] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus_DE_PrescriptionResult>> DF_Amicus_DE_PrescriptionAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus_DE_PrescriptionResult>("EXEC @returnValue = [dbo].[DF_Amicus_DE_Prescription] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus_DE_SRPAPDetailsResult>> DF_Amicus_DE_SRPAPDetailsAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus_DE_SRPAPDetailsResult>("EXEC @returnValue = [dbo].[DF_Amicus_DE_SRPAPDetails] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_BenefitInvestigationResult>> DF_Amicus2_DE_BenefitInvestigationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_BenefitInvestigationResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_BenefitInvestigation] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ContactResult>> DF_Amicus2_DE_ContactAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ContactResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_Contact] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ContactAddressResult>> DF_Amicus2_DE_ContactAddressAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ContactAddressResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ContactAddress] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ContactOrganizationResult>> DF_Amicus2_DE_ContactOrganizationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ContactOrganizationResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ContactOrganization] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ContactPhoneNumberResult>> DF_Amicus2_DE_ContactPhoneNumberAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ContactPhoneNumberResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ContactPhoneNumber] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ContactProviderResult>> DF_Amicus2_DE_ContactProviderAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ContactProviderResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ContactProvider] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_InsurancePlanResult>> DF_Amicus2_DE_InsurancePlanAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_InsurancePlanResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_InsurancePlan] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_OrganizationResult>> DF_Amicus2_DE_OrganizationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_OrganizationResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_Organization] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_OrganizationAddressResult>> DF_Amicus2_DE_OrganizationAddressAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_OrganizationAddressResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_OrganizationAddress] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientResult>> DF_Amicus2_DE_PatientAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_Patient] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientAdditionalFieldResult>> DF_Amicus2_DE_PatientAdditionalFieldAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientAdditionalFieldResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientAdditionalField] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientAddressResult>> DF_Amicus2_DE_PatientAddressAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientAddressResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientAddress] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientAttestationResult>> DF_Amicus2_DE_PatientAttestationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientAttestationResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientAttestation] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientConsentResult>> DF_Amicus2_DE_PatientConsentAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientConsentResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientConsent] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientContactResult>> DF_Amicus2_DE_PatientContactAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientContactResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientContact] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientDiagnosisResult>> DF_Amicus2_DE_PatientDiagnosisAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientDiagnosisResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientDiagnosis] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientInsuranceResult>> DF_Amicus2_DE_PatientInsuranceAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientInsuranceResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientInsurance] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientOrganizationResult>> DF_Amicus2_DE_PatientOrganizationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientOrganizationResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientOrganization] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientPhoneNumberResult>> DF_Amicus2_DE_PatientPhoneNumberAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientPhoneNumberResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientPhoneNumber] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientPrescriptionCipaglucosidasealfaResult>> DF_Amicus2_DE_PatientPrescriptionCipaglucosidasealfaAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientPrescriptionCipaglucosidasealfaResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientPrescriptionCipaglucosidasealfa] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientPrescriptionMiglustatResult>> DF_Amicus2_DE_PatientPrescriptionMiglustatAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientPrescriptionMiglustatResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientPrescriptionMiglustat] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientProviderResult>> DF_Amicus2_DE_PatientProviderAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientProviderResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientProvider] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientStatusResult>> DF_Amicus2_DE_PatientStatusAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientStatusResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientStatus] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_PatientVitalsResult>> DF_Amicus2_DE_PatientVitalsAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_PatientVitalsResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_PatientVitals] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ProviderResult>> DF_Amicus2_DE_ProviderAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ProviderResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_Provider] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ProviderAddressResult>> DF_Amicus2_DE_ProviderAddressAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ProviderAddressResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ProviderAddress] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ProviderOrganizationResult>> DF_Amicus2_DE_ProviderOrganizationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ProviderOrganizationResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ProviderOrganization] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ProviderSpecialtyResult>> DF_Amicus2_DE_ProviderSpecialtyAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ProviderSpecialtyResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ProviderSpecialty] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ProviderStateLicenseResult>> DF_Amicus2_DE_ProviderStateLicenseAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ProviderStateLicenseResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ProviderStateLicense] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestResult>> DF_Amicus2_DE_ServiceRequestAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequest] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestActivityResult>> DF_Amicus2_DE_ServiceRequestActivityAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestActivityResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestActivity] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestAdditionalFieldResult>> DF_Amicus2_DE_ServiceRequestAdditionalFieldAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestAdditionalFieldResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestAdditionalField] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestHubStatusResult>> DF_Amicus2_DE_ServiceRequestHubStatusAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestHubStatusResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestHubStatus] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestNoteResult>> DF_Amicus2_DE_ServiceRequestNoteAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestNoteResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestNote] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestProcessDateResult>> DF_Amicus2_DE_ServiceRequestProcessDateAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestProcessDateResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestProcessDate] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestTaskResult>> DF_Amicus2_DE_ServiceRequestTaskAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestTaskResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestTask] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_ServiceRequestTriageResult>> DF_Amicus2_DE_ServiceRequestTriageAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_ServiceRequestTriageResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_ServiceRequestTriage] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Amicus2_DE_SRPAPDetailsResult>> DF_Amicus2_DE_SRPAPDetailsAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Amicus2_DE_SRPAPDetailsResult>("EXEC @returnValue = [dbo].[DF_Amicus2_DE_SRPAPDetails] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Braeburn_Hub_DailyStatus_V2Result>> DF_Braeburn_Hub_DailyStatus_V2Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? lastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastRunOvrd",
                    Value = lastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Braeburn_Hub_DailyStatus_V2Result>("EXEC @returnValue = [dbo].[DF_Braeburn_Hub_DailyStatus_V2] @ProgramID, @IsFullExtract, @JobName, @OperationName, @lastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Celltrion_AutoCr_PA_SR_Initiate_ReauthorizationResult>> DF_Celltrion_AutoCr_PA_SR_Initiate_ReauthorizationAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Celltrion_AutoCr_PA_SR_Initiate_ReauthorizationResult>("EXEC @returnValue = [dbo].[DF_Celltrion_AutoCr_PA_SR_Initiate_Reauthorization] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Celltrion_AutoCr_PAP_SR_For_Eligibility_ReVerificationResult>> DF_Celltrion_AutoCr_PAP_SR_For_Eligibility_ReVerificationAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Celltrion_AutoCr_PAP_SR_For_Eligibility_ReVerificationResult>("EXEC @returnValue = [dbo].[DF_Celltrion_AutoCr_PAP_SR_For_Eligibility_ReVerification] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Celltrion_AutoCr_PAP_SR_For_ReEnrollmentResult>> DF_Celltrion_AutoCr_PAP_SR_For_ReEnrollmentAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Celltrion_AutoCr_PAP_SR_For_ReEnrollmentResult>("EXEC @returnValue = [dbo].[DF_Celltrion_AutoCr_PAP_SR_For_ReEnrollment] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Celltrion_AutoCr_QS_SR_For_Program_ExpirationResult>> DF_Celltrion_AutoCr_QS_SR_For_Program_ExpirationAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Celltrion_AutoCr_QS_SR_For_Program_ExpirationResult>("EXEC @returnValue = [dbo].[DF_Celltrion_AutoCr_QS_SR_For_Program_Expiration] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Celltrion_AutoCrTask_CheckAPIStatusResult>> DF_Celltrion_AutoCrTask_CheckAPIStatusAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Celltrion_AutoCrTask_CheckAPIStatusResult>("EXEC @returnValue = [dbo].[DF_Celltrion_AutoCrTask_CheckAPIStatus] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Leqvio_Auto_FollowUp_SRResult>> DF_Leqvio_Auto_FollowUp_SRAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Leqvio_Auto_FollowUp_SRResult>("EXEC @returnValue = [dbo].[DF_Leqvio_Auto_FollowUp_SR] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Novartis_DE_ClinicalDataResult>> DF_Novartis_DE_ClinicalDataAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Novartis_DE_ClinicalDataResult>("EXEC @returnValue = [dbo].[DF_Novartis_DE_ClinicalData] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Orapharma_Arestin_Daily_OpenResult>> DF_Orapharma_Arestin_Daily_OpenAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Orapharma_Arestin_Daily_OpenResult>("EXEC @returnValue = [dbo].[DF_Orapharma_Arestin_Daily_Open] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_OraPharma_Extract_Arestin_ClosedandDispenseRefillsResult>> DF_OraPharma_Extract_Arestin_ClosedandDispenseRefillsAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_OraPharma_Extract_Arestin_ClosedandDispenseRefillsResult>("EXEC @returnValue = [dbo].[DF_OraPharma_Extract_Arestin_ClosedandDispenseRefills] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pathway_AutoSR_AAOResult>> DF_Pathway_AutoSR_AAOAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pathway_AutoSR_AAOResult>("EXEC @returnValue = [dbo].[DF_Pathway_AutoSR_AAO] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pathways_AutoCr_Copay_SR_PS_weiResult>> DF_Pathways_AutoCr_Copay_SR_PS_weiAsync(int? ProgramID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pathways_AutoCr_Copay_SR_PS_weiResult>("EXEC @returnValue = [dbo].[DF_Pathways_AutoCr_Copay_SR_PS_wei] @ProgramID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_Ashfield_DE_Insurances_V3Result>> DF_Pharming_Ashfield_DE_Insurances_V3Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_Ashfield_DE_Insurances_V3Result>("EXEC @returnValue = [dbo].[DF_Pharming_Ashfield_DE_Insurances_V3] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_Ashfield_DE_PatientClinicalData_V3Result>> DF_Pharming_Ashfield_DE_PatientClinicalData_V3Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_Ashfield_DE_PatientClinicalData_V3Result>("EXEC @returnValue = [dbo].[DF_Pharming_Ashfield_DE_PatientClinicalData_V3] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_DE_Ashfield_Image_V2Result>> DF_Pharming_DE_Ashfield_Image_V2Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, string SPJsonParameters, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SPJsonParameters",
                    Size = 500,
                    Value = SPJsonParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_DE_Ashfield_Image_V2Result>("EXEC @returnValue = [dbo].[DF_Pharming_DE_Ashfield_Image_V2] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd, @SPJsonParameters", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_KMK_DE_Benefits_V2Result>> DF_Pharming_KMK_DE_Benefits_V2Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_KMK_DE_Benefits_V2Result>("EXEC @returnValue = [dbo].[DF_Pharming_KMK_DE_Benefits_V2] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_KMK_DE_Insurances_V2Result>> DF_Pharming_KMK_DE_Insurances_V2Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_KMK_DE_Insurances_V2Result>("EXEC @returnValue = [dbo].[DF_Pharming_KMK_DE_Insurances_V2] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_KMK_DE_PatientAttestationResult>> DF_Pharming_KMK_DE_PatientAttestationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_KMK_DE_PatientAttestationResult>("EXEC @returnValue = [dbo].[DF_Pharming_KMK_DE_PatientAttestation] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_KMK_DE_PatientConsentResult>> DF_Pharming_KMK_DE_PatientConsentAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_KMK_DE_PatientConsentResult>("EXEC @returnValue = [dbo].[DF_Pharming_KMK_DE_PatientConsent] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_SteepRock_DE_Benefits_V2Result>> DF_Pharming_SteepRock_DE_Benefits_V2Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateTime? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_SteepRock_DE_Benefits_V2Result>("EXEC @returnValue = [dbo].[DF_Pharming_SteepRock_DE_Benefits_V2] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_SteepRock_DE_Insurances_V2Result>> DF_Pharming_SteepRock_DE_Insurances_V2Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_SteepRock_DE_Insurances_V2Result>("EXEC @returnValue = [dbo].[DF_Pharming_SteepRock_DE_Insurances_V2] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_SteepRock_DE_PatientAttestationResult>> DF_Pharming_SteepRock_DE_PatientAttestationAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_SteepRock_DE_PatientAttestationResult>("EXEC @returnValue = [dbo].[DF_Pharming_SteepRock_DE_PatientAttestation] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Pharming_SteepRock_DE_PatientConsentResult>> DF_Pharming_SteepRock_DE_PatientConsentAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Pharming_SteepRock_DE_PatientConsentResult>("EXEC @returnValue = [dbo].[DF_Pharming_SteepRock_DE_PatientConsent] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Standard_DE_ServiceRequestCopay_V4Result>> DF_Standard_DE_ServiceRequestCopay_V4Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Standard_DE_ServiceRequestCopay_V4Result>("EXEC @returnValue = [dbo].[DF_Standard_DE_ServiceRequestCopay_V4] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Standard_DE_ServiceRequestMedCopayClaims_V6Result>> DF_Standard_DE_ServiceRequestMedCopayClaims_V6Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Standard_DE_ServiceRequestMedCopayClaims_V6Result>("EXEC @returnValue = [dbo].[DF_Standard_DE_ServiceRequestMedCopayClaims_V6] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_Standard_DE_ServiceRequestPharmCopayClaims_V5Result>> DF_Standard_DE_ServiceRequestPharmCopayClaims_V5Async(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_Standard_DE_ServiceRequestPharmCopayClaims_V5Result>("EXEC @returnValue = [dbo].[DF_Standard_DE_ServiceRequestPharmCopayClaims_V5] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DF_TakedaIGPSP_DE_ServiceRequestResult>> DF_TakedaIGPSP_DE_ServiceRequestAsync(int? ProgramID, bool? IsFullExtract, string JobName, string OperationName, DateOnly? LastRunOvrd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsFullExtract",
                    Value = IsFullExtract ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "JobName",
                    Size = 100,
                    Value = JobName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OperationName",
                    Size = 100,
                    Value = OperationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastRunOvrd",
                    Value = LastRunOvrd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DF_TakedaIGPSP_DE_ServiceRequestResult>("EXEC @returnValue = [dbo].[DF_TakedaIGPSP_DE_ServiceRequest] @ProgramID, @IsFullExtract, @JobName, @OperationName, @LastRunOvrd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<eHipaaQueue_AssignPaftoPatient_v4Result>> eHipaaQueue_AssignPaftoPatient_v4Async(int? ProgramID, string SOURCE, int? PATIENTID, int? SRID, DateTime? CONSENTDATE, DateTime? CONSENTEXPDATE, string THERAPY, string PhoneNumber, bool? Checkbox1, bool? Checkbox2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SOURCE",
                    Size = 50,
                    Value = SOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PATIENTID",
                    Value = PATIENTID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CONSENTDATE",
                    Value = CONSENTDATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CONSENTEXPDATE",
                    Value = CONSENTEXPDATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "THERAPY",
                    Size = 100,
                    Value = THERAPY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneNumber",
                    Size = 100,
                    Value = PhoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Checkbox1",
                    Value = Checkbox1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Checkbox2",
                    Value = Checkbox2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<eHipaaQueue_AssignPaftoPatient_v4Result>("EXEC @returnValue = [dbo].[eHipaaQueue_AssignPaftoPatient_v4] @ProgramID, @SOURCE, @PATIENTID, @SRID, @CONSENTDATE, @CONSENTEXPDATE, @THERAPY, @PhoneNumber, @Checkbox1, @Checkbox2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> FAChildSRAsync(int? ProgramID, int? SRID, string UserName, string CreatedById, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedById",
                    Size = 50,
                    Value = CreatedById ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[FAChildSR] @ProgramID, @SRID, @UserName, @CreatedById", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CopayBusinessRulesValidation_TakedaResult>> Get_CopayBusinessRulesValidation_TakedaAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CopayBusinessRulesValidation_TakedaResult>("EXEC @returnValue = [dbo].[Get_CopayBusinessRulesValidation_Takeda] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CopayQuestionAutoPopulate_CelltrionResult>> Get_CopayQuestionAutoPopulate_CelltrionAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CopayQuestionAutoPopulate_CelltrionResult>("EXEC @returnValue = [dbo].[Get_CopayQuestionAutoPopulate_Celltrion] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EmailTo_By_Tag_API_V4Result>> Get_EmailTo_By_Tag_API_V4Async(int? ProgramID, int? ServiceRequestID, string Tags, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tags",
                    Size = 2000,
                    Value = Tags ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EmailTo_By_Tag_API_V4Result>("EXEC @returnValue = [dbo].[Get_EmailTo_By_Tag_API_V4] @ProgramID, @ServiceRequestID, @Tags", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EmailTo_List_By_emailTrigger_V3Result>> Get_EmailTo_List_By_emailTrigger_V3Async(int? ProgramID, int? SRID, string emailTrigger, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "emailTrigger",
                    Size = 200,
                    Value = emailTrigger ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EmailTo_List_By_emailTrigger_V3Result>("EXEC @returnValue = [dbo].[Get_EmailTo_List_By_emailTrigger_V3] @ProgramID, @SRID, @emailTrigger", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ExtendedTriageData_V30Result>> Get_ExtendedTriageData_V30Async(int? SRID, int? ProgramID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ExtendedTriageData_V30Result>("EXEC @returnValue = [dbo].[Get_ExtendedTriageData_V30] @SRID, @ProgramID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEDBenifitVerificationDetailsResult>> Get_MEDBenifitVerificationDetailsAsync(int? ProgramID, int? ServiceRequestID, int? PolicySROffRampId, int? PolicySRMedOffRampDataId, int? SR_MedOffRampDataPolicyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolicySROffRampId",
                    Value = PolicySROffRampId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolicySRMedOffRampDataId",
                    Value = PolicySRMedOffRampDataId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_MedOffRampDataPolicyId",
                    Value = SR_MedOffRampDataPolicyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEDBenifitVerificationDetailsResult>("EXEC @returnValue = [dbo].[Get_MEDBenifitVerificationDetails] @ProgramID, @ServiceRequestID, @PolicySROffRampId, @PolicySRMedOffRampDataId, @SR_MedOffRampDataPolicyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OpenSRWithUnreadInboundMessagesResult>> Get_OpenSRWithUnreadInboundMessagesAsync(int? ProgramID, string UserName, int? GroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OpenSRWithUnreadInboundMessagesResult>("EXEC @returnValue = [dbo].[Get_OpenSRWithUnreadInboundMessages] @ProgramID, @UserName, @GroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OpenSRWithUnreadInboundMessages_2024Result>> Get_OpenSRWithUnreadInboundMessages_2024Async(int? ProgramID, string UserName, int? GroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OpenSRWithUnreadInboundMessages_2024Result>("EXEC @returnValue = [dbo].[Get_OpenSRWithUnreadInboundMessages_2024] @ProgramID, @UserName, @GroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PAP_ExpirationDate_V13Result>> Get_PAP_ExpirationDate_V13Async(int? ProgramID, DateTime? PAPApproveDate, string PAPType, string ExtraRule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PAPApproveDate",
                    Value = PAPApproveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PAPType",
                    Size = 100,
                    Value = PAPType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExtraRule",
                    Size = 200,
                    Value = ExtraRule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PAP_ExpirationDate_V13Result>("EXEC @returnValue = [dbo].[Get_PAP_ExpirationDate_V13] @ProgramID, @PAPApproveDate, @PAPType, @ExtraRule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PatientInfoForPAPQuestionResult>> Get_PatientInfoForPAPQuestionAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PatientInfoForPAPQuestionResult>("EXEC @returnValue = [dbo].[Get_PatientInfoForPAPQuestion] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ProvideServicesflag_V5Result>> Get_ProvideServicesflag_V5Async(int? ProgramID, int? PatientID, string DrugName, int? SR_TypeListID, OutputParameter<bool?> ProvideServicesflag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterProvideServicesflag = new SqlParameter
            {
                ParameterName = "ProvideServicesflag",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ProvideServicesflag?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_TypeListID",
                    Value = SR_TypeListID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterProvideServicesflag,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ProvideServicesflag_V5Result>("EXEC @returnValue = [dbo].[Get_ProvideServicesflag_V5] @ProgramID, @PatientID, @DrugName, @SR_TypeListID, @ProvideServicesflag OUTPUT", sqlParameters, cancellationToken);

            ProvideServicesflag.SetValue(parameterProvideServicesflag.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RxAdmin_DosesResult>> Get_RxAdmin_DosesAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RxAdmin_DosesResult>("EXEC @returnValue = [dbo].[Get_RxAdmin_Doses] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SecureMessageThreads_V1Result>> Get_SecureMessageThreads_V1Async(int? ProgramID, Guid? UserID, Guid? SendToApplicationID, Guid? SendToOrFromUserID, bool? ShowUnassignedMessages, int? UserGroupID, string UserName, bool? Pending, bool? Replied, bool? Closed, bool? Assigned, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "SendToApplicationID",
                    Value = SendToApplicationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "SendToOrFromUserID",
                    Value = SendToOrFromUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ShowUnassignedMessages",
                    Value = ShowUnassignedMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserGroupID",
                    Value = UserGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pending",
                    Value = Pending ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Replied",
                    Value = Replied ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Closed",
                    Value = Closed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Assigned",
                    Value = Assigned ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SecureMessageThreads_V1Result>("EXEC @returnValue = [dbo].[Get_SecureMessageThreads_V1] @ProgramID, @UserID, @SendToApplicationID, @SendToOrFromUserID, @ShowUnassignedMessages, @UserGroupID, @UserName, @Pending, @Replied, @Closed, @Assigned", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SecureMessageThreadsSearch_V2Result>> Get_SecureMessageThreadsSearch_V2Async(int? ProgramID, Guid? UserID, bool? ShowUnassignedMessages, int? UserGroupID, string UserName, int? ProviderID, int? PatientID, string Therapy, DateOnly? StartDate, DateOnly? EndDate, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ShowUnassignedMessages",
                    Value = ShowUnassignedMessages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserGroupID",
                    Value = UserGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderID",
                    Value = ProviderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Therapy",
                    Size = 200,
                    Value = Therapy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 50,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SecureMessageThreadsSearch_V2Result>("EXEC @returnValue = [dbo].[Get_SecureMessageThreadsSearch_V2] @ProgramID, @UserID, @ShowUnassignedMessages, @UserGroupID, @UserName, @ProviderID, @PatientID, @Therapy, @StartDate, @EndDate, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ServiceRequestDetailInfoResult>> Get_ServiceRequestDetailInfoAsync(int? ProgramID, int? ServiceRequestID, bool? Include, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Include",
                    Value = Include ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ServiceRequestDetailInfoResult>("EXEC @returnValue = [dbo].[Get_ServiceRequestDetailInfo] @ProgramID, @ServiceRequestID, @Include", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SRDynamicDataResult>> Get_SRDynamicDataAsync(int? ProgramID, int? ServiceRequestID, string FunctionName, string SearchLike, string SearchNotLike, string srTypeFullDesc, bool? ShowInactiveDyList, bool? isInitDate, bool? ShowCreateSR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionName",
                    Size = 50,
                    Value = FunctionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchLike",
                    Size = 50,
                    Value = SearchLike ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchNotLike",
                    Size = 50,
                    Value = SearchNotLike ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "srTypeFullDesc",
                    Size = 50,
                    Value = srTypeFullDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ShowInactiveDyList",
                    Value = ShowInactiveDyList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isInitDate",
                    Value = isInitDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ShowCreateSR",
                    Value = ShowCreateSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SRDynamicDataResult>("EXEC @returnValue = [dbo].[Get_SRDynamicData] @ProgramID, @ServiceRequestID, @FunctionName, @SearchLike, @SearchNotLike, @srTypeFullDesc, @ShowInactiveDyList, @isInitDate, @ShowCreateSR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SurveyDetails_v8Result>> Get_SurveyDetails_v8Async(int? SurveyHistoryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SurveyHistoryID",
                    Value = SurveyHistoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SurveyDetails_v8Result>("EXEC @returnValue = [dbo].[Get_SurveyDetails_v8] @SurveyHistoryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SurveyHistoryList_V3Result>> Get_SurveyHistoryList_V3Async(int? ProgramID, int? PatientID, bool? ClinicalData_EditView_ProgramFuncFlag, int? LoadedServiceRequestID, bool? ShowPatientDiaryEntryDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ClinicalData_EditView_ProgramFuncFlag",
                    Value = ClinicalData_EditView_ProgramFuncFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LoadedServiceRequestID",
                    Value = LoadedServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowPatientDiaryEntryDate",
                    Value = ShowPatientDiaryEntryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SurveyHistoryList_V3Result>("EXEC @returnValue = [dbo].[Get_SurveyHistoryList_V3] @ProgramID, @PatientID, @ClinicalData_EditView_ProgramFuncFlag, @LoadedServiceRequestID, @ShowPatientDiaryEntryDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_TriageRecord_V6Result>> Get_TriageRecord_V6Async(int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_TriageRecord_V6Result>("EXEC @returnValue = [dbo].[Get_TriageRecord_V6] @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_TriageRecord_WithoutBI_V7Result>> Get_TriageRecord_WithoutBI_V7Async(int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_TriageRecord_WithoutBI_V7Result>("EXEC @returnValue = [dbo].[Get_TriageRecord_WithoutBI_V7] @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDefaultResolution_V1Result>> GetDefaultResolution_V1Async(int? ProgramID, int? ServiceRequestID, string Type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Type",
                    Size = 50,
                    Value = Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDefaultResolution_V1Result>("EXEC @returnValue = [dbo].[GetDefaultResolution_V1] @ProgramID, @ServiceRequestID, @Type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExtendedTriageRecord_BiogenResult>> GetExtendedTriageRecord_BiogenAsync(int? SRID, int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExtendedTriageRecord_BiogenResult>("EXEC @returnValue = [dbo].[GetExtendedTriageRecord_Biogen] @SRID, @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExtendedTriageRecord_Coherus_V5Result>> GetExtendedTriageRecord_Coherus_V5Async(int? SRID, int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExtendedTriageRecord_Coherus_V5Result>("EXEC @returnValue = [dbo].[GetExtendedTriageRecord_Coherus_V5] @SRID, @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExtendedTriageRecord_PathwayOpsynviResult>> GetExtendedTriageRecord_PathwayOpsynviAsync(int? SRID, int? ProgramID, int? PatientID, string VendorName, string DrugName, string TriagePayerType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VendorName",
                    Size = 100,
                    Value = VendorName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TriagePayerType",
                    Size = 50,
                    Value = TriagePayerType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExtendedTriageRecord_PathwayOpsynviResult>("EXEC @returnValue = [dbo].[GetExtendedTriageRecord_PathwayOpsynvi] @SRID, @ProgramID, @PatientID, @VendorName, @DrugName, @TriagePayerType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOfframpSRDetailsResult>> GetOfframpSRDetailsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOfframpSRDetailsResult>("EXEC @returnValue = [dbo].[GetOfframpSRDetails] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPatientAttestationExpirationDate_V3Result>> GetPatientAttestationExpirationDate_V3Async(int? ProgramID, int? PatientID, DateTime? PatientConsentDate, string ConsentType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientConsentDate",
                    Value = PatientConsentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ConsentType",
                    Size = 50,
                    Value = ConsentType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPatientAttestationExpirationDate_V3Result>("EXEC @returnValue = [dbo].[GetPatientAttestationExpirationDate_V3] @ProgramID, @PatientID, @PatientConsentDate, @ConsentType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPatientConsentExpirationDateByFormVersionResult>> GetPatientConsentExpirationDateByFormVersionAsync(int? ProgramID, string ConsentFormVersion, DateTime? PatientConsentDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ConsentFormVersion",
                    Size = 50,
                    Value = ConsentFormVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientConsentDate",
                    Value = PatientConsentDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPatientConsentExpirationDateByFormVersionResult>("EXEC @returnValue = [dbo].[GetPatientConsentExpirationDateByFormVersion] @ProgramID, @ConsentFormVersion, @PatientConsentDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSRDetails_ConnectiveRxApiResult>> GetSRDetails_ConnectiveRxApiAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSRDetails_ConnectiveRxApiResult>("EXEC @returnValue = [dbo].[GetSRDetails_ConnectiveRxApi] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NovartisPortal_DNPatientSearchResult>> NovartisPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, int? PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganzationName, string SOCID, string TerritoryCode, string ADSARID, string SearchTerritoryCode, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganzationName",
                    Size = 150,
                    Value = OrganzationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 20,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 50,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ADSARID",
                    Size = 50,
                    Value = ADSARID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NovartisPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[NovartisPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganzationName, @SOCID, @TerritoryCode, @ADSARID, @SearchTerritoryCode, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NovartisPortal_DNServiceRequestSearchResult>> NovartisPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string SOCID, string SRType, string SR_Status, string SearchTerritoryCode, string TerritoryCode, string UserName, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 50,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 50,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 300,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NovartisPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[NovartisPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @SOCID, @SRType, @SR_Status, @SearchTerritoryCode, @TerritoryCode, @UserName, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NovartisPortal_MyRemindersResult>> NovartisPortal_MyRemindersAsync(int? ProgramID, string UserName, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NovartisPortal_MyRemindersResult>("EXEC @returnValue = [dbo].[NovartisPortal_MyReminders] @ProgramID, @UserName, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NovartisPortal_TmpSRSearch_NOPrmResult>> NovartisPortal_TmpSRSearch_NOPrmAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SRType, string SR_Status, string SearchTerritoryCode, string SaleForce, int? To, string TerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaleForce",
                    Size = 20,
                    Value = SaleForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 50,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NovartisPortal_TmpSRSearch_NOPrmResult>("EXEC @returnValue = [dbo].[NovartisPortal_TmpSRSearch_NOPrm] @ProgramID, @DrugName, @StartDate, @EndDate, @SRType, @SR_Status, @SearchTerritoryCode, @SaleForce, @To, @TerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NovartisPortal_TmpSRSearch_PrmResult>> NovartisPortal_TmpSRSearch_PrmAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string SOCID, int? To, string TerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 50,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 50,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NovartisPortal_TmpSRSearch_PrmResult>("EXEC @returnValue = [dbo].[NovartisPortal_TmpSRSearch_Prm] @ProgramID, @StartDate, @EndDate, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PatientID, @PatientName, @ProviderName, @OrganizationName, @SOCID, @To, @TerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OrganizationSearch_v3Result>> OrganizationSearch_v3Async(int? ProgramID, int? SProgramID, bool? SharedRecord, bool? allprg, string SearchByName, string OrganizationType, string NameContains, string Address, string City, string State, string Zip, string Phone, string Email, string NPI, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SProgramID",
                    Value = SProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SharedRecord",
                    Value = SharedRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "allprg",
                    Value = allprg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SearchByName",
                    Size = 100,
                    Value = SearchByName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationType",
                    Size = 100,
                    Value = OrganizationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NameContains",
                    Size = 100,
                    Value = NameContains ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 100,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 20,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 100,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<OrganizationSearch_v3Result>("EXEC @returnValue = [dbo].[OrganizationSearch_v3] @ProgramID, @SProgramID, @SharedRecord, @allprg, @SearchByName, @OrganizationType, @NameContains, @Address, @City, @State, @Zip, @Phone, @Email, @NPI", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OrganizationSearch_v9Result>> OrganizationSearch_v9Async(int? ProgramID, int? SProgramID, bool? SharedRecord, bool? allprg, bool? isHomeQuickSearch, string SearchByName, string OrganizationType, string NameContains, string Address, string City, string State, string Zip, string Phone, string Email, string NPI, string ActiveAddress1, int? OrgID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SProgramID",
                    Value = SProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SharedRecord",
                    Value = SharedRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "allprg",
                    Value = allprg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isHomeQuickSearch",
                    Value = isHomeQuickSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SearchByName",
                    Size = 100,
                    Value = SearchByName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationType",
                    Size = 100,
                    Value = OrganizationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NameContains",
                    Size = 100,
                    Value = NameContains ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 100,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 20,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 100,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActiveAddress1",
                    Size = 100,
                    Value = ActiveAddress1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<OrganizationSearch_v9Result>("EXEC @returnValue = [dbo].[OrganizationSearch_v9] @ProgramID, @SProgramID, @SharedRecord, @allprg, @isHomeQuickSearch, @SearchByName, @OrganizationType, @NameContains, @Address, @City, @State, @Zip, @Phone, @Email, @NPI, @ActiveAddress1, @OrgID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pathways_Ashfield_GlobalConsent_V10Result>> Pathways_Ashfield_GlobalConsent_V10Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pathways_Ashfield_GlobalConsent_V10Result>("EXEC @returnValue = [dbo].[Pathways_Ashfield_GlobalConsent_V10]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pathways_Ashfield_GlobalConsent_V11Result>> Pathways_Ashfield_GlobalConsent_V11Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pathways_Ashfield_GlobalConsent_V11Result>("EXEC @returnValue = [dbo].[Pathways_Ashfield_GlobalConsent_V11]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pathways_Ashfield_UpdateRecords_V7Result>> Pathways_Ashfield_UpdateRecords_V7Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pathways_Ashfield_UpdateRecords_V7Result>("EXEC @returnValue = [dbo].[Pathways_Ashfield_UpdateRecords_V7]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pathways_SalesDataExtract_V2Result>> Pathways_SalesDataExtract_V2Async(int? ProgramID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pathways_SalesDataExtract_V2Result>("EXEC @returnValue = [dbo].[Pathways_SalesDataExtract_V2] @ProgramID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pathways_TrialCard_UpdateRecordsResult>> Pathways_TrialCard_UpdateRecordsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pathways_TrialCard_UpdateRecordsResult>("EXEC @returnValue = [dbo].[Pathways_TrialCard_UpdateRecords]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DashboardRecCnt_ARP_V5Result>> PathwaysPortal_DashboardRecCnt_ARP_V5Async(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string DrugName, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DashboardRecCnt_ARP_V5Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DashboardRecCnt_ARP_V5] @ProgramID, @StartDate, @EndDate, @DrugName, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DashboardRecCnt_Enrollment_And_NDC_V8Result>> PathwaysPortal_DashboardRecCnt_Enrollment_And_NDC_V8Async(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DashboardRecCnt_Enrollment_And_NDC_V8Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DashboardRecCnt_Enrollment_And_NDC_V8] @ProgramID, @StartDate, @EndDate, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DashboardRecCnt_Enrollment_V3Result>> PathwaysPortal_DashboardRecCnt_Enrollment_V3Async(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DashboardRecCnt_Enrollment_V3Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DashboardRecCnt_Enrollment_V3] @ProgramID, @StartDate, @EndDate, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DashboardRecCnt_PATStatus_V5Result>> PathwaysPortal_DashboardRecCnt_PATStatus_V5Async(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DashboardRecCnt_PATStatus_V5Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DashboardRecCnt_PATStatus_V5] @ProgramID, @StartDate, @EndDate, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNPatientDetail_V10Result>> PathwaysPortal_DNPatientDetail_V10Async(int? ProgramID, int? PatientID, string PathwaysID, string DrugName, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 20,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNPatientDetail_V10Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNPatientDetail_V10] @ProgramID, @PatientID, @PathwaysID, @DrugName, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNPatientDetail_V26Result>> PathwaysPortal_DNPatientDetail_V26Async(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNPatientDetail_V26Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNPatientDetail_V26] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNPatientSearch_V17Result>> PathwaysPortal_DNPatientSearch_V17Async(int? ProgramID, string DrugName, string PathwaysID, string PatientName, string ProviderName, string SearchTerritoryCode, DateOnly? PatientDOB, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 20,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientDOB",
                    Value = PatientDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNPatientSearch_V17Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNPatientSearch_V17] @ProgramID, @DrugName, @PathwaysID, @PatientName, @ProviderName, @SearchTerritoryCode, @PatientDOB, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNPatientServiceRequest_V3Result>> PathwaysPortal_DNPatientServiceRequest_V3Async(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNPatientServiceRequest_V3Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNPatientServiceRequest_V3] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNServiceRequestBIs_V6Result>> PathwaysPortal_DNServiceRequestBIs_V6Async(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNServiceRequestBIs_V6Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNServiceRequestBIs_V6] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNServiceRequestDetail_V8Result>> PathwaysPortal_DNServiceRequestDetail_V8Async(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string SRTypeShortDesc, string SRStatus, DateTime? StartDate, DateTime? EndDate, int? PatientID, int? PhysicianID, string PhysicianName, string OrganizationName, string DrugName, bool? noconsent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 10,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRStatus",
                    Size = 1,
                    Value = SRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 100,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "noconsent",
                    Value = noconsent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNServiceRequestDetail_V8Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNServiceRequestDetail_V8] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @SRTypeShortDesc, @SRStatus, @StartDate, @EndDate, @PatientID, @PhysicianID, @PhysicianName, @OrganizationName, @DrugName, @noconsent", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNServiceRequestNotes_V3_SharedRemsResult>> PathwaysPortal_DNServiceRequestNotes_V3_SharedRemsAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNServiceRequestNotes_V3_SharedRemsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_DNServiceRequestNotes_V3_SharedRems] @ProgramID, @ServiceRequestID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNServiceRequestSearch_V13_SharedRemsResult>> PathwaysPortal_DNServiceRequestSearch_V13_SharedRemsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, string PathwaysID, string PatientName, string ProviderName, string OrganizationName, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 30,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNServiceRequestSearch_V13_SharedRemsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_DNServiceRequestSearch_V13_SharedRems] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PathwaysID, @PatientName, @ProviderName, @OrganizationName, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNServiceRequestSearch_V14Result>> PathwaysPortal_DNServiceRequestSearch_V14Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, string PathwaysID, string PatientName, string ProviderName, string OrganizationName, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 30,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNServiceRequestSearch_V14Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNServiceRequestSearch_V14] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PathwaysID, @PatientName, @ProviderName, @OrganizationName, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNShipmentsSearch_V5Result>> PathwaysPortal_DNShipmentsSearch_V5Async(int? ProgramID, string PathwaysID, string PatientName, string ProviderName, string OrganizationName, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 20,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 50,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNShipmentsSearch_V5Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNShipmentsSearch_V5] @ProgramID, @PathwaysID, @PatientName, @ProviderName, @OrganizationName, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNShipmentsSearch_V5_SharedRemsResult>> PathwaysPortal_DNShipmentsSearch_V5_SharedRemsAsync(int? ProgramID, string PathwaysID, string PatientName, string ProviderName, string OrganizationName, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 20,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 50,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNShipmentsSearch_V5_SharedRemsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_DNShipmentsSearch_V5_SharedRems] @ProgramID, @PathwaysID, @PatientName, @ProviderName, @OrganizationName, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_DNSRPermission_V2Result>> PathwaysPortal_DNSRPermission_V2Async(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, OutputParameter<int?> Ret, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRet = new SqlParameter
            {
                ParameterName = "Ret",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Ret?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterRet,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_DNSRPermission_V2Result>("EXEC @returnValue = [dbo].[PathwaysPortal_DNSRPermission_V2] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @Ret OUTPUT", sqlParameters, cancellationToken);

            Ret.SetValue(parameterRet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_Messages_Count_V2Result>> PathwaysPortal_Messages_Count_V2Async(int? ProgramID, string UserName, DateTime? StartDate, DateTime? EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_Messages_Count_V2Result>("EXEC @returnValue = [dbo].[PathwaysPortal_Messages_Count_V2] @ProgramID, @UserName, @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_Messages_V9Result>> PathwaysPortal_Messages_V9Async(int? ProgramID, string UserName, int? ThreadID, int? SRID, int? PatientID, string SearchTerritoryCode, string ColorIDs, bool? IsUnread, bool? IsRead, bool? IsArchive, string IsReviewed, DateTime? StartDate, DateTime? EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ColorIDs",
                    Size = 50,
                    Value = ColorIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsUnread",
                    Value = IsUnread ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsArchive",
                    Value = IsArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsReviewed",
                    Size = 10,
                    Value = IsReviewed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_Messages_V9Result>("EXEC @returnValue = [dbo].[PathwaysPortal_Messages_V9] @ProgramID, @UserName, @ThreadID, @SRID, @PatientID, @SearchTerritoryCode, @ColorIDs, @IsUnread, @IsRead, @IsArchive, @IsReviewed, @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_OrganizationPatients_V7Result>> PathwaysPortal_OrganizationPatients_V7Async(int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_OrganizationPatients_V7Result>("EXEC @returnValue = [dbo].[PathwaysPortal_OrganizationPatients_V7] @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_OrganizationPatients_V7_SharedRemsResult>> PathwaysPortal_OrganizationPatients_V7_SharedRemsAsync(int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_OrganizationPatients_V7_SharedRemsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_OrganizationPatients_V7_SharedRems] @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_OVPOutreach_V4Result>> PathwaysPortal_OVPOutreach_V4Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_OVPOutreach_V4Result>("EXEC @returnValue = [dbo].[PathwaysPortal_OVPOutreach_V4] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_PAsInProgress_V7Result>> PathwaysPortal_PAsInProgress_V7Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? Top, string Rpt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rpt",
                    Size = 10,
                    Value = Rpt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_PAsInProgress_V7Result>("EXEC @returnValue = [dbo].[PathwaysPortal_PAsInProgress_V7] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @Top, @Rpt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_Patient_Discontinued_V3Result>> PathwaysPortal_Patient_Discontinued_V3Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? To, string Report, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Report",
                    Size = 1,
                    Value = Report ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_Patient_Discontinued_V3Result>("EXEC @returnValue = [dbo].[PathwaysPortal_Patient_Discontinued_V3] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @To, @Report", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_Patient_NoStart_V2Result>> PathwaysPortal_Patient_NoStart_V2Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? To, string Report, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Report",
                    Size = 1,
                    Value = Report ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_Patient_NoStart_V2Result>("EXEC @returnValue = [dbo].[PathwaysPortal_Patient_NoStart_V2] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @To, @Report", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_PendingShipmentsResult>> PathwaysPortal_PendingShipmentsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_PendingShipmentsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_PendingShipments] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_PhysicianPatients_V8Result>> PathwaysPortal_PhysicianPatients_V8Async(int? PhysicianID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_PhysicianPatients_V8Result>("EXEC @returnValue = [dbo].[PathwaysPortal_PhysicianPatients_V8] @PhysicianID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_PhysicianPatients_V8_SharedRemsResult>> PathwaysPortal_PhysicianPatients_V8_SharedRemsAsync(int? PhysicianID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_PhysicianPatients_V8_SharedRemsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_PhysicianPatients_V8_SharedRems] @PhysicianID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TAMTrackerCreateResult>> PathwaysPortal_TAMTrackerCreateAsync(int? ProgramID, int? PatientID, string DrugName, int? ServiceRequestID, string RecordType, string UserName, string Caller, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RecordType",
                    Size = 50,
                    Value = RecordType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Caller",
                    Size = 20,
                    Value = Caller ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TAMTrackerCreateResult>("EXEC @returnValue = [dbo].[PathwaysPortal_TAMTrackerCreate] @ProgramID, @PatientID, @DrugName, @ServiceRequestID, @RecordType, @UserName, @Caller", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TAMTrackerReport_V12Result>> PathwaysPortal_TAMTrackerReport_V12Async(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string TAMReviewed, string AllSRStatus, int? PatientID, int? TAMTrackerID, string UserName, string Rpt, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TAMReviewed",
                    Size = 10,
                    Value = TAMReviewed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AllSRStatus",
                    Size = 50,
                    Value = AllSRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TAMTrackerID",
                    Value = TAMTrackerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Rpt",
                    Size = 10,
                    Value = Rpt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TAMTrackerReport_V12Result>("EXEC @returnValue = [dbo].[PathwaysPortal_TAMTrackerReport_V12] @ProgramID, @StartDate, @EndDate, @SearchTerritoryCode, @TAMReviewed, @AllSRStatus, @PatientID, @TAMTrackerID, @UserName, @Rpt, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TAMTrackerReportForUIResult>> PathwaysPortal_TAMTrackerReportForUIAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string TAMReviewed, string AllSRStatus, int? PatientID, int? TAMTrackerID, string UserName, string Rpt, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TAMReviewed",
                    Size = 10,
                    Value = TAMReviewed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AllSRStatus",
                    Size = 50,
                    Value = AllSRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TAMTrackerID",
                    Value = TAMTrackerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Rpt",
                    Size = 10,
                    Value = Rpt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TAMTrackerReportForUIResult>("EXEC @returnValue = [dbo].[PathwaysPortal_TAMTrackerReportForUI] @ProgramID, @StartDate, @EndDate, @SearchTerritoryCode, @TAMReviewed, @AllSRStatus, @PatientID, @TAMTrackerID, @UserName, @Rpt, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TmpInsuranceByPatientResult>> PathwaysPortal_TmpInsuranceByPatientAsync(int? ProgramID, int? patientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "patientID",
                    Value = patientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TmpInsuranceByPatientResult>("EXEC @returnValue = [dbo].[PathwaysPortal_TmpInsuranceByPatient] @ProgramID, @patientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TmpPendingShipmentsResult>> PathwaysPortal_TmpPendingShipmentsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? Top, bool? isCnt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isCnt",
                    Value = isCnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TmpPendingShipmentsResult>("EXEC @returnValue = [dbo].[PathwaysPortal_TmpPendingShipments] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @Top, @isCnt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TmpSRSearch_PrmResult>> PathwaysPortal_TmpSRSearch_PrmAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, string PathwaysID, string PatientName, string ProviderName, string OrganizationName, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PathwaysID",
                    Size = 30,
                    Value = PathwaysID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TmpSRSearch_PrmResult>("EXEC @returnValue = [dbo].[PathwaysPortal_TmpSRSearch_Prm] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PathwaysID, @PatientName, @ProviderName, @OrganizationName, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PathwaysPortal_TotalEnrollments_V8Result>> PathwaysPortal_TotalEnrollments_V8Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? Top, string Report, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Report",
                    Size = 10,
                    Value = Report ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PathwaysPortal_TotalEnrollments_V8Result>("EXEC @returnValue = [dbo].[PathwaysPortal_TotalEnrollments_V8] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @Top, @Report", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PatientHubStatusAutomation_v4Result>> PatientHubStatusAutomation_v4Async(int? ProgramID, int? PatientID, int? SRID, string DrugName, string UserName, bool? isNewSR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isNewSR",
                    Value = isNewSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PatientHubStatusAutomation_v4Result>("EXEC @returnValue = [dbo].[PatientHubStatusAutomation_v4] @ProgramID, @PatientID, @SRID, @DrugName, @UserName, @isNewSR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<QuickStartEligibilityValidationCheckResult>> QuickStartEligibilityValidationCheckAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<QuickStartEligibilityValidationCheckResult>("EXEC @returnValue = [dbo].[QuickStartEligibilityValidationCheck] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RuconestPortal_DNPatientPermissionResult>> RuconestPortal_DNPatientPermissionAsync(int? ProgramID, int? PatientID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RuconestPortal_DNPatientPermissionResult>("EXEC @returnValue = [dbo].[RuconestPortal_DNPatientPermission] @ProgramID, @PatientID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RuconestPortal_DNPatientSearchResult>> RuconestPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, string PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 150,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RuconestPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[RuconestPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RuconestPortal_MessagesResult>> RuconestPortal_MessagesAsync(int? ProgramID, string UserName, int? ThreadID, bool? IsUnread, bool? IsRead, bool? IsArchive, string DrugName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsUnread",
                    Value = IsUnread ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsArchive",
                    Value = IsArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RuconestPortal_MessagesResult>("EXEC @returnValue = [dbo].[RuconestPortal_Messages] @ProgramID, @UserName, @ThreadID, @IsUnread, @IsRead, @IsArchive, @DrugName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RuconestPortal_Messages_CountResult>> RuconestPortal_Messages_CountAsync(int? ProgramID, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RuconestPortal_Messages_CountResult>("EXEC @returnValue = [dbo].[RuconestPortal_Messages_Count] @ProgramID, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RxAdmin_Dose_ByIdResult>> RxAdmin_Dose_ByIdAsync(int? ProgramID, int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RxAdmin_Dose_ByIdResult>("EXEC @returnValue = [dbo].[RxAdmin_Dose_ById] @ProgramID, @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RXAdminDoseStatusUpdateResult>> RXAdminDoseStatusUpdateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RXAdminDoseStatusUpdateResult>("EXEC @returnValue = [dbo].[RXAdminDoseStatusUpdate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> RXAdminDoseStatusUpdateLogActivityAsync(string Level, string Message, string Exception, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Level",
                    Size = 100,
                    Value = Level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Message",
                    Size = -1,
                    Value = Message ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Exception",
                    Size = -1,
                    Value = Exception ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[RXAdminDoseStatusUpdateLogActivity] @Level, @Message, @Exception", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SearchServiceRequests_HomePage_V12Result>> SearchServiceRequests_HomePage_V12Async(int? programID, int? ServiceRequestID, string SR_Status, string PatientName, string PhysicianName, string ContactName, string OrganizationName, string CaseTypeFullDesc, string CaseSubTypeFullDesc, string AssignedTo, string DrugName, string SROnHold, int? UserGroupID, string UserName, string careCycleID, string PatientExternalID, string CopayCardID, string PatientDOB, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "programID",
                    Value = programID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 50,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 50,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactName",
                    Size = 50,
                    Value = ContactName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 50,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseTypeFullDesc",
                    Size = 50,
                    Value = CaseTypeFullDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseSubTypeFullDesc",
                    Size = 50,
                    Value = CaseSubTypeFullDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AssignedTo",
                    Size = 50,
                    Value = AssignedTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SROnHold",
                    Size = 50,
                    Value = SROnHold ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserGroupID",
                    Value = UserGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "careCycleID",
                    Size = 50,
                    Value = careCycleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientExternalID",
                    Size = 50,
                    Value = PatientExternalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CopayCardID",
                    Size = 50,
                    Value = CopayCardID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientDOB",
                    Size = 20,
                    Value = PatientDOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SearchServiceRequests_HomePage_V12Result>("EXEC @returnValue = [dbo].[SearchServiceRequests_HomePage_V12] @programID, @ServiceRequestID, @SR_Status, @PatientName, @PhysicianName, @ContactName, @OrganizationName, @CaseTypeFullDesc, @CaseSubTypeFullDesc, @AssignedTo, @DrugName, @SROnHold, @UserGroupID, @UserName, @careCycleID, @PatientExternalID, @CopayCardID, @PatientDOB", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SMSTemplate_TagReplacementResult>> SMSTemplate_TagReplacementAsync(int? ProgramID, int? ServiceRequestID, int? SMS_TemplateID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SMS_TemplateID",
                    Value = SMS_TemplateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SMSTemplate_TagReplacementResult>("EXEC @returnValue = [dbo].[SMSTemplate_TagReplacement] @ProgramID, @ServiceRequestID, @SMS_TemplateID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<StandardHCP_PatientsGridResult>> StandardHCP_PatientsGridAsync(int? OrganizationId, int? ProgramId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrganizationId",
                    Value = OrganizationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<StandardHCP_PatientsGridResult>("EXEC @returnValue = [dbo].[StandardHCP_PatientsGrid] @OrganizationId, @ProgramId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<StandardHCP_ServiceRequestsGridResult>> StandardHCP_ServiceRequestsGridAsync(int? OrganizationId, int? ProgramId, int? ServiceRequestId, int? PatientId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrganizationId",
                    Value = OrganizationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestId",
                    Value = ServiceRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientId",
                    Value = PatientId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<StandardHCP_ServiceRequestsGridResult>("EXEC @returnValue = [dbo].[StandardHCP_ServiceRequestsGrid] @OrganizationId, @ProgramId, @ServiceRequestId, @PatientId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<StandardPortal_TenantDrugNameResult>> StandardPortal_TenantDrugNameAsync(int? ProgramId, string ManufactureName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<StandardPortal_TenantDrugNameResult>("EXEC @returnValue = [dbo].[StandardPortal_TenantDrugName] @ProgramId, @ManufactureName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TaihoPortal_PatientICDCodeResult>> TaihoPortal_PatientICDCodeAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TaihoPortal_PatientICDCodeResult>("EXEC @returnValue = [dbo].[TaihoPortal_PatientICDCode] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_AppConfigsResult>> TakedaHSCPortal_AppConfigsAsync(int? ProgramID, string FunctionName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionName",
                    Size = 50,
                    Value = FunctionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_AppConfigsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_AppConfigs] @ProgramID, @FunctionName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_AppealReportResult>> TakedaHSCPortal_AppealReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_AppealReportResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_AppealReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_BISRCoverageActivityResult>> TakedaHSCPortal_BISRCoverageActivityAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_BISRCoverageActivityResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_BISRCoverageActivity] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_BISRCoverageActivity_ChartDataResult>> TakedaHSCPortal_BISRCoverageActivity_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_BISRCoverageActivity_ChartDataResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_BISRCoverageActivity_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_BISRCoverageActivity_ChartData2Result>> TakedaHSCPortal_BISRCoverageActivity_ChartData2Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_BISRCoverageActivity_ChartData2Result>("EXEC @returnValue = [dbo].[TakedaHSCPortal_BISRCoverageActivity_ChartData2] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_ClaimSupportResult>> TakedaHSCPortal_ClaimSupportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_ClaimSupportResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_ClaimSupport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNBiDetailResult>> TakedaHSCPortal_DNBiDetailAsync(int? ProgramID, int? BIID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BIID",
                    Value = BIID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNBiDetailResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNBiDetail] @ProgramID, @BIID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNOrganizationAddressResult>> TakedaHSCPortal_DNOrganizationAddressAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNOrganizationAddressResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNOrganizationAddress] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNOrganizationContactResult>> TakedaHSCPortal_DNOrganizationContactAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNOrganizationContactResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNOrganizationContact] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNOrganizationDetailResult>> TakedaHSCPortal_DNOrganizationDetailAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNOrganizationDetailResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNOrganizationDetail] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNOrganizationPatientResult>> TakedaHSCPortal_DNOrganizationPatientAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNOrganizationPatientResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNOrganizationPatient] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNOrganizationProviderResult>> TakedaHSCPortal_DNOrganizationProviderAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNOrganizationProviderResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNOrganizationProvider] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNOrganizationSearchResult>> TakedaHSCPortal_DNOrganizationSearchAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string OrganizationName, string FRMCode, string City, string State, string Zip, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNOrganizationSearchResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNOrganizationSearch] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @OrganizationName, @FRMCode, @City, @State, @Zip, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNPatientDetailResult>> TakedaHSCPortal_DNPatientDetailAsync(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNPatientDetailResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNPatientDetail] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNPatientSearchResult>> TakedaHSCPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, string PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 150,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNProviderDetailsResult>> TakedaHSCPortal_DNProviderDetailsAsync(int? ProgramID, string Drugname, int? PhysicianID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Drugname",
                    Size = -1,
                    Value = Drugname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNProviderDetailsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNProviderDetails] @ProgramID, @Drugname, @PhysicianID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNProviderSearchResult>> TakedaHSCPortal_DNProviderSearchAsync(int? ProgramID, string DrugName, string NPI, string ProviderName, string City, string State, string Zip, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 20,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 300,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNProviderSearchResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNProviderSearch] @ProgramID, @DrugName, @NPI, @ProviderName, @City, @State, @Zip, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNServiceRequestBIsResult>> TakedaHSCPortal_DNServiceRequestBIsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNServiceRequestBIsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNServiceRequestBIs] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNServiceRequestDetailResult>> TakedaHSCPortal_DNServiceRequestDetailAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string SRTypeShortDesc, string SRStatus, DateTime? StartDate, DateTime? EndDate, int? PatientID, int? PhysicianID, string PhysicianName, string OrganizationName, string DrugName, bool? noconsent, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 10,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRStatus",
                    Size = 1,
                    Value = SRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 100,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "noconsent",
                    Value = noconsent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNServiceRequestDetailResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNServiceRequestDetail] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @SRTypeShortDesc, @SRStatus, @StartDate, @EndDate, @PatientID, @PhysicianID, @PhysicianName, @OrganizationName, @DrugName, @noconsent, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNServiceRequestDocumentsResult>> TakedaHSCPortal_DNServiceRequestDocumentsAsync(int? ProgramID, int? ServiceRequestID, string Source, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 20,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNServiceRequestDocumentsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNServiceRequestDocuments] @ProgramID, @ServiceRequestID, @Source", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNServiceRequestHubStatusResult>> TakedaHSCPortal_DNServiceRequestHubStatusAsync(int? ProgramID, int? ServiceRequestID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNServiceRequestHubStatusResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNServiceRequestHubStatus] @ProgramID, @ServiceRequestID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNServiceRequestNotesResult>> TakedaHSCPortal_DNServiceRequestNotesAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNServiceRequestNotesResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNServiceRequestNotes] @ProgramID, @ServiceRequestID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNServiceRequestSearchResult>> TakedaHSCPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, string PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SRType, string SR_Status, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SRType, @SR_Status, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_DNSOCDetailsResult>> TakedaHSCPortal_DNSOCDetailsAsync(int? ProgramID, string SOCID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 20,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_DNSOCDetailsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNSOCDetails] @ProgramID, @SOCID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TakedaHSCPortal_DNSRPermissionAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, OutputParameter<int?> Ret, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRet = new SqlParameter
            {
                ParameterName = "Ret",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Ret?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterRet,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TakedaHSCPortal_DNSRPermission] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @Ret OUTPUT", sqlParameters, cancellationToken);

            Ret.SetValue(parameterRet.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_FieldPortalSecurityServiceResult>> TakedaHSCPortal_FieldPortalSecurityServiceAsync(string userName, int? ProgramId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 50,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_FieldPortalSecurityServiceResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_FieldPortalSecurityService] @userName, @ProgramId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_FreeGoodReportResult>> TakedaHSCPortal_FreeGoodReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_FreeGoodReportResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_FreeGoodReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_Get_ServiceRequestResult>> TakedaHSCPortal_Get_ServiceRequestAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_Get_ServiceRequestResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_Get_ServiceRequest] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetDrillDownListResult>> TakedaHSCPortal_GetDrillDownListAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, string Filter, string Value, string salesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Filter",
                    Size = 50,
                    Value = Filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 50,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salesForce",
                    Size = 50,
                    Value = salesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetDrillDownListResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetDrillDownList] @ProgramID, @DrugName, @SearchTerritoryCode, @Filter, @Value, @salesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetFilterTerritoryCodeForReportResult>> TakedaHSCPortal_GetFilterTerritoryCodeForReportAsync(int? ProgramID, int? RegionID, int? ABMTerritoryID, int? SAETerritoryID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritoryID",
                    Value = ABMTerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritoryID",
                    Value = SAETerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetFilterTerritoryCodeForReportResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetFilterTerritoryCodeForReport] @ProgramID, @RegionID, @ABMTerritoryID, @SAETerritoryID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetPatientDetailsResult>> TakedaHSCPortal_GetPatientDetailsAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetPatientDetailsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetPatientDetails] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetPatientDocumentsResult>> TakedaHSCPortal_GetPatientDocumentsAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetPatientDocumentsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetPatientDocuments] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetPatientNotesResult>> TakedaHSCPortal_GetPatientNotesAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetPatientNotesResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetPatientNotes] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetPatientSRHistoryResult>> TakedaHSCPortal_GetPatientSRHistoryAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetPatientSRHistoryResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetPatientSRHistory] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetServiceRequestDetailsResult>> TakedaHSCPortal_GetServiceRequestDetailsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetServiceRequestDetailsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetServiceRequestDetails] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetSPDetailsResult>> TakedaHSCPortal_GetSPDetailsAsync(int? ProramId, string ManufactureName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProramId",
                    Value = ProramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetSPDetailsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetSPDetails] @ProramId, @ManufactureName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetSRActivitiesResult>> TakedaHSCPortal_GetSRActivitiesAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetSRActivitiesResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetSRActivities] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetSRDocumentsResult>> TakedaHSCPortal_GetSRDocumentsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetSRDocumentsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetSRDocuments] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetSRNotesResult>> TakedaHSCPortal_GetSRNotesAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetSRNotesResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetSRNotes] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetTerritoryInfoResult>> TakedaHSCPortal_GetTerritoryInfoAsync(int? ProgramID, string TerritoryCode, int? TerritoryID, int? RegionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 10,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryID",
                    Value = TerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetTerritoryInfoResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetTerritoryInfo] @ProgramID, @TerritoryCode, @TerritoryID, @RegionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetTerritoryListResult>> TakedaHSCPortal_GetTerritoryListAsync(int? ProgramID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetTerritoryListResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetTerritoryList] @ProgramID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetUserInfoResult>> TakedaHSCPortal_GetUserInfoAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetUserInfoResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetUserInfo] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetUserSalesForceResult>> TakedaHSCPortal_GetUserSalesForceAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetUserSalesForceResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetUserSalesForce] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_GetUserTerritoryInfoResult>> TakedaHSCPortal_GetUserTerritoryInfoAsync(int? ProgramID, int? CareMetxRecordID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CareMetxRecordID",
                    Value = CareMetxRecordID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_GetUserTerritoryInfoResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_GetUserTerritoryInfo] @ProgramID, @CareMetxRecordID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_IncompleteEnrollmentsResult>> TakedaHSCPortal_IncompleteEnrollmentsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_IncompleteEnrollmentsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_IncompleteEnrollments] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TakedaHSCPortal_InsertDNSPDetailsAsync(int? ProgramId, string ManufactureName, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TakedaHSCPortal_InsertDNSPDetails] @ProgramId, @ManufactureName, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_MessageCenterAutoCompleteResult>> TakedaHSCPortal_MessageCenterAutoCompleteAsync(int? ProgramID, string PNameSearchTerm, string PhyNameSearchTerm, string SRIDSearchTerm, string ToFieldSearchTerm, string SearchTerritoryCode, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PNameSearchTerm",
                    Size = 50,
                    Value = PNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhyNameSearchTerm",
                    Size = 50,
                    Value = PhyNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRIDSearchTerm",
                    Size = 50,
                    Value = SRIDSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToFieldSearchTerm",
                    Size = 50,
                    Value = ToFieldSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_MessageCenterAutoCompleteResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_MessageCenterAutoComplete] @ProgramID, @PNameSearchTerm, @PhyNameSearchTerm, @SRIDSearchTerm, @ToFieldSearchTerm, @SearchTerritoryCode, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_MessagePatientSRResult>> TakedaHSCPortal_MessagePatientSRAsync(int? ProgramID, string DrugName, int? PatientID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_MessagePatientSRResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_MessagePatientSR] @ProgramID, @DrugName, @PatientID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_MessagePhySRResult>> TakedaHSCPortal_MessagePhySRAsync(int? ProgramID, string DrugName, int? PhysicianID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_MessagePhySRResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_MessagePhySR] @ProgramID, @DrugName, @PhysicianID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_MessagesResult>> TakedaHSCPortal_MessagesAsync(int? ProgramID, string UserName, int? ThreadID, bool? IsUnread, bool? IsRead, bool? IsArchive, string DrugName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsUnread",
                    Value = IsUnread ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsArchive",
                    Value = IsArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_MessagesResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_Messages] @ProgramID, @UserName, @ThreadID, @IsUnread, @IsRead, @IsArchive, @DrugName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_Messages_CountResult>> TakedaHSCPortal_Messages_CountAsync(int? ProgramID, string UserName, string DBName, string DrugNme, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugNme",
                    Size = 100,
                    Value = DrugNme ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_Messages_CountResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_Messages_Count] @ProgramID, @UserName, @DBName, @DrugNme", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_MessageStatusUpdateResult>> TakedaHSCPortal_MessageStatusUpdateAsync(int? ThreadID, int? ProgramID, bool? Status, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_MessageStatusUpdateResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_MessageStatusUpdate] @ThreadID, @ProgramID, @Status, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_MITrendsResult>> TakedaHSCPortal_MITrendsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_MITrendsResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_MITrends] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_PAPReportResult>> TakedaHSCPortal_PAPReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 250,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_PAPReportResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_PAPReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_PAReportResult>> TakedaHSCPortal_PAReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_PAReportResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_PAReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_PortalUserbyUserNameResult>> TakedaHSCPortal_PortalUserbyUserNameAsync(int? ProgramID, string ApplicationName, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 50,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 100,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_PortalUserbyUserNameResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_PortalUserbyUserName] @ProgramID, @ApplicationName, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_SaveNewMessageResult>> TakedaHSCPortal_SaveNewMessageAsync(int? ProgramID, int? SRID, int? ThreadID, string To, string Subject, string MessageText, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Size = 50,
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 200,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MessageText",
                    Size = -1,
                    Value = MessageText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_SaveNewMessageResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_SaveNewMessage] @ProgramID, @SRID, @ThreadID, @To, @Subject, @MessageText, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpDNSRUpdateTerritoryResult>> TakedaHSCPortal_TmpDNSRUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpDNSRUpdateTerritoryResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpDNSRUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpDNUpdateTerritoryResult>> TakedaHSCPortal_TmpDNUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpDNUpdateTerritoryResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpDNUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpInsuranceResult>> TakedaHSCPortal_TmpInsuranceAsync(int? ProgramID, int? Rank, int? CoveredID, int? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rank",
                    Value = Rank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CoveredID",
                    Value = CoveredID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpInsuranceResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpInsurance] @ProgramID, @Rank, @CoveredID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpInsurance_V2Result>> TakedaHSCPortal_TmpInsurance_V2Async(int? ProgramID, int? Rank, int? CoveredID, int? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rank",
                    Value = Rank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CoveredID",
                    Value = CoveredID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpInsurance_V2Result>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpInsurance_V2] @ProgramID, @Rank, @CoveredID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpPatienInfoResult>> TakedaHSCPortal_TmpPatienInfoAsync(int? ProgramID, string DrugName, string SalesForce, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 50,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpPatienInfoResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpPatienInfo] @ProgramID, @DrugName, @SalesForce, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpPatienInfo_Original_RajuResult>> TakedaHSCPortal_TmpPatienInfo_Original_RajuAsync(int? ProgramID, string DrugName, string SalesForce, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 50,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpPatienInfo_Original_RajuResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpPatienInfo_Original_Raju] @ProgramID, @DrugName, @SalesForce, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpPatienSRInfoResult>> TakedaHSCPortal_TmpPatienSRInfoAsync(int? ProgramID, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpPatienSRInfoResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpPatienSRInfo] @ProgramID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpReportDrilldownDataResult>> TakedaHSCPortal_TmpReportDrilldownDataAsync(int? ProgramID, bool? IsTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsTest",
                    Value = IsTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpReportDrilldownDataResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpReportDrilldownData] @ProgramID, @IsTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpSRIDbyDirllDownResult>> TakedaHSCPortal_TmpSRIDbyDirllDownAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpSRIDbyDirllDownResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpSRIDbyDirllDown] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpSRIDbyDirllDown_MultiDrugResult>> TakedaHSCPortal_TmpSRIDbyDirllDown_MultiDrugAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpSRIDbyDirllDown_MultiDrugResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpSRIDbyDirllDown_MultiDrug] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpSRIDbyDirllDown_Oroginal_RajuResult>> TakedaHSCPortal_TmpSRIDbyDirllDown_Oroginal_RajuAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpSRIDbyDirllDown_Oroginal_RajuResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpSRIDbyDirllDown_Oroginal_Raju] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TmpSRSearch_PrmResult>> TakedaHSCPortal_TmpSRSearch_PrmAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string DrugName, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, string PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SalesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Size = 50,
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 100,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TmpSRSearch_PrmResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TmpSRSearch_Prm] @ProgramID, @StartDate, @EndDate, @DrugName, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SalesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_Top10PayersResult>> TakedaHSCPortal_Top10PayersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_Top10PayersResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_Top10Payers] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TopFacilitiesResult>> TakedaHSCPortal_TopFacilitiesAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TopFacilitiesResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TopFacilities] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TopFacilities_ChartDataResult>> TakedaHSCPortal_TopFacilities_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TopFacilities_ChartDataResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TopFacilities_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TopPlansResult>> TakedaHSCPortal_TopPlansAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TopPlansResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TopPlans] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TopPlans_ChartDataResult>> TakedaHSCPortal_TopPlans_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TopPlans_ChartDataResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TopPlans_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TopProvidersResult>> TakedaHSCPortal_TopProvidersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TopProvidersResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TopProviders] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_TopProviders_ChartDataResult>> TakedaHSCPortal_TopProviders_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_TopProviders_ChartDataResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_TopProviders_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_WorkInProgressResult>> TakedaHSCPortal_WorkInProgressAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_WorkInProgressResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_WorkInProgress] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_WorkInProgress_CountResult>> TakedaHSCPortal_WorkInProgress_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_WorkInProgress_CountResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_WorkInProgress_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaHSCPortal_WorkInProgress_Count_OriginalResult>> TakedaHSCPortal_WorkInProgress_Count_OriginalAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaHSCPortal_WorkInProgress_Count_OriginalResult>("EXEC @returnValue = [dbo].[TakedaHSCPortal_WorkInProgress_Count_Original] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_DNPatientDetailResult>> TakedaPortal_DNPatientDetailAsync(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_DNPatientDetailResult>("EXEC @returnValue = [dbo].[TakedaPortal_DNPatientDetail] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_DNPatientSearchResult>> TakedaPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, int? PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 150,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[TakedaPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_DNServiceRequestDetailResult>> TakedaPortal_DNServiceRequestDetailAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string SRTypeShortDesc, string SRStatus, DateTime? StartDate, DateTime? EndDate, int? PatientID, int? PhysicianID, string PhysicianName, string OrganizationName, string DrugName, bool? noconsent, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 10,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRStatus",
                    Size = 1,
                    Value = SRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 100,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "noconsent",
                    Value = noconsent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_DNServiceRequestDetailResult>("EXEC @returnValue = [dbo].[TakedaPortal_DNServiceRequestDetail] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @SRTypeShortDesc, @SRStatus, @StartDate, @EndDate, @PatientID, @PhysicianID, @PhysicianName, @OrganizationName, @DrugName, @noconsent, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_DNServiceRequestSearchResult>> TakedaPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SRType, string SR_Status, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[TakedaPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SRType, @SR_Status, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_IncompleteEnrollmentsResult>> TakedaPortal_IncompleteEnrollmentsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_IncompleteEnrollmentsResult>("EXEC @returnValue = [dbo].[TakedaPortal_IncompleteEnrollments] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_IncompleteEnrollments_CountResult>> TakedaPortal_IncompleteEnrollments_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_IncompleteEnrollments_CountResult>("EXEC @returnValue = [dbo].[TakedaPortal_IncompleteEnrollments_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_MultiDrug_Messages_CountResult>> TakedaPortal_MultiDrug_Messages_CountAsync(int? ProgramID, string UserName, string DBName, string DrugNme, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = -1,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugNme",
                    Size = -1,
                    Value = DrugNme ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_MultiDrug_Messages_CountResult>("EXEC @returnValue = [dbo].[TakedaPortal_MultiDrug_Messages_Count] @ProgramID, @UserName, @DBName, @DrugNme", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_TmpSRIDbyDirllDownResult>> TakedaPortal_TmpSRIDbyDirllDownAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_TmpSRIDbyDirllDownResult>("EXEC @returnValue = [dbo].[TakedaPortal_TmpSRIDbyDirllDown] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_TmpSRIDbyDirllDown_MultiDrugResult>> TakedaPortal_TmpSRIDbyDirllDown_MultiDrugAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_TmpSRIDbyDirllDown_MultiDrugResult>("EXEC @returnValue = [dbo].[TakedaPortal_TmpSRIDbyDirllDown_MultiDrug] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_TopFacilitiesResult>> TakedaPortal_TopFacilitiesAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_TopFacilitiesResult>("EXEC @returnValue = [dbo].[TakedaPortal_TopFacilities] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_TopFacilities_ChartDataResult>> TakedaPortal_TopFacilities_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_TopFacilities_ChartDataResult>("EXEC @returnValue = [dbo].[TakedaPortal_TopFacilities_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TakedaPortal_WorkInProgress_CountResult>> TakedaPortal_WorkInProgress_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TakedaPortal_WorkInProgress_CountResult>("EXEC @returnValue = [dbo].[TakedaPortal_WorkInProgress_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TAMTrackerCreateResult>> TAMTrackerCreateAsync(int? ProgramID, int? PatientID, string DrugName, int? ServiceRequestID, string RecordType, string UserName, string Caller, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RecordType",
                    Size = 50,
                    Value = RecordType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Caller",
                    Size = 20,
                    Value = Caller ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TAMTrackerCreateResult>("EXEC @returnValue = [dbo].[TAMTrackerCreate] @ProgramID, @PatientID, @DrugName, @ServiceRequestID, @RecordType, @UserName, @Caller", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ValidateBiogenFADrugCopayCheckResult>> ValidateBiogenFADrugCopayCheckAsync(int? ServiceRequestId, int? ProgramID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ServiceRequestId",
                    Value = ServiceRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ValidateBiogenFADrugCopayCheckResult>("EXEC @returnValue = [dbo].[ValidateBiogenFADrugCopayCheck] @ServiceRequestId, @ProgramID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ValidateBiogenFAFreeDrugPAPCheckResult>> ValidateBiogenFAFreeDrugPAPCheckAsync(int? ServiceRequestId, int? ProgramID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ServiceRequestId",
                    Value = ServiceRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ValidateBiogenFAFreeDrugPAPCheckResult>("EXEC @returnValue = [dbo].[ValidateBiogenFAFreeDrugPAPCheck] @ServiceRequestId, @ProgramID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ValidateBiogenFAInsuranceCounselingCheckResult>> ValidateBiogenFAInsuranceCounselingCheckAsync(int? ServiceRequestId, int? ProgramID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ServiceRequestId",
                    Value = ServiceRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ValidateBiogenFAInsuranceCounselingCheckResult>("EXEC @returnValue = [dbo].[ValidateBiogenFAInsuranceCounselingCheck] @ServiceRequestId, @ProgramID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ValidateBiogenFAProcedureCopayCheckResult>> ValidateBiogenFAProcedureCopayCheckAsync(int? ServiceRequestId, int? ProgramID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ServiceRequestId",
                    Value = ServiceRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ValidateBiogenFAProcedureCopayCheckResult>("EXEC @returnValue = [dbo].[ValidateBiogenFAProcedureCopayCheck] @ServiceRequestId, @ProgramID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ValidateBiogenFAScreeningCheckResult>> ValidateBiogenFAScreeningCheckAsync(int? PrgID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PrgID",
                    Value = PrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ValidateBiogenFAScreeningCheckResult>("EXEC @returnValue = [dbo].[ValidateBiogenFAScreeningCheck] @PrgID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ValidateMedEBVNecessaryDetailsResult>> ValidateMedEBVNecessaryDetailsAsync(int? PatientID, int? ProgramID, int? ServcieRequestID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServcieRequestID",
                    Value = ServcieRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 500,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ValidateMedEBVNecessaryDetailsResult>("EXEC @returnValue = [dbo].[ValidateMedEBVNecessaryDetails] @PatientID, @ProgramID, @ServcieRequestID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_AppConfigsResult>> VeronaPortal_AppConfigsAsync(int? ProgramID, string FunctionName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionName",
                    Size = 50,
                    Value = FunctionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_AppConfigsResult>("EXEC @returnValue = [dbo].[VeronaPortal_AppConfigs] @ProgramID, @FunctionName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_BISRCoverageActivityResult>> VeronaPortal_BISRCoverageActivityAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_BISRCoverageActivityResult>("EXEC @returnValue = [dbo].[VeronaPortal_BISRCoverageActivity] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_BISRCoverageActivity_ChartDataResult>> VeronaPortal_BISRCoverageActivity_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_BISRCoverageActivity_ChartDataResult>("EXEC @returnValue = [dbo].[VeronaPortal_BISRCoverageActivity_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_BISRCoverageActivity_ChartData2Result>> VeronaPortal_BISRCoverageActivity_ChartData2Async(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_BISRCoverageActivity_ChartData2Result>("EXEC @returnValue = [dbo].[VeronaPortal_BISRCoverageActivity_ChartData2] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNBiDetailResult>> VeronaPortal_DNBiDetailAsync(int? ProgramID, int? BIID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BIID",
                    Value = BIID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNBiDetailResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNBiDetail] @ProgramID, @BIID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNOrganizationAddressResult>> VeronaPortal_DNOrganizationAddressAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNOrganizationAddressResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNOrganizationAddress] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNOrganizationContactResult>> VeronaPortal_DNOrganizationContactAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNOrganizationContactResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNOrganizationContact] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNOrganizationDetailResult>> VeronaPortal_DNOrganizationDetailAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNOrganizationDetailResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNOrganizationDetail] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNOrganizationPatientResult>> VeronaPortal_DNOrganizationPatientAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNOrganizationPatientResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNOrganizationPatient] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNOrganizationProviderResult>> VeronaPortal_DNOrganizationProviderAsync(int? ProgramID, string DrugName, int? OrganizationID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 30,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNOrganizationProviderResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNOrganizationProvider] @ProgramID, @DrugName, @OrganizationID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNOrganizationSearchResult>> VeronaPortal_DNOrganizationSearchAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string OrganizationName, string FRMCode, string City, string State, string Zip, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNOrganizationSearchResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNOrganizationSearch] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @OrganizationName, @FRMCode, @City, @State, @Zip, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNPatientDetailResult>> VeronaPortal_DNPatientDetailAsync(int? ProgramID, int? PatientID, string DrugName, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNPatientDetailResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNPatientDetail] @ProgramID, @PatientID, @DrugName, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNPatientSearchResult>> VeronaPortal_DNPatientSearchAsync(int? ProgramID, string DrugName, int? PatientID, string PatientName, DateOnly? DOB, string ProviderName, string NPI, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 20,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 50,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 50,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 50,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 150,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNPatientSearchResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNPatientSearch] @ProgramID, @DrugName, @PatientID, @PatientName, @DOB, @ProviderName, @NPI, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNProviderDetailsResult>> VeronaPortal_DNProviderDetailsAsync(int? ProgramID, string Drugname, int? PhysicianID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Drugname",
                    Size = 50,
                    Value = Drugname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNProviderDetailsResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNProviderDetails] @ProgramID, @Drugname, @PhysicianID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNProviderSearchResult>> VeronaPortal_DNProviderSearchAsync(int? ProgramID, string DrugName, string NPI, string ProviderName, string City, string State, string Zip, string OrganizationName, string FRMCode, string ABMCode, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NPI",
                    Size = 20,
                    Value = NPI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 300,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNProviderSearchResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNProviderSearch] @ProgramID, @DrugName, @NPI, @ProviderName, @City, @State, @Zip, @OrganizationName, @FRMCode, @ABMCode, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNServiceRequestBIsResult>> VeronaPortal_DNServiceRequestBIsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNServiceRequestBIsResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNServiceRequestBIs] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNServiceRequestDetailResult>> VeronaPortal_DNServiceRequestDetailAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string SRTypeShortDesc, string SRStatus, DateTime? StartDate, DateTime? EndDate, int? PatientID, int? PhysicianID, string PhysicianName, string OrganizationName, string DrugName, bool? noconsent, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRTypeShortDesc",
                    Size = 10,
                    Value = SRTypeShortDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRStatus",
                    Size = 1,
                    Value = SRStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianName",
                    Size = 100,
                    Value = PhysicianName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "noconsent",
                    Value = noconsent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNServiceRequestDetailResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNServiceRequestDetail] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @SRTypeShortDesc, @SRStatus, @StartDate, @EndDate, @PatientID, @PhysicianID, @PhysicianName, @OrganizationName, @DrugName, @noconsent, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNServiceRequestDocumentsResult>> VeronaPortal_DNServiceRequestDocumentsAsync(int? ProgramID, int? ServiceRequestID, string Source, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 20,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNServiceRequestDocumentsResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNServiceRequestDocuments] @ProgramID, @ServiceRequestID, @Source", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNServiceRequestHubStatusResult>> VeronaPortal_DNServiceRequestHubStatusAsync(int? ProgramID, int? ServiceRequestID, string DrugName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNServiceRequestHubStatusResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNServiceRequestHubStatus] @ProgramID, @ServiceRequestID, @DrugName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNServiceRequestNotesResult>> VeronaPortal_DNServiceRequestNotesAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNServiceRequestNotesResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNServiceRequestNotes] @ProgramID, @ServiceRequestID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNServiceRequestSearchResult>> VeronaPortal_DNServiceRequestSearchAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, int? SRID, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SRType, string SR_Status, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNServiceRequestSearchResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNServiceRequestSearch] @ProgramID, @DrugName, @StartDate, @EndDate, @SRID, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SRType, @SR_Status, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNSOCDetailsResult>> VeronaPortal_DNSOCDetailsAsync(int? ProgramID, string SOCID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 20,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNSOCDetailsResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNSOCDetails] @ProgramID, @SOCID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_DNSRPermissionResult>> VeronaPortal_DNSRPermissionAsync(int? ProgramID, int? ServiceRequestID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_DNSRPermissionResult>("EXEC @returnValue = [dbo].[VeronaPortal_DNSRPermission] @ProgramID, @ServiceRequestID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_FieldPortalSecurityServiceResult>> VeronaPortal_FieldPortalSecurityServiceAsync(string userName, int? ProgramId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 50,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_FieldPortalSecurityServiceResult>("EXEC @returnValue = [dbo].[VeronaPortal_FieldPortalSecurityService] @userName, @ProgramId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_FreeGoodReportResult>> VeronaPortal_FreeGoodReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_FreeGoodReportResult>("EXEC @returnValue = [dbo].[VeronaPortal_FreeGoodReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_Get_ServiceRequestResult>> VeronaPortal_Get_ServiceRequestAsync(int? ProgramID, int? SRID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_Get_ServiceRequestResult>("EXEC @returnValue = [dbo].[VeronaPortal_Get_ServiceRequest] @ProgramID, @SRID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetDocumentByDocumentIdResult>> VeronaPortal_GetDocumentByDocumentIdAsync(int? DocumentID, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DocumentID",
                    Value = DocumentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 100,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetDocumentByDocumentIdResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetDocumentByDocumentId] @DocumentID, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetDrillDownListResult>> VeronaPortal_GetDrillDownListAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, string Filter, string Value, string salesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Filter",
                    Size = 50,
                    Value = Filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = 50,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salesForce",
                    Size = 50,
                    Value = salesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetDrillDownListResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetDrillDownList] @ProgramID, @DrugName, @SearchTerritoryCode, @Filter, @Value, @salesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetFilterTerritoryCodeForReportResult>> VeronaPortal_GetFilterTerritoryCodeForReportAsync(int? ProgramID, int? RegionID, int? ABMTerritoryID, int? SAETerritoryID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritoryID",
                    Value = ABMTerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritoryID",
                    Value = SAETerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetFilterTerritoryCodeForReportResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetFilterTerritoryCodeForReport] @ProgramID, @RegionID, @ABMTerritoryID, @SAETerritoryID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetSPDetailsResult>> VeronaPortal_GetSPDetailsAsync(int? ProramId, string ManufactureName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProramId",
                    Value = ProramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetSPDetailsResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetSPDetails] @ProramId, @ManufactureName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetTerritoryInfoResult>> VeronaPortal_GetTerritoryInfoAsync(int? ProgramID, string TerritoryCode, int? TerritoryID, int? RegionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 10,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryID",
                    Value = TerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetTerritoryInfoResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetTerritoryInfo] @ProgramID, @TerritoryCode, @TerritoryID, @RegionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetTerritoryListResult>> VeronaPortal_GetTerritoryListAsync(int? ProgramID, string SearchTerritoryCode, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetTerritoryListResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetTerritoryList] @ProgramID, @SearchTerritoryCode, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetUserInfoResult>> VeronaPortal_GetUserInfoAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetUserInfoResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetUserInfo] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetUserSalesForceResult>> VeronaPortal_GetUserSalesForceAsync(int? ProgramID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 200,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetUserSalesForceResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetUserSalesForce] @ProgramID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_GetUserTerritoryInfoResult>> VeronaPortal_GetUserTerritoryInfoAsync(int? ProgramID, int? CareMetxRecordID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CareMetxRecordID",
                    Value = CareMetxRecordID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_GetUserTerritoryInfoResult>("EXEC @returnValue = [dbo].[VeronaPortal_GetUserTerritoryInfo] @ProgramID, @CareMetxRecordID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_IncompleteEnrollmentsResult>> VeronaPortal_IncompleteEnrollmentsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_IncompleteEnrollmentsResult>("EXEC @returnValue = [dbo].[VeronaPortal_IncompleteEnrollments] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_IncompleteEnrollments_CountResult>> VeronaPortal_IncompleteEnrollments_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_IncompleteEnrollments_CountResult>("EXEC @returnValue = [dbo].[VeronaPortal_IncompleteEnrollments_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> VeronaPortal_InsertDNSPDetailsAsync(int? ProgramId, string ManufactureName, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramId",
                    Value = ProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ManufactureName",
                    Size = 50,
                    Value = ManufactureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 50,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[VeronaPortal_InsertDNSPDetails] @ProgramId, @ManufactureName, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_MessageCenterAutoCompleteResult>> VeronaPortal_MessageCenterAutoCompleteAsync(int? ProgramID, string PNameSearchTerm, string PhyNameSearchTerm, string SRIDSearchTerm, string ToFieldSearchTerm, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PNameSearchTerm",
                    Size = 50,
                    Value = PNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhyNameSearchTerm",
                    Size = 50,
                    Value = PhyNameSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRIDSearchTerm",
                    Size = 50,
                    Value = SRIDSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToFieldSearchTerm",
                    Size = 50,
                    Value = ToFieldSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 100,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_MessageCenterAutoCompleteResult>("EXEC @returnValue = [dbo].[VeronaPortal_MessageCenterAutoComplete] @ProgramID, @PNameSearchTerm, @PhyNameSearchTerm, @SRIDSearchTerm, @ToFieldSearchTerm, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_MessagePatientSRResult>> VeronaPortal_MessagePatientSRAsync(int? ProgramID, string DrugName, int? PatientID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_MessagePatientSRResult>("EXEC @returnValue = [dbo].[VeronaPortal_MessagePatientSR] @ProgramID, @DrugName, @PatientID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_MessagePhySRResult>> VeronaPortal_MessagePhySRAsync(int? ProgramID, string DrugName, int? PhysicianID, string SearchTerritoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_MessagePhySRResult>("EXEC @returnValue = [dbo].[VeronaPortal_MessagePhySR] @ProgramID, @DrugName, @PhysicianID, @SearchTerritoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_MessagesResult>> VeronaPortal_MessagesAsync(int? ProgramID, string UserName, int? ThreadID, bool? IsUnread, bool? IsRead, bool? IsArchive, string DrugName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsUnread",
                    Value = IsUnread ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsArchive",
                    Value = IsArchive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_MessagesResult>("EXEC @returnValue = [dbo].[VeronaPortal_Messages] @ProgramID, @UserName, @ThreadID, @IsUnread, @IsRead, @IsArchive, @DrugName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_Messages_CountResult>> VeronaPortal_Messages_CountAsync(int? ProgramID, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_Messages_CountResult>("EXEC @returnValue = [dbo].[VeronaPortal_Messages_Count] @ProgramID, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_MessageStatusUpdateResult>> VeronaPortal_MessageStatusUpdateAsync(int? ThreadID, int? ProgramID, bool? Status, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_MessageStatusUpdateResult>("EXEC @returnValue = [dbo].[VeronaPortal_MessageStatusUpdate] @ThreadID, @ProgramID, @Status, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_MITrendsResult>> VeronaPortal_MITrendsAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_MITrendsResult>("EXEC @returnValue = [dbo].[VeronaPortal_MITrends] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_PAPReportResult>> VeronaPortal_PAPReportAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_PAPReportResult>("EXEC @returnValue = [dbo].[VeronaPortal_PAPReport] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_PAPReport_ChartDataResult>> VeronaPortal_PAPReport_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 10,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_PAPReport_ChartDataResult>("EXEC @returnValue = [dbo].[VeronaPortal_PAPReport_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_SaveNewMessageResult>> VeronaPortal_SaveNewMessageAsync(int? ProgramID, int? SRID, int? ThreadID, string To, string Subject, string MessageText, string UserName, string DBName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ThreadID",
                    Value = ThreadID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Size = 50,
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 200,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MessageText",
                    Size = -1,
                    Value = MessageText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DBName",
                    Size = 50,
                    Value = DBName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_SaveNewMessageResult>("EXEC @returnValue = [dbo].[VeronaPortal_SaveNewMessage] @ProgramID, @SRID, @ThreadID, @To, @Subject, @MessageText, @UserName, @DBName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpDNSRUpdateTerritoryResult>> VeronaPortal_TmpDNSRUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpDNSRUpdateTerritoryResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpDNSRUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> VeronaPortal_TmpDNUpdateTerritoryAsync(int? ProgramID, string DrugName, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[VeronaPortal_TmpDNUpdateTerritory] @ProgramID, @DrugName, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpInsuranceResult>> VeronaPortal_TmpInsuranceAsync(int? ProgramID, int? Rank, int? CoveredID, int? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Rank",
                    Value = Rank ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CoveredID",
                    Value = CoveredID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpInsuranceResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpInsurance] @ProgramID, @Rank, @CoveredID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpPatienInfoResult>> VeronaPortal_TmpPatienInfoAsync(int? ProgramID, string DrugName, string SalesForce, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 100,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 50,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpPatienInfoResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpPatienInfo] @ProgramID, @DrugName, @SalesForce, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpPatienSRInfoResult>> VeronaPortal_TmpPatienSRInfoAsync(int? ProgramID, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpPatienSRInfoResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpPatienSRInfo] @ProgramID, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpSRIDbyDirllDownResult>> VeronaPortal_TmpSRIDbyDirllDownAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpSRIDbyDirllDownResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpSRIDbyDirllDown] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpSRIDbyDirllDown_MultiDrugResult>> VeronaPortal_TmpSRIDbyDirllDown_MultiDrugAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, string ABMCode, string SAECode, int? OrgID, int? PhysicianID, int? Top, string SR_Status, bool? isTest, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ABMCode",
                    Size = 50,
                    Value = ABMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SAECode",
                    Size = 50,
                    Value = SAECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isTest",
                    Value = isTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpSRIDbyDirllDown_MultiDrugResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpSRIDbyDirllDown_MultiDrug] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @ABMCode, @SAECode, @OrgID, @PhysicianID, @Top, @SR_Status, @isTest", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TmpSRSearch_PrmResult>> VeronaPortal_TmpSRSearch_PrmAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string DrugName, int? SRID, string SRType, string SR_Status, string SearchTerritoryCode, int? PatientID, string PatientName, string ProviderName, string OrganizationName, string FRMCode, string SalesForce, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SRID",
                    Value = SRID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SRType",
                    Size = 10,
                    Value = SRType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 10,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 100,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderName",
                    Size = 100,
                    Value = ProviderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRMCode",
                    Size = 50,
                    Value = FRMCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalesForce",
                    Size = 100,
                    Value = SalesForce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TmpSRSearch_PrmResult>("EXEC @returnValue = [dbo].[VeronaPortal_TmpSRSearch_Prm] @ProgramID, @StartDate, @EndDate, @DrugName, @SRID, @SRType, @SR_Status, @SearchTerritoryCode, @PatientID, @PatientName, @ProviderName, @OrganizationName, @FRMCode, @SalesForce", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_Top10PayersResult>> VeronaPortal_Top10PayersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_Top10PayersResult>("EXEC @returnValue = [dbo].[VeronaPortal_Top10Payers] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TopFacilitiesResult>> VeronaPortal_TopFacilitiesAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TopFacilitiesResult>("EXEC @returnValue = [dbo].[VeronaPortal_TopFacilities] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TopFacilities_ChartDataResult>> VeronaPortal_TopFacilities_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TopFacilities_ChartDataResult>("EXEC @returnValue = [dbo].[VeronaPortal_TopFacilities_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TopPlansResult>> VeronaPortal_TopPlansAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, string SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Size = 20,
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TopPlansResult>("EXEC @returnValue = [dbo].[VeronaPortal_TopPlans] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TopPlans_ChartDataResult>> VeronaPortal_TopPlans_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TopPlans_ChartDataResult>("EXEC @returnValue = [dbo].[VeronaPortal_TopPlans_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TopProvidersResult>> VeronaPortal_TopProvidersAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TopProvidersResult>("EXEC @returnValue = [dbo].[VeronaPortal_TopProviders] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_TopProviders_ChartDataResult>> VeronaPortal_TopProviders_ChartDataAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = -1,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_TopProviders_ChartDataResult>("EXEC @returnValue = [dbo].[VeronaPortal_TopProviders_ChartData] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_WorkInProgressResult>> VeronaPortal_WorkInProgressAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_WorkInProgressResult>("EXEC @returnValue = [dbo].[VeronaPortal_WorkInProgress] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VeronaPortal_WorkInProgress_CountResult>> VeronaPortal_WorkInProgress_CountAsync(int? ProgramID, string DrugName, DateTime? StartDate, DateTime? EndDate, string SearchTerritoryCode, int? RegionID, int? ABMTerritory, int? SAETerritory, int? OrgID, int? PhysicianID, string UserName, int? Top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 30,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ABMTerritory",
                    Value = ABMTerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SAETerritory",
                    Value = SAETerritory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PhysicianID",
                    Value = PhysicianID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 50,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Top",
                    Value = Top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VeronaPortal_WorkInProgress_CountResult>("EXEC @returnValue = [dbo].[VeronaPortal_WorkInProgress_Count] @ProgramID, @DrugName, @StartDate, @EndDate, @SearchTerritoryCode, @RegionID, @ABMTerritory, @SAETerritory, @OrgID, @PhysicianID, @UserName, @Top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_DNFacilitySearch_PageResult>> VerricaPortal_DNFacilitySearch_PageAsync(int? ProgramID, string DrugName, string SearchTerritoryCode, int? OrganizationID, string OrganizationName, string SOCID, string City, string State, string Zip, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DrugName",
                    Size = 50,
                    Value = DrugName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerritoryCode",
                    Size = 50,
                    Value = SearchTerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 100,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SOCID",
                    Size = 50,
                    Value = SOCID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 50,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zip",
                    Size = 10,
                    Value = Zip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_DNFacilitySearch_PageResult>("EXEC @returnValue = [dbo].[VerricaPortal_DNFacilitySearch_Page] @ProgramID, @DrugName, @SearchTerritoryCode, @OrganizationID, @OrganizationName, @SOCID, @City, @State, @Zip, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetAppeal_PageResult>> VerricaPortal_GetAppeal_PageAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, int? RegionID, int? TerritoryID, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryID",
                    Value = TerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetAppeal_PageResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetAppeal_Page] @ProgramID, @StartDate, @EndDate, @RegionID, @TerritoryID, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetPatientSRDocumentsResult>> VerricaPortal_GetPatientSRDocumentsAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetPatientSRDocumentsResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetPatientSRDocuments] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetPatientSRNotesResult>> VerricaPortal_GetPatientSRNotesAsync(int? ProgramID, int? PatientID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetPatientSRNotesResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetPatientSRNotes] @ProgramID, @PatientID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetServiceRequestDetailsResult>> VerricaPortal_GetServiceRequestDetailsAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetServiceRequestDetailsResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetServiceRequestDetails] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetSRDocumentsResult>> VerricaPortal_GetSRDocumentsAsync(int? ProgramID, int? ServiceRequestID, string Source, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Source",
                    Size = 20,
                    Value = Source ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetSRDocumentsResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetSRDocuments] @ProgramID, @ServiceRequestID, @Source", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetSRNotesResult>> VerricaPortal_GetSRNotesAsync(int? ProgramID, int? ServiceRequestID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ServiceRequestID",
                    Value = ServiceRequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetSRNotesResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetSRNotes] @ProgramID, @ServiceRequestID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_GetTopPlanCoverage_PageResult>> VerricaPortal_GetTopPlanCoverage_PageAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, int? RegionID, int? TerritoryID, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryID",
                    Value = TerritoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_GetTopPlanCoverage_PageResult>("EXEC @returnValue = [dbo].[VerricaPortal_GetTopPlanCoverage_Page] @ProgramID, @StartDate, @EndDate, @RegionID, @TerritoryID, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_PayerCoveragebyRegion_PageResult>> VerricaPortal_PayerCoveragebyRegion_PageAsync(int? ProgramID, DateTime? BeginDate, DateTime? EndDate, string TerritoryCode, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 20,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_PayerCoveragebyRegion_PageResult>("EXEC @returnValue = [dbo].[VerricaPortal_PayerCoveragebyRegion_Page] @ProgramID, @BeginDate, @EndDate, @TerritoryCode, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_PayerCoverageHistory_PageResult>> VerricaPortal_PayerCoverageHistory_PageAsync(int? ProgramID, DateTime? BeginDate, DateTime? EndDate, string TerritoryCode, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BeginDate",
                    Value = BeginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 20,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_PayerCoverageHistory_PageResult>("EXEC @returnValue = [dbo].[VerricaPortal_PayerCoverageHistory_Page] @ProgramID, @BeginDate, @EndDate, @TerritoryCode, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_VendorHUBOpenSRType_GridResult>> VerricaPortal_VendorHUBOpenSRType_GridAsync(int? ProgramID, string SR_Status, DateTime? StartDate, DateTime? EndDate, string TerritoryCode, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SR_Status",
                    Size = 50,
                    Value = SR_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 10,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_VendorHUBOpenSRType_GridResult>("EXEC @returnValue = [dbo].[VerricaPortal_VendorHUBOpenSRType_Grid] @ProgramID, @SR_Status, @StartDate, @EndDate, @TerritoryCode, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<VerricaPortal_VendorSRVolume_TableDataResult>> VerricaPortal_VendorSRVolume_TableDataAsync(int? ProgramID, DateTime? StartDate, DateTime? EndDate, string TerritoryCode, int? Sort, bool? SortAsc, int? From, int? To, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProgramID",
                    Value = ProgramID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TerritoryCode",
                    Size = 10,
                    Value = TerritoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sort",
                    Value = Sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortAsc",
                    Value = SortAsc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "From",
                    Value = From ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "To",
                    Value = To ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<VerricaPortal_VendorSRVolume_TableDataResult>("EXEC @returnValue = [dbo].[VerricaPortal_VendorSRVolume_TableData] @ProgramID, @StartDate, @EndDate, @TerritoryCode, @Sort, @SortAsc, @From, @To", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
