// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class SrPapbyTypeMappingConfiguration : IEntityTypeConfiguration<SrPapbyTypeMapping>
    {
        public void Configure(EntityTypeBuilder<SrPapbyTypeMapping> entity)
        {
            entity.HasKey(e => e.SrPapbyTypeMappingId).HasName("PK_SR_PAPEligibilityQuestionsMappings.");

            entity.ToTable("SR_PAPByTypeMapping");

            entity.Property(e => e.SrPapbyTypeMappingId).HasColumnName("SR_PAPByTypeMappingID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.AllowNa)
                .HasDefaultValue(false)
                .HasColumnName("AllowNA");
            entity.Property(e => e.Created).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DrugName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EligibilityQuestionId).HasColumnName("EligibilityQuestionID");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaptypeId).HasColumnName("PAPTypeID");
            entity.Property(e => e.ProgramFunction)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId).HasColumnName("ProgramID");
            entity.Property(e => e.SortOrder).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SrTypeListId).HasColumnName("SR_TypeListID");

            entity.HasOne(d => d.EligibilityQuestion).WithMany(p => p.SrPapbyTypeMappings)
                .HasForeignKey(d => d.EligibilityQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_PAPEligibilityQuestionsMappings._DynamicDataList");

            entity.HasOne(d => d.Paptype).WithMany(p => p.SrPapbyTypeMappings)
                .HasForeignKey(d => d.PaptypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_PAPEligibilityQuestionsMappings._LookupDataList");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<SrPapbyTypeMapping> entity);
    }
}
