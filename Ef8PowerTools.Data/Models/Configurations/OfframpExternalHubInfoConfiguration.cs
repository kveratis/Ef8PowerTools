// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class OfframpExternalHubInfoConfiguration : IEntityTypeConfiguration<OfframpExternalHubInfo>
    {
        public void Configure(EntityTypeBuilder<OfframpExternalHubInfo> entity)
        {
            entity.ToTable("OfframpExternalHubInfo");

            entity.Property(e => e.OfframpExternalHubInfoId).HasColumnName("OfframpExternalHubInfoID");
            entity.Property(e => e.ActivatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ActivatedDate).HasColumnType("datetime");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.AuthEndpoint)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BaseUrl)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ClientId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ClientID");
            entity.Property(e => e.ClientSecret)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DatafeedFileName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DatafeedName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.ExternalHubName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfframpClientId).HasColumnName("OfframpClientID");
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ProcessEndpoint)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SftpfolderName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SFTPFolderName");
            entity.Property(e => e.Sftppassword)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SFTPPassword");
            entity.Property(e => e.Sftpurl)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SFTPUrl");
            entity.Property(e => e.Sftpusername)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SFTPUsername");
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserID");

            entity.HasOne(d => d.OfframpClient).WithMany(p => p.OfframpExternalHubInfos)
                .HasForeignKey(d => d.OfframpClientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OfframpExternalHubInfo_OfframpClients");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<OfframpExternalHubInfo> entity);
    }
}
