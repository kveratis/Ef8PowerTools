// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class MailingConfiguration : IEntityTypeConfiguration<Mailing>
    {
        public void Configure(EntityTypeBuilder<Mailing> entity)
        {
            entity.HasKey(e => e.MailingId).HasName("PK_SH_Shipments");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("trInsertMailings");
                    tb.HasTrigger("trUpdateMailings");
                });

            entity.HasIndex(e => e.MailingNumber, "IX_SH_Shipments").IsUnique();

            entity.Property(e => e.MailingId).HasColumnName("MailingID");
            entity.Property(e => e.AddressVerifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressVerifiedDateDt).HasColumnType("datetime");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ContactAddressId)
                .HasDefaultValue(0)
                .HasColumnName("ContactAddressID");
            entity.Property(e => e.ContactId)
                .HasDefaultValue(0)
                .HasColumnName("ContactID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EntityId)
                .HasComment("This column holds the foreign key reference to the EntityID field of Entity Table")
                .HasColumnName("EntityID");
            entity.Property(e => e.IsAddressVerified).HasDefaultValue(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdatedDt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MailAddress1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailAddress2)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailCarrier)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailCost)
                .HasDefaultValue(0m)
                .HasColumnType("money");
            entity.Property(e => e.MailDateDt).HasColumnType("datetime");
            entity.Property(e => e.MailDeliveryDateDt).HasColumnType("datetime");
            entity.Property(e => e.MailShippingMethod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailState)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Pending");
            entity.Property(e => e.MailZip)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MailingNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("This will be the number that can be searchable in Fedex Ship Manager App.");
            entity.Property(e => e.PatientAddressId)
                .HasDefaultValue(0)
                .HasColumnName("PatientAddressID");
            entity.Property(e => e.PatientId)
                .HasDefaultValue(0)
                .HasColumnName("PatientID");
            entity.Property(e => e.PhysicianAddressId)
                .HasDefaultValue(0)
                .HasColumnName("PhysicianAddressID");
            entity.Property(e => e.PhysicianId)
                .HasDefaultValue(0)
                .HasColumnName("PhysicianID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.ContactAddress).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.ContactAddressId)
                .HasConstraintName("FK_SH_Shipments_ContactAddresses");

            entity.HasOne(d => d.Contact).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_SH_Shipments_Contacts");

            entity.HasOne(d => d.Entity).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SH_Shipments_Entity");

            entity.HasOne(d => d.PatientAddress).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.PatientAddressId)
                .HasConstraintName("FK_SH_Shipments_PatientAddresses");

            entity.HasOne(d => d.Patient).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_SH_Shipments_Patients");

            entity.HasOne(d => d.PhysicianAddress).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.PhysicianAddressId)
                .HasConstraintName("FK_SH_Shipments_PhysicianAddresses");

            entity.HasOne(d => d.Physician).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.PhysicianId)
                .HasConstraintName("FK_SH_Shipments_Physicians");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Mailings)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SH_Shipments_ServiceRequests");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Mailing> entity);
    }
}
