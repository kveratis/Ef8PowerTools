// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class PatientPhysicianConfiguration : IEntityTypeConfiguration<PatientPhysician>
    {
        public void Configure(EntityTypeBuilder<PatientPhysician> entity)
        {
            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tr_PatientPhysicians_Insert_PhysicianLinks");
                    tb.HasTrigger("tr_PatientPhysicians_Update_PhysicianLinks");
                });

            entity.HasIndex(e => e.Deleted, "IX_Deleted");

            entity.HasIndex(e => e.PatientId, "IX_PatientPhysicians");

            entity.HasIndex(e => new { e.ProgramId, e.Rank, e.Active, e.Deleted }, "IX_PatientPhysicians_ProgramID_Rank_Active_Deleted");

            entity.Property(e => e.PatientPhysicianId).HasColumnName("PatientPhysicianID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastSynced).HasColumnType("datetime");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OptIn).HasDefaultValue(true);
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.OrganizationLocationId).HasColumnName("OrganizationLocationID");
            entity.Property(e => e.PatientId).HasColumnName("PatientID");
            entity.Property(e => e.PhysicianId).HasColumnName("PhysicianID");
            entity.Property(e => e.PhysicianLocationId).HasColumnName("PhysicianLocationID");
            entity.Property(e => e.PhysicianType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId).HasColumnName("ProgramID");
            entity.Property(e => e.Relationship)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("N/A");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientPhysicians)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientPhysicians_Patients");

            entity.HasOne(d => d.Physician).WithMany(p => p.PatientPhysicians)
                .HasForeignKey(d => d.PhysicianId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientPhysicians_Physicians");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<PatientPhysician> entity);
    }
}
