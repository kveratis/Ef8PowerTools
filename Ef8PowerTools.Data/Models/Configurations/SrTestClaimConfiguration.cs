// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class SrTestClaimConfiguration : IEntityTypeConfiguration<SrTestClaim>
    {
        public void Configure(EntityTypeBuilder<SrTestClaim> entity)
        {
            entity.ToTable("SR_TestClaims");

            entity.Property(e => e.SrTestClaimId).HasColumnName("SR_TestClaimID");
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InsuranceBin)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Insurance_Bin");
            entity.Property(e => e.InsuranceName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Insurance_Name");
            entity.Property(e => e.InsurancePcn)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Insurance_PCN");
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemNdc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ItemNDC");
            entity.Property(e => e.ItemNeworRefill)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemPlaceofService)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemQty).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.ItemUnitofMeasure)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.PatientDiagCode10)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientDiagCode9)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientDob).HasColumnName("PatientDOB");
            entity.Property(e => e.PatientFirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId).HasColumnName("PatientID");
            entity.Property(e => e.PatientInsCardHolderDob).HasColumnName("PatientIns_CardHolderDOB");
            entity.Property(e => e.PatientInsCardHolderId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PatientIns_CardHolderID");
            entity.Property(e => e.PatientInsEmployerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PatientIns_EmployerName");
            entity.Property(e => e.PatientInsGroupNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PatientIns_GroupNumber");
            entity.Property(e => e.PatientInsPersonCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PatientIns_PersonCode");
            entity.Property(e => e.PatientInsRelationshipCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PatientIns_RelationshipCode");
            entity.Property(e => e.PatientInsuranceId).HasColumnName("PatientInsuranceID");
            entity.Property(e => e.PatientLastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId).HasColumnName("ProgramID");
            entity.Property(e => e.ProviderFirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProviderId).HasColumnName("ProviderID");
            entity.Property(e => e.ProviderLastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProviderNpi)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProviderNPI");
            entity.Property(e => e.ResponceCopayAmount)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("Responce_CopayAmount");
            entity.Property(e => e.ResponseDate)
                .HasColumnType("datetime")
                .HasColumnName("Response_Date");
            entity.Property(e => e.ResponseInsAmount)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("Response_InsAmount");
            entity.Property(e => e.ResponseReason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Response_Reason");
            entity.Property(e => e.ResponseRxNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Response_RxNumber");
            entity.Property(e => e.ResponseStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Response_Status");
            entity.Property(e => e.Sent).HasColumnType("datetime");
            entity.Property(e => e.Srid).HasColumnName("SRID");

            entity.HasOne(d => d.Patient).WithMany(p => p.SrTestClaims)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_TestClaims_Patients");

            entity.HasOne(d => d.PatientInsurance).WithMany(p => p.SrTestClaims)
                .HasForeignKey(d => d.PatientInsuranceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_TestClaims_PatientInsurance");

            entity.HasOne(d => d.Provider).WithMany(p => p.SrTestClaims)
                .HasForeignKey(d => d.ProviderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_TestClaims_Physicians");

            entity.HasOne(d => d.Sr).WithMany(p => p.SrTestClaims)
                .HasForeignKey(d => d.Srid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SR_TestClaims_ServiceRequests");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<SrTestClaim> entity);
    }
}
