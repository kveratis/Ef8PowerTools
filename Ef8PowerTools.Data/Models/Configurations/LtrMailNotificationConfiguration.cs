// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class LtrMailNotificationConfiguration : IEntityTypeConfiguration<LtrMailNotification>
    {
        public void Configure(EntityTypeBuilder<LtrMailNotification> entity)
        {
            entity.HasKey(e => e.MailNotificationId);

            entity.ToTable("LTR_MailNotification", tb =>
                {
                    tb.HasTrigger("Tr_LTR_MailNotification_Audit_Insert");
                    tb.HasTrigger("Tr_LTR_MailNotification_Audit_Update");
                });

            entity.Property(e => e.MailNotificationId).HasColumnName("MailNotificationID");
            entity.Property(e => e.Created).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EventType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailAddress)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MailStatusId).HasColumnName("MailStatusID");
            entity.Property(e => e.NotificationItemId).HasColumnName("NotificationItemID");
            entity.Property(e => e.ProcessedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcessedDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramId).HasColumnName("ProgramID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.NotificationItem).WithMany(p => p.LtrMailNotifications)
                .HasForeignKey(d => d.NotificationItemId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<LtrMailNotification> entity);
    }
}
