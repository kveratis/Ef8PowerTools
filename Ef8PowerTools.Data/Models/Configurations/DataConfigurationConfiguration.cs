// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class DataConfigurationConfiguration : IEntityTypeConfiguration<DataConfiguration>
    {
        public void Configure(EntityTypeBuilder<DataConfiguration> entity)
        {
            entity.ToTable("DataConfiguration");

            entity.Property(e => e.DataConfigurationId).HasColumnName("DataConfigurationID");
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataDictionaryId).HasColumnName("DataDictionaryID");
            entity.Property(e => e.DynamicLookUpId).HasColumnName("DynamicLookUpID");
            entity.Property(e => e.DynamicLookUpTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId).HasColumnName("ProgramID");
            entity.Property(e => e.RequiredforSrclose)
                .HasDefaultValue(false)
                .HasColumnName("RequiredforSRClose");
            entity.Property(e => e.RequiredforSrcreation)
                .HasDefaultValue(false)
                .HasColumnName("RequiredforSRCreation");
            entity.Property(e => e.SortOrder).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.SrMissingInfo).HasColumnName("SR_MissingInfo");
            entity.Property(e => e.SrTypeListId).HasColumnName("SR_TypeListID");

            entity.HasOne(d => d.DataDictionary).WithMany(p => p.DataConfigurations)
                .HasForeignKey(d => d.DataDictionaryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataConfiguration_DataDictionary1");

            entity.HasOne(d => d.Program).WithMany(p => p.DataConfigurations)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataConfiguration_Programs");

            entity.HasOne(d => d.SrTypeList).WithMany(p => p.DataConfigurations)
                .HasForeignKey(d => d.SrTypeListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataConfiguration_SR_TypeList");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<DataConfiguration> entity);
    }
}
