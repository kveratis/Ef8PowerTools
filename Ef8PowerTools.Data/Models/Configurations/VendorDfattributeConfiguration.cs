// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class VendorDfattributeConfiguration : IEntityTypeConfiguration<VendorDfattribute>
    {
        public void Configure(EntityTypeBuilder<VendorDfattribute> entity)
        {
            entity.HasKey(e => e.VendorFolderId);

            entity.ToTable("Vendor_DFAttributes");

            entity.Property(e => e.VendorFolderId).HasColumnName("VendorFolderID");
            entity.Property(e => e.AdditionalParameters)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.AlertEmailTo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.DrugName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileHeader)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.FileMask)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Format)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsCmdLineSftp)
                .HasDefaultValue(false)
                .HasColumnName("isCmdLineSFTP");
            entity.Property(e => e.IsCopyAfterSftpget).HasColumnName("isCopyAfterSFTPGet");
            entity.Property(e => e.IsInboundSftp).HasColumnName("isInboundSFTP");
            entity.Property(e => e.IsOldFormat).HasColumnName("isOldFormat");
            entity.Property(e => e.IsOutboundS3)
                .HasDefaultValue(false)
                .HasColumnName("isOutboundS3");
            entity.Property(e => e.IsOutboundSftp).HasColumnName("isOutboundSFTP");
            entity.Property(e => e.IsResponseRequired).HasColumnName("isResponseRequired");
            entity.Property(e => e.IsTiffrequired).HasColumnName("isTIFFRequired");
            entity.Property(e => e.OutboundFolder)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PdftoTiffExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("tiff")
                .HasColumnName("PDFtoTiffExt");
            entity.Property(e => e.ProcessAcknowledgement)
                .HasDefaultValue(false)
                .HasColumnName("processAcknowledgement");
            entity.Property(e => e.ProcessName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId).HasColumnName("ProgramID");
            entity.Property(e => e.S3AccessKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("S3_AccessKey");
            entity.Property(e => e.S3Bucket)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("S3_Bucket");
            entity.Property(e => e.SftpCopyFolder)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SFTP_CopyFolder");
            entity.Property(e => e.SftpHost)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SFTP_Host");
            entity.Property(e => e.SftpInboundFolder)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SFTP_InboundFolder");
            entity.Property(e => e.SftpOutboundFolder)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SFTP_OutboundFolder");
            entity.Property(e => e.SftpPassword)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SFTP_Password");
            entity.Property(e => e.SftpPort)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SFTP_Port");
            entity.Property(e => e.SftpSshkeyFileName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SFTP_SSHKeyFileName");
            entity.Property(e => e.SftpUserName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SFTP_UserName");
            entity.Property(e => e.SftpcmdLine)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SFTPCmdLine");
            entity.Property(e => e.SftpscriptText)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SFTPScriptText");
            entity.Property(e => e.SpvendorCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SPVendorCode");
            entity.Property(e => e.SuccessEmailTo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
            entity.Property(e => e.VendorNameInFile)
                .HasMaxLength(100)
                .IsUnicode(false);

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<VendorDfattribute> entity);
    }
}
