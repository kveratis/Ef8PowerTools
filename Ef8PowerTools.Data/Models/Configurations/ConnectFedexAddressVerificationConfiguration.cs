// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ef8PowerTools.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models.Configurations
{
    public partial class ConnectFedexAddressVerificationConfiguration : IEntityTypeConfiguration<ConnectFedexAddressVerification>
    {
        public void Configure(EntityTypeBuilder<ConnectFedexAddressVerification> entity)
        {
            entity.HasKey(e => e.ConnectFedexAddressVerificationId).HasName("PK_SH_FedexAddressVerifications");

            entity.Property(e => e.ConnectFedexAddressVerificationId).HasColumnName("ConnectFedexAddressVerificationID");
            entity.Property(e => e.Classification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConnectFedexApirequestId).HasColumnName("ConnectFedexAPIRequestID");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CreatedByID");
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MailingId).HasColumnName("MailingID");
            entity.Property(e => e.NotificationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationMessage)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationSeverity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotificationSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedBuilding)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedHouseNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedLeadingDirectional)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedOrganization)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedPobox)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ParsedPOBox");
            entity.Property(e => e.ParsedPreStreetType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedRuralRoute)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedStreetName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedStreetSuffix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedTrailingDirectional)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedUnitLabel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedUnitNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedZipCodeAddOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParsedZipCodeBase)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReplyDateTime).HasColumnType("datetime");
            entity.Property(e => e.RequestAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RequestCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RequestCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RequestState)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RequestZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponseAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponseCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponseCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponseState)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponseZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResultAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResultAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResultAddressState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResultCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResultPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ResultState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedById)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("UpdatedByID");
            entity.Property(e => e.UpdatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ConnectFedexApirequest).WithMany(p => p.ConnectFedexAddressVerifications)
                .HasForeignKey(d => d.ConnectFedexApirequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FedexAddressVerifications_ConnectFedexAPIRequests");

            entity.HasOne(d => d.Mailing).WithMany(p => p.ConnectFedexAddressVerifications)
                .HasForeignKey(d => d.MailingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FedexAddressVerifications_Mailings");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<ConnectFedexAddressVerification> entity);
    }
}
