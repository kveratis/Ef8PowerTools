// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace Ef8PowerTools.Data.Models;

/// <summary>
/// Field configuration specific to a given program
/// </summary>
public partial class WorkflowProgramField
{
    /// <summary>
    /// The primary key
    /// </summary>
    public Guid ProgramFieldId { get; set; }

    /// <summary>
    /// The field id
    /// </summary>
    public Guid FieldId { get; set; }

    /// <summary>
    /// The program workflow step in for which the field is to be displayed where the lookup name is WORKFLOW_STEPS
    /// </summary>
    public Guid ProgramWorkflowStep { get; set; }

    /// <summary>
    /// The table name of the table to present data for
    /// </summary>
    public string TableName { get; set; }

    /// <summary>
    /// The field name of the the field to present data for
    /// </summary>
    public string FieldName { get; set; }

    /// <summary>
    /// The field display label
    /// </summary>
    public string FieldLabel { get; set; }

    /// <summary>
    /// The text to display in the input place holder attribute
    /// </summary>
    public string FieldPlaceHolder { get; set; }

    /// <summary>
    /// The field display sequence
    /// </summary>
    public byte Sequence { get; set; }

    /// <summary>
    /// Read only flag
    /// </summary>
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// Active flag
    /// </summary>
    public bool IsActive { get; set; }

    /// <summary>
    /// Required flag
    /// </summary>
    public bool IsRequired { get; set; }

    /// <summary>
    /// The lookup to be used to populate a list of options for the field
    /// </summary>
    public Guid? ResponseOptionKey { get; set; }

    /// <summary>
    /// The service request sub type to use for conditional display where the lookup name is SR_SUB_TYPES
    /// </summary>
    public Guid? ConditionalSrsubType { get; set; }

    /// <summary>
    /// Indicates that the question can only be displayed based on the ConditionalValue from the given program field id.
    /// </summary>
    public Guid? ConditionalProgramFieldId { get; set; }

    /// <summary>
    /// The conditional value of a response text to be used for display when the ConditionalProgramFieldId is specified
    /// </summary>
    public string ConditionalValue { get; set; }

    /// <summary>
    /// The conditional value of a response option to be used for display when the ConditionalProgramFieldId is specified
    /// </summary>
    public Guid? ConditionalResponseOption { get; set; }

    public string FieldTag { get; set; }

    public int? DynamicDataListId { get; set; }

    public string CssClass { get; set; }

    public string RequiredFieldMessage { get; set; }

    public string WhereClause { get; set; }

    public Guid WorkflowId { get; set; }

    public DateTime? Created { get; set; }

    public string Createdby { get; set; }

    public DateTime? LastUpdated { get; set; }

    public string LastUpdatedby { get; set; }

    public string DrugName { get; set; }

    public virtual WorkflowProgramField ConditionalProgramField { get; set; }

    public virtual WorkflowLookupItem ConditionalResponseOptionNavigation { get; set; }

    public virtual WorkflowLookupItem ConditionalSrsubTypeNavigation { get; set; }

    public virtual WorkflowField Field { get; set; }

    public virtual ICollection<WorkflowProgramField> InverseConditionalProgramField { get; set; } = new List<WorkflowProgramField>();

    public virtual WorkflowLookupItem ProgramWorkflowStepNavigation { get; set; }

    public virtual WorkflowLookup ResponseOptionKeyNavigation { get; set; }

    public virtual ICollection<WorkflowPdf> WorkflowPdfs { get; set; } = new List<WorkflowPdf>();

    public virtual ICollection<WorkflowResponse> WorkflowResponses { get; set; } = new List<WorkflowResponse>();

    public virtual ICollection<WorkflowStepProgramField> WorkflowStepProgramFields { get; set; } = new List<WorkflowStepProgramField>();
}